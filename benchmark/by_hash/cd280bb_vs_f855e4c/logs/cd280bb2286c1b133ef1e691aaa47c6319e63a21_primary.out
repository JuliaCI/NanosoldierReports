cset: moving following pidspec: 2531774
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "problem"... done (took 2.806153888 seconds)
loading group "array"... done (took 3.051703754 seconds)
loading group "misc"... done (took 0.399122678 seconds)
loading group "sort"... done (took 0.242541879 seconds)
loading group "frontend"... done (took 0.004260272 seconds)
loading group "shootout"... done (took 0.694791314 seconds)
loading group "sparse"... done (took 0.484075011 seconds)
loading group "scalar"... done (took 0.977854298 seconds)
loading group "dates"... done (took 0.138691593 seconds)
loading group "alloc"... done (took 0.016387249 seconds)
loading group "find"... done (took 1.194107828 seconds)
loading group "io"... done (took 1.134105148 seconds)
loading group "tuple"... done (took 0.73197345 seconds)
loading group "string"... done (took 0.20097254 seconds)
loading group "random"... done (took 2.129092843 seconds)
loading group "micro"... done (took 0.045606147 seconds)
loading group "broadcast"... done (took 0.547667003 seconds)
loading group "parallel"... done (took 0.01880696 seconds)
loading group "linalg"... done (took 2.684744489 seconds)
loading group "collection"... done (took 5.723220103 seconds)
loading group "simd"... done (took 0.871617254 seconds)
loading group "inference"... done (took 2.419610786 seconds)
loading group "union"... done (took 2.83669042 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/22) benchmarking "problem"...
  (1/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 1.138168812 seconds)
  done (took 1.841301593 seconds)
  (2/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_devec"...
    done (took 0.138541837 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 1.252013435 seconds)
    (3/4) benchmarking "laplace_iter_vec"...
    done (took 0.609390324 seconds)
    (4/4) benchmarking "laplace_sparse_matvec"...
    done (took 1.161822428 seconds)
  done (took 3.848309085 seconds)
  (3/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.686345338 seconds)
  done (took 1.382445786 seconds)
  (4/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.975092672 seconds)
  done (took 1.683766543 seconds)
  (5/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.98268361 seconds)
  done (took 1.680694937 seconds)
  (6/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_devec"...
    done (took 0.230135168 seconds)
    (2/2) benchmarking "euro_option_vec"...
    done (took 0.197481413 seconds)
  done (took 1.122848007 seconds)
  (7/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.837696426 seconds)
  done (took 5.541365912 seconds)
  (8/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.551305855 seconds)
  done (took 2.257745099 seconds)
  (9/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.050311042 seconds)
  done (took 0.781985222 seconds)
  (10/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float64")...
    done (took 0.233374031 seconds)
    (2/2) benchmarking ("seismic", "Float32")...
    done (took 0.224253539 seconds)
  done (took 1.196569509 seconds)
  (11/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.232970182 seconds)
  done (took 0.949138297 seconds)
  (12/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.432795737 seconds)
  done (took 1.152218722 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.323319305 seconds)
  done (took 1.042791407 seconds)
  (14/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.357790809 seconds)
  done (took 2.076187907 seconds)
done (took 27.321126788 seconds)
(2/22) benchmarking "array"...
  (1/13) benchmarking "index"...
    (1/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.275133959 seconds)
    (2/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129035102 seconds)
    (3/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120875221 seconds)
    (4/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.165628698 seconds)
    (5/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.000307323 seconds)
    (6/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.16768155 seconds)
    (7/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.095182797 seconds)
    (8/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.330109051 seconds)
    (9/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131957491 seconds)
    (10/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.184082144 seconds)
    (11/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.034596518 seconds)
    (12/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.479390219 seconds)
    (13/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.02718264 seconds)
    (14/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.254954204 seconds)
    (15/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047684338 seconds)
    (16/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030204165 seconds)
    (17/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.183937089 seconds)
    (18/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020342382 seconds)
    (19/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.449995373 seconds)
    (20/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.022839873 seconds)
    (21/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.059771945 seconds)
    (22/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.021190914 seconds)
    (23/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.201292902 seconds)
    (24/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 6.9666e-5 seconds)
    (25/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.368386906 seconds)
    (26/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.027865296 seconds)
    (27/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.038439146 seconds)
    (28/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04210102 seconds)
    (29/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031526426 seconds)
    (30/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.064493085 seconds)
    (31/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.022646967 seconds)
    (32/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.376049358 seconds)
    (33/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060487403 seconds)
    (34/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.609962651 seconds)
    (35/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.066044924 seconds)
    (36/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.083668199 seconds)
    (37/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092439619 seconds)
    (38/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122812262 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.032482993 seconds)
    (40/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.024770935 seconds)
    (41/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.02454712 seconds)
    (42/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031816603 seconds)
    (43/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.077876605 seconds)
    (44/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.030257853 seconds)
    (45/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 7.3568e-5 seconds)
    (46/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07103518 seconds)
    (47/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069599681 seconds)
    (48/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.020444994 seconds)
    (49/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033406966 seconds)
    (50/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.021798148 seconds)
    (51/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.080624017 seconds)
    (52/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034409078 seconds)
    (53/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056471275 seconds)
    (54/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.021120142 seconds)
    (55/608) benchmarking "ind2sub"...
    done (took 0.083457736 seconds)
    (56/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.046486118 seconds)
    (57/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.042190332 seconds)
    (58/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.138012888 seconds)
    (59/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088434515 seconds)
    (60/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.02714961 seconds)
    (61/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.016509413 seconds)
    (62/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047660735 seconds)
    (63/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.037670662 seconds)
    (64/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.059572247 seconds)
    (65/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029086192 seconds)
    (66/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058421092 seconds)
    (67/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.077608816 seconds)
    (68/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.035358292 seconds)
    (69/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015870239 seconds)
    (70/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.084808303 seconds)
    (71/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.023837134 seconds)
    (72/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.042610178 seconds)
    (73/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.029892735 seconds)
    (74/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085948661 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.047240872 seconds)
    (76/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.041078418 seconds)
    (77/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.042384825 seconds)
    (78/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.041258856 seconds)
    (79/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.065512586 seconds)
    (80/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.058419742 seconds)
    (81/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.076011468 seconds)
    (82/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084969455 seconds)
    (83/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.051420485 seconds)
    (84/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.093805333 seconds)
    (85/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066708126 seconds)
    (86/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061231629 seconds)
    (87/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.041830627 seconds)
    (88/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.035243807 seconds)
    (89/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.176495853 seconds)
    (90/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.018208803 seconds)
    (91/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.046976172 seconds)
    (92/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.057840479 seconds)
    (93/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.016750057 seconds)
    (94/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.000309751 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028802983 seconds)
    (96/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.019581236 seconds)
    (97/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.0313567 seconds)
    (98/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058767865 seconds)
    (99/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 6.4572e-5 seconds)
    (100/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.040862162 seconds)
    (101/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.042656269 seconds)
    (102/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.050193303 seconds)
    (103/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.011159063 seconds)
    (104/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048028958 seconds)
    (105/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.000483275 seconds)
    (106/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.034337499 seconds)
    (107/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.012182296 seconds)
    (108/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.0835e-5 seconds)
    (109/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.058952866 seconds)
    (110/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.01290788 seconds)
    (111/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 6.3803e-5 seconds)
    (112/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.02402559 seconds)
    (113/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.028547853 seconds)
    (114/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.012646975 seconds)
    (115/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06766439 seconds)
    (116/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.023454322 seconds)
    (117/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053040244 seconds)
    (118/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.071036131 seconds)
    (119/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016319228 seconds)
    (120/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.01929191 seconds)
    (121/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.088630888 seconds)
    (122/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058142316 seconds)
    (123/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.025116525 seconds)
    (124/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.031016954 seconds)
    (125/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047304413 seconds)
    (126/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.018957689 seconds)
    (127/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.013490197 seconds)
    (128/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.031e-5 seconds)
    (129/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.080376686 seconds)
    (130/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.014970307 seconds)
    (131/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.024257046 seconds)
    (132/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.052298974 seconds)
    (133/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.04380365 seconds)
    (134/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.015351114 seconds)
    (135/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.016505855 seconds)
    (136/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054256742 seconds)
    (137/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.023107055 seconds)
    (138/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.031194718 seconds)
    (139/608) benchmarking ("sumvector", "1:100000")...
    done (took 1.9853e-5 seconds)
    (140/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.028992431 seconds)
    (141/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.039314114 seconds)
    (142/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.010725159 seconds)
    (143/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.068151322 seconds)
    (144/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074183473 seconds)
    (145/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059714921 seconds)
    (146/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.01181694 seconds)
    (147/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.063371301 seconds)
    (148/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.073762192 seconds)
    (149/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036653587 seconds)
    (150/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.036055022 seconds)
    (151/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089578107 seconds)
    (152/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034932952 seconds)
    (153/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048964693 seconds)
    (154/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014585693 seconds)
    (155/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.051987786 seconds)
    (156/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.011491845 seconds)
    (157/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.03133223 seconds)
    (158/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.03265231 seconds)
    (159/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051030132 seconds)
    (160/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.033837897 seconds)
    (161/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.9705e-5 seconds)
    (162/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.049918655 seconds)
    (163/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027010429 seconds)
    (164/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.067478455 seconds)
    (165/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.066944632 seconds)
    (166/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.048239787 seconds)
    (167/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.019540425 seconds)
    (168/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.026518362 seconds)
    (169/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.048724658 seconds)
    (170/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.03673023 seconds)
    (171/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.043279685 seconds)
    (172/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.044562982 seconds)
    (173/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071961774 seconds)
    (174/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.016822396 seconds)
    (175/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.050136756 seconds)
    (176/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.020225987 seconds)
    (177/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.022055623 seconds)
    (178/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.028230984 seconds)
    (179/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.036067551 seconds)
    (180/608) benchmarking "5d"...
    done (took 0.209583077 seconds)
    (181/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.020681043 seconds)
    (182/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.02237887 seconds)
    (183/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.041262723 seconds)
    (184/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.4174e-5 seconds)
    (185/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.038253434 seconds)
    (186/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.022345738 seconds)
    (187/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.006782772 seconds)
    (188/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.017017096 seconds)
    (189/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.000207254 seconds)
    (190/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.010736974 seconds)
    (191/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.033426355 seconds)
    (192/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.3179e-5 seconds)
    (193/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0278739 seconds)
    (194/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035693957 seconds)
    (195/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.061417118 seconds)
    (196/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.024577072 seconds)
    (197/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05359328 seconds)
    (198/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.000306694 seconds)
    (199/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.088865359 seconds)
    (200/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.026024837 seconds)
    (201/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085916402 seconds)
    (202/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.035837285 seconds)
    (203/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.050999673 seconds)
    (204/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 6.7336e-5 seconds)
    (205/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.036172117 seconds)
    (206/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048797 seconds)
    (207/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.053169033 seconds)
    (208/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.04939114 seconds)
    (209/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.563261476 seconds)
    (210/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.085080805 seconds)
    (211/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063204801 seconds)
    (212/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 6.379e-5 seconds)
    (213/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.039542251 seconds)
    (214/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.015992939 seconds)
    (215/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033623644 seconds)
    (216/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.000339698 seconds)
    (217/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.044467311 seconds)
    (218/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.058335322 seconds)
    (219/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.006802667 seconds)
    (220/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.035287405 seconds)
    (221/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.037368905 seconds)
    (222/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.017428861 seconds)
    (223/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.023903793 seconds)
    (224/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.0873e-5 seconds)
    (225/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.1235e-5 seconds)
    (226/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.020516888 seconds)
    (227/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030762423 seconds)
    (228/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.006773709 seconds)
    (229/608) benchmarking "6d"...
    done (took 0.211921576 seconds)
    (230/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.025565194 seconds)
    (231/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.853e-5 seconds)
    (232/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.026145578 seconds)
    (233/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.075036055 seconds)
    (234/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.025358634 seconds)
    (235/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.019381369 seconds)
    (236/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098951136 seconds)
    (237/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.020754419 seconds)
    (238/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.027977081 seconds)
    (239/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050288574 seconds)
    (240/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.071722563 seconds)
    (241/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.017983068 seconds)
    (242/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081611641 seconds)
    (243/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.01493268 seconds)
    (244/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047782979 seconds)
    (245/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074513273 seconds)
    (246/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047485311 seconds)
    (247/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 6.9741e-5 seconds)
    (248/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.05120917 seconds)
    (249/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.035494235 seconds)
    (250/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.043421896 seconds)
    (251/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.019473865 seconds)
    (252/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048246322 seconds)
    (253/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 1.9013e-5 seconds)
    (254/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.000103911 seconds)
    (255/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.039908852 seconds)
    (256/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.046495827 seconds)
    (257/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.043911126 seconds)
    (258/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.000100811 seconds)
    (259/608) benchmarking "3d"...
    done (took 0.060043298 seconds)
    (260/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.062072048 seconds)
    (261/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.022292824 seconds)
    (262/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.068845645 seconds)
    (263/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.023497766 seconds)
    (264/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047106957 seconds)
    (265/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.022312101 seconds)
    (266/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.065290808 seconds)
    (267/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046186504 seconds)
    (268/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.024068025 seconds)
    (269/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.000194502 seconds)
    (270/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.016942865 seconds)
    (271/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077923067 seconds)
    (272/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055990059 seconds)
    (273/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.000176215 seconds)
    (274/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.184616976 seconds)
    (275/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.019236823 seconds)
    (276/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.056222846 seconds)
    (277/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.021008133 seconds)
    (278/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082455338 seconds)
    (279/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.033679693 seconds)
    (280/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080012752 seconds)
    (281/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.021929472 seconds)
    (282/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.029081195 seconds)
    (283/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.038337857 seconds)
    (284/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.050634373 seconds)
    (285/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.000324997 seconds)
    (286/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034063307 seconds)
    (287/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040152685 seconds)
    (288/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.048325229 seconds)
    (289/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.031021776 seconds)
    (290/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.036838916 seconds)
    (291/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.021633093 seconds)
    (292/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.046514237 seconds)
    (293/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.016311799 seconds)
    (294/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.000154055 seconds)
    (295/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.027840606 seconds)
    (296/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.051933034 seconds)
    (297/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014242903 seconds)
    (298/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.015291691 seconds)
    (299/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.046684673 seconds)
    (300/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.014770612 seconds)
    (301/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.000100892 seconds)
    (302/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.027742711 seconds)
    (303/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.039618818 seconds)
    (304/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.036968299 seconds)
    (305/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.000433877 seconds)
    (306/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.044474217 seconds)
    (307/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.016762892 seconds)
    (308/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.9859e-5 seconds)
    (309/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.4613e-5 seconds)
    (310/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.042317479 seconds)
    (311/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.063545384 seconds)
    (312/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.020873092 seconds)
    (313/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052400062 seconds)
    (314/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050931439 seconds)
    (315/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.029913295 seconds)
    (316/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.020656168 seconds)
    (317/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027826369 seconds)
    (318/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.071718449 seconds)
    (319/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.026888442 seconds)
    (320/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027097265 seconds)
    (321/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074083998 seconds)
    (322/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.065578015 seconds)
    (323/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.015998037 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.022827558 seconds)
    (325/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.021406146 seconds)
    (326/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.019658375 seconds)
    (327/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.057216161 seconds)
    (328/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.069252206 seconds)
    (329/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.034275725 seconds)
    (330/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055229141 seconds)
    (331/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.037883494 seconds)
    (332/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.053048586 seconds)
    (333/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.019138563 seconds)
    (334/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.016537255 seconds)
    (335/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.000111975 seconds)
    (336/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.035793687 seconds)
    (337/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072803829 seconds)
    (338/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.061236138 seconds)
    (339/608) benchmarking "sub2ind"...
    done (took 0.297609399 seconds)
    (340/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 4.1614e-5 seconds)
    (341/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.000146377 seconds)
    (342/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.014398001 seconds)
    (343/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071880182 seconds)
    (344/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.012078768 seconds)
    (345/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.032037943 seconds)
    (346/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.000100933 seconds)
    (347/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052244926 seconds)
    (348/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.000305802 seconds)
    (349/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.090056043 seconds)
    (350/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 7.3377e-5 seconds)
    (351/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091826794 seconds)
    (352/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.000482911 seconds)
    (353/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.045648241 seconds)
    (354/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074398269 seconds)
    (355/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.029912111 seconds)
    (356/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032845312 seconds)
    (357/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.015867437 seconds)
    (358/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.7876e-5 seconds)
    (359/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.061413595 seconds)
    (360/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.032078385 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.171567767 seconds)
    (362/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.051860578 seconds)
    (363/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 7.4627e-5 seconds)
    (364/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.056974229 seconds)
    (365/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.016032691 seconds)
    (366/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.2588e-5 seconds)
    (367/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.024113528 seconds)
    (368/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.000483668 seconds)
    (369/608) benchmarking ("sum", "3darray")...
    done (took 0.048277742 seconds)
    (370/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.029602063 seconds)
    (371/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.029409357 seconds)
    (372/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040723717 seconds)
    (373/608) benchmarking "7d"...
    done (took 0.253874279 seconds)
    (374/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051443471 seconds)
    (375/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.051573158 seconds)
    (376/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 6.4204e-5 seconds)
    (377/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.023490505 seconds)
    (378/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.017912806 seconds)
    (379/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034442061 seconds)
    (380/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.018905769 seconds)
    (381/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.062834846 seconds)
    (382/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.017672181 seconds)
    (383/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.033764766 seconds)
    (384/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.026217966 seconds)
    (385/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.024699826 seconds)
    (386/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.054495263 seconds)
    (387/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.054720102 seconds)
    (388/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.033934683 seconds)
    (389/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050699713 seconds)
    (390/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.079418639 seconds)
    (391/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.07716707 seconds)
    (392/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.035567745 seconds)
    (393/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.047213929 seconds)
    (394/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.024209578 seconds)
    (395/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.034154379 seconds)
    (396/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.176166671 seconds)
    (397/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.017823621 seconds)
    (398/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.076240359 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.022700785 seconds)
    (400/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.01356852 seconds)
    (401/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.059881176 seconds)
    (402/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.042455946 seconds)
    (403/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.000480283 seconds)
    (404/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.039406278 seconds)
    (405/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.043877883 seconds)
    (406/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063078375 seconds)
    (407/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.076531699 seconds)
    (408/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065628716 seconds)
    (409/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.03112226 seconds)
    (410/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.023891398 seconds)
    (411/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.049421324 seconds)
    (412/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.9982e-5 seconds)
    (413/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.027333932 seconds)
    (414/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.046440243 seconds)
    (415/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.000112718 seconds)
    (416/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.000302507 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.026447884 seconds)
    (418/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 4.4159e-5 seconds)
    (419/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.000109989 seconds)
    (420/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.018313925 seconds)
    (421/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.014817108 seconds)
    (422/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.014045925 seconds)
    (423/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.00014752 seconds)
    (424/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.041531144 seconds)
    (425/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.032437823 seconds)
    (426/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.016030104 seconds)
    (427/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.049120942 seconds)
    (428/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.019278559 seconds)
    (429/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.0665e-5 seconds)
    (430/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.065506443 seconds)
    (431/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034615158 seconds)
    (432/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.016210909 seconds)
    (433/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017359976 seconds)
    (434/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.025270404 seconds)
    (435/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.073261786 seconds)
    (436/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.034912255 seconds)
    (437/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.013890228 seconds)
    (438/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.034815326 seconds)
    (439/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069216995 seconds)
    (440/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070151887 seconds)
    (441/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.027090244 seconds)
    (442/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.017202733 seconds)
    (443/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.027533026 seconds)
    (444/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 1.9168e-5 seconds)
    (445/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.040517333 seconds)
    (446/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.010335949 seconds)
    (447/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.7069e-5 seconds)
    (448/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.019010292 seconds)
    (449/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.052098261 seconds)
    (450/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.021627942 seconds)
    (451/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.9551e-5 seconds)
    (452/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033828747 seconds)
    (453/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050585934 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015010678 seconds)
    (455/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.068465477 seconds)
    (456/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067824461 seconds)
    (457/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.044641134 seconds)
    (458/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068525146 seconds)
    (459/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.1331e-5 seconds)
    (460/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.030046897 seconds)
    (461/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.06378333 seconds)
    (462/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.047821656 seconds)
    (463/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.025936014 seconds)
    (464/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.039061607 seconds)
    (465/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.021913961 seconds)
    (466/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.014009995 seconds)
    (467/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.3077e-5 seconds)
    (468/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056015154 seconds)
    (469/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.011849553 seconds)
    (470/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031384221 seconds)
    (471/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.041675459 seconds)
    (472/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.045355618 seconds)
    (473/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041831099 seconds)
    (474/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015699164 seconds)
    (475/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061620842 seconds)
    (476/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.023814819 seconds)
    (477/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.022161738 seconds)
    (478/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.042160174 seconds)
    (479/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085627872 seconds)
    (480/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.025747505 seconds)
    (481/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.039198691 seconds)
    (482/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.047800999 seconds)
    (483/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.027886089 seconds)
    (484/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.079614374 seconds)
    (485/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.167440195 seconds)
    (486/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.064380195 seconds)
    (487/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.033890495 seconds)
    (488/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033303169 seconds)
    (489/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.0157914 seconds)
    (490/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072374461 seconds)
    (491/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.064260802 seconds)
    (492/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027474606 seconds)
    (493/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050565646 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065893943 seconds)
    (495/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.01129332 seconds)
    (496/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.042070648 seconds)
    (497/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.3399e-5 seconds)
    (498/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040675465 seconds)
    (499/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.000561569 seconds)
    (500/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072612633 seconds)
    (501/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.059760303 seconds)
    (502/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02508348 seconds)
    (503/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.0298524 seconds)
    (504/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083270868 seconds)
    (505/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.049014743 seconds)
    (506/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016679883 seconds)
    (507/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.070602061 seconds)
    (508/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 6.3467e-5 seconds)
    (509/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.011266431 seconds)
    (510/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.041884358 seconds)
    (511/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.049322346 seconds)
    (512/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047455294 seconds)
    (513/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.4651194 seconds)
    (514/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.148e-5 seconds)
    (515/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.020208342 seconds)
    (516/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.02745662 seconds)
    (517/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.000318945 seconds)
    (518/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05143841 seconds)
    (519/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.039643647 seconds)
    (520/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.063289907 seconds)
    (521/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.012631016 seconds)
    (522/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.085996458 seconds)
    (523/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027797942 seconds)
    (524/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031065949 seconds)
    (525/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.021943139 seconds)
    (526/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.042805369 seconds)
    (527/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059419981 seconds)
    (528/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059284999 seconds)
    (529/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.0295e-5 seconds)
    (530/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.054313392 seconds)
    (531/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.039566097 seconds)
    (532/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.026188907 seconds)
    (533/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.01626456 seconds)
    (534/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.022506217 seconds)
    (535/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.015352295 seconds)
    (536/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.000111248 seconds)
    (537/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071534043 seconds)
    (538/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049589289 seconds)
    (539/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061240598 seconds)
    (540/608) benchmarking "2d"...
    done (took 0.046658028 seconds)
    (541/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033197088 seconds)
    (542/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 3.944e-5 seconds)
    (543/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.022123062 seconds)
    (544/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014570178 seconds)
    (545/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.7897e-5 seconds)
    (546/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066315572 seconds)
    (547/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.033120778 seconds)
    (548/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032281413 seconds)
    (549/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.2264e-5 seconds)
    (550/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.02942427 seconds)
    (551/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.061442922 seconds)
    (552/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.03897904 seconds)
    (553/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051368693 seconds)
    (554/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028493249 seconds)
    (555/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027362319 seconds)
    (556/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.046892943 seconds)
    (557/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 7.2989e-5 seconds)
    (558/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.018115273 seconds)
    (559/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065095716 seconds)
    (560/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.0927e-5 seconds)
    (561/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.066566065 seconds)
    (562/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060419511 seconds)
    (563/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030547392 seconds)
    (564/608) benchmarking "4d"...
    done (took 0.094433394 seconds)
    (565/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 3.5977e-5 seconds)
    (566/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.012837351 seconds)
    (567/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 1.969e-5 seconds)
    (568/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.047241056 seconds)
    (569/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07057279 seconds)
    (570/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055049858 seconds)
    (571/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.053630603 seconds)
    (572/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.042092446 seconds)
    (573/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085052188 seconds)
    (574/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.025095995 seconds)
    (575/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.023690053 seconds)
    (576/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.039992258 seconds)
    (577/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.032089296 seconds)
    (578/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.034451906 seconds)
    (579/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.028091324 seconds)
    (580/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.030852636 seconds)
    (581/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064971015 seconds)
    (582/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.014201116 seconds)
    (583/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.064742566 seconds)
    (584/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.063430433 seconds)
    (585/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.020793295 seconds)
    (586/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.000110756 seconds)
    (587/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.04197874 seconds)
    (588/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 9.8252e-5 seconds)
    (589/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066919555 seconds)
    (590/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.03376345 seconds)
    (591/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.042231164 seconds)
    (592/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.068585047 seconds)
    (593/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.04844069 seconds)
    (594/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026055859 seconds)
    (595/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028187008 seconds)
    (596/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.078476268 seconds)
    (597/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.016298072 seconds)
    (598/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.041421412 seconds)
    (599/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.02549204 seconds)
    (600/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.063568318 seconds)
    (601/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.029218019 seconds)
    (602/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.000344987 seconds)
    (603/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048302696 seconds)
    (604/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.171777125 seconds)
    (605/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.048611228 seconds)
    (606/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.000105356 seconds)
    (607/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.024244153 seconds)
    (608/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.077300754 seconds)
  done (took 29.345100615 seconds)
  (2/13) benchmarking "reductions"...
    (1/20) benchmarking ("sumabs", "Int64")...
    done (took 0.062132105 seconds)
    (2/20) benchmarking ("norminf", "Float64")...
    done (took 0.232088027 seconds)
    (3/20) benchmarking ("norm", "Float64")...
    done (took 0.038652827 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.058330649 seconds)
    (5/20) benchmarking ("maxabs", "Float64")...
    done (took 0.060555103 seconds)
    (6/20) benchmarking ("maxabs", "Int64")...
    done (took 0.053769124 seconds)
    (7/20) benchmarking ("mean", "Float64")...
    done (took 0.034174315 seconds)
    (8/20) benchmarking ("norm1", "Int64")...
    done (took 0.199078618 seconds)
    (9/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.066094755 seconds)
    (10/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.053634004 seconds)
    (11/20) benchmarking ("sum", "Float64")...
    done (took 0.040709904 seconds)
    (12/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.069281376 seconds)
    (13/20) benchmarking ("sum", "Int64")...
    done (took 0.040714621 seconds)
    (14/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.053425716 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.050541008 seconds)
    (16/20) benchmarking ("norm", "Int64")...
    done (took 0.035870472 seconds)
    (17/20) benchmarking ("norm1", "Float64")...
    done (took 0.041929692 seconds)
    (18/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.053497741 seconds)
    (19/20) benchmarking ("norminf", "Int64")...
    done (took 0.101582528 seconds)
    (20/20) benchmarking ("mean", "Int64")...
    done (took 0.069165494 seconds)
  done (took 2.241206302 seconds)
  (3/13) benchmarking "cat"...
    (1/17) benchmarking ("catnd_setind", 5)...
    done (took 0.202170609 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.030088153 seconds)
    (3/17) benchmarking ("hcat", 500)...
    done (took 0.094846841 seconds)
    (4/17) benchmarking ("hcat_setind", 500)...
    done (took 0.076250059 seconds)
    (5/17) benchmarking ("vcat_setind", 500)...
    done (took 0.075185684 seconds)
    (6/17) benchmarking ("catnd", 500)...
    done (took 0.527424634 seconds)
    (7/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.053660577 seconds)
    (8/17) benchmarking ("catnd", 5)...
    done (took 5.0333e-5 seconds)
    (9/17) benchmarking ("hvcat", 5)...
    done (took 0.286914076 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 0.056453466 seconds)
    (11/17) benchmarking ("hcat_setind", 5)...
    done (took 2.0285e-5 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 0.004114711 seconds)
    (13/17) benchmarking ("vcat_setind", 5)...
    done (took 1.213e-5 seconds)
    (14/17) benchmarking ("catnd_setind", 500)...
    done (took 0.006812268 seconds)
    (15/17) benchmarking ("hcat", 5)...
    done (took 1.2921e-5 seconds)
    (16/17) benchmarking ("hvcat", 500)...
    done (took 0.008358951 seconds)
    (17/17) benchmarking ("hvcat_setind", 5)...
    done (took 1.3079e-5 seconds)
  done (took 2.285325166 seconds)
  (4/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.174538586 seconds)
    (2/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.347416962 seconds)
    (3/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.108407239 seconds)
    (4/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.197643608 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.135148236 seconds)
    (6/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.309328477 seconds)
    (7/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.489426648 seconds)
    (8/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.291480718 seconds)
  done (took 2.898725939 seconds)
  (5/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Float64")...
    done (took 0.134077112 seconds)
    (2/4) benchmarking ("Float64", "Int")...
    done (took 0.034305169 seconds)
    (3/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.113792378 seconds)
    (4/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.099407762 seconds)
  done (took 1.219557431 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "boolarray_bool_load!"...
    done (took 0.056172744 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.025395682 seconds)
    (3/6) benchmarking "bitarray_true_load!"...
    done (took 0.035105415 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.025087555 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.04502852 seconds)
    (6/6) benchmarking "boolarray_true_fill!"...
    done (took 0.025528707 seconds)
  done (took 1.052145542 seconds)
  (7/13) benchmarking "accumulate"...
    (1/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.045460702 seconds)
    (2/12) benchmarking ("accumulate", "Float64")...
    done (took 0.052607044 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.17895103 seconds)
    (4/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.036283572 seconds)
    (5/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.03582852 seconds)
    (6/12) benchmarking ("cumsum", "Int")...
    done (took 0.04065341 seconds)
    (7/12) benchmarking ("cumsum", "Float64")...
    done (took 0.057363535 seconds)
    (8/12) benchmarking ("accumulate!", "Int")...
    done (took 0.04708628 seconds)
    (9/12) benchmarking ("cumsum!", "Int")...
    done (took 0.037840471 seconds)
    (10/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.0409708 seconds)
    (11/12) benchmarking ("accumulate", "Int")...
    done (took 0.033018906 seconds)
    (12/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.027205086 seconds)
  done (took 1.50187016 seconds)
  (8/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.058957332 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.046887267 seconds)
    (3/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.051606262 seconds)
    (4/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 0.044139061 seconds)
    (5/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.039822589 seconds)
    (6/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.039930128 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 0.051822759 seconds)
    (8/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 0.045532711 seconds)
    (9/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.039114725 seconds)
    (10/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.024711344 seconds)
    (11/24) benchmarking ("==", "BitArray")...
    done (took 0.030363639 seconds)
    (12/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 0.048201041 seconds)
    (13/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.031704758 seconds)
    (14/24) benchmarking ("isequal", "BitArray")...
    done (took 0.031492839 seconds)
    (15/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.030579945 seconds)
    (16/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.034438922 seconds)
    (17/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.036457073 seconds)
    (18/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.020159756 seconds)
    (19/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 0.046632496 seconds)
    (20/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.042332955 seconds)
    (21/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 0.043975585 seconds)
    (22/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.045738786 seconds)
    (23/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.035768092 seconds)
    (24/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.046629794 seconds)
  done (took 1.813103765 seconds)
  (9/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 5)...
    done (took 0.150590652 seconds)
    (2/5) benchmarking ("setindex!", 2)...
    done (took 0.014386368 seconds)
    (3/5) benchmarking ("setindex!", 1)...
    done (took 0.01071526 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 0.014586552 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 0.01491397 seconds)
  done (took 1.046956353 seconds)
  (10/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 1.148843981 seconds)
    (2/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.518820017 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.377023362 seconds)
    (4/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.142521259 seconds)
    (5/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.009299294 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.007842712 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.554851939 seconds)
    (8/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.662512884 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.422894363 seconds)
    (10/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.759034109 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 10.592939524 seconds)
    (12/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.09709507 seconds)
  done (took 27.134079734 seconds)
  (11/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.052069774 seconds)
    (2/4) benchmarking "rev_load_slow!"...
    done (took 0.048952366 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.053322724 seconds)
    (4/4) benchmarking "rev_load_fast!"...
    done (took 0.046048783 seconds)
  done (took 1.041638803 seconds)
  (12/13) benchmarking "growth"...
    (1/12) benchmarking ("push_single!", 8)...
    done (took 0.031068087 seconds)
    (2/12) benchmarking ("push_single!", 2048)...
    done (took 2.5172e-5 seconds)
    (3/12) benchmarking ("append!", 2048)...
    done (took 0.042497398 seconds)
    (4/12) benchmarking ("append!", 8)...
    done (took 1.1318e-5 seconds)
    (5/12) benchmarking ("push_single!", 256)...
    done (took 1.095e-5 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 0.043238628 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 0.038244177 seconds)
    (8/12) benchmarking ("append!", 256)...
    done (took 2.1363e-5 seconds)
    (9/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.5746e-5 seconds)
    (10/12) benchmarking ("prerend!", 256)...
    done (took 1.2533e-5 seconds)
    (11/12) benchmarking ("push_multiple!", 256)...
    done (took 1.338e-5 seconds)
    (12/12) benchmarking ("prerend!", 2048)...
    done (took 1.8247e-5 seconds)
  done (took 1.00572466 seconds)
  (13/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.035025882 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.045382439 seconds)
    (3/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.033694411 seconds)
    (4/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.041509476 seconds)
    (5/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.047593322 seconds)
    (6/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.02827428 seconds)
    (7/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.026800252 seconds)
    (8/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.040739539 seconds)
    (9/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.041344216 seconds)
    (10/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.038971844 seconds)
    (11/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.02324054 seconds)
    (12/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.046230718 seconds)
    (13/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.041605101 seconds)
    (14/24) benchmarking ("all", "BitArray")...
    done (took 0.029734162 seconds)
    (15/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.039050196 seconds)
    (16/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.023054052 seconds)
    (17/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.034343607 seconds)
    (18/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.041434879 seconds)
    (19/24) benchmarking ("any", "BitArray")...
    done (took 0.027789404 seconds)
    (20/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.034656269 seconds)
    (21/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.024317883 seconds)
    (22/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.045931783 seconds)
    (23/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.039127136 seconds)
    (24/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.023224348 seconds)
  done (took 1.702528981 seconds)
done (took 75.013611718 seconds)
(3/22) benchmarking "misc"...
  (1/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.0929114 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.038302585 seconds)
  done (took 0.972707248 seconds)
  (2/15) benchmarking "perf highdim generator"...
  done (took 0.212250159 seconds)
  (3/15) benchmarking "20517"...
  done (took 0.06156821 seconds)
  (4/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "no conditional"...
    done (took 0.061565388 seconds)
    (2/2) benchmarking "conditional"...
    done (took 0.057284632 seconds)
  done (took 0.974692579 seconds)
  (5/15) benchmarking "afoldl"...
    (1/3) benchmarking "Int"...
    done (took 0.033934218 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.035269158 seconds)
    (3/3) benchmarking "Complex{Float64}"...
    done (took 0.040407375 seconds)
  done (took 0.964862048 seconds)
  (6/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.046196402 seconds)
  done (took 0.909472804 seconds)
  (7/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.148240385 seconds)
    (2/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.248110342 seconds)
    (3/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.095524624 seconds)
  done (took 1.347235798 seconds)
  (8/15) benchmarking "18129"...
  done (took 0.168528045 seconds)
  (9/15) benchmarking "23042"...
    (1/4) benchmarking "Float64"...
    done (took 0.056514049 seconds)
    (2/4) benchmarking "ComplexF32"...
    done (took 0.055216079 seconds)
    (3/4) benchmarking "ComplexF64"...
    done (took 0.022346667 seconds)
    (4/4) benchmarking "Float32"...
    done (took 0.032159527 seconds)
  done (took 1.029539477 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.044631438 seconds)
    (2/4) benchmarking ("parse", "nested")...
    done (took 0.03022986 seconds)
    (3/4) benchmarking ("parse", "array")...
    done (took 0.019811956 seconds)
    (4/4) benchmarking ("parse", "function")...
    done (took 0.019557825 seconds)
  done (took 0.972952239 seconds)
  (11/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float64"...
    done (took 0.062054161 seconds)
    (2/3) benchmarking "Float16"...
    done (took 0.05577142 seconds)
    (3/3) benchmarking "Float32"...
    done (took 0.055685889 seconds)
  done (took 1.029729603 seconds)
  (12/15) benchmarking "fastmath many args"...
  done (took 0.062786827 seconds)
  (13/15) benchmarking "bitshift"...
    (1/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.021926262 seconds)
    (2/4) benchmarking ("Int", "UInt")...
    done (took 0.021884109 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.021656864 seconds)
    (4/4) benchmarking ("UInt", "UInt")...
    done (took 0.02165543 seconds)
  done (took 0.948219572 seconds)
  (14/15) benchmarking "iterators"...
    (1/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.175208597 seconds)
    (2/10) benchmarking "zip(1:1)"...
    done (took 0.084123785 seconds)
    (3/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.037654802 seconds)
    (4/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.092923608 seconds)
    (5/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.097234628 seconds)
    (6/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.8431e-5 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.065e-5 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.0326e-5 seconds)
    (9/10) benchmarking "zip(1:1000)"...
    done (took 1.3644e-5 seconds)
    (10/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.07266787 seconds)
  done (took 1.417088767 seconds)
  (15/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 0.121249495 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 4.3336e-5 seconds)
  done (took 0.987104769 seconds)
done (took 12.909304119 seconds)
(4/22) benchmarking "sort"...
  (1/11) benchmarking "length = 30"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 0.105687419 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 1.130651371 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 7.696290786 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 0.600776989 seconds)
    (5/17) benchmarking "descending"...
    done (took 0.037128 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 0.025654889 seconds)
    (7/17) benchmarking "all same"...
    done (took 0.031055281 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.7305e-5 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 0.024782584 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 1.3716e-5 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 0.927341514 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 0.028450713 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.577117704 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.026893537 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 0.081628085 seconds)
    (16/17) benchmarking "ascending"...
    done (took 0.030403924 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.3643e-5 seconds)
  done (took 12.177455989 seconds)
  (2/11) benchmarking "length = 10000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 3.1835e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 0.000917652 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 0.000370201 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 0.000931568 seconds)
    (5/17) benchmarking "descending"...
    done (took 0.000567169 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 1.1071e-5 seconds)
    (7/17) benchmarking "all same"...
    done (took 5.5922e-5 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 0.000353916 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 0.000939409 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 0.000374535 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 0.000362046 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 0.00057792 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.022948833 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.000536129 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 0.00040765 seconds)
    (16/17) benchmarking "ascending"...
    done (took 0.000556306 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 0.000381456 seconds)
  done (took 0.97293349 seconds)
  (3/11) benchmarking "length = 3"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.4815e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 8.071e-6 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 7.296e-6 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 6.993e-6 seconds)
    (5/17) benchmarking "descending"...
    done (took 5.64e-6 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 4.682e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 3.937e-6 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 3.582e-6 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 1.6795e-5 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 3.399e-6 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 8.942e-6 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 5.839e-6 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.6656e-5 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 4.452e-6 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.0996e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 4.743e-6 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 4.632e-6 seconds)
  done (took 0.912255106 seconds)
  (4/11) benchmarking "length = 100"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.3777e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 3.2363e-5 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 1.0181e-5 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 1.8197e-5 seconds)
    (5/17) benchmarking "descending"...
    done (took 1.5624e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 4.897e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 5.039e-6 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 6.753e-6 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 1.5419e-5 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 6.773e-6 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 1.1563e-5 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 1.3536e-5 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.000217781 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 1.2044e-5 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.3981e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 1.1851e-5 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 8.601e-6 seconds)
  done (took 0.912144195 seconds)
  (5/11) benchmarking "issues"...
    (1/13) benchmarking "small Float64 view"...
    done (took 0.0373283 seconds)
    (2/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 0.034674528 seconds)
    (3/13) benchmarking "sortslices sorting very short slices"...
    done (took 1.706395891 seconds)
    (4/13) benchmarking "Float16"...
    done (took 0.981978162 seconds)
    (5/13) benchmarking "sort(rand(10^8))"...
    done (took 8.984317207 seconds)
    (6/13) benchmarking "sortperm(rand(10^5))"...
    done (took 0.037955729 seconds)
    (7/13) benchmarking "sortperm on a view (Int)"...
    done (took 0.194338295 seconds)
    (8/13) benchmarking "small Int view"...
    done (took 0.031842805 seconds)
    (9/13) benchmarking "sortperm on a view (Float64)"...
    done (took 0.394193782 seconds)
    (10/13) benchmarking "inplace sorting of a view"...
    done (took 0.032618206 seconds)
    (11/13) benchmarking "sortperm(rand(10^7))"...
    done (took 7.743668925 seconds)
    (12/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 0.284067184 seconds)
    (13/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 0.231270869 seconds)
  done (took 21.60755978 seconds)
  (6/11) benchmarking "mergesort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 0.243899309 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 0.211716876 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 0.129926569 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 0.06235066 seconds)
  done (took 1.587074485 seconds)
  (7/11) benchmarking "quicksort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 0.148373013 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 0.108343143 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 0.073096991 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 0.060670217 seconds)
  done (took 1.331822995 seconds)
  (8/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 0.104333565 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 0.049408999 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 0.066313089 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 0.054925127 seconds)
  done (took 1.217019336 seconds)
  (9/11) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ones")...
    done (took 0.038523337 seconds)
    (2/8) benchmarking ("reverse", "ascending")...
    done (took 0.055629777 seconds)
    (3/8) benchmarking ("forwards", "random")...
    done (took 0.037480085 seconds)
    (4/8) benchmarking ("forwards", "ascending")...
    done (took 0.028489441 seconds)
    (5/8) benchmarking ("forwards", "descending")...
    done (took 0.034611092 seconds)
    (6/8) benchmarking ("reverse", "random")...
    done (took 0.055346593 seconds)
    (7/8) benchmarking ("reverse", "descending")...
    done (took 0.025639269 seconds)
    (8/8) benchmarking ("reverse", "ones")...
    done (took 0.02520697 seconds)
  done (took 1.24466033 seconds)
  (10/11) benchmarking "length = 1000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.6668e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 0.000101564 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 4.5237e-5 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 9.4775e-5 seconds)
    (5/17) benchmarking "descending"...
    done (took 5.3705e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.807e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 1.1961e-5 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 6.4171e-5 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 9.8519e-5 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 5.791e-5 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.773e-5 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 6.3562e-5 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.001875235 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 3.9262e-5 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 6.2607e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 4.9678e-5 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.6027e-5 seconds)
  done (took 0.945052033 seconds)
  (11/11) benchmarking "length = 10"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.3633e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 1.9655e-5 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 8.616e-6 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 8.003e-6 seconds)
    (5/17) benchmarking "descending"...
    done (took 6.695e-6 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 4.951e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 4.591e-6 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.156e-6 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 7.057e-6 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 4.513e-6 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 1.0046e-5 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 6.484e-6 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 3.2636e-5 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.167e-6 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.246e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 5.975e-6 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 6.212e-6 seconds)
  done (took 0.935400207 seconds)
done (took 44.706943094 seconds)
(5/22) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 0.027476298 seconds)
done (took 0.963448441 seconds)
(6/22) benchmarking "shootout"...
  (1/12) benchmarking "binary_trees"...
  done (took 0.090835379 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.074749426 seconds)
  (3/12) benchmarking "regex_dna"...
  done (took 0.055006313 seconds)
  (4/12) benchmarking "fannkuch"...
  done (took 0.11966995 seconds)
  (5/12) benchmarking "mandelbrot"...
  done (took 0.065765325 seconds)
  (6/12) benchmarking "pidigits"...
  done (took 0.112918931 seconds)
  (7/12) benchmarking "spectralnorm"...
  done (took 0.090678422 seconds)
  (8/12) benchmarking "k_nucleotide"...
  done (took 0.485728184 seconds)
  (9/12) benchmarking "nbody"...
  done (took 0.072678517 seconds)
  (10/12) benchmarking "revcomp"...
  done (took 0.071731413 seconds)
  (11/12) benchmarking "nbody_vec"...
  done (took 0.389715046 seconds)
  (12/12) benchmarking "meteor_contest"...
  done (took 2.857464581 seconds)
done (took 5.431491625 seconds)
(7/22) benchmarking "sparse"...
  (1/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.110288208 seconds)
    (2/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.212599422 seconds)
    (3/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.046307444 seconds)
    (4/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.080569814 seconds)
    (5/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 3.2264e-5 seconds)
    (6/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.040569616 seconds)
    (7/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.081307547 seconds)
    (8/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.038085507 seconds)
    (9/54) benchmarking ("spmat", "range", 100)...
    done (took 0.108071114 seconds)
    (10/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.054356499 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.089465308 seconds)
    (12/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.052001699 seconds)
    (13/54) benchmarking ("spmat", "range", 10)...
    done (took 2.2483e-5 seconds)
    (14/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.9915e-5 seconds)
    (15/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.05383208 seconds)
    (16/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.082651171 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.000716122 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.106009702 seconds)
    (19/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.035261621 seconds)
    (20/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 5.6028e-5 seconds)
    (21/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.5097e-5 seconds)
    (22/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.000681961 seconds)
    (23/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.000695448 seconds)
    (24/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.309e-5 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.032408811 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.000705557 seconds)
    (27/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.4744e-5 seconds)
    (28/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.000800878 seconds)
    (29/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.059284513 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 5.1321e-5 seconds)
    (31/54) benchmarking ("spmat", "array", 100)...
    done (took 0.000139888 seconds)
    (32/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.0238e-5 seconds)
    (33/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.2144e-5 seconds)
    (34/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.2523e-5 seconds)
    (35/54) benchmarking ("spmat", "array", 10)...
    done (took 1.261e-5 seconds)
    (36/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.001079979 seconds)
    (37/54) benchmarking ("spmat", "logical", 100)...
    done (took 5.4101e-5 seconds)
    (38/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.066148042 seconds)
    (39/54) benchmarking ("spmat", "integer", 100)...
    done (took 5.0212e-5 seconds)
    (40/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.000804724 seconds)
    (41/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.012479653 seconds)
    (42/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.5558e-5 seconds)
    (43/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.000972731 seconds)
    (44/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.7243e-5 seconds)
    (45/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.000136406 seconds)
    (46/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.000994785 seconds)
    (47/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 3.9538e-5 seconds)
    (48/54) benchmarking ("spmat", "splogical", 100)...
    done (took 3.415e-5 seconds)
    (49/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.7628e-5 seconds)
    (50/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.000708871 seconds)
    (51/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 3.7047e-5 seconds)
    (52/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 3.5388e-5 seconds)
    (53/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.8149e-5 seconds)
    (54/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 9.174e-6 seconds)
  done (took 2.382951152 seconds)
  (2/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "adjoint"...
    done (took 0.547487844 seconds)
    (2/2) benchmarking "non-adjoint"...
    done (took 0.448613998 seconds)
  done (took 1.950364368 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("IJV", 1000)...
    done (took 0.060203386 seconds)
    (2/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.11134326 seconds)
    (3/18) benchmarking ("Diagonal", 100)...
    done (took 0.158190152 seconds)
    (4/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.12835838 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.112100301 seconds)
    (6/18) benchmarking ("Diagonal", 1000)...
    done (took 4.4014e-5 seconds)
    (7/18) benchmarking ("Diagonal", 10)...
    done (took 7.738e-6 seconds)
    (8/18) benchmarking ("IJV", 10)...
    done (took 9.407e-6 seconds)
    (9/18) benchmarking ("IV", 100)...
    done (took 0.210755179 seconds)
    (10/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.4122e-5 seconds)
    (11/18) benchmarking ("IJV", 100)...
    done (took 1.7693e-5 seconds)
    (12/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.1913e-5 seconds)
    (13/18) benchmarking ("Bidiagonal", 10)...
    done (took 8.201e-6 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.8622e-5 seconds)
    (15/18) benchmarking ("Tridiagonal", 1000)...
    done (took 3.2158e-5 seconds)
    (16/18) benchmarking ("IV", 10)...
    done (took 7.049e-6 seconds)
    (17/18) benchmarking ("IV", 1000)...
    done (took 1.5808e-5 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.9285e-5 seconds)
  done (took 1.752735313 seconds)
  (4/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.466411483 seconds)
    (2/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.168907018 seconds)
    (3/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.310520181 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.07721538 seconds)
    (5/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.075802503 seconds)
    (6/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.129779264 seconds)
    (7/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000160058 seconds)
    (8/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.07405074 seconds)
    (9/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 8.0704e-5 seconds)
    (10/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.078643497 seconds)
    (11/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.072916293 seconds)
    (12/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 7.9841e-5 seconds)
    (13/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.03380832 seconds)
    (14/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 6.6041e-5 seconds)
    (15/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.027846942 seconds)
    (16/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002704734 seconds)
    (17/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.132170419 seconds)
    (18/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.002765995 seconds)
    (19/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.092971889 seconds)
    (20/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.076526494 seconds)
    (21/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 7.7332e-5 seconds)
    (22/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.033534175 seconds)
    (23/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.033162591 seconds)
    (24/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.069534876 seconds)
    (25/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 8.6363e-5 seconds)
    (26/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.003195852 seconds)
    (27/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.002920004 seconds)
    (28/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.077740973 seconds)
    (29/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.002333922 seconds)
    (30/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.036711284 seconds)
    (31/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000120355 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.001315099 seconds)
    (33/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.035694226 seconds)
    (34/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.031174585 seconds)
    (35/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.000737851 seconds)
    (36/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.031726025 seconds)
    (37/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.00316098 seconds)
    (38/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.002075316 seconds)
    (39/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.034954323 seconds)
    (40/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.003448775 seconds)
    (41/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.002193354 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.000113323 seconds)
    (43/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.032956391 seconds)
    (44/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000226154 seconds)
    (45/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.000135329 seconds)
    (46/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.000177885 seconds)
    (47/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 8.9794e-5 seconds)
    (48/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.9039e-5 seconds)
    (49/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.035117621 seconds)
    (50/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 5.2089e-5 seconds)
    (51/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 7.271e-5 seconds)
    (52/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 6.1351e-5 seconds)
    (53/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002411416 seconds)
    (54/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000128682 seconds)
    (55/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 3.7769e-5 seconds)
    (56/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.003719064 seconds)
    (57/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000109332 seconds)
    (58/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.002300957 seconds)
    (59/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.033089614 seconds)
    (60/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 6.2216e-5 seconds)
    (61/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000197825 seconds)
    (62/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.004641808 seconds)
    (63/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 6.2677e-5 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.000108956 seconds)
    (65/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.006188925 seconds)
    (66/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.001622252 seconds)
    (67/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 8.1019e-5 seconds)
    (68/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.003001394 seconds)
    (69/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.000575537 seconds)
    (70/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002403667 seconds)
    (71/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.00020614 seconds)
    (72/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000164074 seconds)
    (73/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.00245342 seconds)
    (74/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.012395505 seconds)
    (75/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.000174335 seconds)
    (76/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.00010714 seconds)
    (77/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.002972859 seconds)
    (78/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.031698874 seconds)
    (79/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.00010532 seconds)
    (80/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 7.609e-5 seconds)
    (81/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.041540833 seconds)
    (82/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000220907 seconds)
    (83/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.003543927 seconds)
    (84/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.012671752 seconds)
    (85/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.002226885 seconds)
    (86/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000212746 seconds)
    (87/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.006219565 seconds)
    (88/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.009104656 seconds)
    (89/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.000202807 seconds)
    (90/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000105586 seconds)
    (91/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000193093 seconds)
    (92/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.007794693 seconds)
    (93/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000110156 seconds)
    (94/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.016545905 seconds)
    (95/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.002530258 seconds)
    (96/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 6.472e-5 seconds)
    (97/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000221694 seconds)
    (98/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.0013778 seconds)
    (99/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 6.5632e-5 seconds)
    (100/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.004341567 seconds)
    (101/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.001406591 seconds)
    (102/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.008893131 seconds)
    (103/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.001331788 seconds)
    (104/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.706e-5 seconds)
    (105/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.001988887 seconds)
    (106/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.00014014 seconds)
    (107/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000121969 seconds)
    (108/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.007667343 seconds)
    (109/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.002333013 seconds)
    (110/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 7.9811e-5 seconds)
    (111/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.048651884 seconds)
    (112/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000155752 seconds)
    (113/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 7.2594e-5 seconds)
    (114/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000223686 seconds)
    (115/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.003081608 seconds)
    (116/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.008352369 seconds)
    (117/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.008092046 seconds)
    (118/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.001413973 seconds)
    (119/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000147527 seconds)
    (120/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.00828983 seconds)
    (121/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.002013956 seconds)
    (122/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.01107972 seconds)
    (123/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000118312 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.001432683 seconds)
    (125/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 5.2463e-5 seconds)
    (126/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000115656 seconds)
    (127/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.000180909 seconds)
    (128/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.001583642 seconds)
    (129/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.007472193 seconds)
    (130/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.005018234 seconds)
    (131/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000171161 seconds)
    (132/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000229365 seconds)
    (133/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.013313159 seconds)
    (134/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.002341224 seconds)
    (135/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.000518094 seconds)
    (136/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.008087249 seconds)
    (137/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.00012185 seconds)
    (138/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.012558277 seconds)
    (139/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.008938915 seconds)
    (140/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000268794 seconds)
    (141/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.000793923 seconds)
    (142/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000118569 seconds)
    (143/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.0016283 seconds)
    (144/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.002545486 seconds)
    (145/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 6.9638e-5 seconds)
    (146/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 6.5771e-5 seconds)
    (147/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.000183495 seconds)
    (148/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.0115283 seconds)
    (149/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 8.0576e-5 seconds)
    (150/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.019393086 seconds)
    (151/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.000151905 seconds)
    (152/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 5.299e-5 seconds)
    (153/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.002799725 seconds)
    (154/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 4.9345e-5 seconds)
    (155/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.00019825 seconds)
    (156/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.001718997 seconds)
    (157/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.00014824 seconds)
    (158/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 5.3188e-5 seconds)
    (159/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 4.9068e-5 seconds)
    (160/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.003075866 seconds)
    (161/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 5.1289e-5 seconds)
    (162/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.0178404 seconds)
    (163/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 8.0118e-5 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 3.9267e-5 seconds)
    (165/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.001148714 seconds)
    (166/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.004806752 seconds)
    (167/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.000705188 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000143896 seconds)
    (169/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 5.2629e-5 seconds)
    (170/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.000193435 seconds)
    (171/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.000107422 seconds)
    (172/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.00053882 seconds)
    (173/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 5.4204e-5 seconds)
    (174/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.001757067 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.005032609 seconds)
    (176/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.000174701 seconds)
    (177/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.008711919 seconds)
    (178/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.003424002 seconds)
    (179/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.002101379 seconds)
    (180/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.00090191 seconds)
    (181/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 6.9619e-5 seconds)
    (182/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.001712232 seconds)
    (183/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 7.1433e-5 seconds)
    (184/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000213261 seconds)
    (185/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000134481 seconds)
    (186/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.002606817 seconds)
    (187/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000133981 seconds)
    (188/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 5.6227e-5 seconds)
    (189/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.00166266 seconds)
    (190/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.002803042 seconds)
    (191/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.006990826 seconds)
    (192/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000122345 seconds)
    (193/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 5.6911e-5 seconds)
    (194/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.002738852 seconds)
    (195/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.001406676 seconds)
    (196/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000128667 seconds)
    (197/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000181115 seconds)
    (198/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000138607 seconds)
    (199/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.002029268 seconds)
    (200/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.000474844 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.01437959 seconds)
    (202/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.003615824 seconds)
    (203/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.000742906 seconds)
    (204/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 7.0791e-5 seconds)
    (205/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002162919 seconds)
    (206/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.009122981 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 7.0819e-5 seconds)
    (208/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000119248 seconds)
    (209/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.002750728 seconds)
    (210/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.002847766 seconds)
    (211/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000135999 seconds)
    (212/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000175173 seconds)
    (213/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 3.9398e-5 seconds)
    (214/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.018206668 seconds)
    (215/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000121905 seconds)
    (216/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000219574 seconds)
    (217/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.000921974 seconds)
    (218/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 3.9628e-5 seconds)
    (219/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.007220969 seconds)
    (220/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.001261406 seconds)
    (221/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000144026 seconds)
    (222/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000172226 seconds)
    (223/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 3.6172e-5 seconds)
    (224/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.00140524 seconds)
  done (took 3.837803959 seconds)
  (5/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.059569652 seconds)
    (2/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.135275975 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.242053235 seconds)
    (4/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.032259072 seconds)
    (5/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.000195844 seconds)
    (6/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.145446381 seconds)
    (7/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.0001804 seconds)
    (8/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.276961352 seconds)
    (9/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.000127247 seconds)
    (10/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 1.031949399 seconds)
    (11/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.000103148 seconds)
    (12/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.042302549 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.000229095 seconds)
    (14/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.469960025 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.278658175 seconds)
    (16/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.229953984 seconds)
  done (took 3.903157248 seconds)
  (6/7) benchmarking "sparse solves"...
    (1/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 1.856679055 seconds)
    (2/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.900155245 seconds)
    (3/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.262621023 seconds)
    (4/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.412296317 seconds)
    (5/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.134527972 seconds)
    (6/10) benchmarking "square system (default), vector rhs"...
    done (took 0.44626996 seconds)
    (7/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.132923459 seconds)
    (8/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.108715058 seconds)
    (9/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.112806102 seconds)
    (10/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.102026711 seconds)
  done (took 5.446065205 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.059738148 seconds)
    (2/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.177013476 seconds)
  done (took 1.214471408 seconds)
done (took 21.432675312 seconds)
(8/22) benchmarking "dates"...
  (1/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.01956912 seconds)
    (2/7) benchmarking "month"...
    done (took 0.019043648 seconds)
    (3/7) benchmarking "year"...
    done (took 0.019394552 seconds)
    (4/7) benchmarking "millisecond"...
    done (took 0.020289588 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.020878148 seconds)
    (6/7) benchmarking "minute"...
    done (took 0.021469875 seconds)
    (7/7) benchmarking "second"...
    done (took 0.021678536 seconds)
  done (took 1.113306365 seconds)
  (2/7) benchmarking "parse"...
    (1/9) benchmarking "DateTime"...
    done (took 0.021584933 seconds)
    (2/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.473366583 seconds)
    (3/9) benchmarking "Date"...
    done (took 0.02161375 seconds)
    (4/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.026115675 seconds)
    (5/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.285822974 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.193738327 seconds)
    (7/9) benchmarking ("Date", "DateFormat")...
    done (took 0.187689344 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.026651034 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.026980742 seconds)
  done (took 2.24176251 seconds)
  (3/7) benchmarking "query"...
    (1/18) benchmarking ("isleapyear", "Date")...
    done (took 0.0206857 seconds)
    (2/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.021591738 seconds)
    (3/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.021329029 seconds)
    (4/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.022996189 seconds)
    (5/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.040625554 seconds)
    (6/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.020389121 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.022771685 seconds)
    (8/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.020218322 seconds)
    (9/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.021344915 seconds)
    (10/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.02766183 seconds)
    (11/18) benchmarking ("dayofyear", "Date")...
    done (took 0.022190385 seconds)
    (12/18) benchmarking ("dayofweek", "Date")...
    done (took 0.020979766 seconds)
    (13/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.031366957 seconds)
    (14/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.025983482 seconds)
    (15/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.024804058 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.022038141 seconds)
    (17/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.022023085 seconds)
    (18/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.023059258 seconds)
  done (took 1.421494816 seconds)
  (4/7) benchmarking "construction"...
    (1/2) benchmarking "DateTime"...
    done (took 0.042134286 seconds)
    (2/2) benchmarking "Date"...
    done (took 0.022478039 seconds)
  done (took 1.046286922 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.019853627 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.020792176 seconds)
  done (took 1.021447542 seconds)
  (6/7) benchmarking "string"...
    (1/2) benchmarking "DateTime"...
    done (took 0.019619015 seconds)
    (2/2) benchmarking "Date"...
    done (took 0.152214829 seconds)
  done (took 1.153812269 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("DateTime", "Month")...
    done (took 0.03686693 seconds)
    (2/10) benchmarking ("DateTime", "Hour")...
    done (took 0.020880769 seconds)
    (3/10) benchmarking ("DateTime", "Minute")...
    done (took 0.021025756 seconds)
    (4/10) benchmarking ("DateTime", "Second")...
    done (took 0.020766163 seconds)
    (5/10) benchmarking ("Date", "Year")...
    done (took 0.031434591 seconds)
    (6/10) benchmarking ("DateTime", "Year")...
    done (took 0.034198853 seconds)
    (7/10) benchmarking ("Date", "Month")...
    done (took 0.033315837 seconds)
    (8/10) benchmarking ("Date", "Day")...
    done (took 0.020692349 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.020934993 seconds)
    (10/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.021116356 seconds)
  done (took 1.246642184 seconds)
done (took 10.227854758 seconds)
(9/22) benchmarking "alloc"...
  (1/4) benchmarking "structs"...
  done (took 0.060782096 seconds)
  (2/4) benchmarking "strings"...
  done (took 0.092478669 seconds)
  (3/4) benchmarking "grow_array"...
  done (took 0.030326117 seconds)
  (4/4) benchmarking "arrays"...
  done (took 0.053276847 seconds)
done (took 1.218563847 seconds)
(10/22) benchmarking "find"...
  (1/3) benchmarking "findnext"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.042298021 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.040947615 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.041171024 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.029061077 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.05485193 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 0.039902019 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.042548701 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 1.9849e-5 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.04289575 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.057376327 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.6891e-5 seconds)
  done (took 1.36538865 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.041148399 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.041163921 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.041092424 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.031280529 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.052854996 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 0.028716876 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.042363668 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 2.1186e-5 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.042560989 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.054145401 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 3.3248e-5 seconds)
  done (took 1.363058132 seconds)
  (3/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.088009656 seconds)
    (2/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.085168313 seconds)
    (3/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083766997 seconds)
    (4/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.091599555 seconds)
    (5/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.087364726 seconds)
    (6/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.02735364 seconds)
    (7/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.9429e-5 seconds)
    (8/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.083122098 seconds)
    (9/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082948553 seconds)
    (10/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.4332e-5 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.088576838 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.085216877 seconds)
    (13/41) benchmarking ("BitVector", "10-90")...
    done (took 0.019234582 seconds)
    (14/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.087331451 seconds)
    (15/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.4651e-5 seconds)
    (16/41) benchmarking ("BitVector", "50-50")...
    done (took 1.1366e-5 seconds)
    (17/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.029e-5 seconds)
    (18/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 7.431e-6 seconds)
    (19/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.088947927 seconds)
    (20/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.085496617 seconds)
    (21/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 3.1626e-5 seconds)
    (22/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.4995e-5 seconds)
    (23/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.1339e-5 seconds)
    (24/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.5444e-5 seconds)
    (25/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 7.817e-6 seconds)
    (26/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 6.859e-6 seconds)
    (27/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 7.075e-6 seconds)
    (28/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.415e-5 seconds)
    (29/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 8.817e-6 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.085472604 seconds)
    (31/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.085087019 seconds)
    (32/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 3.0517e-5 seconds)
    (33/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.85e-5 seconds)
    (34/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.4985e-5 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 9.406e-6 seconds)
    (36/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 7.69e-6 seconds)
    (37/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.3462e-5 seconds)
    (38/41) benchmarking ("BitVector", "90-10")...
    done (took 1.1293e-5 seconds)
    (39/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.0851e-5 seconds)
    (40/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.0667e-5 seconds)
    (41/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.1087e-5 seconds)
  done (took 2.24101508 seconds)
done (took 5.953033732 seconds)
(11/22) benchmarking "io"...
  (1/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.023746873 seconds)
    (2/2) benchmarking "read"...
    done (took 0.032507963 seconds)
  done (took 1.038900488 seconds)
  (2/4) benchmarking "skipchars"...
  done (took 0.239266629 seconds)
  (3/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.870453927 seconds)
    (2/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.744369354 seconds)
    (3/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.903889381 seconds)
  done (took 4.515244452 seconds)
  (4/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.902291561 seconds)
    (2/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.108975226 seconds)
    (3/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.052142225 seconds)
    (4/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.0348291 seconds)
  done (took 2.121979299 seconds)
done (took 8.910795288 seconds)
(12/22) benchmarking "tuple"...
  (1/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.069848785 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.022688983 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.021052372 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.021654934 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.020875529 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.021281284 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.021053246 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.022299832 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.020790808 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.023297484 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.021812066 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.022105697 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.020509632 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.022536155 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.023107602 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.02038318 seconds)
  done (took 1.418592233 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.136382827 seconds)
    (2/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.229440857 seconds)
    (3/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.299894361 seconds)
    (4/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.038755233 seconds)
    (5/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.081342804 seconds)
    (6/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.028204206 seconds)
    (7/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.140586955 seconds)
    (8/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.022584911 seconds)
  done (took 3.975252956 seconds)
  (3/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.022993694 seconds)
    (2/24) benchmarking ("minimum", "(4,)")...
    done (took 0.021586037 seconds)
    (3/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.024330062 seconds)
    (4/24) benchmarking ("minimum", "(2,)")...
    done (took 0.020053096 seconds)
    (5/24) benchmarking ("minimum", "(16,)")...
    done (took 0.022224982 seconds)
    (6/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.023530545 seconds)
    (7/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.021954366 seconds)
    (8/24) benchmarking ("sum", "(16,)")...
    done (took 0.024172709 seconds)
    (9/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.020712396 seconds)
    (10/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.022164229 seconds)
    (11/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.022703151 seconds)
    (12/24) benchmarking ("minimum", "(8,)")...
    done (took 0.022554186 seconds)
    (13/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.024218362 seconds)
    (14/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.023410003 seconds)
    (15/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.022778034 seconds)
    (16/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.025922523 seconds)
    (17/24) benchmarking ("sum", "(2,)")...
    done (took 0.023360905 seconds)
    (18/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.023505619 seconds)
    (19/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.027451044 seconds)
    (20/24) benchmarking ("sum", "(4,)")...
    done (took 0.023628366 seconds)
    (21/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.024109905 seconds)
    (22/24) benchmarking ("sum", "(8,)")...
    done (took 0.023744814 seconds)
    (23/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.022451932 seconds)
    (24/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.02720444 seconds)
  done (took 1.565722691 seconds)
  (4/4) benchmarking "misc"...
    (1/2) benchmarking "11899"...
    done (took 0.02140165 seconds)
    (2/2) benchmarking "longtuple"...
    done (took 0.044980502 seconds)
  done (took 1.06521925 seconds)
done (took 9.022080639 seconds)
(13/22) benchmarking "string"...
  (1/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.023455686 seconds)
    (2/2) benchmarking "String"...
    done (took 0.023441077 seconds)
  done (took 1.042244631 seconds)
  (2/7) benchmarking "join"...
  done (took 0.248967934 seconds)
  (3/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "equal"...
    done (took 0.040826518 seconds)
    (2/4) benchmarking "different"...
    done (took 9.164e-6 seconds)
    (3/4) benchmarking "identical"...
    done (took 0.021527612 seconds)
    (4/4) benchmarking "different length"...
    done (took 2.0014e-5 seconds)
  done (took 1.083001598 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020784904 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "backtracking"...
    done (took 0.135469053 seconds)
    (2/7) benchmarking "target length 50000"...
    done (took 0.000209242 seconds)
    (3/7) benchmarking "target length 2"...
    done (took 3.963e-6 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.000926734 seconds)
    (5/7) benchmarking "target length 1000"...
    done (took 8.238e-6 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 4.052e-6 seconds)
    (7/7) benchmarking "no backtracking"...
    done (took 0.000575006 seconds)
  done (took 1.137857214 seconds)
  (6/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.02274249 seconds)
    (2/3) benchmarking "different"...
    done (took 8.013e-6 seconds)
    (3/3) benchmarking "different length"...
    done (took 4.566e-6 seconds)
  done (took 1.024512732 seconds)
  (7/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.037380943 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.024592656 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.021192676 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.021067188 seconds)
  done (took 1.104036908 seconds)
done (took 6.666218296 seconds)
(14/22) benchmarking "random"...
  (1/5) benchmarking "ranges"...
    (1/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.022417277 seconds)
    (2/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.020809366 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.039384131 seconds)
    (4/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.024270318 seconds)
    (5/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.021211067 seconds)
    (6/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.023337111 seconds)
    (7/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.023236458 seconds)
    (8/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.020421534 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.038031538 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.060514287 seconds)
    (11/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 3.4773e-5 seconds)
    (12/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.0347866 seconds)
    (13/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.021139932 seconds)
    (14/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.034353783 seconds)
    (15/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.022618046 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.024309716 seconds)
    (17/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.021488974 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.798e-5 seconds)
    (19/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.0210917 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.3278e-5 seconds)
    (21/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.024198675 seconds)
    (22/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.021515511 seconds)
    (23/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.022773627 seconds)
    (24/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.6782e-5 seconds)
    (25/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.3277e-5 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.026864662 seconds)
    (27/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.3877e-5 seconds)
    (28/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.4222e-5 seconds)
    (29/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.4727e-5 seconds)
    (30/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.1466e-5 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.3533e-5 seconds)
    (32/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.023107324 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.6092e-5 seconds)
    (34/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.1407e-5 seconds)
    (35/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.8932e-5 seconds)
    (36/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 8.881e-6 seconds)
    (37/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 7.704e-6 seconds)
    (38/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 6.69e-6 seconds)
    (39/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.024366377 seconds)
    (40/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.6119e-5 seconds)
    (41/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 1.8407e-5 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.024392151 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 4.6123e-5 seconds)
    (44/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.2319e-5 seconds)
    (45/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.7249e-5 seconds)
    (46/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 1.03e-5 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.0166e-5 seconds)
    (48/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 7.302e-6 seconds)
    (49/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 1.1658e-5 seconds)
    (50/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.0558e-5 seconds)
    (51/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 1.2584e-5 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 7.214e-6 seconds)
    (53/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 1.1748e-5 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.021525095 seconds)
    (55/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.024381811 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.0394e-5 seconds)
    (57/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.4949e-5 seconds)
    (58/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.8833e-5 seconds)
    (59/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.2528e-5 seconds)
    (60/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.0667e-5 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.025898059 seconds)
    (62/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.021537366 seconds)
    (63/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 1.8527e-5 seconds)
    (64/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.0559e-5 seconds)
    (65/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.5785e-5 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 9.935e-6 seconds)
    (67/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.5988e-5 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.037e-5 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.0954e-5 seconds)
    (70/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.035362746 seconds)
    (71/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.035709458 seconds)
    (72/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.6122e-5 seconds)
  done (took 1.830373429 seconds)
  (2/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.038790298 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.044458052 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.024188505 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.023709261 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.023896145 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.019370775 seconds)
  done (took 1.18321385 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.021878021 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.021093236 seconds)
    (3/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.024930951 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.034335019 seconds)
    (5/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.021632183 seconds)
    (6/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.040031237 seconds)
    (7/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.021169191 seconds)
    (8/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.020983005 seconds)
    (9/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.024463511 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.025534051 seconds)
    (11/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.020657428 seconds)
    (12/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.02141842 seconds)
    (13/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020886207 seconds)
    (14/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.031485994 seconds)
    (15/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.024851573 seconds)
    (16/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.021838758 seconds)
    (17/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.021902829 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.024171908 seconds)
    (19/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.050679308 seconds)
    (20/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.023967804 seconds)
    (21/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.0214891 seconds)
    (22/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.024142133 seconds)
    (23/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.033222795 seconds)
    (24/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.023909093 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.02194637 seconds)
    (26/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.03850162 seconds)
    (27/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.021311449 seconds)
    (28/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.023768396 seconds)
    (29/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020668492 seconds)
    (30/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.029381215 seconds)
    (31/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.035000093 seconds)
    (32/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.024059203 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.024946397 seconds)
    (34/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.028070088 seconds)
    (35/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.02286707 seconds)
    (36/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.031098499 seconds)
    (37/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.036968097 seconds)
    (38/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.032905567 seconds)
    (39/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.047552346 seconds)
    (40/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.031484599 seconds)
    (41/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.021129412 seconds)
    (42/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.05054335 seconds)
    (43/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.063572068 seconds)
    (44/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.039353293 seconds)
    (45/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.033923325 seconds)
    (46/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.020350357 seconds)
    (47/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020248747 seconds)
    (48/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.021185589 seconds)
    (49/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.024293377 seconds)
    (50/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.021394939 seconds)
    (51/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.02041762 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.023654697 seconds)
    (53/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.032827358 seconds)
    (54/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.027080676 seconds)
    (55/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.019147207 seconds)
    (56/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.029965411 seconds)
    (57/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.022534077 seconds)
    (58/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.030158914 seconds)
    (59/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.022532418 seconds)
    (60/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.021106649 seconds)
    (61/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.021005642 seconds)
    (62/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.021736577 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.021586289 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.021769477 seconds)
    (65/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.025131616 seconds)
    (66/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.029210345 seconds)
    (67/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.032672335 seconds)
    (68/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.022975909 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.021633243 seconds)
    (70/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.023682637 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.020759721 seconds)
    (72/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.031731209 seconds)
    (73/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.020767308 seconds)
    (74/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.0243865 seconds)
    (75/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.021393439 seconds)
    (76/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.023234191 seconds)
    (77/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.033772721 seconds)
    (78/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.021179804 seconds)
    (79/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.02450006 seconds)
    (80/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.021410006 seconds)
    (81/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.032521274 seconds)
    (82/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.039670774 seconds)
    (83/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.020933738 seconds)
    (84/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.023544423 seconds)
    (85/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.028601873 seconds)
    (86/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.019371138 seconds)
    (87/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.028558799 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.035621459 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.022210787 seconds)
    (90/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.025771407 seconds)
    (91/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.021506821 seconds)
    (92/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.020398041 seconds)
    (93/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.022735048 seconds)
    (94/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.049648937 seconds)
    (95/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.034531316 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.033944596 seconds)
    (97/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.030350731 seconds)
  done (took 3.637938746 seconds)
  (4/5) benchmarking "sequences"...
    (1/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.051414782 seconds)
    (2/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.034917817 seconds)
    (3/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.034624043 seconds)
    (4/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.032411198 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.02071277 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.021822959 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.021714065 seconds)
  done (took 1.235015936 seconds)
  (5/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.039028299 seconds)
    (2/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.053275426 seconds)
    (3/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.036596501 seconds)
    (4/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.051350934 seconds)
    (5/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.048586175 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.045492221 seconds)
    (7/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.051088607 seconds)
    (8/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.053180812 seconds)
    (9/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.037670317 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 3.3204e-5 seconds)
    (11/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.040218043 seconds)
    (12/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.039318192 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.038159722 seconds)
    (14/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.026146073 seconds)
    (15/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.002579293 seconds)
    (16/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.050335137 seconds)
    (17/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.035785992 seconds)
    (18/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.039428397 seconds)
    (19/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 3.1849e-5 seconds)
    (20/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.041890475 seconds)
    (21/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.04360372 seconds)
    (22/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.049716786 seconds)
    (23/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.025832664 seconds)
    (24/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.046301516 seconds)
    (25/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.026565493 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.041516577 seconds)
    (27/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.0985e-5 seconds)
    (28/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.031591762 seconds)
    (29/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.022900887 seconds)
    (30/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 4.7847e-5 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.001100087 seconds)
    (32/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.029303173 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 3.1021e-5 seconds)
    (34/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 3.1176e-5 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.026390083 seconds)
    (36/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.035620848 seconds)
    (37/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.026082668 seconds)
    (38/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.0404e-5 seconds)
    (39/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.029908972 seconds)
    (40/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.026322184 seconds)
    (41/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.023718149 seconds)
    (42/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.035317456 seconds)
    (43/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 4.3042e-5 seconds)
    (44/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.1853e-5 seconds)
    (45/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 6.7156e-5 seconds)
    (46/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.036259157 seconds)
    (47/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.6483e-5 seconds)
    (48/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 7.9018e-5 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.005568398 seconds)
    (50/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 9.637e-6 seconds)
    (51/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.0504e-5 seconds)
    (52/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.001087985 seconds)
    (53/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 5.096e-5 seconds)
    (54/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 8.425e-6 seconds)
    (55/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.6485e-5 seconds)
    (56/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 7.429e-6 seconds)
    (57/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.3449e-5 seconds)
    (58/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.024233042 seconds)
    (59/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.9407e-5 seconds)
    (60/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.001115755 seconds)
    (61/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.2296e-5 seconds)
    (62/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 1.0709e-5 seconds)
    (63/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 1.297e-5 seconds)
    (64/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.026390773 seconds)
    (65/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 7.599e-5 seconds)
    (66/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 1.2105e-5 seconds)
  done (took 2.36097244 seconds)
done (took 11.250965591 seconds)
(15/22) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.037485065 seconds)
  (2/8) benchmarking "mandel"...
  done (took 0.101188007 seconds)
  (3/8) benchmarking "pisum"...
  done (took 0.059873393 seconds)
  (4/8) benchmarking "randmatmul"...
  done (took 0.125421661 seconds)
  (5/8) benchmarking "printfd"...
  done (took 0.139976384 seconds)
  (6/8) benchmarking "randmatstat"...
  done (took 0.364062187 seconds)
  (7/8) benchmarking "fib"...
  done (took 0.023306403 seconds)
  (8/8) benchmarking "parseint"...
  done (took 0.038183191 seconds)
done (took 1.907623309 seconds)
(16/22) benchmarking "broadcast"...
  (1/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "scal_tup")...
    done (took 0.045801699 seconds)
    (2/9) benchmarking (5, "scal_tup")...
    done (took 0.026775481 seconds)
    (3/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.032907792 seconds)
    (4/9) benchmarking (10, "tup_tup")...
    done (took 0.025542117 seconds)
    (5/9) benchmarking (5, "tup_tup")...
    done (took 0.020778925 seconds)
    (6/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.029305642 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.100272972 seconds)
    (8/9) benchmarking (3, "scal_tup")...
    done (took 0.023743674 seconds)
    (9/9) benchmarking (3, "tup_tup")...
    done (took 0.020486729 seconds)
  done (took 1.373766505 seconds)
  (2/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.197086975 seconds)
    (2/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.336445903 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.275049977 seconds)
  done (took 1.834468337 seconds)
  (3/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 5)...
    done (took 0.037720222 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 0.062307563 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 0.03237275 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 1.3996e-5 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 6.314e-6 seconds)
    (6/6) benchmarking ("tuple", 10)...
    done (took 0.04674174 seconds)
  done (took 1.210138338 seconds)
  (4/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.234015003 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.072167801 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.115879935 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.097408416 seconds)
  done (took 1.552032463 seconds)
  (5/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 2)...
    done (took 0.169712125 seconds)
    (2/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.165989266 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.288402281 seconds)
    (4/4) benchmarking ("(10000000,)", 1)...
    done (took 0.106846419 seconds)
  done (took 1.76678358 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.061552976 seconds)
done (took 8.829088768 seconds)
(17/22) benchmarking "parallel"...
done (took 1.040434336 seconds)
(18/22) benchmarking "linalg"...
  (1/4) benchmarking "blas"...
    (1/36) benchmarking "gemv"...
    done (took 0.02539116 seconds)
    (2/36) benchmarking "nrm2"...
    done (took 0.0230609 seconds)
    (3/36) benchmarking "trsv"...
    done (took 0.040262345 seconds)
    (4/36) benchmarking "gbmv"...
    done (took 0.035974152 seconds)
    (5/36) benchmarking "asum"...
    done (took 0.022542542 seconds)
    (6/36) benchmarking "trsm"...
    done (took 0.106437407 seconds)
    (7/36) benchmarking "symv!"...
    done (took 0.044638441 seconds)
    (8/36) benchmarking "symm!"...
    done (took 0.145703559 seconds)
    (9/36) benchmarking "trmv"...
    done (took 0.040259678 seconds)
    (10/36) benchmarking "dot"...
    done (took 0.022718972 seconds)
    (11/36) benchmarking "herk"...
    done (took 0.24253019 seconds)
    (12/36) benchmarking "dotu"...
    done (took 0.024952412 seconds)
    (13/36) benchmarking "scal"...
    done (took 0.029552238 seconds)
    (14/36) benchmarking "sbmv"...
    done (took 0.035477295 seconds)
    (15/36) benchmarking "dotc"...
    done (took 0.023308529 seconds)
    (16/36) benchmarking "gemm!"...
    done (took 0.120954198 seconds)
    (17/36) benchmarking "gemv!"...
    done (took 0.02826799 seconds)
    (18/36) benchmarking "symm"...
    done (took 0.11848559 seconds)
    (19/36) benchmarking "ger!"...
    done (took 0.041325892 seconds)
    (20/36) benchmarking "trsm!"...
    done (took 0.088771427 seconds)
    (21/36) benchmarking "gemm"...
    done (took 0.119475597 seconds)
    (22/36) benchmarking "trmm!"...
    done (took 0.082828833 seconds)
    (23/36) benchmarking "herk!"...
    done (took 0.227949229 seconds)
    (24/36) benchmarking "scal!"...
    done (took 0.030457971 seconds)
    (25/36) benchmarking "syrk"...
    done (took 0.089123388 seconds)
    (26/36) benchmarking "blascopy!"...
    done (took 0.024095542 seconds)
    (27/36) benchmarking "gbmv!"...
    done (took 0.029108979 seconds)
    (28/36) benchmarking "trmm"...
    done (took 0.080476471 seconds)
    (29/36) benchmarking "syrk!"...
    done (took 0.091117981 seconds)
    (30/36) benchmarking "her!"...
    done (took 0.04619784 seconds)
    (31/36) benchmarking "syr!"...
    done (took 0.042960712 seconds)
    (32/36) benchmarking "sbmv!"...
    done (took 0.028821307 seconds)
    (33/36) benchmarking "trsv!"...
    done (took 0.027894246 seconds)
    (34/36) benchmarking "trmv!"...
    done (took 0.027632742 seconds)
    (35/36) benchmarking "symv"...
    done (took 0.024469179 seconds)
    (36/36) benchmarking "axpy!"...
    done (took 0.037894966 seconds)
  done (took 3.300111111 seconds)
  (2/4) benchmarking "factorization"...
    (1/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 1.066905756 seconds)
    (2/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.255241872 seconds)
    (3/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.092975196 seconds)
    (4/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.150249871 seconds)
    (5/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.057184752 seconds)
    (6/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.039969849 seconds)
    (7/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.186771555 seconds)
    (8/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.146105814 seconds)
    (9/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.253901795 seconds)
    (10/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.004430965 seconds)
    (11/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.000239249 seconds)
    (12/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.169089303 seconds)
    (13/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.003766537 seconds)
    (14/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.130595365 seconds)
    (15/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.145026263 seconds)
    (16/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 1.282620721 seconds)
    (17/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.175108325 seconds)
    (18/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.049089621 seconds)
    (19/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.209279324 seconds)
    (20/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.04051226 seconds)
    (21/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 2.453648622 seconds)
    (22/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.02371176 seconds)
    (23/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 2.648810045 seconds)
    (24/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.6898e-5 seconds)
    (25/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.003824156 seconds)
    (26/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 3.341e-5 seconds)
    (27/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.054090486 seconds)
    (28/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.293005986 seconds)
    (29/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.227561072 seconds)
    (30/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.000593471 seconds)
    (31/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 1.29809009 seconds)
    (32/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 1.330115262 seconds)
  done (took 13.829427846 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.565286912 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.18138701 seconds)
    (2/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.095351477 seconds)
    (3/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.021501762 seconds)
    (4/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.115306827 seconds)
    (5/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.150571682 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.02125228 seconds)
    (7/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.093130271 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.085716215 seconds)
    (9/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.044437939 seconds)
    (10/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.202147485 seconds)
    (11/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 3.1901e-5 seconds)
    (12/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.07341562 seconds)
    (13/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.244616374 seconds)
    (14/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.033582205 seconds)
    (15/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.108031339 seconds)
    (16/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.217811688 seconds)
    (17/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.057718502 seconds)
    (18/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 3.159026229 seconds)
    (19/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.119821185 seconds)
    (20/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.087721676 seconds)
    (21/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.127665384 seconds)
    (22/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.051083789 seconds)
    (23/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.007883092 seconds)
    (24/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.066786773 seconds)
    (25/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.060102473 seconds)
    (26/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.034031192 seconds)
    (27/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.064114986 seconds)
    (28/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 8.5823e-5 seconds)
    (29/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.796416734 seconds)
    (30/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.042642464 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.114662055 seconds)
    (32/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.189435086 seconds)
    (33/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.054079904 seconds)
    (34/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.116934342 seconds)
    (35/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.025905369 seconds)
    (36/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.1933e-5 seconds)
    (37/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.066512647 seconds)
    (38/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.026419083 seconds)
    (39/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.042032335 seconds)
    (40/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.000617183 seconds)
    (41/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.9576e-5 seconds)
    (42/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.02071301 seconds)
    (43/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.019760826 seconds)
    (44/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 3.2363e-5 seconds)
    (45/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.030359261 seconds)
    (46/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.129881325 seconds)
    (47/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.10107284 seconds)
    (48/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 3.2136e-5 seconds)
    (49/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.090196334 seconds)
    (50/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 0.027383284 seconds)
    (51/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.020101861 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.01207663 seconds)
    (53/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.062595686 seconds)
    (54/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 8.5589e-5 seconds)
    (55/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.067839813 seconds)
    (56/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.811063011 seconds)
    (57/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.08914724 seconds)
    (58/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.026398338 seconds)
    (59/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.049367693 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.165774866 seconds)
    (61/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 4.030794136 seconds)
    (62/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.3916e-5 seconds)
    (63/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.017784171 seconds)
    (64/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 1.203499606 seconds)
    (65/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.065044177 seconds)
    (66/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.069191524 seconds)
    (67/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 3.9747e-5 seconds)
    (68/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.06368183 seconds)
    (69/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.0612e-5 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.05429305 seconds)
    (71/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 7.3198e-5 seconds)
    (72/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.02004231 seconds)
    (73/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.111490512 seconds)
    (74/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.065469478 seconds)
    (75/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 2.2771e-5 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.001620421 seconds)
    (77/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.093047544 seconds)
    (78/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.025974636 seconds)
    (79/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.00177261 seconds)
    (80/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.1588e-5 seconds)
    (81/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.8024e-5 seconds)
    (82/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.1994e-5 seconds)
    (83/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.116561214 seconds)
    (84/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.52035915 seconds)
    (85/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.001558882 seconds)
    (86/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.9334e-5 seconds)
    (87/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 7.1488e-5 seconds)
    (88/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.001331554 seconds)
    (89/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.058485273 seconds)
    (90/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.00013283 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.8223e-5 seconds)
    (92/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.020859454 seconds)
    (93/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.0022e-5 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.4556e-5 seconds)
    (95/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.107856178 seconds)
    (96/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.9837e-5 seconds)
    (97/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.6022e-5 seconds)
    (98/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.012911291 seconds)
    (99/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 7.8103e-5 seconds)
    (100/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.001532481 seconds)
    (101/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.000761963 seconds)
    (102/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.00074922 seconds)
    (103/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.18063699 seconds)
    (104/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.7421e-5 seconds)
    (105/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 6.2601e-5 seconds)
    (106/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 3.668731676 seconds)
    (107/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 4.1195e-5 seconds)
    (108/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.001492645 seconds)
    (109/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.8337e-5 seconds)
    (110/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.3317e-5 seconds)
    (111/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 5.7315e-5 seconds)
    (112/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.007323095 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.001136131 seconds)
    (114/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 3.603835629 seconds)
    (115/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.001568188 seconds)
    (116/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.9833e-5 seconds)
    (117/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.007600158 seconds)
    (118/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.4853e-5 seconds)
  done (took 24.959549724 seconds)
done (took 43.683740245 seconds)
(19/22) benchmarking "collection"...
  (1/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.099647347 seconds)
    (2/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.059709369 seconds)
    (3/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.027126578 seconds)
    (4/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.048485743 seconds)
    (5/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.037180149 seconds)
    (6/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.147439097 seconds)
    (7/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.099023249 seconds)
    (8/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.035908662 seconds)
    (9/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.019350347 seconds)
    (10/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.032115209 seconds)
    (11/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.044585989 seconds)
    (12/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.0361976 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.020585574 seconds)
    (14/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.053416654 seconds)
    (15/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.041444609 seconds)
    (16/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.028489183 seconds)
    (17/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.032042109 seconds)
    (18/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.03106164 seconds)
    (19/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.020734991 seconds)
    (20/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.02575523 seconds)
    (21/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.026150049 seconds)
    (22/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.022607299 seconds)
    (23/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.019750664 seconds)
    (24/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.020235829 seconds)
    (25/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.031900512 seconds)
    (26/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.022722808 seconds)
    (27/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.026909932 seconds)
    (28/117) benchmarking ("Set", "Int", "union")...
    done (took 0.019935085 seconds)
    (29/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.026115433 seconds)
    (30/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.026871509 seconds)
    (31/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.029589786 seconds)
    (32/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.030540641 seconds)
    (33/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.019106474 seconds)
    (34/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.040523821 seconds)
    (35/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.051378124 seconds)
    (36/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.020156433 seconds)
    (37/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.026608678 seconds)
    (38/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.6683e-5 seconds)
    (39/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.032390639 seconds)
    (40/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.070286225 seconds)
    (41/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.255e-5 seconds)
    (42/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.036181755 seconds)
    (43/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.019189293 seconds)
    (44/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.101173909 seconds)
    (45/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.071608674 seconds)
    (46/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.021420416 seconds)
    (47/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.075606302 seconds)
    (48/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.057477738 seconds)
    (49/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.040551121 seconds)
    (50/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.028876373 seconds)
    (51/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.039797854 seconds)
    (52/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.040033967 seconds)
    (53/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.02626986 seconds)
    (54/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.026257101 seconds)
    (55/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.026116471 seconds)
    (56/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.03079298 seconds)
    (57/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.024720333 seconds)
    (58/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.030544753 seconds)
    (59/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.021416793 seconds)
    (60/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.050441559 seconds)
    (61/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.020598813 seconds)
    (62/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.056835317 seconds)
    (63/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.036349167 seconds)
    (64/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.025347553 seconds)
    (65/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.5872e-5 seconds)
    (66/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.020441607 seconds)
    (67/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.039517913 seconds)
    (68/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.02890708 seconds)
    (69/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.026355638 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.027801318 seconds)
    (71/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.027791931 seconds)
    (72/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.020330991 seconds)
    (73/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.027074415 seconds)
    (74/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.031987625 seconds)
    (75/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.042048356 seconds)
    (76/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.0309494 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.054000635 seconds)
    (78/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.026433104 seconds)
    (79/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.033175408 seconds)
    (80/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.027281598 seconds)
    (81/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.027505073 seconds)
    (82/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.039610292 seconds)
    (83/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.044663877 seconds)
    (84/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.033536902 seconds)
    (85/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.059697334 seconds)
    (86/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.02139206 seconds)
    (87/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.033751408 seconds)
    (88/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.030074339 seconds)
    (89/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.0417e-5 seconds)
    (90/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.037345046 seconds)
    (91/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.5131e-5 seconds)
    (92/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.059190629 seconds)
    (93/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.035477182 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.029723918 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.032343752 seconds)
    (96/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.030135268 seconds)
    (97/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.029750563 seconds)
    (98/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.038307038 seconds)
    (99/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.019783102 seconds)
    (100/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.036969132 seconds)
    (101/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.020508481 seconds)
    (102/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.032113984 seconds)
    (103/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.027330793 seconds)
    (104/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.03438326 seconds)
    (105/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.6218e-5 seconds)
    (106/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.02898307 seconds)
    (107/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.024611328 seconds)
    (108/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.3825e-5 seconds)
    (109/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 7.619e-6 seconds)
    (110/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.049419748 seconds)
    (111/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.026478253 seconds)
    (112/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.034156983 seconds)
    (113/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.030905169 seconds)
    (114/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.020791469 seconds)
    (115/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.027467955 seconds)
    (116/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.02004157 seconds)
    (117/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.035533842 seconds)
  done (took 5.032007254 seconds)
  (2/6) benchmarking "optimizations"...
    (1/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.033075357 seconds)
    (2/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.052536535 seconds)
    (3/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.134970741 seconds)
    (4/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.023453513 seconds)
    (5/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.092816841 seconds)
    (6/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.065482636 seconds)
    (7/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.039031143 seconds)
    (8/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.105642176 seconds)
    (9/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.04034892 seconds)
    (10/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.163492505 seconds)
    (11/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.040889309 seconds)
    (12/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.142350913 seconds)
    (13/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.147441893 seconds)
    (14/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.041502533 seconds)
    (15/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.026075242 seconds)
    (16/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.04108398 seconds)
    (17/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.021360955 seconds)
    (18/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.090109533 seconds)
    (19/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.026751725 seconds)
    (20/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.022928406 seconds)
    (21/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.030438853 seconds)
    (22/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.041447198 seconds)
    (23/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.021961545 seconds)
    (24/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.022685741 seconds)
    (25/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.021137868 seconds)
    (26/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.021775867 seconds)
    (27/27) benchmarking ("BitSet", "Int8")...
    done (took 0.043598091 seconds)
  done (took 2.644760932 seconds)
  (3/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.034838459 seconds)
    (2/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.032893472 seconds)
    (3/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.026385919 seconds)
    (4/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.040229408 seconds)
    (5/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.031257708 seconds)
    (6/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.032456781 seconds)
    (7/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.025904943 seconds)
    (8/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.031100584 seconds)
    (9/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.036229017 seconds)
    (10/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.023820543 seconds)
    (11/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.038088613 seconds)
    (12/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.022203025 seconds)
    (13/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.01968051 seconds)
    (14/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.06365534 seconds)
    (15/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.027626043 seconds)
    (16/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.028092526 seconds)
    (17/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.027117641 seconds)
    (18/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.019604899 seconds)
    (19/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.023528365 seconds)
    (20/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.022085347 seconds)
    (21/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.029013709 seconds)
    (22/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.029762885 seconds)
    (23/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.05409415 seconds)
    (24/105) benchmarking ("Set", "Int", "first")...
    done (took 0.02621318 seconds)
    (25/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.6333e-5 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.021894253 seconds)
    (27/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.038062234 seconds)
    (28/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.034368632 seconds)
    (29/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.021784171 seconds)
    (30/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 4.4776e-5 seconds)
    (31/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.029617874 seconds)
    (32/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.01956008 seconds)
    (33/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.022731823 seconds)
    (34/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.02790241 seconds)
    (35/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.021691148 seconds)
    (36/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.024398326 seconds)
    (37/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.021519324 seconds)
    (38/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.8835e-5 seconds)
    (39/105) benchmarking ("Set", "Int", "length")...
    done (took 0.01948103 seconds)
    (40/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.021221477 seconds)
    (41/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.022808755 seconds)
    (42/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.039376169 seconds)
    (43/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.02080469 seconds)
    (44/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.028843786 seconds)
    (45/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.036308511 seconds)
    (46/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 3.2093e-5 seconds)
    (47/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.03440001 seconds)
    (48/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.041717755 seconds)
    (49/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.024510567 seconds)
    (50/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.042138303 seconds)
    (51/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.031007846 seconds)
    (52/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.020933616 seconds)
    (53/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 4.8798e-5 seconds)
    (54/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.0099e-5 seconds)
    (55/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.023787113 seconds)
    (56/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.020971984 seconds)
    (57/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 5.3854e-5 seconds)
    (58/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.031808276 seconds)
    (59/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.024076573 seconds)
    (60/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.019961755 seconds)
    (61/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 4.4558e-5 seconds)
    (62/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.037600003 seconds)
    (63/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.021121498 seconds)
    (64/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.036896985 seconds)
    (65/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.031572325 seconds)
    (66/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.021594753 seconds)
    (67/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 3.8533e-5 seconds)
    (68/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.000124163 seconds)
    (69/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.027156633 seconds)
    (70/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.2283e-5 seconds)
    (71/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 8.386e-6 seconds)
    (72/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.7527e-5 seconds)
    (73/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.036410165 seconds)
    (74/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.026468393 seconds)
    (75/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.045722361 seconds)
    (76/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.023505624 seconds)
    (77/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.024582245 seconds)
    (78/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.02630047 seconds)
    (79/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.6317e-5 seconds)
    (80/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.035310451 seconds)
    (81/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.028625458 seconds)
    (82/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.6402e-5 seconds)
    (83/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.020211486 seconds)
    (84/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.366e-5 seconds)
    (85/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.4657e-5 seconds)
    (86/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.026758225 seconds)
    (87/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.02354219 seconds)
    (88/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.031534 seconds)
    (89/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.6375e-5 seconds)
    (90/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.2199e-5 seconds)
    (91/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.040990873 seconds)
    (92/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 3.4623e-5 seconds)
    (93/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.02496878 seconds)
    (94/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.0802e-5 seconds)
    (95/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.021656856 seconds)
    (96/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 3.4743e-5 seconds)
    (97/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.1935e-5 seconds)
    (98/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.037276493 seconds)
    (99/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 3.3212e-5 seconds)
    (100/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.1647e-5 seconds)
    (101/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 1.0663e-5 seconds)
    (102/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.03689558 seconds)
    (103/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.5285e-5 seconds)
    (104/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.7441e-5 seconds)
    (105/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 9.592e-6 seconds)
  done (took 3.321478194 seconds)
  (4/6) benchmarking "deletion"...
    (1/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.03388369 seconds)
    (2/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.03217375 seconds)
    (3/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.052209662 seconds)
    (4/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.036946859 seconds)
    (5/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.047422994 seconds)
    (6/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.037207385 seconds)
    (7/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.020800276 seconds)
    (8/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.031495859 seconds)
    (9/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.021126153 seconds)
    (10/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.024975097 seconds)
    (11/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.021265896 seconds)
    (12/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.02127682 seconds)
    (13/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.040704159 seconds)
    (14/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.038130969 seconds)
    (15/28) benchmarking ("Set", "String", "filter")...
    done (took 0.044696556 seconds)
    (16/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.035354887 seconds)
    (17/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.032626707 seconds)
    (18/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.048164742 seconds)
    (19/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.022047838 seconds)
    (20/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.044533841 seconds)
    (21/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.043351246 seconds)
    (22/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.033686764 seconds)
    (23/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.03762951 seconds)
    (24/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.037709909 seconds)
    (25/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.031801653 seconds)
    (26/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.04513516 seconds)
    (27/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.038421485 seconds)
    (28/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.041465433 seconds)
  done (took 2.094010948 seconds)
  (5/6) benchmarking "iteration"...
    (1/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.027895269 seconds)
    (2/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.027788836 seconds)
    (3/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.023821244 seconds)
    (4/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.026517314 seconds)
    (5/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.028237118 seconds)
    (6/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.028891553 seconds)
    (7/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.029729436 seconds)
    (8/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.022332674 seconds)
    (9/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.027096795 seconds)
    (10/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.022513648 seconds)
    (11/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.028455447 seconds)
    (12/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.028828817 seconds)
    (13/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.026872023 seconds)
    (14/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.024029493 seconds)
    (15/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.030509445 seconds)
    (16/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.025570534 seconds)
    (17/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.028255239 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.022924421 seconds)
    (19/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.025047013 seconds)
    (20/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.02841254 seconds)
    (21/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.023207147 seconds)
    (22/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.026404331 seconds)
    (23/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.029036359 seconds)
    (24/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.03009864 seconds)
    (25/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.02860079 seconds)
    (26/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.02672436 seconds)
  done (took 1.795513442 seconds)
  (6/6) benchmarking "initialization"...
    (1/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.023854783 seconds)
    (2/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.028273569 seconds)
    (3/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.029969262 seconds)
    (4/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.031335745 seconds)
    (5/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.044478895 seconds)
    (6/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.065280874 seconds)
    (7/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.039625184 seconds)
    (8/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.033170742 seconds)
    (9/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.021186659 seconds)
    (10/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.03147572 seconds)
    (11/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.005876099 seconds)
    (12/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.022244513 seconds)
    (13/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.035749034 seconds)
    (14/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.024891845 seconds)
    (15/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.022216103 seconds)
    (16/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.004911158 seconds)
    (17/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.021726499 seconds)
    (18/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.012237755 seconds)
    (19/42) benchmarking ("Set", "String", "loop")...
    done (took 0.028085224 seconds)
    (20/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.021954138 seconds)
    (21/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.022382308 seconds)
    (22/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.012233919 seconds)
    (23/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.005554544 seconds)
    (24/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.013127996 seconds)
    (25/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.012497164 seconds)
    (26/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.7951e-5 seconds)
    (27/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.029635307 seconds)
    (28/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.027318023 seconds)
    (29/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.027366072 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.009165338 seconds)
    (31/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.003405726 seconds)
    (32/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.012038024 seconds)
    (33/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.022001744 seconds)
    (34/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.011760791 seconds)
    (35/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.005650831 seconds)
    (36/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.010147522 seconds)
    (37/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.8859e-5 seconds)
    (38/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.003475808 seconds)
    (39/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.011490417 seconds)
    (40/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.008432857 seconds)
    (41/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.008554151 seconds)
    (42/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.8481e-5 seconds)
  done (took 1.906080981 seconds)
done (took 17.871354509 seconds)
(20/22) benchmarking "simd"...
  (1/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 0.060330463 seconds)
  (2/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 0.16993034 seconds)
  (3/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 0.046685209 seconds)
  (4/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 0.056683083 seconds)
  (5/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 0.072567155 seconds)
  (6/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 0.073562133 seconds)
  (7/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 0.031072221 seconds)
  (8/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 0.059141673 seconds)
  (9/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 0.042455035 seconds)
  (10/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 0.082819833 seconds)
  (11/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 0.048276501 seconds)
  (12/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 0.112667659 seconds)
  (13/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 0.042955504 seconds)
  (14/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 0.072374858 seconds)
  (15/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 4.7286e-5 seconds)
  (16/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 0.056816805 seconds)
  (17/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 7.2823e-5 seconds)
  (18/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.075383699 seconds)
  (19/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 0.028930672 seconds)
  (20/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 0.081053882 seconds)
  (21/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 0.028761734 seconds)
  (22/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 3.4561e-5 seconds)
  (23/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 0.079904548 seconds)
  (24/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 0.09557043 seconds)
  (25/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 0.067471064 seconds)
  (26/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 0.049284497 seconds)
  (27/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 0.030583932 seconds)
  (28/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 0.070039722 seconds)
  (29/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 0.067973593 seconds)
  (30/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 0.086798599 seconds)
  (31/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 0.049748725 seconds)
  (32/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 2.1176e-5 seconds)
  (33/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 0.063289433 seconds)
  (34/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 0.068110523 seconds)
  (35/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 0.06593553 seconds)
  (36/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 0.039964217 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 0.077997549 seconds)
  (38/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 2.1772e-5 seconds)
  (39/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 0.069902493 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 0.05418125 seconds)
  (41/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 0.052846859 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 0.074182841 seconds)
  (43/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 0.045430971 seconds)
  (44/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 0.089426552 seconds)
  (45/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 0.078916637 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 0.061905871 seconds)
  (47/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 3.479e-5 seconds)
  (48/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 0.094099009 seconds)
  (49/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 0.061725123 seconds)
  (50/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 3.2722e-5 seconds)
  (51/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 0.065539461 seconds)
  (52/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 0.049767494 seconds)
  (53/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 0.067264922 seconds)
  (54/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 0.058823208 seconds)
  (55/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 0.058708168 seconds)
  (56/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 0.08249893 seconds)
  (57/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 0.058156394 seconds)
  (58/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 2.5707e-5 seconds)
  (59/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 0.090200618 seconds)
  (60/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 0.03208734 seconds)
  (61/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.074226543 seconds)
  (62/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.031473373 seconds)
  (63/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 4.4134e-5 seconds)
  (64/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 0.047846315 seconds)
  (65/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 0.060259822 seconds)
  (66/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 0.031949957 seconds)
  (67/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 0.046480048 seconds)
  (68/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 3.1891e-5 seconds)
  (69/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 0.076306583 seconds)
  (70/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 3.8026e-5 seconds)
  (71/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 2.2772e-5 seconds)
  (72/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 0.08464031 seconds)
  (73/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 2.2131e-5 seconds)
  (74/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 0.044952608 seconds)
  (75/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 0.063370177 seconds)
  (76/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 0.047549404 seconds)
  (77/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 0.088749715 seconds)
  (78/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 2.7416e-5 seconds)
  (79/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 2.8998e-5 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 0.058176744 seconds)
  (81/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 0.06417926 seconds)
  (82/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 0.066886436 seconds)
  (83/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 0.040262996 seconds)
  (84/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 4.4681e-5 seconds)
  (85/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 1.9049e-5 seconds)
  (86/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 0.069902255 seconds)
  (87/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 4.1534e-5 seconds)
  (88/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 0.054674286 seconds)
  (89/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 2.8789e-5 seconds)
  (90/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 2.4225e-5 seconds)
  (91/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 0.043691989 seconds)
  (92/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 0.056711228 seconds)
  (93/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 0.056899838 seconds)
  (94/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 0.066101829 seconds)
  (95/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 0.06111469 seconds)
  (96/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 0.06670307 seconds)
  (97/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 2.7288e-5 seconds)
  (98/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 0.031904247 seconds)
  (99/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 0.050290071 seconds)
  (100/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 0.06820087 seconds)
  (101/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 0.074522024 seconds)
  (102/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 0.072914096 seconds)
  (103/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 3.2802e-5 seconds)
  (104/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 0.05950231 seconds)
  (105/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 2.359e-5 seconds)
  (106/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 0.065728278 seconds)
  (107/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 0.069048731 seconds)
  (108/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 3.7669e-5 seconds)
  (109/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 0.068887336 seconds)
  (110/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 5.3384e-5 seconds)
  (111/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 2.3718e-5 seconds)
  (112/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.5333e-5 seconds)
  (113/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 0.032110258 seconds)
  (114/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 3.4651e-5 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 1.5607e-5 seconds)
  (116/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 0.065948917 seconds)
  (117/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 0.06477123 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 0.050242985 seconds)
  (119/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 0.057126763 seconds)
  (120/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.5385e-5 seconds)
  (121/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 0.028705917 seconds)
  (122/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 2.5881e-5 seconds)
  (123/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 0.02967761 seconds)
  (124/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 0.058637007 seconds)
  (125/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 3.314e-5 seconds)
  (126/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 0.070421486 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.03315112 seconds)
  (128/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 3.8454e-5 seconds)
  (129/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 4.7751e-5 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 2.9459e-5 seconds)
  (131/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 0.066351236 seconds)
  (132/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 2.5738e-5 seconds)
  (133/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 0.068958231 seconds)
  (134/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 0.032050048 seconds)
  (135/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 2.3451e-5 seconds)
  (136/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 0.062804197 seconds)
  (137/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.066933223 seconds)
  (138/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 0.053673937 seconds)
  (139/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 0.061566915 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 2.5749e-5 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 0.078951476 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 0.076878976 seconds)
  (143/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 0.050495073 seconds)
  (144/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 0.070210255 seconds)
  (145/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.1241e-5 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 3.1289e-5 seconds)
  (147/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 0.031885899 seconds)
  (148/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 0.067954385 seconds)
  (149/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 0.056884065 seconds)
  (150/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 3.0614e-5 seconds)
  (151/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 1.6106e-5 seconds)
  (152/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 1.7053e-5 seconds)
  (153/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 2.1707e-5 seconds)
  (154/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 0.060732137 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 3.444e-5 seconds)
  (156/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 0.051656092 seconds)
  (157/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 3.2434e-5 seconds)
  (158/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 1.6332e-5 seconds)
  (159/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 1.6479e-5 seconds)
  (160/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 0.069132944 seconds)
  (161/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 3.0745e-5 seconds)
  (162/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.5603e-5 seconds)
  (163/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 1.7701e-5 seconds)
  (164/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 2.3075e-5 seconds)
  (165/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 0.067330867 seconds)
  (166/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 3.143e-5 seconds)
  (167/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 1.7806e-5 seconds)
  (168/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 0.05102489 seconds)
  (169/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 2.0277e-5 seconds)
  (170/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 0.036502274 seconds)
  (171/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 0.000102752 seconds)
  (172/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 2.2275e-5 seconds)
  (173/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.6296e-5 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 0.057348527 seconds)
  (175/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 0.051392206 seconds)
  (176/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 0.06007161 seconds)
  (177/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 0.07401329 seconds)
  (178/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 3.8251e-5 seconds)
  (179/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 0.057242425 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 0.062658454 seconds)
  (181/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 3.6141e-5 seconds)
  (182/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.723e-5 seconds)
  (183/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 1.7929e-5 seconds)
  (184/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 1.9872e-5 seconds)
  (185/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 2.1748e-5 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.0311e-5 seconds)
  (187/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 1.512e-5 seconds)
  (188/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 1.7477e-5 seconds)
  (189/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 2.3171e-5 seconds)
  (190/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 1.5802e-5 seconds)
  (191/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 0.050741298 seconds)
  (192/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 3.7905e-5 seconds)
  (193/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 1.7147e-5 seconds)
  (194/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 2.0e-5 seconds)
  (195/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 0.050540799 seconds)
  (196/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 0.041273351 seconds)
  (197/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 3.289e-5 seconds)
  (198/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 3.4031e-5 seconds)
  (199/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 0.030253207 seconds)
  (200/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 0.058981646 seconds)
  (201/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 3.8803e-5 seconds)
  (202/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 3.1922e-5 seconds)
  (203/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 0.038654423 seconds)
  (204/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 3.2319e-5 seconds)
  (205/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 0.066574606 seconds)
  (206/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 3.6819e-5 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 2.6835e-5 seconds)
  (208/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 0.041218876 seconds)
  (209/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 2.8841e-5 seconds)
  (210/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 2.6744e-5 seconds)
  (211/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 0.029916133 seconds)
  (212/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 3.1726e-5 seconds)
  (213/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 2.4574e-5 seconds)
  (214/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 0.036581014 seconds)
  (215/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 4.2898e-5 seconds)
  (216/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 0.032708633 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 0.060100955 seconds)
  (218/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 0.029196907 seconds)
  (219/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 4.7114e-5 seconds)
  (220/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 2.2768e-5 seconds)
  (221/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 1.9295e-5 seconds)
  (222/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 0.040538927 seconds)
  (223/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.4805e-5 seconds)
  (224/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 2.1171e-5 seconds)
  (225/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 0.067240523 seconds)
  (226/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 3.9298e-5 seconds)
  (227/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 2.7452e-5 seconds)
  (228/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 0.07034327 seconds)
  (229/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 2.5034e-5 seconds)
  (230/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 1.7044e-5 seconds)
  (231/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 0.059082314 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 2.9543e-5 seconds)
  (233/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 2.1063e-5 seconds)
  (234/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 2.0698e-5 seconds)
  (235/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.031776691 seconds)
  (236/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 3.5006e-5 seconds)
  (237/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 0.05563001 seconds)
  (238/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 2.1871e-5 seconds)
  (239/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 2.0279e-5 seconds)
  (240/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 1.7026e-5 seconds)
  (241/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 2.154e-5 seconds)
  (242/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 0.034772213 seconds)
  (243/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 3.6687e-5 seconds)
  (244/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 1.5294e-5 seconds)
  (245/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 0.058472794 seconds)
  (246/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 3.8047e-5 seconds)
  (247/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 0.024525836 seconds)
  (248/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 0.071777502 seconds)
  (249/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 2.8557e-5 seconds)
  (250/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 1.8802e-5 seconds)
  (251/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 1.8327e-5 seconds)
  (252/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 2.0722e-5 seconds)
  (253/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 1.8781e-5 seconds)
  (254/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 1.8885e-5 seconds)
  (255/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 0.061012037 seconds)
  (256/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.7392e-5 seconds)
  (257/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 1.9178e-5 seconds)
  (258/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 2.4951e-5 seconds)
  (259/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 0.044297416 seconds)
  (260/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 3.6651e-5 seconds)
  (261/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 2.0453e-5 seconds)
  (262/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 5.9484e-5 seconds)
  (263/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 2.2399e-5 seconds)
  (264/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 1.3578e-5 seconds)
  (265/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 1.9915e-5 seconds)
  (266/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 1.9188e-5 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 2.1247e-5 seconds)
  (268/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 1.8305e-5 seconds)
  (269/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.5598e-5 seconds)
  (270/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 2.2245e-5 seconds)
  (271/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 0.028102603 seconds)
  (272/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 0.063984877 seconds)
  (273/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 3.2024e-5 seconds)
  (274/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 2.6949e-5 seconds)
  (275/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 0.039607188 seconds)
  (276/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 3.2987e-5 seconds)
  (277/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 3.1471e-5 seconds)
  (278/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 1.6708e-5 seconds)
  (279/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.031977081 seconds)
  (280/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 0.024584147 seconds)
  (281/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 4.5779e-5 seconds)
  (282/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 2.0307e-5 seconds)
  (283/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 0.050576764 seconds)
  (284/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 2.3414e-5 seconds)
  (285/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 1.773e-5 seconds)
  (286/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 1.934e-5 seconds)
  (287/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 0.036124488 seconds)
  (288/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 4.5124e-5 seconds)
  (289/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 2.179e-5 seconds)
  (290/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 2.1101e-5 seconds)
  (291/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 2.0977e-5 seconds)
  (292/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 1.5384e-5 seconds)
  (293/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 1.9291e-5 seconds)
  (294/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 1.9976e-5 seconds)
  (295/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 0.07455711 seconds)
  (296/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 0.031378706 seconds)
  (297/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 0.036759786 seconds)
  (298/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 0.048358068 seconds)
  (299/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 3.3472e-5 seconds)
  (300/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 1.9425e-5 seconds)
  (301/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 0.070245053 seconds)
  (302/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.1398e-5 seconds)
  (303/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 3.9621e-5 seconds)
  (304/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 1.8361e-5 seconds)
  (305/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 1.7939e-5 seconds)
  (306/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.4001e-5 seconds)
  (307/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.6105e-5 seconds)
  (308/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 1.6131e-5 seconds)
  (309/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 0.053876671 seconds)
  (310/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 3.9519e-5 seconds)
  (311/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 3.0405e-5 seconds)
  (312/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 1.6147e-5 seconds)
  (313/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 1.5949e-5 seconds)
  (314/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 2.0028e-5 seconds)
  (315/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 2.3611e-5 seconds)
  (316/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 1.8345e-5 seconds)
  (317/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 0.078428157 seconds)
  (318/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 0.064048588 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 2.1752e-5 seconds)
  (320/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 0.045442932 seconds)
  (321/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 2.6003e-5 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 1.8561e-5 seconds)
  (323/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 2.8876e-5 seconds)
  (324/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 2.2065e-5 seconds)
  (325/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 1.6336e-5 seconds)
  (326/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.3577e-5 seconds)
  (327/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 1.8846e-5 seconds)
  (328/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.032342929 seconds)
  (329/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 5.858e-5 seconds)
  (330/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 2.2998e-5 seconds)
  (331/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 1.9614e-5 seconds)
  (332/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 2.0892e-5 seconds)
  (333/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 2.0967e-5 seconds)
  (334/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 1.7956e-5 seconds)
  (335/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 1.5221e-5 seconds)
  (336/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 1.3286e-5 seconds)
  (337/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 0.048497929 seconds)
  (338/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 3.6492e-5 seconds)
  (339/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 1.7816e-5 seconds)
  (340/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 0.056095246 seconds)
  (341/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 1.9455e-5 seconds)
  (342/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 0.062857676 seconds)
  (343/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 2.6683e-5 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 2.1171e-5 seconds)
  (345/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 1.8134e-5 seconds)
  (346/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 1.8502e-5 seconds)
  (347/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 0.058092038 seconds)
  (348/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 2.5655e-5 seconds)
  (349/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 2.6885e-5 seconds)
  (350/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 2.149e-5 seconds)
  (351/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 1.1716e-5 seconds)
  (352/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 1.4539e-5 seconds)
  (353/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 9.844e-6 seconds)
  (354/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 1.9391e-5 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 2.2551e-5 seconds)
  (356/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 1.8547e-5 seconds)
  (357/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 1.9174e-5 seconds)
  (358/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 1.5493e-5 seconds)
  (359/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.011100086 seconds)
  (360/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 2.5699e-5 seconds)
  (361/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 2.4301e-5 seconds)
  (362/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 3.9234e-5 seconds)
  (363/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 1.6728e-5 seconds)
  (364/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 2.0135e-5 seconds)
  (365/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.177e-5 seconds)
  (366/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.7464e-5 seconds)
  (367/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 1.9334e-5 seconds)
  (368/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 2.204e-5 seconds)
  (369/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 1.8182e-5 seconds)
  (370/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.6663e-5 seconds)
  (371/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 1.4437e-5 seconds)
  (372/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 1.5713e-5 seconds)
  (373/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 1.7759e-5 seconds)
  (374/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 3.9335e-5 seconds)
  (375/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 2.0681e-5 seconds)
  (376/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 1.7064e-5 seconds)
  (377/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.5267e-5 seconds)
  (378/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 1.8081e-5 seconds)
  (379/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 1.6424e-5 seconds)
  (380/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 1.8719e-5 seconds)
  (381/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.011353208 seconds)
  (382/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 3.3672e-5 seconds)
  (383/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 2.215e-5 seconds)
  (384/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 1.803e-5 seconds)
  (385/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 6.671e-5 seconds)
  (386/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 1.4684e-5 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 1.9464e-5 seconds)
  (388/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 3.9705e-5 seconds)
  (389/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 1.2718e-5 seconds)
  (390/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 1.6308e-5 seconds)
  (391/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.5131e-5 seconds)
  (392/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 1.5646e-5 seconds)
  (393/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 1.7223e-5 seconds)
  (394/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 1.4922e-5 seconds)
  (395/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 1.847e-5 seconds)
  (396/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 1.7265e-5 seconds)
  (397/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.3113e-5 seconds)
  (398/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 1.6738e-5 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 1.7222e-5 seconds)
  (400/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 2.0323e-5 seconds)
  (401/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 1.5255e-5 seconds)
  (402/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 1.0214e-5 seconds)
  (403/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 0.084054499 seconds)
  (404/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 1.9387e-5 seconds)
  (405/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 1.6461e-5 seconds)
  (406/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 2.2269e-5 seconds)
  (407/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 1.3179e-5 seconds)
  (408/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 3.1027e-5 seconds)
  (409/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 1.8365e-5 seconds)
  (410/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 1.2094e-5 seconds)
  (411/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 2.082e-5 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.03179849 seconds)
  (413/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 4.2579e-5 seconds)
  (414/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 1.9015e-5 seconds)
  (415/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.8629e-5 seconds)
  (416/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 2.1754e-5 seconds)
  (417/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 2.5601e-5 seconds)
  (418/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 1.479e-5 seconds)
  (419/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 1.8485e-5 seconds)
  (420/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 1.7962e-5 seconds)
  (421/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 2.3714e-5 seconds)
  (422/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.6674e-5 seconds)
  (423/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 2.0239e-5 seconds)
  (424/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 0.030678187 seconds)
  (425/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 0.032192309 seconds)
  (426/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 3.1569e-5 seconds)
  (427/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 2.2252e-5 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 0.059600908 seconds)
  (429/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 4.0623e-5 seconds)
  (430/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 1.798e-5 seconds)
  (431/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 1.989e-5 seconds)
  (432/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 1.398e-5 seconds)
  (433/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 1.6118e-5 seconds)
  (434/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 2.045e-5 seconds)
  (435/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 1.7887e-5 seconds)
  (436/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.496e-5 seconds)
  (437/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 1.7407e-5 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 1.3504e-5 seconds)
  (439/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 1.8532e-5 seconds)
  (440/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 2.1476e-5 seconds)
  (441/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 1.8046e-5 seconds)
  (442/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 1.1221e-5 seconds)
  (443/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 2.111e-5 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.2673e-5 seconds)
  (445/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 1.5102e-5 seconds)
  (446/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.5171e-5 seconds)
  (447/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 2.0195e-5 seconds)
  (448/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 1.8152e-5 seconds)
  (449/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 1.6722e-5 seconds)
  (450/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 2.2753e-5 seconds)
  (451/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 1.6237e-5 seconds)
  (452/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.3155e-5 seconds)
  (453/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 2.7962e-5 seconds)
  (454/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 1.9677e-5 seconds)
  (455/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 1.4729e-5 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 9.948e-6 seconds)
  (457/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 1.6435e-5 seconds)
  (458/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 1.6486e-5 seconds)
  (459/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 3.1124e-5 seconds)
  (460/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.069236609 seconds)
  (461/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 3.1877e-5 seconds)
  (462/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.7177e-5 seconds)
  (463/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 2.098e-5 seconds)
  (464/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 2.3903e-5 seconds)
  (465/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 2.0277e-5 seconds)
  (466/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 0.089475457 seconds)
  (467/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 0.077592606 seconds)
  (468/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 2.8293e-5 seconds)
  (469/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 4.3974e-5 seconds)
  (470/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 2.105e-5 seconds)
  (471/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 1.5045e-5 seconds)
  (472/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 1.7081e-5 seconds)
  (473/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 2.1226e-5 seconds)
  (474/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 2.2455e-5 seconds)
  (475/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 1.7859e-5 seconds)
  (476/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 1.9612e-5 seconds)
  (477/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 2.1647e-5 seconds)
  (478/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 1.545e-5 seconds)
  (479/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.5103e-5 seconds)
  (480/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 1.9699e-5 seconds)
  (481/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 1.4742e-5 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 2.4289e-5 seconds)
  (483/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 2.2786e-5 seconds)
  (484/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 0.066980425 seconds)
  (485/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 3.2082e-5 seconds)
  (486/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 2.2174e-5 seconds)
  (487/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.6585e-5 seconds)
  (488/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 2.3874e-5 seconds)
  (489/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 1.5949e-5 seconds)
  (490/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 2.0812e-5 seconds)
  (491/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 2.0321e-5 seconds)
  (492/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 2.2352e-5 seconds)
  (493/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 1.6069e-5 seconds)
  (494/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 2.2028e-5 seconds)
  (495/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 0.061461163 seconds)
  (496/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.8498e-5 seconds)
  (497/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 0.06084262 seconds)
  (498/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 2.4199e-5 seconds)
  (499/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 3.7655e-5 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 2.0391e-5 seconds)
  (501/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 1.9244e-5 seconds)
  (502/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.6482e-5 seconds)
  (503/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 2.1838e-5 seconds)
  (504/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 0.030706089 seconds)
  (505/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 4.2118e-5 seconds)
  (506/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 3.1614e-5 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 2.2731e-5 seconds)
  (508/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 1.4743e-5 seconds)
  (509/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 2.1188e-5 seconds)
  (510/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 1.9824e-5 seconds)
  (511/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 5.4985e-5 seconds)
  (512/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 4.3293e-5 seconds)
  (513/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 2.1548e-5 seconds)
  (514/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.808e-5 seconds)
  (515/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 1.5663e-5 seconds)
  (516/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.5682e-5 seconds)
  (517/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 2.0928e-5 seconds)
  (518/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 1.9533e-5 seconds)
  (519/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 1.8645e-5 seconds)
  (520/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 2.0219e-5 seconds)
  (521/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.3864e-5 seconds)
  (522/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.7678e-5 seconds)
  (523/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 1.9934e-5 seconds)
  (524/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 1.2395e-5 seconds)
  (525/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 1.3654e-5 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.5945e-5 seconds)
  (527/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 1.6296e-5 seconds)
  (528/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 3.4772e-5 seconds)
  (529/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 0.059110442 seconds)
  (530/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 2.2191e-5 seconds)
  (531/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 1.6692e-5 seconds)
  (532/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 0.028967176 seconds)
  (533/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 4.1332e-5 seconds)
  (534/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 1.6138e-5 seconds)
  (535/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 2.2144e-5 seconds)
  (536/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 2.2253e-5 seconds)
  (537/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 3.551e-5 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 1.4067e-5 seconds)
  (539/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 2.0129e-5 seconds)
  (540/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.2797e-5 seconds)
  (541/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 3.2954e-5 seconds)
  (542/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 2.2298e-5 seconds)
  (543/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 1.8762e-5 seconds)
  (544/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 2.5341e-5 seconds)
  (545/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.7423e-5 seconds)
  (546/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 1.5001e-5 seconds)
  (547/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 2.1474e-5 seconds)
  (548/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 1.3839e-5 seconds)
  (549/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 1.7605e-5 seconds)
  (550/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 1.3645e-5 seconds)
  (551/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 1.0509e-5 seconds)
  (552/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.011385104 seconds)
  (553/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 0.032402295 seconds)
  (554/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 4.873e-5 seconds)
  (555/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 2.4409e-5 seconds)
  (556/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 2.8294e-5 seconds)
  (557/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 1.7961e-5 seconds)
  (558/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 2.9034e-5 seconds)
  (559/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 1.9468e-5 seconds)
  (560/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 1.9298e-5 seconds)
  (561/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 0.058093911 seconds)
  (562/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 3.5414e-5 seconds)
  (563/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 0.040294115 seconds)
  (564/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.8561e-5 seconds)
  (565/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 2.9416e-5 seconds)
  (566/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 3.1508e-5 seconds)
  (567/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.18e-5 seconds)
  (568/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 2.0031e-5 seconds)
  (569/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 2.8216e-5 seconds)
  (570/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.7344e-5 seconds)
  (571/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 2.709e-5 seconds)
  (572/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 2.2597e-5 seconds)
  (573/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 1.4e-5 seconds)
  (574/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 1.8248e-5 seconds)
  (575/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 3.193e-5 seconds)
  (576/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.2429e-5 seconds)
  (577/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.6733e-5 seconds)
  (578/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 1.9981e-5 seconds)
  (579/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 1.8371e-5 seconds)
  (580/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 3.958e-5 seconds)
  (581/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 2.7123e-5 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 1.3828e-5 seconds)
  (583/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 1.562e-5 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 2.0388e-5 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 1.9696e-5 seconds)
  (586/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 2.0336e-5 seconds)
  (587/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.572e-5 seconds)
  (588/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.1827e-5 seconds)
  (589/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 1.5086e-5 seconds)
  (590/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 1.7982e-5 seconds)
  (591/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 1.828e-5 seconds)
  (592/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.011378445 seconds)
  (593/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 4.3214e-5 seconds)
  (594/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 2.7503e-5 seconds)
  (595/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.3898e-5 seconds)
  (596/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.3013e-5 seconds)
  (597/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 2.6216e-5 seconds)
  (598/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.0384e-5 seconds)
  (599/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 1.8998e-5 seconds)
  (600/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 1.9556e-5 seconds)
  (601/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 2.0492e-5 seconds)
  (602/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.4171e-5 seconds)
  (603/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 2.1138e-5 seconds)
  (604/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 1.4727e-5 seconds)
  (605/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 1.3695e-5 seconds)
  (606/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 2.1988e-5 seconds)
  (607/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 1.6574e-5 seconds)
  (608/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 1.3843e-5 seconds)
  (609/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.2545e-5 seconds)
  (610/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 1.8068e-5 seconds)
  (611/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.4361e-5 seconds)
  (612/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 1.7446e-5 seconds)
  (613/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 1.753e-5 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 1.3517e-5 seconds)
  (615/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 1.6119e-5 seconds)
  (616/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 3.1867e-5 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.2851e-5 seconds)
  (618/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.4354e-5 seconds)
  (619/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.1239e-5 seconds)
  (620/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 2.0701e-5 seconds)
  (621/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 1.4315e-5 seconds)
  (622/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 2.3331e-5 seconds)
  (623/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 1.8707e-5 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 1.0092e-5 seconds)
  (625/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 1.9629e-5 seconds)
  (626/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 1.7229e-5 seconds)
  (627/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 1.8774e-5 seconds)
  (628/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 2.1486e-5 seconds)
  (629/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.4959e-5 seconds)
  (630/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 1.3833e-5 seconds)
  (631/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 1.4804e-5 seconds)
  (632/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 1.7508e-5 seconds)
  (633/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 1.7975e-5 seconds)
  (634/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 1.3646e-5 seconds)
  (635/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 1.5567e-5 seconds)
  (636/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 1.6644e-5 seconds)
  (637/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 2.1042e-5 seconds)
  (638/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 1.6718e-5 seconds)
  (639/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 1.6466e-5 seconds)
  (640/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.316e-5 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 1.9875e-5 seconds)
  (642/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 1.4908e-5 seconds)
  (643/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 1.0007e-5 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 1.816e-5 seconds)
  (645/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.2069e-5 seconds)
  (646/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 1.3845e-5 seconds)
  (647/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 5.9293e-5 seconds)
  (648/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 1.5225e-5 seconds)
  (649/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 2.018e-5 seconds)
  (650/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 1.7812e-5 seconds)
  (651/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 1.5986e-5 seconds)
  (652/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 1.6363e-5 seconds)
  (653/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.9617e-5 seconds)
  (654/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 1.432e-5 seconds)
  (655/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 1.7862e-5 seconds)
  (656/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.2962e-5 seconds)
  (657/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.4348e-5 seconds)
  (658/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 1.3908e-5 seconds)
  (659/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.5303e-5 seconds)
  (660/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 1.4458e-5 seconds)
  (661/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 3.4072e-5 seconds)
  (662/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 1.3324e-5 seconds)
  (663/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 1.5473e-5 seconds)
  (664/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.6035e-5 seconds)
  (665/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.1815e-5 seconds)
  (666/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 1.4928e-5 seconds)
  (667/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 5.0918e-5 seconds)
  (668/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 2.3041e-5 seconds)
  (669/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 1.6968e-5 seconds)
  (670/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 1.172e-5 seconds)
  (671/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 4.4538e-5 seconds)
  (672/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 1.6317e-5 seconds)
  (673/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 1.5023e-5 seconds)
  (674/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 1.1885e-5 seconds)
  (675/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 1.6355e-5 seconds)
  (676/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 1.1194e-5 seconds)
  (677/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 1.3223e-5 seconds)
  (678/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 1.5921e-5 seconds)
  (679/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 1.7168e-5 seconds)
  (680/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.4543e-5 seconds)
done (took 11.740730825 seconds)
(21/22) benchmarking "inference"...
  (1/3) benchmarking "allinference"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 25.141741863 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 0.259961623 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 0.561835008 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 0.181928175 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.310285595 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 1.347622718 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 8.547567557 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 0.409746057 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 1.471776561 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 0.111631426 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 0.614281886 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 0.083361852 seconds)
  done (took 40.160160362 seconds)
  (2/3) benchmarking "optimization"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 9.405052494 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 0.251668534 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 0.381235775 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 0.112943758 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.304217951 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.708497192 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 8.626054661 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 0.404587778 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 1.492043012 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 0.112520192 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 0.609430159 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 0.085170665 seconds)
  done (took 24.166317795 seconds)
  (3/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 1.746390282 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 0.092494232 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 0.148949786 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 2.116698851 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.142359191 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.144698913 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 2.751577948 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 0.060014094 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 0.666618166 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 0.040752913 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 0.3858951 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 0.045876683 seconds)
  done (took 10.478657361 seconds)
done (took 75.955745258 seconds)
(22/22) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.028227104 seconds)
    (2/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.030696772 seconds)
    (3/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.12360928 seconds)
    (4/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.081462209 seconds)
    (5/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.066574397 seconds)
    (6/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.040330565 seconds)
    (7/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 0.041622231 seconds)
    (8/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 0.037836711 seconds)
    (9/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.121208896 seconds)
    (10/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.150501528 seconds)
    (11/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 7.133e-5 seconds)
    (12/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.049489932 seconds)
    (13/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.032639344 seconds)
    (14/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.125133006 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.033968501 seconds)
    (16/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.033217942 seconds)
    (17/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.027251343 seconds)
    (18/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.035002354 seconds)
    (19/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.063641852 seconds)
    (20/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 0.043805658 seconds)
    (21/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 0.040394518 seconds)
    (22/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.242795989 seconds)
    (23/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.031602014 seconds)
    (24/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.030972488 seconds)
    (25/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.025385708 seconds)
    (26/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 0.039098917 seconds)
    (27/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 0.033929497 seconds)
    (28/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.115390462 seconds)
    (29/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.178944852 seconds)
    (30/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.039216315 seconds)
    (31/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 0.030357221 seconds)
    (32/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.000183167 seconds)
    (33/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 0.031042302 seconds)
    (34/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.096364505 seconds)
    (35/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.059168332 seconds)
    (36/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.031426403 seconds)
    (37/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 0.03198909 seconds)
    (38/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.218128524 seconds)
    (39/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.180045921 seconds)
    (40/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 0.032920604 seconds)
    (41/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 0.039391128 seconds)
    (42/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.101656138 seconds)
    (43/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.039153785 seconds)
    (44/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.203613347 seconds)
    (45/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 0.031054613 seconds)
    (46/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.168138283 seconds)
    (47/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.125783077 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 0.031897013 seconds)
    (49/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.031614741 seconds)
    (50/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 0.047462298 seconds)
    (51/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.025873549 seconds)
    (52/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 0.031589899 seconds)
    (53/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.116179582 seconds)
    (54/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.120005478 seconds)
    (55/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 4.2947e-5 seconds)
    (56/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.7927e-5 seconds)
    (57/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.202821746 seconds)
    (58/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.000246122 seconds)
    (59/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 8.3364e-5 seconds)
    (60/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 0.036968628 seconds)
    (61/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.069418245 seconds)
    (62/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.031868305 seconds)
    (63/434) benchmarking ("sort", "Int64", 0)...
    done (took 0.021377217 seconds)
    (64/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 0.028063092 seconds)
    (65/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 0.035892361 seconds)
    (66/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.043134083 seconds)
    (67/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.03099985 seconds)
    (68/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 0.030591112 seconds)
    (69/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.187499936 seconds)
    (70/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.096324321 seconds)
    (71/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.118914461 seconds)
    (72/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 0.037999833 seconds)
    (73/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.031207114 seconds)
    (74/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 0.053982754 seconds)
    (75/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.038590137 seconds)
    (76/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.070164395 seconds)
    (77/434) benchmarking ("perf_countequals", "Float32")...
    done (took 0.035722745 seconds)
    (78/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.000130764 seconds)
    (79/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.031088084 seconds)
    (80/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.046333506 seconds)
    (81/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.028351329 seconds)
    (82/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.093493523 seconds)
    (83/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.109888077 seconds)
    (84/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 9.7034e-5 seconds)
    (85/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 0.029581302 seconds)
    (86/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.035889951 seconds)
    (87/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.028657685 seconds)
    (88/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.13872257 seconds)
    (89/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.000106958 seconds)
    (90/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.029389758 seconds)
    (91/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 5.7518e-5 seconds)
    (92/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.029073331 seconds)
    (93/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.144336786 seconds)
    (94/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 0.030617559 seconds)
    (95/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.029537489 seconds)
    (96/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 0.028906487 seconds)
    (97/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.030252394 seconds)
    (98/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.000266851 seconds)
    (99/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 3.8334e-5 seconds)
    (100/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.148837355 seconds)
    (101/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.19719558 seconds)
    (102/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.093837732 seconds)
    (103/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 0.032445942 seconds)
    (104/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.031876412 seconds)
    (105/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.033751027 seconds)
    (106/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.156725902 seconds)
    (107/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.031068313 seconds)
    (108/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.079748261 seconds)
    (109/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 9.7758e-5 seconds)
    (110/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 0.027700621 seconds)
    (111/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 0.033369051 seconds)
    (112/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.001800483 seconds)
    (113/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.031138502 seconds)
    (114/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 9.003e-5 seconds)
    (115/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.031598411 seconds)
    (116/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 0.029200136 seconds)
    (117/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.116060207 seconds)
    (118/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 0.030878161 seconds)
    (119/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 0.038352704 seconds)
    (120/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.030737436 seconds)
    (121/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.150062179 seconds)
    (122/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.097321451 seconds)
    (123/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.032664921 seconds)
    (124/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.04025092 seconds)
    (125/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.029168569 seconds)
    (126/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.167786416 seconds)
    (127/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.028772814 seconds)
    (128/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.039790705 seconds)
    (129/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.097948357 seconds)
    (130/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.020407938 seconds)
    (131/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.000124802 seconds)
    (132/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.029402391 seconds)
    (133/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.030252978 seconds)
    (134/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 0.031948224 seconds)
    (135/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.039177367 seconds)
    (136/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 0.030009214 seconds)
    (137/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 0.030307425 seconds)
    (138/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 0.028024864 seconds)
    (139/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.088833071 seconds)
    (140/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.116370556 seconds)
    (141/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.001297793 seconds)
    (142/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.091053676 seconds)
    (143/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.049578562 seconds)
    (144/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 0.030354778 seconds)
    (145/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.111990877 seconds)
    (146/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.033997777 seconds)
    (147/434) benchmarking ("sort", "Bool", 0)...
    done (took 0.055661397 seconds)
    (148/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.02885555 seconds)
    (149/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.092562819 seconds)
    (150/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 4.6676e-5 seconds)
    (151/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.227758952 seconds)
    (152/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.027422213 seconds)
    (153/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 0.030188629 seconds)
    (154/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 6.824e-5 seconds)
    (155/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.168388045 seconds)
    (156/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.179098444 seconds)
    (157/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.037139948 seconds)
    (158/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 8.7949e-5 seconds)
    (159/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 6.9867e-5 seconds)
    (160/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.002267047 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.253177983 seconds)
    (162/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.000143611 seconds)
    (163/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 0.032397681 seconds)
    (164/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.046221797 seconds)
    (165/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 0.029979822 seconds)
    (166/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.151945419 seconds)
    (167/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.138517743 seconds)
    (168/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.091871518 seconds)
    (169/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.00277057 seconds)
    (170/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 0.02814417 seconds)
    (171/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 0.034381087 seconds)
    (172/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.000943626 seconds)
    (173/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 5.2664e-5 seconds)
    (174/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 0.04956642 seconds)
    (175/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.236841386 seconds)
    (176/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.001314173 seconds)
    (177/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.030203596 seconds)
    (178/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.144576076 seconds)
    (179/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.037586492 seconds)
    (180/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 8.9359e-5 seconds)
    (181/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.091549116 seconds)
    (182/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 0.029393391 seconds)
    (183/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 0.034274447 seconds)
    (184/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.027459153 seconds)
    (185/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.160630219 seconds)
    (186/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 0.029957062 seconds)
    (187/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.137348342 seconds)
    (188/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.032430208 seconds)
    (189/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 0.032596403 seconds)
    (190/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 0.030220406 seconds)
    (191/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.112518813 seconds)
    (192/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.000115917 seconds)
    (193/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.028556097 seconds)
    (194/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.180592036 seconds)
    (195/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 0.027437268 seconds)
    (196/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.000113816 seconds)
    (197/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 0.025020276 seconds)
    (198/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 0.031608677 seconds)
    (199/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 7.1935e-5 seconds)
    (200/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.091311015 seconds)
    (201/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.030280362 seconds)
    (202/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 0.038012652 seconds)
    (203/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.098537452 seconds)
    (204/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 0.034913577 seconds)
    (205/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.000172221 seconds)
    (206/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.030442938 seconds)
    (207/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.000125801 seconds)
    (208/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 0.026038582 seconds)
    (209/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.028653992 seconds)
    (210/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.020416979 seconds)
    (211/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.038055431 seconds)
    (212/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 9.7844e-5 seconds)
    (213/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.088372455 seconds)
    (214/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.030336793 seconds)
    (215/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.112452562 seconds)
    (216/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.272764735 seconds)
    (217/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.154100475 seconds)
    (218/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 3.6319e-5 seconds)
    (219/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.479e-5 seconds)
    (220/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.030062024 seconds)
    (221/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.287983716 seconds)
    (222/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 6.6442e-5 seconds)
    (223/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.029727227 seconds)
    (224/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.031620203 seconds)
    (225/434) benchmarking ("perf_countequals", "Int64")...
    done (took 0.033258739 seconds)
    (226/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.000106027 seconds)
    (227/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 6.7959e-5 seconds)
    (228/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.030913236 seconds)
    (229/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.001680656 seconds)
    (230/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 0.033710694 seconds)
    (231/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 7.7045e-5 seconds)
    (232/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 0.029680092 seconds)
    (233/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 8.3056e-5 seconds)
    (234/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.111223142 seconds)
    (235/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 6.2919e-5 seconds)
    (236/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 4.2955e-5 seconds)
    (237/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 0.036426039 seconds)
    (238/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 0.033797452 seconds)
    (239/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.041676083 seconds)
    (240/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.088699893 seconds)
    (241/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.0911325 seconds)
    (242/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 2.8997e-5 seconds)
    (243/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 0.025619469 seconds)
    (244/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.001133063 seconds)
    (245/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 5.0375e-5 seconds)
    (246/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.034258988 seconds)
    (247/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.027587068 seconds)
    (248/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 4.4781e-5 seconds)
    (249/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 0.034805705 seconds)
    (250/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 0.036870791 seconds)
    (251/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 7.6944e-5 seconds)
    (252/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.139571738 seconds)
    (253/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 7.5664e-5 seconds)
    (254/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 0.03068018 seconds)
    (255/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.042648884 seconds)
    (256/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 3.8189e-5 seconds)
    (257/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 2.9996e-5 seconds)
    (258/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.028440428 seconds)
    (259/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 0.024132814 seconds)
    (260/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.064495689 seconds)
    (261/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.045207768 seconds)
    (262/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 4.4757e-5 seconds)
    (263/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 6.5238e-5 seconds)
    (264/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 3.095e-5 seconds)
    (265/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.030680871 seconds)
    (266/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.029424645 seconds)
    (267/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 2.3027e-5 seconds)
    (268/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 3.6414e-5 seconds)
    (269/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 5.3276e-5 seconds)
    (270/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.032692575 seconds)
    (271/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 9.2822e-5 seconds)
    (272/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.002381213 seconds)
    (273/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.089101401 seconds)
    (274/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 0.029508933 seconds)
    (275/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 0.029024487 seconds)
    (276/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 0.034342336 seconds)
    (277/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.002038487 seconds)
    (278/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.110204146 seconds)
    (279/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 4.2318e-5 seconds)
    (280/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.029461183 seconds)
    (281/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.063773796 seconds)
    (282/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 9.1653e-5 seconds)
    (283/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 2.3516e-5 seconds)
    (284/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 0.033972197 seconds)
    (285/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.027756641 seconds)
    (286/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.026266632 seconds)
    (287/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 0.036275807 seconds)
    (288/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.252421443 seconds)
    (289/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.111465316 seconds)
    (290/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 4.1885e-5 seconds)
    (291/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 5.6834e-5 seconds)
    (292/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 0.029674215 seconds)
    (293/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.03365055 seconds)
    (294/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.028753103 seconds)
    (295/434) benchmarking ("perf_countequals", "Int8")...
    done (took 0.032001032 seconds)
    (296/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.000105321 seconds)
    (297/434) benchmarking ("sort", "Float32", 0)...
    done (took 0.892466263 seconds)
    (298/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 0.036626952 seconds)
    (299/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.176551707 seconds)
    (300/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.001969901 seconds)
    (301/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.044546905 seconds)
    (302/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.001821639 seconds)
    (303/434) benchmarking ("sort", "BigInt", 0)...
    done (took 0.173078003 seconds)
    (304/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 8.2248e-5 seconds)
    (305/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 0.036371852 seconds)
    (306/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 4.6777e-5 seconds)
    (307/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 0.030039245 seconds)
    (308/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.028913009 seconds)
    (309/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.029110079 seconds)
    (310/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 0.036129951 seconds)
    (311/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.036546102 seconds)
    (312/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 6.7126e-5 seconds)
    (313/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.026668093 seconds)
    (314/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.026636097 seconds)
    (315/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 4.676e-5 seconds)
    (316/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 9.7491e-5 seconds)
    (317/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.7096e-5 seconds)
    (318/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 0.033568942 seconds)
    (319/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.002578044 seconds)
    (320/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 5.2795e-5 seconds)
    (321/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.000136271 seconds)
    (322/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.033115672 seconds)
    (323/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 0.035657599 seconds)
    (324/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.216094784 seconds)
    (325/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 0.033375001 seconds)
    (326/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.056715621 seconds)
    (327/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.043314965 seconds)
    (328/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 8.4328e-5 seconds)
    (329/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.000947336 seconds)
    (330/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 5.5231e-5 seconds)
    (331/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.030856363 seconds)
    (332/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 3.8314e-5 seconds)
    (333/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 5.8083e-5 seconds)
    (334/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 7.0247e-5 seconds)
    (335/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 8.578e-5 seconds)
    (336/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.094959768 seconds)
    (337/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 4.5243e-5 seconds)
    (338/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.001693009 seconds)
    (339/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 2.7727e-5 seconds)
    (340/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 2.6583e-5 seconds)
    (341/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 2.2228e-5 seconds)
    (342/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 6.2517e-5 seconds)
    (343/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 3.314e-5 seconds)
    (344/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.000739668 seconds)
    (345/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.033501285 seconds)
    (346/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 8.9994e-5 seconds)
    (347/434) benchmarking ("perf_countequals", "Float64")...
    done (took 0.03370192 seconds)
    (348/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.000130581 seconds)
    (349/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.069129882 seconds)
    (350/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.221725904 seconds)
    (351/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.037627163 seconds)
    (352/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.043632423 seconds)
    (353/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.029563088 seconds)
    (354/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.045273507 seconds)
    (355/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 9.3291e-5 seconds)
    (356/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.001031986 seconds)
    (357/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.13472754 seconds)
    (358/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 9.5636e-5 seconds)
    (359/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 1.006490318 seconds)
    (360/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.032492297 seconds)
    (361/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 2.3948e-5 seconds)
    (362/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 6.2116e-5 seconds)
    (363/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 5.1639e-5 seconds)
    (364/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 3.0641e-5 seconds)
    (365/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 0.029729258 seconds)
    (366/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 2.8486e-5 seconds)
    (367/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 0.029230596 seconds)
    (368/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 2.7081e-5 seconds)
    (369/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.000137529 seconds)
    (370/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.11785665 seconds)
    (371/434) benchmarking ("sort", "Float64", 0)...
    done (took 0.025340631 seconds)
    (372/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 0.033741306 seconds)
    (373/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.001767125 seconds)
    (374/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 0.027898709 seconds)
    (375/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 0.029441498 seconds)
    (376/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 2.4552e-5 seconds)
    (377/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.000765768 seconds)
    (378/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 3.8293e-5 seconds)
    (379/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 0.037256139 seconds)
    (380/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.042631385 seconds)
    (381/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.001812891 seconds)
    (382/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 4.8116e-5 seconds)
    (383/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.002779337 seconds)
    (384/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 0.026714475 seconds)
    (385/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 0.033100477 seconds)
    (386/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.000114424 seconds)
    (387/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 9.2156e-5 seconds)
    (388/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 8.1262e-5 seconds)
    (389/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 6.2956e-5 seconds)
    (390/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 4.6226e-5 seconds)
    (391/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.4846e-5 seconds)
    (392/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 0.030888956 seconds)
    (393/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 2.3037e-5 seconds)
    (394/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.001748562 seconds)
    (395/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.028367749 seconds)
    (396/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 8.0876e-5 seconds)
    (397/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 4.5232e-5 seconds)
    (398/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 5.8455e-5 seconds)
    (399/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 0.03165957 seconds)
    (400/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 3.7167e-5 seconds)
    (401/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.066538029 seconds)
    (402/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 8.2822e-5 seconds)
    (403/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 8.131e-5 seconds)
    (404/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 0.03127367 seconds)
    (405/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.034115798 seconds)
    (406/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.000123449 seconds)
    (407/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 3.3884e-5 seconds)
    (408/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 5.4317e-5 seconds)
    (409/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 5.0359e-5 seconds)
    (410/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 0.025804288 seconds)
    (411/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.001032718 seconds)
    (412/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 7.441e-5 seconds)
    (413/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 2.1559e-5 seconds)
    (414/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.000124228 seconds)
    (415/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 6.7063e-5 seconds)
    (416/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.073939523 seconds)
    (417/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 0.032615391 seconds)
    (418/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 8.1619e-5 seconds)
    (419/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 0.028860571 seconds)
    (420/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 7.1623e-5 seconds)
    (421/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.486569431 seconds)
    (422/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 3.3576e-5 seconds)
    (423/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 4.0898e-5 seconds)
    (424/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 3.664e-5 seconds)
    (425/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.001807241 seconds)
    (426/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.9303e-5 seconds)
    (427/434) benchmarking ("perf_countequals", "Bool")...
    done (took 0.031840211 seconds)
    (428/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 7.2585e-5 seconds)
    (429/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.043407166 seconds)
    (430/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 2.9258e-5 seconds)
    (431/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.037053433 seconds)
    (432/434) benchmarking ("sort", "Int8", 0)...
    done (took 0.315605419 seconds)
    (433/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 0.033848715 seconds)
    (434/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 0.036104524 seconds)
  done (took 23.213833984 seconds)
done (took 25.581237565 seconds)
RUNNING BENCHMARKS...
(1/22) benchmarking "problem"...
  (1/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.871551361 seconds)
  done (took 10.223649461 seconds)
  (2/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_devec"...
    done (took 7.37295266 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.405823046 seconds)
    (3/4) benchmarking "laplace_iter_vec"...
    done (took 7.400329082 seconds)
    (4/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.383445756 seconds)
  done (took 31.91485774 seconds)
  (3/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 8.253346545 seconds)
  done (took 10.609567223 seconds)
  (4/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.755952667 seconds)
  done (took 10.109887631 seconds)
  (5/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.755871655 seconds)
  done (took 10.121950943 seconds)
  (6/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_devec"...
    done (took 7.430790104 seconds)
    (2/2) benchmarking "euro_option_vec"...
    done (took 7.384289763 seconds)
  done (took 17.170240839 seconds)
  (7/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 9.417964658 seconds)
  done (took 11.77091708 seconds)
  (8/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.726088576 seconds)
  done (took 10.077495898 seconds)
  (9/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 7.362254556 seconds)
  done (took 9.714559952 seconds)
  (10/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float64")...
    done (took 7.359058795 seconds)
    (2/2) benchmarking ("seismic", "Float32")...
    done (took 7.359831223 seconds)
  done (took 17.071920855 seconds)
  (11/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.37787882 seconds)
  done (took 9.728547518 seconds)
  (12/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.359410496 seconds)
  done (took 9.710136342 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.499836223 seconds)
  done (took 9.856014505 seconds)
  (14/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.796770594 seconds)
  done (took 10.14993013 seconds)
done (took 180.669702481 seconds)
(2/22) benchmarking "array"...
  (1/13) benchmarking "index"...
    (1/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.496541852 seconds)
    (2/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.412183868 seconds)
    (3/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.441089381 seconds)
    (4/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 3.939525707 seconds)
    (5/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.764453567 seconds)
    (6/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.362203908 seconds)
    (7/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 7.374593955 seconds)
    (8/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.360535229 seconds)
    (9/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.374757464 seconds)
    (10/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.370926523 seconds)
    (11/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 7.366123411 seconds)
    (12/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.370480658 seconds)
    (13/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.366573909 seconds)
    (14/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.369163166 seconds)
    (15/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.365538154 seconds)
    (16/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.381552463 seconds)
    (17/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.36291653 seconds)
    (18/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.366065102 seconds)
    (19/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.36329515 seconds)
    (20/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.369844248 seconds)
    (21/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.367770171 seconds)
    (22/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.369037295 seconds)
    (23/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.368349696 seconds)
    (24/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.630536387 seconds)
    (25/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.374607533 seconds)
    (26/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.370391422 seconds)
    (27/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.370897289 seconds)
    (28/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.373714662 seconds)
    (29/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.376126482 seconds)
    (30/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.371284081 seconds)
    (31/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.368474274 seconds)
    (32/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.373663093 seconds)
    (33/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.374773236 seconds)
    (34/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.382264476 seconds)
    (35/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.372001266 seconds)
    (36/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.38366198 seconds)
    (37/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.371615382 seconds)
    (38/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.380285092 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.381749804 seconds)
    (40/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.373282563 seconds)
    (41/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.378330583 seconds)
    (42/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.375790414 seconds)
    (43/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.375691226 seconds)
    (44/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 6.913902831 seconds)
    (45/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.637501892 seconds)
    (46/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.37627843 seconds)
    (47/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.38469887 seconds)
    (48/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.399085007 seconds)
    (49/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.375790453 seconds)
    (50/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.376480369 seconds)
    (51/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.376869408 seconds)
    (52/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.378832745 seconds)
    (53/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.379464324 seconds)
    (54/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.381444484 seconds)
    (55/608) benchmarking "ind2sub"...
    done (took 3.112155521 seconds)
    (56/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.381605577 seconds)
    (57/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 7.384782844 seconds)
    (58/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.378118121 seconds)
    (59/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.380092601 seconds)
    (60/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.377379681 seconds)
    (61/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.378982258 seconds)
    (62/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.383402959 seconds)
    (63/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.386236248 seconds)
    (64/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.379480403 seconds)
    (65/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.386848506 seconds)
    (66/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.663727126 seconds)
    (67/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 7.383511463 seconds)
    (68/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.385775784 seconds)
    (69/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.391949364 seconds)
    (70/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.379102917 seconds)
    (71/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.379983166 seconds)
    (72/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.3779538 seconds)
    (73/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 7.391290473 seconds)
    (74/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.384381646 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.382892436 seconds)
    (76/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.226873454 seconds)
    (77/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.427397847 seconds)
    (78/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.379129022 seconds)
    (79/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.380573635 seconds)
    (80/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.381356054 seconds)
    (81/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.378498075 seconds)
    (82/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.379469617 seconds)
    (83/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.391548985 seconds)
    (84/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.389482378 seconds)
    (85/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.383771041 seconds)
    (86/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.402888161 seconds)
    (87/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.390644722 seconds)
    (88/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.38029282 seconds)
    (89/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.382860807 seconds)
    (90/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.417037495 seconds)
    (91/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 7.385184559 seconds)
    (92/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.383471919 seconds)
    (93/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 7.398026375 seconds)
    (94/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.77873077 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.384405399 seconds)
    (96/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.382501425 seconds)
    (97/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.390797662 seconds)
    (98/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.382601067 seconds)
    (99/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.592744275 seconds)
    (100/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.384089917 seconds)
    (101/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.385996785 seconds)
    (102/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.383381098 seconds)
    (103/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 7.382355476 seconds)
    (104/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.390239591 seconds)
    (105/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.728122096 seconds)
    (106/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.385379544 seconds)
    (107/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.391735186 seconds)
    (108/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.416250016 seconds)
    (109/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.405551972 seconds)
    (110/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 5.804756187 seconds)
    (111/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.606445148 seconds)
    (112/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.38785669 seconds)
    (113/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.386158452 seconds)
    (114/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 5.817254058 seconds)
    (115/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.388860387 seconds)
    (116/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.387200626 seconds)
    (117/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.395898549 seconds)
    (118/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.388089412 seconds)
    (119/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.384353375 seconds)
    (120/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.387189826 seconds)
    (121/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.388259156 seconds)
    (122/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.384252827 seconds)
    (123/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 5.82982112 seconds)
    (124/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.388540498 seconds)
    (125/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.398078691 seconds)
    (126/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 5.846781434 seconds)
    (127/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.38931185 seconds)
    (128/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.458885367 seconds)
    (129/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.387563152 seconds)
    (130/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 7.39316138 seconds)
    (131/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.388720765 seconds)
    (132/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.388696299 seconds)
    (133/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 6.985921298 seconds)
    (134/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.38811292 seconds)
    (135/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.39062121 seconds)
    (136/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.390327429 seconds)
    (137/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 7.389302914 seconds)
    (138/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.387347612 seconds)
    (139/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.292631742 seconds)
    (140/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.40059643 seconds)
    (141/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.388166893 seconds)
    (142/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.52516978 seconds)
    (143/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.391271599 seconds)
    (144/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.386824711 seconds)
    (145/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.406769652 seconds)
    (146/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 7.389191381 seconds)
    (147/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.385339006 seconds)
    (148/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.392357752 seconds)
    (149/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.386390136 seconds)
    (150/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.408157486 seconds)
    (151/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.394791006 seconds)
    (152/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.388855966 seconds)
    (153/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.392900564 seconds)
    (154/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.490910057 seconds)
    (155/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 7.396829142 seconds)
    (156/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.521569411 seconds)
    (157/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 6.14762223 seconds)
    (158/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.3923022 seconds)
    (159/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.394073333 seconds)
    (160/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.38871989 seconds)
    (161/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.417247912 seconds)
    (162/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.394425918 seconds)
    (163/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.402752561 seconds)
    (164/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.570151675 seconds)
    (165/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.393657431 seconds)
    (166/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.402781399 seconds)
    (167/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.394535944 seconds)
    (168/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.388004489 seconds)
    (169/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.396554335 seconds)
    (170/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.397654404 seconds)
    (171/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.402468494 seconds)
    (172/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.402192021 seconds)
    (173/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.39784228 seconds)
    (174/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.395336908 seconds)
    (175/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.391938173 seconds)
    (176/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.524229798 seconds)
    (177/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.388936236 seconds)
    (178/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.393962675 seconds)
    (179/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.395145757 seconds)
    (180/608) benchmarking "5d"...
    done (took 5.774473764 seconds)
    (181/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.395000789 seconds)
    (182/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.396509655 seconds)
    (183/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.396334285 seconds)
    (184/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.784273715 seconds)
    (185/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.394487012 seconds)
    (186/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.387597062 seconds)
    (187/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.398704793 seconds)
    (188/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.393179587 seconds)
    (189/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.509565054 seconds)
    (190/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 7.398096573 seconds)
    (191/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.395475295 seconds)
    (192/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.565631028 seconds)
    (193/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.395683211 seconds)
    (194/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.38609761 seconds)
    (195/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.405283814 seconds)
    (196/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.389790559 seconds)
    (197/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.388103727 seconds)
    (198/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.791537391 seconds)
    (199/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 7.397579216 seconds)
    (200/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.396025704 seconds)
    (201/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.395568335 seconds)
    (202/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.389669607 seconds)
    (203/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.394355186 seconds)
    (204/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.657266743 seconds)
    (205/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.389596676 seconds)
    (206/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.398991861 seconds)
    (207/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.389703465 seconds)
    (208/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 4.299429565 seconds)
    (209/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.400594182 seconds)
    (210/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.389224092 seconds)
    (211/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.408073714 seconds)
    (212/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.558659937 seconds)
    (213/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.388661003 seconds)
    (214/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.389615647 seconds)
    (215/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.408034804 seconds)
    (216/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 3.984425792 seconds)
    (217/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.399620005 seconds)
    (218/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.400440945 seconds)
    (219/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.401519664 seconds)
    (220/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 5.894371979 seconds)
    (221/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.408677672 seconds)
    (222/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.390092696 seconds)
    (223/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.390747629 seconds)
    (224/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.505916792 seconds)
    (225/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.507880909 seconds)
    (226/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 7.411734403 seconds)
    (227/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.397822873 seconds)
    (228/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.395486016 seconds)
    (229/608) benchmarking "6d"...
    done (took 7.388751682 seconds)
    (230/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.398709707 seconds)
    (231/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.536318754 seconds)
    (232/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.394743963 seconds)
    (233/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.397070032 seconds)
    (234/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.395409658 seconds)
    (235/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.390566146 seconds)
    (236/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.398717494 seconds)
    (237/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 7.410099646 seconds)
    (238/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.394869686 seconds)
    (239/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.389727475 seconds)
    (240/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.390536499 seconds)
    (241/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.390334813 seconds)
    (242/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.394423916 seconds)
    (243/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.393940285 seconds)
    (244/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.392360397 seconds)
    (245/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.394658323 seconds)
    (246/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.392424028 seconds)
    (247/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.657477853 seconds)
    (248/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.406218336 seconds)
    (249/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.40478039 seconds)
    (250/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.394255621 seconds)
    (251/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.397093471 seconds)
    (252/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.398685643 seconds)
    (253/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.877807651 seconds)
    (254/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 2.897676407 seconds)
    (255/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 7.398834099 seconds)
    (256/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.39848902 seconds)
    (257/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.394925836 seconds)
    (258/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 2.808711758 seconds)
    (259/608) benchmarking "3d"...
    done (took 3.987923092 seconds)
    (260/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.407366598 seconds)
    (261/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.395065195 seconds)
    (262/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.392726964 seconds)
    (263/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 6.360206854 seconds)
    (264/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.40432463 seconds)
    (265/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.3966082 seconds)
    (266/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 6.900645778 seconds)
    (267/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.396341526 seconds)
    (268/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.404865094 seconds)
    (269/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.283316289 seconds)
    (270/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.727397227 seconds)
    (271/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.631553709 seconds)
    (272/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.524937101 seconds)
    (273/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.771150521 seconds)
    (274/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.404111598 seconds)
    (275/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 5.759513054 seconds)
    (276/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.398307907 seconds)
    (277/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.398454114 seconds)
    (278/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.396375119 seconds)
    (279/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 7.415521005 seconds)
    (280/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.398702907 seconds)
    (281/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 7.39390301 seconds)
    (282/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 7.39903295 seconds)
    (283/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.40936025 seconds)
    (284/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 7.396083039 seconds)
    (285/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.940577628 seconds)
    (286/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.406818491 seconds)
    (287/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.399869045 seconds)
    (288/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.408039895 seconds)
    (289/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.391448773 seconds)
    (290/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 7.39645042 seconds)
    (291/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.397093013 seconds)
    (292/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.395340232 seconds)
    (293/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.363346747 seconds)
    (294/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.712863262 seconds)
    (295/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.396017711 seconds)
    (296/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.409622943 seconds)
    (297/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.49218357 seconds)
    (298/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.503499988 seconds)
    (299/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.401210305 seconds)
    (300/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 7.399212511 seconds)
    (301/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 2.80678667 seconds)
    (302/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.399021187 seconds)
    (303/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.401785139 seconds)
    (304/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.397138633 seconds)
    (305/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 4.5038523 seconds)
    (306/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.405440652 seconds)
    (307/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.396109609 seconds)
    (308/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.543738216 seconds)
    (309/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.851743985 seconds)
    (310/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.3998472 seconds)
    (311/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 7.406868306 seconds)
    (312/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.400680492 seconds)
    (313/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.394768067 seconds)
    (314/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.410813871 seconds)
    (315/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.400880914 seconds)
    (316/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.394326949 seconds)
    (317/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.400325945 seconds)
    (318/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.409262565 seconds)
    (319/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.484042388 seconds)
    (320/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.395244664 seconds)
    (321/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.398355085 seconds)
    (322/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 7.082359234 seconds)
    (323/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 7.400365706 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.397749462 seconds)
    (325/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.400605366 seconds)
    (326/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.408041156 seconds)
    (327/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.397370852 seconds)
    (328/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.420159015 seconds)
    (329/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.401575829 seconds)
    (330/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.415398126 seconds)
    (331/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 7.402634817 seconds)
    (332/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.397284336 seconds)
    (333/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.397622126 seconds)
    (334/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.395874236 seconds)
    (335/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.961048843 seconds)
    (336/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.407145172 seconds)
    (337/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.396513516 seconds)
    (338/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.398120379 seconds)
    (339/608) benchmarking "sub2ind"...
    done (took 7.560368621 seconds)
    (340/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.650396479 seconds)
    (341/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.67576764 seconds)
    (342/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.407797022 seconds)
    (343/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.397091823 seconds)
    (344/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 7.398558998 seconds)
    (345/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.261059382 seconds)
    (346/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 2.821818013 seconds)
    (347/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.40038032 seconds)
    (348/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.327159595 seconds)
    (349/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.404651566 seconds)
    (350/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.666846575 seconds)
    (351/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.428763325 seconds)
    (352/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.739167322 seconds)
    (353/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.399710587 seconds)
    (354/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.39774314 seconds)
    (355/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.404336548 seconds)
    (356/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.401137588 seconds)
    (357/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.399352746 seconds)
    (358/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.546971951 seconds)
    (359/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.411532176 seconds)
    (360/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.400517235 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.400902119 seconds)
    (362/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.405478051 seconds)
    (363/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.709645775 seconds)
    (364/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.424200471 seconds)
    (365/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.395991619 seconds)
    (366/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.317971477 seconds)
    (367/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.408991637 seconds)
    (368/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.742558722 seconds)
    (369/608) benchmarking ("sum", "3darray")...
    done (took 3.52888839 seconds)
    (370/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.400361938 seconds)
    (371/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.397448545 seconds)
    (372/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.407177257 seconds)
    (373/608) benchmarking "7d"...
    done (took 5.653413676 seconds)
    (374/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.400587725 seconds)
    (375/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.399375254 seconds)
    (376/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.595491361 seconds)
    (377/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.396751405 seconds)
    (378/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.396023416 seconds)
    (379/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.398993781 seconds)
    (380/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.396504705 seconds)
    (381/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 7.399097863 seconds)
    (382/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.397607435 seconds)
    (383/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.402761353 seconds)
    (384/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.398198786 seconds)
    (385/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.418241603 seconds)
    (386/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.415155854 seconds)
    (387/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.397972394 seconds)
    (388/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.399544306 seconds)
    (389/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.39868117 seconds)
    (390/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.412616321 seconds)
    (391/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.399765329 seconds)
    (392/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 7.398651521 seconds)
    (393/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.395755313 seconds)
    (394/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.39719153 seconds)
    (395/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.411970772 seconds)
    (396/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.401684534 seconds)
    (397/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.399962273 seconds)
    (398/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.40745746 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.756509895 seconds)
    (400/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 5.778895852 seconds)
    (401/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.401757797 seconds)
    (402/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.398472612 seconds)
    (403/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.746519018 seconds)
    (404/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.399781808 seconds)
    (405/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.399361148 seconds)
    (406/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.432242723 seconds)
    (407/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.396694085 seconds)
    (408/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.399727229 seconds)
    (409/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.402566556 seconds)
    (410/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.400702947 seconds)
    (411/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.400496376 seconds)
    (412/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.650123393 seconds)
    (413/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.404944061 seconds)
    (414/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.400865745 seconds)
    (415/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.983191283 seconds)
    (416/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.316030277 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.403595943 seconds)
    (418/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.521014802 seconds)
    (419/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.965227561 seconds)
    (420/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.398645 seconds)
    (421/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.392235704 seconds)
    (422/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 5.719989851 seconds)
    (423/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.634071284 seconds)
    (424/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.399827989 seconds)
    (425/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.394165568 seconds)
    (426/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.395970889 seconds)
    (427/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.396711477 seconds)
    (428/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.403123316 seconds)
    (429/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.431582184 seconds)
    (430/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.405028745 seconds)
    (431/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.395526506 seconds)
    (432/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 5.707259566 seconds)
    (433/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.395907151 seconds)
    (434/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.472716761 seconds)
    (435/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.398581928 seconds)
    (436/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.405193733 seconds)
    (437/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.394962831 seconds)
    (438/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.684705963 seconds)
    (439/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.407106997 seconds)
    (440/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.408872837 seconds)
    (441/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.400891993 seconds)
    (442/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.397314626 seconds)
    (443/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.532222418 seconds)
    (444/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.908107317 seconds)
    (445/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.449751844 seconds)
    (446/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.539030955 seconds)
    (447/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.514538361 seconds)
    (448/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.406458848 seconds)
    (449/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.411609172 seconds)
    (450/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.402662048 seconds)
    (451/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.432905082 seconds)
    (452/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.406608236 seconds)
    (453/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.403633741 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.403307133 seconds)
    (455/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.404095583 seconds)
    (456/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.403881541 seconds)
    (457/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.422856758 seconds)
    (458/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.405760729 seconds)
    (459/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.435633228 seconds)
    (460/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.40308091 seconds)
    (461/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.403349735 seconds)
    (462/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.411792125 seconds)
    (463/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.409814426 seconds)
    (464/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.413903569 seconds)
    (465/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 6.85170088 seconds)
    (466/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.402104129 seconds)
    (467/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.874160973 seconds)
    (468/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.436719561 seconds)
    (469/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.537821855 seconds)
    (470/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.405809266 seconds)
    (471/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.407287091 seconds)
    (472/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.396903816 seconds)
    (473/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.398285068 seconds)
    (474/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.404813973 seconds)
    (475/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.398920997 seconds)
    (476/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.408983462 seconds)
    (477/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 7.401356321 seconds)
    (478/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.405916735 seconds)
    (479/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.405859519 seconds)
    (480/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.40757155 seconds)
    (481/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.40704712 seconds)
    (482/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.406055637 seconds)
    (483/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.402350975 seconds)
    (484/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.410787977 seconds)
    (485/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.405058825 seconds)
    (486/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 7.409153653 seconds)
    (487/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.406742073 seconds)
    (488/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.409154131 seconds)
    (489/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 7.402094685 seconds)
    (490/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.406117636 seconds)
    (491/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.415129149 seconds)
    (492/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.401807142 seconds)
    (493/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.40345208 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.404413341 seconds)
    (495/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.403858452 seconds)
    (496/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.401457865 seconds)
    (497/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 3.047772747 seconds)
    (498/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.406332132 seconds)
    (499/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 5.132223583 seconds)
    (500/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.40703604 seconds)
    (501/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 7.39443052 seconds)
    (502/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.401083077 seconds)
    (503/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.399480414 seconds)
    (504/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.412042018 seconds)
    (505/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.406652863 seconds)
    (506/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.398913511 seconds)
    (507/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.402358193 seconds)
    (508/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.570325281 seconds)
    (509/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.39999864 seconds)
    (510/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.401826105 seconds)
    (511/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.404016777 seconds)
    (512/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.402054815 seconds)
    (513/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.404871436 seconds)
    (514/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.512052722 seconds)
    (515/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.441535516 seconds)
    (516/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.413772407 seconds)
    (517/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.888900993 seconds)
    (518/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.409742705 seconds)
    (519/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.400385574 seconds)
    (520/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.401165512 seconds)
    (521/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.396734628 seconds)
    (522/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.398693796 seconds)
    (523/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.406737587 seconds)
    (524/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.413747621 seconds)
    (525/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.39867137 seconds)
    (526/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.40007392 seconds)
    (527/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.405422158 seconds)
    (528/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.406986036 seconds)
    (529/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 3.017311154 seconds)
    (530/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.458294211 seconds)
    (531/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 6.118376034 seconds)
    (532/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 6.130071699 seconds)
    (533/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.403341371 seconds)
    (534/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.516677764 seconds)
    (535/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 7.398718058 seconds)
    (536/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.95793493 seconds)
    (537/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.406537941 seconds)
    (538/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.40663244 seconds)
    (539/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.4018555 seconds)
    (540/608) benchmarking "2d"...
    done (took 3.815810468 seconds)
    (541/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.399300531 seconds)
    (542/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 3.040551595 seconds)
    (543/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.57756848 seconds)
    (544/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.501784791 seconds)
    (545/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.625015023 seconds)
    (546/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.399966568 seconds)
    (547/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 7.410954625 seconds)
    (548/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.555620401 seconds)
    (549/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.476851517 seconds)
    (550/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.409210577 seconds)
    (551/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 6.802521133 seconds)
    (552/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.436069345 seconds)
    (553/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.395901498 seconds)
    (554/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.406292676 seconds)
    (555/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.39409705 seconds)
    (556/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 7.398444067 seconds)
    (557/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.704438214 seconds)
    (558/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.417315253 seconds)
    (559/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.403866099 seconds)
    (560/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.191885144 seconds)
    (561/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.493981334 seconds)
    (562/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.403697478 seconds)
    (563/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.397204295 seconds)
    (564/608) benchmarking "4d"...
    done (took 4.247872112 seconds)
    (565/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.855338066 seconds)
    (566/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.399318323 seconds)
    (567/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.503619422 seconds)
    (568/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.395279804 seconds)
    (569/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.401831571 seconds)
    (570/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.415909467 seconds)
    (571/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.405936325 seconds)
    (572/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.395129193 seconds)
    (573/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.424658137 seconds)
    (574/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.397019931 seconds)
    (575/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.397688377 seconds)
    (576/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.405867174 seconds)
    (577/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.498009802 seconds)
    (578/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.403896309 seconds)
    (579/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 7.403030095 seconds)
    (580/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.407362281 seconds)
    (581/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.400511867 seconds)
    (582/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.398485758 seconds)
    (583/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.400443532 seconds)
    (584/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.403215139 seconds)
    (585/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.405652504 seconds)
    (586/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.952066439 seconds)
    (587/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.413946361 seconds)
    (588/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.686292028 seconds)
    (589/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.400200835 seconds)
    (590/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.401569266 seconds)
    (591/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.235039983 seconds)
    (592/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.418145483 seconds)
    (593/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.412347606 seconds)
    (594/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.411987336 seconds)
    (595/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.403074213 seconds)
    (596/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.407053969 seconds)
    (597/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 7.397187438 seconds)
    (598/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.402851731 seconds)
    (599/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.404836732 seconds)
    (600/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.414650878 seconds)
    (601/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.414446131 seconds)
    (602/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.05796144 seconds)
    (603/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.401268488 seconds)
    (604/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.405257837 seconds)
    (605/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 6.789562306 seconds)
    (606/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 2.86162603 seconds)
    (607/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.401359937 seconds)
    (608/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.400599449 seconds)
  done (took 4002.850382504 seconds)
  (2/13) benchmarking "reductions"...
    (1/20) benchmarking ("sumabs", "Int64")...
    done (took 3.622867456 seconds)
    (2/20) benchmarking ("norminf", "Float64")...
    done (took 2.481010508 seconds)
    (3/20) benchmarking ("norm", "Float64")...
    done (took 3.300328492 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 3.374449706 seconds)
    (5/20) benchmarking ("maxabs", "Float64")...
    done (took 2.81196769 seconds)
    (6/20) benchmarking ("maxabs", "Int64")...
    done (took 2.964690297 seconds)
    (7/20) benchmarking ("mean", "Float64")...
    done (took 3.331953174 seconds)
    (8/20) benchmarking ("norm1", "Int64")...
    done (took 2.832835407 seconds)
    (9/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 3.222322207 seconds)
    (10/20) benchmarking ("sumabs2", "Int64")...
    done (took 3.267015504 seconds)
    (11/20) benchmarking ("sum", "Float64")...
    done (took 3.282325206 seconds)
    (12/20) benchmarking ("perf_reduce", "Float64")...
    done (took 3.30814165 seconds)
    (13/20) benchmarking ("sum", "Int64")...
    done (took 3.133612696 seconds)
    (14/20) benchmarking ("perf_reduce", "Int64")...
    done (took 3.210066334 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 3.271054315 seconds)
    (16/20) benchmarking ("norm", "Int64")...
    done (took 2.577234437 seconds)
    (17/20) benchmarking ("norm1", "Float64")...
    done (took 3.277655928 seconds)
    (18/20) benchmarking ("sumabs2", "Float64")...
    done (took 3.509220823 seconds)
    (19/20) benchmarking ("norminf", "Int64")...
    done (took 2.505221718 seconds)
    (20/20) benchmarking ("mean", "Int64")...
    done (took 2.936551211 seconds)
  done (took 64.611274598 seconds)
  (3/13) benchmarking "cat"...
    (1/17) benchmarking ("catnd_setind", 5)...
    done (took 2.416713604 seconds)
    (2/17) benchmarking "4467"...
    done (took 2.584207163 seconds)
    (3/17) benchmarking ("hcat", 500)...
    done (took 7.42841353 seconds)
    (4/17) benchmarking ("hcat_setind", 500)...
    done (took 7.399626206 seconds)
    (5/17) benchmarking ("vcat_setind", 500)...
    done (took 7.396811621 seconds)
    (6/17) benchmarking ("catnd", 500)...
    done (took 7.402964845 seconds)
    (7/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.398780693 seconds)
    (8/17) benchmarking ("catnd", 5)...
    done (took 2.445687707 seconds)
    (9/17) benchmarking ("hvcat", 5)...
    done (took 4.854348997 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 4.140126993 seconds)
    (11/17) benchmarking ("hcat_setind", 5)...
    done (took 4.310815736 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 7.399044607 seconds)
    (13/17) benchmarking ("vcat_setind", 5)...
    done (took 4.214311855 seconds)
    (14/17) benchmarking ("catnd_setind", 500)...
    done (took 7.415794416 seconds)
    (15/17) benchmarking ("hcat", 5)...
    done (took 4.857200517 seconds)
    (16/17) benchmarking ("hvcat", 500)...
    done (took 7.401568267 seconds)
    (17/17) benchmarking ("hvcat_setind", 5)...
    done (took 4.31209284 seconds)
  done (took 95.773934506 seconds)
  (4/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.44757954 seconds)
    (2/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.614324592 seconds)
    (3/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.421825209 seconds)
    (4/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.442638809 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.447741736 seconds)
    (6/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.510917602 seconds)
    (7/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.708676877 seconds)
    (8/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.489985691 seconds)
  done (took 62.479852561 seconds)
  (5/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Float64")...
    done (took 2.937556232 seconds)
    (2/4) benchmarking ("Float64", "Int")...
    done (took 3.008908228 seconds)
    (3/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 3.453820148 seconds)
    (4/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 3.158420623 seconds)
  done (took 14.950618397 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "boolarray_bool_load!"...
    done (took 7.41107889 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 3.448080778 seconds)
    (3/6) benchmarking "bitarray_true_load!"...
    done (took 7.403466678 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.803395854 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.417131609 seconds)
    (6/6) benchmarking "boolarray_true_fill!"...
    done (took 3.513910612 seconds)
  done (took 34.389133472 seconds)
  (7/13) benchmarking "accumulate"...
    (1/12) benchmarking ("accumulate!", "Float64")...
    done (took 3.295304622 seconds)
    (2/12) benchmarking ("accumulate", "Float64")...
    done (took 2.535461506 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.424464629 seconds)
    (4/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.412022537 seconds)
    (5/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.400774841 seconds)
    (6/12) benchmarking ("cumsum", "Int")...
    done (took 3.221775179 seconds)
    (7/12) benchmarking ("cumsum", "Float64")...
    done (took 2.559603328 seconds)
    (8/12) benchmarking ("accumulate!", "Int")...
    done (took 3.019797593 seconds)
    (9/12) benchmarking ("cumsum!", "Int")...
    done (took 3.020529122 seconds)
    (10/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.402484404 seconds)
    (11/12) benchmarking ("accumulate", "Int")...
    done (took 3.496071632 seconds)
    (12/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.529935572 seconds)
  done (took 55.70739028 seconds)
  (8/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.756863712 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.884547517 seconds)
    (3/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.614482046 seconds)
    (4/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 2.583415271 seconds)
    (5/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.804240088 seconds)
    (6/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.920174711 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 2.511273541 seconds)
    (8/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 2.678972102 seconds)
    (9/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 7.408767368 seconds)
    (10/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.434024795 seconds)
    (11/24) benchmarking ("==", "BitArray")...
    done (took 2.625095925 seconds)
    (12/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 2.452925185 seconds)
    (13/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.646268737 seconds)
    (14/24) benchmarking ("isequal", "BitArray")...
    done (took 2.460559794 seconds)
    (15/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.656589282 seconds)
    (16/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.77600407 seconds)
    (17/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.817439456 seconds)
    (18/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.440019094 seconds)
    (19/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 2.707803894 seconds)
    (20/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.796009869 seconds)
    (21/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 2.610495371 seconds)
    (22/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.703552287 seconds)
    (23/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.796006286 seconds)
    (24/24) benchmarking ("==", "Vector{Int16}")...
    done (took 3.037773558 seconds)
  done (took 71.518430188 seconds)
  (9/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 5)...
    done (took 2.632036703 seconds)
    (2/5) benchmarking ("setindex!", 2)...
    done (took 2.609442419 seconds)
    (3/5) benchmarking ("setindex!", 1)...
    done (took 2.625507386 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 2.639546636 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 2.636557354 seconds)
  done (took 15.535118514 seconds)
  (10/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.476985011 seconds)
    (2/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.5089854 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.551850153 seconds)
    (4/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.524205574 seconds)
    (5/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.409297596 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.410739602 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.402244868 seconds)
    (8/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.998072228 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 12.705351957 seconds)
    (10/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.935642711 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 12.99979846 seconds)
    (12/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.469346701 seconds)
  done (took 106.783413941 seconds)
  (11/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.40454899 seconds)
    (2/4) benchmarking "rev_load_slow!"...
    done (took 7.40430678 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.40389677 seconds)
    (4/4) benchmarking "rev_load_fast!"...
    done (took 7.410609421 seconds)
  done (took 32.013903209 seconds)
  (12/13) benchmarking "growth"...
    (1/12) benchmarking ("push_single!", 8)...
    done (took 2.458625914 seconds)
    (2/12) benchmarking ("push_single!", 2048)...
    done (took 2.487672115 seconds)
    (3/12) benchmarking ("append!", 2048)...
    done (took 2.81321949 seconds)
    (4/12) benchmarking ("append!", 8)...
    done (took 2.585494704 seconds)
    (5/12) benchmarking ("push_single!", 256)...
    done (took 2.4753912 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 2.667711061 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 2.635377836 seconds)
    (8/12) benchmarking ("append!", 256)...
    done (took 3.661232149 seconds)
    (9/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.485358845 seconds)
    (10/12) benchmarking ("prerend!", 256)...
    done (took 4.504737493 seconds)
    (11/12) benchmarking ("push_multiple!", 256)...
    done (took 2.486485376 seconds)
    (12/12) benchmarking ("prerend!", 2048)...
    done (took 2.950126663 seconds)
  done (took 36.603108212 seconds)
  (13/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.751048484 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.727044872 seconds)
    (3/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.752299742 seconds)
    (4/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.755437251 seconds)
    (5/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.726191663 seconds)
    (6/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.709533648 seconds)
    (7/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.709660414 seconds)
    (8/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.772257561 seconds)
    (9/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.757470916 seconds)
    (10/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.772510899 seconds)
    (11/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.648004918 seconds)
    (12/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.725617605 seconds)
    (13/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.756684111 seconds)
    (14/24) benchmarking ("all", "BitArray")...
    done (took 3.093136091 seconds)
    (15/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.772783186 seconds)
    (16/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.64673277 seconds)
    (17/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.751496765 seconds)
    (18/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.755834526 seconds)
    (19/24) benchmarking ("any", "BitArray")...
    done (took 3.123137076 seconds)
    (20/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.753779913 seconds)
    (21/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.647799664 seconds)
    (22/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.725185834 seconds)
    (23/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.771194096 seconds)
    (24/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.647503346 seconds)
  done (took 68.650680534 seconds)
done (took 4664.234772576 seconds)
(3/22) benchmarking "misc"...
  (1/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 3.051447309 seconds)
    (2/2) benchmarking "Float64"...
    done (took 3.186953226 seconds)
  done (took 8.735483106 seconds)
  (2/15) benchmarking "perf highdim generator"...
  done (took 2.839101952 seconds)
  (3/15) benchmarking "20517"...
  done (took 3.028823918 seconds)
  (4/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "no conditional"...
    done (took 3.24184915 seconds)
    (2/2) benchmarking "conditional"...
    done (took 3.264739596 seconds)
  done (took 8.903759939 seconds)
  (5/15) benchmarking "afoldl"...
    (1/3) benchmarking "Int"...
    done (took 2.465734303 seconds)
    (2/3) benchmarking "Float64"...
    done (took 3.02026894 seconds)
    (3/3) benchmarking "Complex{Float64}"...
    done (took 3.044725817 seconds)
  done (took 10.922472648 seconds)
  (6/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.582468492 seconds)
  done (took 4.983010579 seconds)
  (7/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.911924799 seconds)
    (2/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.746545157 seconds)
    (3/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.593744807 seconds)
  done (took 10.64277051 seconds)
  (8/15) benchmarking "18129"...
  done (took 7.425583833 seconds)
  (9/15) benchmarking "23042"...
    (1/4) benchmarking "Float64"...
    done (took 3.177346446 seconds)
    (2/4) benchmarking "ComplexF32"...
    done (took 3.58186883 seconds)
    (3/4) benchmarking "ComplexF64"...
    done (took 3.652918439 seconds)
    (4/4) benchmarking "Float32"...
    done (took 2.913786541 seconds)
  done (took 15.740583482 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 7.402721688 seconds)
    (2/4) benchmarking ("parse", "nested")...
    done (took 7.408294811 seconds)
    (3/4) benchmarking ("parse", "array")...
    done (took 4.524469846 seconds)
    (4/4) benchmarking ("parse", "function")...
    done (took 2.813038235 seconds)
  done (took 24.548519022 seconds)
  (11/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float64"...
    done (took 7.422459673 seconds)
    (2/3) benchmarking "Float16"...
    done (took 7.413528626 seconds)
    (3/3) benchmarking "Float32"...
    done (took 7.414671942 seconds)
  done (took 24.652243558 seconds)
  (12/15) benchmarking "fastmath many args"...
  done (took 2.634589111 seconds)
  (13/15) benchmarking "bitshift"...
    (1/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.437171764 seconds)
    (2/4) benchmarking ("Int", "UInt")...
    done (took 2.439907321 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.439977448 seconds)
    (4/4) benchmarking ("UInt", "UInt")...
    done (took 2.438877982 seconds)
  done (took 12.151051088 seconds)
  (14/15) benchmarking "iterators"...
    (1/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.921205226 seconds)
    (2/10) benchmarking "zip(1:1)"...
    done (took 2.847833251 seconds)
    (3/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.864421749 seconds)
    (4/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.925667126 seconds)
    (5/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.254941097 seconds)
    (6/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.682013866 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.864335669 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.763664045 seconds)
    (9/10) benchmarking "zip(1:1000)"...
    done (took 2.532226698 seconds)
    (10/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.7296756 seconds)
  done (took 30.777252278 seconds)
  (15/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 2.930723658 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 2.756366811 seconds)
  done (took 8.078632768 seconds)
done (took 178.461322283 seconds)
(4/22) benchmarking "sort"...
  (1/11) benchmarking "length = 30"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.407387193 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.420080953 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.413801711 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.41772987 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.416984304 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.407736606 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.409600238 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.413789953 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.41762496 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.417155985 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.413130682 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.415235124 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.553658186 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.412899719 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.420671972 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.416437005 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.420871634 seconds)
  done (took 43.587000213 seconds)
  (2/11) benchmarking "length = 10000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.435842451 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 7.04863749 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 4.209875867 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 6.87350617 seconds)
    (5/17) benchmarking "descending"...
    done (took 5.282786271 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.440579524 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.616320567 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 4.144170518 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 7.321358857 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 4.20474255 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 4.22556951 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 5.075472048 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 7.42361289 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.056526274 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 4.4114221 seconds)
    (16/17) benchmarking "ascending"...
    done (took 5.186372283 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 4.404904547 seconds)
  done (took 84.754299808 seconds)
  (3/11) benchmarking "length = 3"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.424243427 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.420628793 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.419027848 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.42485603 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.417703218 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.416546008 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.416774668 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.41701793 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.416637027 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.416739646 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.418116618 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.417572933 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.442680942 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.420016995 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.42369268 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.421168878 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.422858311 seconds)
  done (took 43.559423582 seconds)
  (4/11) benchmarking "length = 100"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.416994899 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.463289368 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.429837037 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.45540117 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.44742798 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.416630863 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.418856635 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.430672664 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.447562073 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.433062386 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.430619999 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.440641139 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 3.300131214 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.43498159 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.435712484 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.445301779 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.437457058 seconds)
  done (took 44.687979729 seconds)
  (5/11) benchmarking "issues"...
    (1/13) benchmarking "small Float64 view"...
    done (took 2.415079061 seconds)
    (2/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 7.423942343 seconds)
    (3/13) benchmarking "sortslices sorting very short slices"...
    done (took 8.077135983 seconds)
    (4/13) benchmarking "Float16"...
    done (took 7.455592492 seconds)
    (5/13) benchmarking "sort(rand(10^8))"...
    done (took 15.465719649 seconds)
    (6/13) benchmarking "sortperm(rand(10^5))"...
    done (took 7.394654216 seconds)
    (7/13) benchmarking "sortperm on a view (Int)"...
    done (took 6.905996792 seconds)
    (8/13) benchmarking "small Int view"...
    done (took 2.411225437 seconds)
    (9/13) benchmarking "sortperm on a view (Float64)"...
    done (took 2.808080874 seconds)
    (10/13) benchmarking "inplace sorting of a view"...
    done (took 2.576953838 seconds)
    (11/13) benchmarking "sortperm(rand(10^7))"...
    done (took 13.523823176 seconds)
    (12/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 2.960489277 seconds)
    (13/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 2.823073206 seconds)
  done (took 84.640320888 seconds)
  (6/11) benchmarking "mergesort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 7.414102543 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 7.420169531 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 7.409718974 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 7.419280123 seconds)
  done (took 32.065385994 seconds)
  (7/11) benchmarking "quicksort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 7.408345365 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 7.41106959 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 7.404937349 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 7.411141371 seconds)
  done (took 32.039285358 seconds)
  (8/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 2.441364531 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 2.435174214 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 2.446514915 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 2.430440573 seconds)
  done (took 12.159687197 seconds)
  (9/11) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ones")...
    done (took 3.626211865 seconds)
    (2/8) benchmarking ("reverse", "ascending")...
    done (took 3.176489097 seconds)
    (3/8) benchmarking ("forwards", "random")...
    done (took 3.155050758 seconds)
    (4/8) benchmarking ("forwards", "ascending")...
    done (took 3.120639469 seconds)
    (5/8) benchmarking ("forwards", "descending")...
    done (took 2.954398387 seconds)
    (6/8) benchmarking ("reverse", "random")...
    done (took 3.344683784 seconds)
    (7/8) benchmarking ("reverse", "descending")...
    done (took 3.113823907 seconds)
    (8/8) benchmarking ("reverse", "ones")...
    done (took 3.557792607 seconds)
  done (took 28.445727393 seconds)
  (10/11) benchmarking "length = 1000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.413021365 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.77266871 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.588591838 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.746376306 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.614973214 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.428809381 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.43745783 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.637023807 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.793226531 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.650831647 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.634386194 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.639498183 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 7.408910836 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.565936722 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.607705304 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.600780126 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.669712992 seconds)
  done (took 51.605069633 seconds)
  (11/11) benchmarking "length = 10"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.411222193 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.415218221 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.419239109 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.415580707 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.415143176 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.410655707 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.413515941 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.417032326 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.414896755 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.415242037 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.415008375 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.412175608 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.497450834 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.41174446 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.421103583 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.412405354 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.422544769 seconds)
  done (took 43.537895104 seconds)
done (took 503.484104901 seconds)
(5/22) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 7.394008938 seconds)
done (took 9.786037996 seconds)
(6/22) benchmarking "shootout"...
  (1/12) benchmarking "binary_trees"...
  done (took 7.415310821 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.519723152 seconds)
  (3/12) benchmarking "regex_dna"...
  done (took 7.407369719 seconds)
  (4/12) benchmarking "fannkuch"...
  done (took 3.808762047 seconds)
  (5/12) benchmarking "mandelbrot"...
  done (took 7.407269931 seconds)
  (6/12) benchmarking "pidigits"...
  done (took 7.433695087 seconds)
  (7/12) benchmarking "spectralnorm"...
  done (took 7.403635129 seconds)
  (8/12) benchmarking "k_nucleotide"...
  done (took 7.473177445 seconds)
  (9/12) benchmarking "nbody"...
  done (took 3.717021083 seconds)
  (10/12) benchmarking "revcomp"...
  done (took 3.419877587 seconds)
  (11/12) benchmarking "nbody_vec"...
  done (took 6.411429269 seconds)
  (12/12) benchmarking "meteor_contest"...
  done (took 9.212842384 seconds)
done (took 76.023363636 seconds)
(7/22) benchmarking "sparse"...
  (1/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.64655435 seconds)
    (2/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.410574217 seconds)
    (3/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.507006596 seconds)
    (4/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 3.272657965 seconds)
    (5/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 3.062585768 seconds)
    (6/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.563316864 seconds)
    (7/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 6.281904785 seconds)
    (8/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 6.460075577 seconds)
    (9/54) benchmarking ("spmat", "range", 100)...
    done (took 2.858351058 seconds)
    (10/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.345794595 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 7.507009146 seconds)
    (12/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 6.341191319 seconds)
    (13/54) benchmarking ("spmat", "range", 10)...
    done (took 4.092384371 seconds)
    (14/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.600721789 seconds)
    (15/54) benchmarking ("spmat", "logical", 10)...
    done (took 3.163761421 seconds)
    (16/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.582437492 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 6.22052758 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.860691052 seconds)
    (19/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.715595015 seconds)
    (20/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.760253519 seconds)
    (21/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 4.079895189 seconds)
    (22/54) benchmarking ("spmat", "integer", 1000)...
    done (took 6.167899116 seconds)
    (23/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 7.404485704 seconds)
    (24/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.580753704 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.401532447 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 6.516483523 seconds)
    (27/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.214863819 seconds)
    (28/54) benchmarking ("spmat", "range", 1000)...
    done (took 7.31147175 seconds)
    (29/54) benchmarking ("spvec", "range", 1000)...
    done (took 4.60294681 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.486062312 seconds)
    (31/54) benchmarking ("spmat", "array", 100)...
    done (took 2.903309885 seconds)
    (32/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.166434729 seconds)
    (33/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.611721564 seconds)
    (34/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.640627452 seconds)
    (35/54) benchmarking ("spmat", "array", 10)...
    done (took 2.509328153 seconds)
    (36/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.411795049 seconds)
    (37/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.743763684 seconds)
    (38/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 3.108405131 seconds)
    (39/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.693907032 seconds)
    (40/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 7.234116316 seconds)
    (41/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.419881519 seconds)
    (42/54) benchmarking ("spvec", "range", 10000)...
    done (took 3.737653056 seconds)
    (43/54) benchmarking ("spmat", "logical", 1000)...
    done (took 7.400392941 seconds)
    (44/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.178504829 seconds)
    (45/54) benchmarking ("spvec", "logical", 10000)...
    done (took 3.062439756 seconds)
    (46/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.409076887 seconds)
    (47/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 3.277721701 seconds)
    (48/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.53993373 seconds)
    (49/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.563241539 seconds)
    (50/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 6.216697859 seconds)
    (51/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 3.543403129 seconds)
    (52/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 3.370664881 seconds)
    (53/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.645190546 seconds)
    (54/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 3.054467836 seconds)
  done (took 235.856894092 seconds)
  (2/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "adjoint"...
    done (took 7.626039702 seconds)
    (2/2) benchmarking "non-adjoint"...
    done (took 7.679293229 seconds)
  done (took 17.766842887 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("IJV", 1000)...
    done (took 2.667574516 seconds)
    (2/18) benchmarking ("SymTridiagonal", 10)...
    done (took 4.479677293 seconds)
    (3/18) benchmarking ("Diagonal", 100)...
    done (took 4.747677485 seconds)
    (4/18) benchmarking ("Tridiagonal", 10)...
    done (took 4.358249801 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 4.541955542 seconds)
    (6/18) benchmarking ("Diagonal", 1000)...
    done (took 2.855372938 seconds)
    (7/18) benchmarking ("Diagonal", 10)...
    done (took 3.832660877 seconds)
    (8/18) benchmarking ("IJV", 10)...
    done (took 3.03183281 seconds)
    (9/18) benchmarking ("IV", 100)...
    done (took 2.842607942 seconds)
    (10/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.557792248 seconds)
    (11/18) benchmarking ("IJV", 100)...
    done (took 2.935561244 seconds)
    (12/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.634806417 seconds)
    (13/18) benchmarking ("Bidiagonal", 10)...
    done (took 4.044365877 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.937992682 seconds)
    (15/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.95744634 seconds)
    (16/18) benchmarking ("IV", 10)...
    done (took 2.989088318 seconds)
    (17/18) benchmarking ("IV", 1000)...
    done (took 2.66539868 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 3.047146678 seconds)
  done (took 62.527206133 seconds)
  (4/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.865055877 seconds)
    (2/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 3.020530418 seconds)
    (3/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.847419268 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.408466364 seconds)
    (5/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 4.401840522 seconds)
    (6/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 7.416974285 seconds)
    (7/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.137135798 seconds)
    (8/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 5.687196133 seconds)
    (9/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.817325476 seconds)
    (10/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.898449125 seconds)
    (11/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.410877423 seconds)
    (12/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.947129151 seconds)
    (13/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.931172314 seconds)
    (14/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 3.196368158 seconds)
    (15/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 7.437661424 seconds)
    (16/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.403946144 seconds)
    (17/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.837493522 seconds)
    (18/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.406395799 seconds)
    (19/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.707647008 seconds)
    (20/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.43201456 seconds)
    (21/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.599241601 seconds)
    (22/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.99333193 seconds)
    (23/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.847541076 seconds)
    (24/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.410203946 seconds)
    (25/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.665189127 seconds)
    (26/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.421064329 seconds)
    (27/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.408332799 seconds)
    (28/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 4.434325687 seconds)
    (29/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.406124388 seconds)
    (30/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.406151026 seconds)
    (31/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.922803683 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.418710121 seconds)
    (33/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.661546072 seconds)
    (34/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.416010526 seconds)
    (35/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 7.166989678 seconds)
    (36/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.41696619 seconds)
    (37/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.407422351 seconds)
    (38/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.408457528 seconds)
    (39/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.776746689 seconds)
    (40/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.41318048 seconds)
    (41/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 7.401686554 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.848469248 seconds)
    (43/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.412328298 seconds)
    (44/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 3.245192835 seconds)
    (45/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.940644772 seconds)
    (46/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 3.184768556 seconds)
    (47/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.759270696 seconds)
    (48/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.925339665 seconds)
    (49/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 3.002090989 seconds)
    (50/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.585229183 seconds)
    (51/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.639409909 seconds)
    (52/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.963387595 seconds)
    (53/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.414617247 seconds)
    (54/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.975919999 seconds)
    (55/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.888550541 seconds)
    (56/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.411754527 seconds)
    (57/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.911615639 seconds)
    (58/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.402497598 seconds)
    (59/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.876252191 seconds)
    (60/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.850625187 seconds)
    (61/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.365354878 seconds)
    (62/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.407765323 seconds)
    (63/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.93243237 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.803100544 seconds)
    (65/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.411572595 seconds)
    (66/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 7.401080427 seconds)
    (67/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 3.001626912 seconds)
    (68/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.421267798 seconds)
    (69/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 4.444106252 seconds)
    (70/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.40506206 seconds)
    (71/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.367548837 seconds)
    (72/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 3.121170669 seconds)
    (73/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.40520448 seconds)
    (74/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.409674231 seconds)
    (75/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 3.155845757 seconds)
    (76/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.925767735 seconds)
    (77/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.408552448 seconds)
    (78/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.404997809 seconds)
    (79/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.774597106 seconds)
    (80/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.835744091 seconds)
    (81/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.441549194 seconds)
    (82/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.374603905 seconds)
    (83/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.406624913 seconds)
    (84/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.406552152 seconds)
    (85/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.411420117 seconds)
    (86/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 3.271118731 seconds)
    (87/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.410045974 seconds)
    (88/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.420865382 seconds)
    (89/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 3.251603952 seconds)
    (90/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.906363403 seconds)
    (91/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.358105512 seconds)
    (92/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.409398854 seconds)
    (93/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.903096941 seconds)
    (94/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.418608558 seconds)
    (95/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 7.410267723 seconds)
    (96/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.809635196 seconds)
    (97/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 3.283010511 seconds)
    (98/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 7.407101575 seconds)
    (99/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.639420948 seconds)
    (100/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.417501277 seconds)
    (101/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 7.325659964 seconds)
    (102/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.40629953 seconds)
    (103/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 6.80809993 seconds)
    (104/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.893819636 seconds)
    (105/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.409717759 seconds)
    (106/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.896378727 seconds)
    (107/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.955038951 seconds)
    (108/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.410359151 seconds)
    (109/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.403105713 seconds)
    (110/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.680094192 seconds)
    (111/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.420633906 seconds)
    (112/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 3.007437692 seconds)
    (113/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.973257688 seconds)
    (114/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.403312646 seconds)
    (115/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.409326167 seconds)
    (116/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.410254956 seconds)
    (117/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.406086957 seconds)
    (118/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.402771684 seconds)
    (119/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.891945563 seconds)
    (120/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.423660701 seconds)
    (121/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.40335308 seconds)
    (122/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.412440086 seconds)
    (123/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.884286786 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.406114331 seconds)
    (125/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.936756772 seconds)
    (126/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.946561078 seconds)
    (127/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 3.200379332 seconds)
    (128/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.409064374 seconds)
    (129/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.410298277 seconds)
    (130/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.406801186 seconds)
    (131/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.045099789 seconds)
    (132/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.357699046 seconds)
    (133/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.41565456 seconds)
    (134/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.403158321 seconds)
    (135/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 4.910458071 seconds)
    (136/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.406586245 seconds)
    (137/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.903644951 seconds)
    (138/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.417830356 seconds)
    (139/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.423133483 seconds)
    (140/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.573867205 seconds)
    (141/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 7.126156899 seconds)
    (142/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.780484334 seconds)
    (143/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.41913015 seconds)
    (144/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.405022956 seconds)
    (145/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.896449063 seconds)
    (146/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.644972425 seconds)
    (147/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 3.597931121 seconds)
    (148/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.418761238 seconds)
    (149/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.645361765 seconds)
    (150/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.431595648 seconds)
    (151/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.663436221 seconds)
    (152/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.885525081 seconds)
    (153/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.414436986 seconds)
    (154/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.631248338 seconds)
    (155/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.091210186 seconds)
    (156/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 7.405774428 seconds)
    (157/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.794047569 seconds)
    (158/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.86384942 seconds)
    (159/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.689376582 seconds)
    (160/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.429089178 seconds)
    (161/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.781942025 seconds)
    (162/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.416115816 seconds)
    (163/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.699199967 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.903333588 seconds)
    (165/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.413396125 seconds)
    (166/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.406641099 seconds)
    (167/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 5.867348179 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.807319214 seconds)
    (169/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.597808636 seconds)
    (170/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 3.178617349 seconds)
    (171/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.980605112 seconds)
    (172/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 5.218822894 seconds)
    (173/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.989657047 seconds)
    (174/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.405990672 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.407319649 seconds)
    (176/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 3.10864134 seconds)
    (177/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.412074917 seconds)
    (178/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.41552388 seconds)
    (179/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.407939063 seconds)
    (180/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 7.158582128 seconds)
    (181/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.897448354 seconds)
    (182/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.406395198 seconds)
    (183/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.835678794 seconds)
    (184/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.39411305 seconds)
    (185/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.891347822 seconds)
    (186/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.419719049 seconds)
    (187/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.944959018 seconds)
    (188/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.724724408 seconds)
    (189/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 7.427349667 seconds)
    (190/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.409985483 seconds)
    (191/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.408888848 seconds)
    (192/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.764798275 seconds)
    (193/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.896746093 seconds)
    (194/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.405449998 seconds)
    (195/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 7.405438208 seconds)
    (196/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.911387823 seconds)
    (197/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 3.133313888 seconds)
    (198/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.950500354 seconds)
    (199/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.40574793 seconds)
    (200/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 5.189339951 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.427230135 seconds)
    (202/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.40665708 seconds)
    (203/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 7.406356426 seconds)
    (204/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.908399296 seconds)
    (205/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.40924623 seconds)
    (206/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.430152598 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.587282697 seconds)
    (208/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.948050979 seconds)
    (209/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.41927505 seconds)
    (210/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.404712422 seconds)
    (211/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.96538698 seconds)
    (212/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.098704203 seconds)
    (213/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 3.683720439 seconds)
    (214/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.429558821 seconds)
    (215/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.890245243 seconds)
    (216/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.36974729 seconds)
    (217/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 7.411623768 seconds)
    (218/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.935248988 seconds)
    (219/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.408740137 seconds)
    (220/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.411088639 seconds)
    (221/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.97359345 seconds)
    (222/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.780339778 seconds)
    (223/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.918297519 seconds)
    (224/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.412941349 seconds)
  done (took 1138.504615524 seconds)
  (5/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 2.94607664 seconds)
    (2/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 7.484513575 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 3.784071729 seconds)
    (4/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 3.230015444 seconds)
    (5/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 3.233387505 seconds)
    (6/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 7.4896247 seconds)
    (7/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 2.96901307 seconds)
    (8/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 7.641443814 seconds)
    (9/16) benchmarking ("transpose", "(600, 600)")...
    done (took 2.82102623 seconds)
    (10/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 7.922993213 seconds)
    (11/16) benchmarking ("transpose", "(600, 400)")...
    done (took 2.702754426 seconds)
    (12/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 7.443252369 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 3.309709199 seconds)
    (14/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 7.674260147 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 7.669795337 seconds)
    (16/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 7.56891464 seconds)
  done (took 88.294685598 seconds)
  (6/7) benchmarking "sparse solves"...
    (1/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.485686119 seconds)
    (2/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.464697705 seconds)
    (3/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.454925348 seconds)
    (4/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.457619791 seconds)
    (5/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.468570824 seconds)
    (6/10) benchmarking "square system (default), vector rhs"...
    done (took 7.485326207 seconds)
    (7/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.481924811 seconds)
    (8/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.463985216 seconds)
    (9/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.448146852 seconds)
    (10/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.463442251 seconds)
  done (took 77.069909915 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 2.868464714 seconds)
    (2/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 7.553190745 seconds)
  done (took 12.815121721 seconds)
done (took 1635.246351307 seconds)
(8/22) benchmarking "dates"...
  (1/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.576878796 seconds)
    (2/7) benchmarking "month"...
    done (took 2.547425116 seconds)
    (3/7) benchmarking "year"...
    done (took 2.537934489 seconds)
    (4/7) benchmarking "millisecond"...
    done (took 2.445814998 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.465019484 seconds)
    (6/7) benchmarking "minute"...
    done (took 2.459652549 seconds)
    (7/7) benchmarking "second"...
    done (took 2.460172602 seconds)
  done (took 19.892970677 seconds)
  (2/7) benchmarking "parse"...
    (1/9) benchmarking "DateTime"...
    done (took 3.075128691 seconds)
    (2/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.922308986 seconds)
    (3/9) benchmarking "Date"...
    done (took 2.894774261 seconds)
    (4/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 3.081699866 seconds)
    (5/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.466017293 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 3.251593507 seconds)
    (7/9) benchmarking ("Date", "DateFormat")...
    done (took 2.442651636 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 3.170300823 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 3.274036554 seconds)
  done (took 28.979661792 seconds)
  (3/7) benchmarking "query"...
    (1/18) benchmarking ("isleapyear", "Date")...
    done (took 2.537985459 seconds)
    (2/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.45578488 seconds)
    (3/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.462087252 seconds)
    (4/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.470878379 seconds)
    (5/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.658323286 seconds)
    (6/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.584562772 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.471798857 seconds)
    (8/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.578960915 seconds)
    (9/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.621791629 seconds)
    (10/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.650149033 seconds)
    (11/18) benchmarking ("dayofyear", "Date")...
    done (took 2.662683815 seconds)
    (12/18) benchmarking ("dayofweek", "Date")...
    done (took 2.44767108 seconds)
    (13/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.627044162 seconds)
    (14/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.644325413 seconds)
    (15/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.575797254 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.61038927 seconds)
    (17/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.45336854 seconds)
    (18/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.605633538 seconds)
  done (took 48.51872508 seconds)
  (4/7) benchmarking "construction"...
    (1/2) benchmarking "DateTime"...
    done (took 2.427897301 seconds)
    (2/2) benchmarking "Date"...
    done (took 2.427860887 seconds)
  done (took 7.256285913 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.439068897 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.446732687 seconds)
  done (took 7.288742768 seconds)
  (6/7) benchmarking "string"...
    (1/2) benchmarking "DateTime"...
    done (took 3.575221554 seconds)
    (2/2) benchmarking "Date"...
    done (took 3.536778971 seconds)
  done (took 9.509238625 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("DateTime", "Month")...
    done (took 2.937018038 seconds)
    (2/10) benchmarking ("DateTime", "Hour")...
    done (took 2.437040413 seconds)
    (3/10) benchmarking ("DateTime", "Minute")...
    done (took 2.440719825 seconds)
    (4/10) benchmarking ("DateTime", "Second")...
    done (took 2.463070315 seconds)
    (5/10) benchmarking ("Date", "Year")...
    done (took 2.815826965 seconds)
    (6/10) benchmarking ("DateTime", "Year")...
    done (took 3.095064617 seconds)
    (7/10) benchmarking ("Date", "Month")...
    done (took 2.987349477 seconds)
    (8/10) benchmarking ("Date", "Day")...
    done (took 2.439665662 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.486701549 seconds)
    (10/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.56125912 seconds)
  done (took 29.124608316 seconds)
done (took 152.975076958 seconds)
(9/22) benchmarking "alloc"...
  (1/4) benchmarking "structs"...
  done (took 7.481608245 seconds)
  (2/4) benchmarking "strings"...
  done (took 7.428436635 seconds)
  (3/4) benchmarking "grow_array"...
  done (took 7.405832229 seconds)
  (4/4) benchmarking "arrays"...
  done (took 7.434902891 seconds)
done (took 32.213293895 seconds)
(10/22) benchmarking "find"...
  (1/3) benchmarking "findnext"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.582391693 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.588113687 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.674030685 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.676099144 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.674972155 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 2.968491882 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.671101629 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 2.548994281 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.691615873 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.581013108 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.564249589 seconds)
  done (took 31.620420068 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.582167521 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.588340684 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.675049905 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 3.17174656 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.687636551 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 3.308163114 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.675084281 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 2.620161051 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.684375768 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.581913955 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.691539309 seconds)
  done (took 32.664850416 seconds)
  (3/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.47906034 seconds)
    (2/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.505613293 seconds)
    (3/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.511014408 seconds)
    (4/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.58288785 seconds)
    (5/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.51707289 seconds)
    (6/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.5311703 seconds)
    (7/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.512532843 seconds)
    (8/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.538136484 seconds)
    (9/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.54379796 seconds)
    (10/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.471124543 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.519518587 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.452121681 seconds)
    (13/41) benchmarking ("BitVector", "10-90")...
    done (took 4.944736925 seconds)
    (14/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.523147724 seconds)
    (15/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.471047113 seconds)
    (16/41) benchmarking ("BitVector", "50-50")...
    done (took 3.961685031 seconds)
    (17/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.762088359 seconds)
    (18/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.543913458 seconds)
    (19/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.54139989 seconds)
    (20/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.537748393 seconds)
    (21/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.482420048 seconds)
    (22/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.516671167 seconds)
    (23/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.468963459 seconds)
    (24/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.561667071 seconds)
    (25/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.457464793 seconds)
    (26/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.456737389 seconds)
    (27/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.446120884 seconds)
    (28/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.566875774 seconds)
    (29/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.52514456 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.510885183 seconds)
    (31/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.534420805 seconds)
    (32/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.471356978 seconds)
    (33/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.57689976 seconds)
    (34/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.45534858 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.521126356 seconds)
    (36/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.456085209 seconds)
    (37/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.51547787 seconds)
    (38/41) benchmarking ("BitVector", "90-10")...
    done (took 2.745958436 seconds)
    (39/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.472631751 seconds)
    (40/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.469265177 seconds)
    (41/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.553539129 seconds)
  done (took 109.612631542 seconds)
done (took 176.296217508 seconds)
(11/22) benchmarking "io"...
  (1/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.86888599 seconds)
    (2/2) benchmarking "read"...
    done (took 2.930428588 seconds)
  done (took 8.193952033 seconds)
  (2/4) benchmarking "skipchars"...
  done (took 7.531758425 seconds)
  (3/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.915175693 seconds)
    (2/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.969916605 seconds)
    (3/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.964560986 seconds)
  done (took 26.245866436 seconds)
  (4/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.409011991 seconds)
    (2/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.819750987 seconds)
    (3/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 5.826121052 seconds)
    (4/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.417204499 seconds)
  done (took 27.891554116 seconds)
done (took 72.257193104 seconds)
(12/22) benchmarking "tuple"...
  (1/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 2.414860849 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 2.414825012 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 2.416634508 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 2.415335164 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 2.416670829 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 2.416856657 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 2.419935796 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 2.417733593 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 2.417662392 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 2.418351662 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 2.417340778 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 2.419071835 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 2.415789137 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 2.414537009 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 2.411788968 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 2.409171473 seconds)
  done (took 41.056039571 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 2.410644887 seconds)
    (2/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 2.414897253 seconds)
    (3/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.426562155 seconds)
    (4/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 2.417858621 seconds)
    (5/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 2.416751522 seconds)
    (6/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 2.416726264 seconds)
    (7/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 2.417766151 seconds)
    (8/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 2.417410623 seconds)
  done (took 21.731519047 seconds)
  (3/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 2.415450308 seconds)
    (2/24) benchmarking ("minimum", "(4,)")...
    done (took 2.415938629 seconds)
    (3/24) benchmarking ("sum", "(8, 8)")...
    done (took 2.417679018 seconds)
    (4/24) benchmarking ("minimum", "(2,)")...
    done (took 2.415817951 seconds)
    (5/24) benchmarking ("minimum", "(16,)")...
    done (took 2.416396408 seconds)
    (6/24) benchmarking ("sum", "(4, 4)")...
    done (took 2.416190462 seconds)
    (7/24) benchmarking ("sumabs", "(4,)")...
    done (took 2.415723189 seconds)
    (8/24) benchmarking ("sum", "(16,)")...
    done (took 2.415251541 seconds)
    (9/24) benchmarking ("sumabs", "(2,)")...
    done (took 2.412957862 seconds)
    (10/24) benchmarking ("minimum", "(2, 2)")...
    done (took 2.410690263 seconds)
    (11/24) benchmarking ("minimum", "(4, 4)")...
    done (took 2.410861315 seconds)
    (12/24) benchmarking ("minimum", "(8,)")...
    done (took 2.409742853 seconds)
    (13/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 2.415066279 seconds)
    (14/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 2.41425664 seconds)
    (15/24) benchmarking ("sumabs", "(8,)")...
    done (took 2.416421429 seconds)
    (16/24) benchmarking ("minimum", "(8, 8)")...
    done (took 2.415782833 seconds)
    (17/24) benchmarking ("sum", "(2,)")...
    done (took 2.413791048 seconds)
    (18/24) benchmarking ("sumabs", "(16,)")...
    done (took 2.414521037 seconds)
    (19/24) benchmarking ("sum", "(16, 16)")...
    done (took 2.415557255 seconds)
    (20/24) benchmarking ("sum", "(4,)")...
    done (took 2.413601959 seconds)
    (21/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 2.415330891 seconds)
    (22/24) benchmarking ("sum", "(8,)")...
    done (took 2.414355564 seconds)
    (23/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 2.414033419 seconds)
    (24/24) benchmarking ("minimum", "(16, 16)")...
    done (took 2.415692131 seconds)
  done (took 60.349603581 seconds)
  (4/4) benchmarking "misc"...
    (1/2) benchmarking "11899"...
    done (took 2.443133385 seconds)
    (2/2) benchmarking "longtuple"...
    done (took 2.879653936 seconds)
  done (took 7.720199675 seconds)
done (took 133.256180353 seconds)
(13/22) benchmarking "string"...
  (1/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.531484105 seconds)
    (2/2) benchmarking "String"...
    done (took 2.605364046 seconds)
  done (took 7.535165919 seconds)
  (2/7) benchmarking "join"...
  done (took 7.501296713 seconds)
  (3/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "equal"...
    done (took 2.574792697 seconds)
    (2/4) benchmarking "different"...
    done (took 2.509319459 seconds)
    (3/4) benchmarking "identical"...
    done (took 2.709323111 seconds)
    (4/4) benchmarking "different length"...
    done (took 2.574849001 seconds)
  done (took 12.771636234 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.423641441 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "backtracking"...
    done (took 7.222738523 seconds)
    (2/7) benchmarking "target length 50000"...
    done (took 3.391415703 seconds)
    (3/7) benchmarking "target length 2"...
    done (took 3.044488531 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.911749517 seconds)
    (5/7) benchmarking "target length 1000"...
    done (took 2.608885867 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.059052773 seconds)
    (7/7) benchmarking "no backtracking"...
    done (took 5.311801366 seconds)
  done (took 33.949659428 seconds)
  (6/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.72268418 seconds)
    (2/3) benchmarking "different"...
    done (took 2.468990531 seconds)
    (3/3) benchmarking "different length"...
    done (took 2.449984005 seconds)
  done (took 10.04597043 seconds)
  (7/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.003981952 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.525987767 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.700609709 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.689408046 seconds)
  done (took 17.32238544 seconds)
done (took 94.963769177 seconds)
(14/22) benchmarking "random"...
  (1/5) benchmarking "ranges"...
    (1/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.463235486 seconds)
    (2/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.444283089 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.457871725 seconds)
    (4/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 3.025876648 seconds)
    (5/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 3.27102863 seconds)
    (6/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.458978093 seconds)
    (7/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.500861397 seconds)
    (8/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.444641549 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.537773131 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 3.648422664 seconds)
    (11/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 3.668896221 seconds)
    (12/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 3.361200746 seconds)
    (13/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.444843015 seconds)
    (14/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 7.406754603 seconds)
    (15/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 4.721265264 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.458998707 seconds)
    (17/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.445268202 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.510241237 seconds)
    (19/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.444909771 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.579344003 seconds)
    (21/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.456802149 seconds)
    (22/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.444811692 seconds)
    (23/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.465111838 seconds)
    (24/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.462790064 seconds)
    (25/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.526356598 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.473755093 seconds)
    (27/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.443328588 seconds)
    (28/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.465463379 seconds)
    (29/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.445280223 seconds)
    (30/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.448532773 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.527108088 seconds)
    (32/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.456437178 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.954097945 seconds)
    (34/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 3.296613632 seconds)
    (35/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.724272814 seconds)
    (36/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 4.247024417 seconds)
    (37/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 3.255019998 seconds)
    (38/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.466595251 seconds)
    (39/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.469937852 seconds)
    (40/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.469517516 seconds)
    (41/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.399000001 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 3.025546908 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.582982527 seconds)
    (44/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.511091248 seconds)
    (45/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.466443345 seconds)
    (46/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.466687694 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.4454402 seconds)
    (48/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.46575661 seconds)
    (49/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.809391345 seconds)
    (50/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 3.040018451 seconds)
    (51/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 4.185776778 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.585520118 seconds)
    (53/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 3.594796583 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.516303777 seconds)
    (55/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.457983397 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.466699576 seconds)
    (57/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.523269795 seconds)
    (58/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.953620272 seconds)
    (59/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 3.290829432 seconds)
    (60/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.441381331 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.471936003 seconds)
    (62/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.441799326 seconds)
    (63/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.463110245 seconds)
    (64/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.50626013 seconds)
    (65/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.953378922 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 3.269946481 seconds)
    (67/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 3.721296775 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 3.208848262 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.505317065 seconds)
    (70/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 6.571245584 seconds)
    (71/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 3.150818941 seconds)
    (72/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.95073102 seconds)
  done (took 212.637312277 seconds)
  (2/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.887598781 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.494717804 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 3.065944757 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.835205354 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 3.075985545 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.578695224 seconds)
  done (took 21.094873506 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.464571298 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.449877062 seconds)
    (3/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.452547695 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.746861475 seconds)
    (5/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.537569288 seconds)
    (6/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.472072735 seconds)
    (7/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.447904742 seconds)
    (8/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.449221943 seconds)
    (9/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.498551347 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.481656226 seconds)
    (11/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.466152778 seconds)
    (12/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.448455486 seconds)
    (13/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.449788852 seconds)
    (14/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 7.402604328 seconds)
    (15/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.717629836 seconds)
    (16/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.466563523 seconds)
    (17/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.44892734 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.462011555 seconds)
    (19/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.74297231 seconds)
    (20/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.459703236 seconds)
    (21/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.448112645 seconds)
    (22/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.463667304 seconds)
    (23/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.697758105 seconds)
    (24/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.461361475 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.462405707 seconds)
    (26/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.508037673 seconds)
    (27/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.53650013 seconds)
    (28/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.500877632 seconds)
    (29/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.471312883 seconds)
    (30/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.728188432 seconds)
    (31/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.457538723 seconds)
    (32/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.586915498 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.481923308 seconds)
    (34/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.452268301 seconds)
    (35/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.463039757 seconds)
    (36/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.740411246 seconds)
    (37/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.628201937 seconds)
    (38/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.697175234 seconds)
    (39/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 7.402224975 seconds)
    (40/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.40437062 seconds)
    (41/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 3.639095004 seconds)
    (42/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 3.286556251 seconds)
    (43/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 3.309976906 seconds)
    (44/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 3.858739801 seconds)
    (45/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.698270375 seconds)
    (46/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.516031822 seconds)
    (47/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.467267811 seconds)
    (48/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.630169572 seconds)
    (49/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.409218718 seconds)
    (50/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 3.291381285 seconds)
    (51/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.444798251 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.462375247 seconds)
    (53/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.588307164 seconds)
    (54/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.403233572 seconds)
    (55/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.602440149 seconds)
    (56/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.570183849 seconds)
    (57/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.463126587 seconds)
    (58/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 7.402132326 seconds)
    (59/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.457885984 seconds)
    (60/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.450843427 seconds)
    (61/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.449997795 seconds)
    (62/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.473042807 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.631380331 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.466318679 seconds)
    (65/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.444136805 seconds)
    (66/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.66285939 seconds)
    (67/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.697167109 seconds)
    (68/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 7.403191032 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 3.17223524 seconds)
    (70/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.459791406 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.447417964 seconds)
    (72/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.612696999 seconds)
    (73/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 3.59713578 seconds)
    (74/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.460815761 seconds)
    (75/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.594101501 seconds)
    (76/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.458996858 seconds)
    (77/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.505158514 seconds)
    (78/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 7.404618982 seconds)
    (79/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.575192974 seconds)
    (80/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 3.343423729 seconds)
    (81/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.695172017 seconds)
    (82/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 7.405022836 seconds)
    (83/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.449487696 seconds)
    (84/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.465998877 seconds)
    (85/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.402834963 seconds)
    (86/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.464990114 seconds)
    (87/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.730255669 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.459089164 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 3.308754939 seconds)
    (90/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.47611018 seconds)
    (91/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 7.403580044 seconds)
    (92/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.525348591 seconds)
    (93/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 3.137935769 seconds)
    (94/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.46819398 seconds)
    (95/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.854268413 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.698421583 seconds)
    (97/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.760391097 seconds)
  done (took 310.644769027 seconds)
  (4/5) benchmarking "sequences"...
    (1/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.667964944 seconds)
    (2/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.75088921 seconds)
    (3/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 3.012860175 seconds)
    (4/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.752087936 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.548392565 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.746763739 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 3.088575137 seconds)
  done (took 21.963030095 seconds)
  (5/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.612668106 seconds)
    (2/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.781030794 seconds)
    (3/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 7.403405543 seconds)
    (4/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.407355263 seconds)
    (5/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 7.403367059 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.623518588 seconds)
    (7/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.403852345 seconds)
    (8/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.767936002 seconds)
    (9/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.630568105 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.782614386 seconds)
    (11/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.667181314 seconds)
    (12/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.769359926 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.404065785 seconds)
    (14/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 7.402633697 seconds)
    (15/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.404651034 seconds)
    (16/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.626042067 seconds)
    (17/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.505650592 seconds)
    (18/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.635696114 seconds)
    (19/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 7.403113127 seconds)
    (20/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.404199958 seconds)
    (21/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.614469721 seconds)
    (22/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.614281834 seconds)
    (23/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.634219068 seconds)
    (24/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.405471497 seconds)
    (25/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.469998466 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.403553503 seconds)
    (27/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 7.401822409 seconds)
    (28/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.703959555 seconds)
    (29/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.599644437 seconds)
    (30/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.649819433 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.408440163 seconds)
    (32/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.730341416 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.766042308 seconds)
    (34/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.630736669 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 7.409265813 seconds)
    (36/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.566916283 seconds)
    (37/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.755859903 seconds)
    (38/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.720317242 seconds)
    (39/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.641540548 seconds)
    (40/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.452856494 seconds)
    (41/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.586718158 seconds)
    (42/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.496202324 seconds)
    (43/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.689993087 seconds)
    (44/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.56794936 seconds)
    (45/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.708099014 seconds)
    (46/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.578619726 seconds)
    (47/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.568570203 seconds)
    (48/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.724933044 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.407344947 seconds)
    (50/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.452654738 seconds)
    (51/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.593632439 seconds)
    (52/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.403130609 seconds)
    (53/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.618365299 seconds)
    (54/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.470623798 seconds)
    (55/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.631955991 seconds)
    (56/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.754478994 seconds)
    (57/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.608866991 seconds)
    (58/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 7.40328724 seconds)
    (59/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.580047997 seconds)
    (60/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.402949181 seconds)
    (61/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.693869513 seconds)
    (62/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 7.402863143 seconds)
    (63/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 7.403970451 seconds)
    (64/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 7.403263513 seconds)
    (65/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.644237854 seconds)
    (66/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 7.407406757 seconds)
  done (took 281.255982801 seconds)
done (took 850.015225569 seconds)
(15/22) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.338271824 seconds)
  (2/8) benchmarking "mandel"...
  done (took 3.822237229 seconds)
  (3/8) benchmarking "pisum"...
  done (took 7.428985019 seconds)
  (4/8) benchmarking "randmatmul"...
  done (took 7.481698562 seconds)
  (5/8) benchmarking "printfd"...
  done (took 7.398518344 seconds)
  (6/8) benchmarking "randmatstat"...
  done (took 7.416914584 seconds)
  (7/8) benchmarking "fib"...
  done (took 2.810894546 seconds)
  (8/8) benchmarking "parseint"...
  done (took 3.369282251 seconds)
done (took 47.463339835 seconds)
(16/22) benchmarking "broadcast"...
  (1/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "scal_tup")...
    done (took 2.454801018 seconds)
    (2/9) benchmarking (5, "scal_tup")...
    done (took 2.4644185 seconds)
    (3/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.460447232 seconds)
    (4/9) benchmarking (10, "tup_tup")...
    done (took 2.453374887 seconds)
    (5/9) benchmarking (5, "tup_tup")...
    done (took 2.45297358 seconds)
    (6/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.454831295 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 7.411826401 seconds)
    (8/9) benchmarking (3, "scal_tup")...
    done (took 2.458691233 seconds)
    (9/9) benchmarking (3, "tup_tup")...
    done (took 2.441474573 seconds)
  done (took 29.457709842 seconds)
  (2/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.405703519 seconds)
    (2/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.229689289 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.405260515 seconds)
  done (took 23.43839037 seconds)
  (3/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 5)...
    done (took 2.537174755 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 2.706034037 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 2.545989382 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 2.658842853 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.857768213 seconds)
    (6/6) benchmarking ("tuple", 10)...
    done (took 2.732487629 seconds)
  done (took 18.434791732 seconds)
  (4/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 7.409831672 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.406831119 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 7.406156224 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.407640056 seconds)
  done (took 32.026886312 seconds)
  (5/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 2)...
    done (took 2.855954062 seconds)
    (2/4) benchmarking ("(1000, 1000)", 1)...
    done (took 2.493359357 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 2.530940745 seconds)
    (4/4) benchmarking ("(10000000,)", 1)...
    done (took 2.875149704 seconds)
  done (took 13.152302793 seconds)
  (6/6) benchmarking "26942"...
  done (took 3.977983884 seconds)
done (took 122.904863624 seconds)
(17/22) benchmarking "parallel"...
done (took 2.417723552 seconds)
(18/22) benchmarking "linalg"...
  (1/4) benchmarking "blas"...
    (1/36) benchmarking "gemv"...
    done (took 5.183017357 seconds)
    (2/36) benchmarking "nrm2"...
    done (took 3.27909629 seconds)
    (3/36) benchmarking "trsv"...
    done (took 3.910318805 seconds)
    (4/36) benchmarking "gbmv"...
    done (took 4.793973449 seconds)
    (5/36) benchmarking "asum"...
    done (took 3.16918205 seconds)
    (6/36) benchmarking "trsm"...
    done (took 7.464254142 seconds)
    (7/36) benchmarking "symv!"...
    done (took 3.786364505 seconds)
    (8/36) benchmarking "symm!"...
    done (took 7.488407684 seconds)
    (9/36) benchmarking "trmv"...
    done (took 3.86653973 seconds)
    (10/36) benchmarking "dot"...
    done (took 3.377018078 seconds)
    (11/36) benchmarking "herk"...
    done (took 7.601454851 seconds)
    (12/36) benchmarking "dotu"...
    done (took 3.424857245 seconds)
    (13/36) benchmarking "scal"...
    done (took 2.532957364 seconds)
    (14/36) benchmarking "sbmv"...
    done (took 4.763579456 seconds)
    (15/36) benchmarking "dotc"...
    done (took 3.423538836 seconds)
    (16/36) benchmarking "gemm!"...
    done (took 7.494009512 seconds)
    (17/36) benchmarking "gemv!"...
    done (took 5.137401959 seconds)
    (18/36) benchmarking "symm"...
    done (took 7.471064224 seconds)
    (19/36) benchmarking "ger!"...
    done (took 7.405948135 seconds)
    (20/36) benchmarking "trsm!"...
    done (took 7.436648489 seconds)
    (21/36) benchmarking "gemm"...
    done (took 7.459318528 seconds)
    (22/36) benchmarking "trmm!"...
    done (took 7.465264939 seconds)
    (23/36) benchmarking "herk!"...
    done (took 7.524251499 seconds)
    (24/36) benchmarking "scal!"...
    done (took 3.346727795 seconds)
    (25/36) benchmarking "syrk"...
    done (took 7.453257493 seconds)
    (26/36) benchmarking "blascopy!"...
    done (took 3.66965871 seconds)
    (27/36) benchmarking "gbmv!"...
    done (took 4.781092837 seconds)
    (28/36) benchmarking "trmm"...
    done (took 7.445501273 seconds)
    (29/36) benchmarking "syrk!"...
    done (took 7.471408326 seconds)
    (30/36) benchmarking "her!"...
    done (took 7.406622727 seconds)
    (31/36) benchmarking "syr!"...
    done (took 7.407748569 seconds)
    (32/36) benchmarking "sbmv!"...
    done (took 4.720376623 seconds)
    (33/36) benchmarking "trsv!"...
    done (took 3.882705249 seconds)
    (34/36) benchmarking "trmv!"...
    done (took 3.839757346 seconds)
    (35/36) benchmarking "symv"...
    done (took 3.8324599 seconds)
    (36/36) benchmarking "axpy!"...
    done (took 3.64674174 seconds)
  done (took 196.75982003 seconds)
  (2/4) benchmarking "factorization"...
    (1/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.47975341 seconds)
    (2/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.533362104 seconds)
    (3/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.430050524 seconds)
    (4/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.529946455 seconds)
    (5/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.435012796 seconds)
    (6/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.412864097 seconds)
    (7/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.56763336 seconds)
    (8/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.437109982 seconds)
    (9/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.661415828 seconds)
    (10/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.582613174 seconds)
    (11/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 3.625987624 seconds)
    (12/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.540222312 seconds)
    (13/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.418541545 seconds)
    (14/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.442081074 seconds)
    (15/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.440964435 seconds)
    (16/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 8.475319667 seconds)
    (17/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.528388918 seconds)
    (18/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.450803128 seconds)
    (19/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.478204606 seconds)
    (20/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 2.448246785 seconds)
    (21/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 9.709907988 seconds)
    (22/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.552264781 seconds)
    (23/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 8.950497785 seconds)
    (24/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.432238153 seconds)
    (25/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.417906857 seconds)
    (26/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.468369783 seconds)
    (27/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.429787502 seconds)
    (28/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.408969207 seconds)
    (29/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.533321935 seconds)
    (30/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.333903003 seconds)
    (31/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 8.467333516 seconds)
    (32/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 8.085914555 seconds)
  done (took 221.106083825 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.505826039 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.408704011 seconds)
    (2/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.40744115 seconds)
    (3/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 2.404888964 seconds)
    (4/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.405966093 seconds)
    (5/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.409124446 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.40430415 seconds)
    (7/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.548031953 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.405639967 seconds)
    (9/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 2.403688206 seconds)
    (10/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.913397924 seconds)
    (11/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 2.404893393 seconds)
    (12/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.404590456 seconds)
    (13/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.407333374 seconds)
    (14/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.406148799 seconds)
    (15/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.407982656 seconds)
    (16/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.411039172 seconds)
    (17/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.406019941 seconds)
    (18/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 18.903832957 seconds)
    (19/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.420018843 seconds)
    (20/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.404404976 seconds)
    (21/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.409166634 seconds)
    (22/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.479226365 seconds)
    (23/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.79427431 seconds)
    (24/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.780126548 seconds)
    (25/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.428651091 seconds)
    (26/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.406028521 seconds)
    (27/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.406775719 seconds)
    (28/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.407767137 seconds)
    (29/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 5.017830386 seconds)
    (30/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.463736373 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.406989586 seconds)
    (32/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.409901491 seconds)
    (33/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.421915793 seconds)
    (34/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.409294017 seconds)
    (35/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.416957916 seconds)
    (36/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.406857967 seconds)
    (37/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.40919654 seconds)
    (38/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.484462106 seconds)
    (39/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.471404512 seconds)
    (40/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.421900031 seconds)
    (41/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.407062437 seconds)
    (42/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.408876452 seconds)
    (43/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 2.404705551 seconds)
    (44/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.405075002 seconds)
    (45/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.464809142 seconds)
    (46/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.618827643 seconds)
    (47/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 5.01276563 seconds)
    (48/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.401801258 seconds)
    (49/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.453813068 seconds)
    (50/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.609818893 seconds)
    (51/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.408865754 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 3.003047005 seconds)
    (53/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.531593401 seconds)
    (54/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.405730233 seconds)
    (55/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.40539747 seconds)
    (56/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.823637894 seconds)
    (57/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.405317741 seconds)
    (58/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.413403623 seconds)
    (59/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.405370668 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.442645345 seconds)
    (61/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 25.872486128 seconds)
    (62/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.41623415 seconds)
    (63/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.531483471 seconds)
    (64/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 23.350916796 seconds)
    (65/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 2.40551118 seconds)
    (66/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 23.434472894 seconds)
    (67/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.40492749 seconds)
    (68/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 5.016837166 seconds)
    (69/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.410494724 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.149523142 seconds)
    (71/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.406474144 seconds)
    (72/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.408768197 seconds)
    (73/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.475140868 seconds)
    (74/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.111910148 seconds)
    (75/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 2.405501335 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.482186531 seconds)
    (77/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 7.092515866 seconds)
    (78/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.412492054 seconds)
    (79/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.489370448 seconds)
    (80/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.406170409 seconds)
    (81/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 2.403940589 seconds)
    (82/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.406220924 seconds)
    (83/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.444059239 seconds)
    (84/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.081478607 seconds)
    (85/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.482291106 seconds)
    (86/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.412028776 seconds)
    (87/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.415592323 seconds)
    (88/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.465323738 seconds)
    (89/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.102933511 seconds)
    (90/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.415927051 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.412916668 seconds)
    (92/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.412194701 seconds)
    (93/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.412137956 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.412321249 seconds)
    (95/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.416699588 seconds)
    (96/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 2.413015336 seconds)
    (97/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.412218517 seconds)
    (98/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.417211102 seconds)
    (99/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.41318724 seconds)
    (100/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.475127679 seconds)
    (101/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.449767055 seconds)
    (102/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.428488947 seconds)
    (103/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 11.20114806 seconds)
    (104/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.424965925 seconds)
    (105/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.409838626 seconds)
    (106/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 25.810670764 seconds)
    (107/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.412720813 seconds)
    (108/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.466296885 seconds)
    (109/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.4139945 seconds)
    (110/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.408757839 seconds)
    (111/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.407650464 seconds)
    (112/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.64356373 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.438728988 seconds)
    (114/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 25.750717331 seconds)
    (115/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.476853234 seconds)
    (116/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.40517728 seconds)
    (117/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.784647681 seconds)
    (118/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.417982939 seconds)
  done (took 490.234623001 seconds)
done (took 913.001017558 seconds)
(19/22) benchmarking "collection"...
  (1/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.602316979 seconds)
    (2/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.680613152 seconds)
    (3/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.600164242 seconds)
    (4/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.526749772 seconds)
    (5/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.665019217 seconds)
    (6/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.953704692 seconds)
    (7/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 3.008598096 seconds)
    (8/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.33796947 seconds)
    (9/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.646953425 seconds)
    (10/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.67939883 seconds)
    (11/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 4.029515869 seconds)
    (12/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.662622405 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.659846606 seconds)
    (14/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.533152389 seconds)
    (15/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.443738319 seconds)
    (16/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.548842907 seconds)
    (17/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.60006082 seconds)
    (18/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.558903681 seconds)
    (19/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 3.503237985 seconds)
    (20/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.526499441 seconds)
    (21/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.340527989 seconds)
    (22/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.538740937 seconds)
    (23/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.401939598 seconds)
    (24/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.662146832 seconds)
    (25/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.4975903 seconds)
    (26/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.50623373 seconds)
    (27/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.598346296 seconds)
    (28/117) benchmarking ("Set", "Int", "union")...
    done (took 2.650295977 seconds)
    (29/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.352992348 seconds)
    (30/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.467665598 seconds)
    (31/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.901846897 seconds)
    (32/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.547602426 seconds)
    (33/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.486869092 seconds)
    (34/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.754592588 seconds)
    (35/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 3.488138156 seconds)
    (36/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.545647457 seconds)
    (37/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.681484739 seconds)
    (38/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.471270395 seconds)
    (39/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.535381328 seconds)
    (40/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.523079896 seconds)
    (41/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.444448935 seconds)
    (42/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.929019436 seconds)
    (43/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.622940383 seconds)
    (44/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.350502122 seconds)
    (45/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.404658493 seconds)
    (46/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 3.857733115 seconds)
    (47/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.450403132 seconds)
    (48/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 3.611534008 seconds)
    (49/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 3.281515006 seconds)
    (50/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.536783117 seconds)
    (51/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.472234378 seconds)
    (52/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.916591558 seconds)
    (53/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 3.019419595 seconds)
    (54/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.671421914 seconds)
    (55/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.686214181 seconds)
    (56/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.623985402 seconds)
    (57/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 3.75306247 seconds)
    (58/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.604657053 seconds)
    (59/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.60770291 seconds)
    (60/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.613444998 seconds)
    (61/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 3.583040835 seconds)
    (62/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 3.47420612 seconds)
    (63/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.598701629 seconds)
    (64/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.682894954 seconds)
    (65/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.567269703 seconds)
    (66/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.655214015 seconds)
    (67/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 3.532969657 seconds)
    (68/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.915647259 seconds)
    (69/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.462681782 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.603275701 seconds)
    (71/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.594796284 seconds)
    (72/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 5.076331744 seconds)
    (73/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.338172863 seconds)
    (74/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.665436799 seconds)
    (75/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.634812462 seconds)
    (76/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.53431995 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.885010693 seconds)
    (78/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.539929733 seconds)
    (79/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 3.423686977 seconds)
    (80/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 4.311808401 seconds)
    (81/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 3.75683223 seconds)
    (82/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.634144563 seconds)
    (83/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.678870724 seconds)
    (84/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.855673985 seconds)
    (85/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.602902265 seconds)
    (86/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 3.537902489 seconds)
    (87/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.601729989 seconds)
    (88/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.550459624 seconds)
    (89/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.472671869 seconds)
    (90/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.558938614 seconds)
    (91/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.471469996 seconds)
    (92/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.9796803 seconds)
    (93/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.740373272 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 5.935570738 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.732911167 seconds)
    (96/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.676291032 seconds)
    (97/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.694257928 seconds)
    (98/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 3.00191283 seconds)
    (99/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.52094971 seconds)
    (100/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.603708063 seconds)
    (101/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.32474558 seconds)
    (102/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.752886058 seconds)
    (103/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.691542812 seconds)
    (104/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.823333897 seconds)
    (105/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.486593274 seconds)
    (106/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.507763529 seconds)
    (107/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.694139134 seconds)
    (108/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.469916252 seconds)
    (109/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.469616565 seconds)
    (110/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.929568321 seconds)
    (111/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.492623856 seconds)
    (112/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.605255217 seconds)
    (113/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.664386899 seconds)
    (114/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 3.778920666 seconds)
    (115/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.913378249 seconds)
    (116/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.687990634 seconds)
    (117/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 3.587022027 seconds)
  done (took 351.146475169 seconds)
  (2/6) benchmarking "optimizations"...
    (1/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 3.825368189 seconds)
    (2/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.425223485 seconds)
    (3/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.41036188 seconds)
    (4/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.405561777 seconds)
    (5/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.406118102 seconds)
    (6/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.407879975 seconds)
    (7/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.417081171 seconds)
    (8/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 4.274787321 seconds)
    (9/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.502587927 seconds)
    (10/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.410039581 seconds)
    (11/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.407177262 seconds)
    (12/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.408147609 seconds)
    (13/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.42535664 seconds)
    (14/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.413275471 seconds)
    (15/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.669403988 seconds)
    (16/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.42574075 seconds)
    (17/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.413538832 seconds)
    (18/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.412833292 seconds)
    (19/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.415841244 seconds)
    (20/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.415470744 seconds)
    (21/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.422844394 seconds)
    (22/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.406668617 seconds)
    (23/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.085508429 seconds)
    (24/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.498631099 seconds)
    (25/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.406595461 seconds)
    (26/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.409542145 seconds)
    (27/27) benchmarking ("BitSet", "Int8")...
    done (took 4.113189294 seconds)
  done (took 183.638369431 seconds)
  (3/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.492838946 seconds)
    (2/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.908442438 seconds)
    (3/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.66502137 seconds)
    (4/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.749796962 seconds)
    (5/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.797346065 seconds)
    (6/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.738660875 seconds)
    (7/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.474991227 seconds)
    (8/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.482009129 seconds)
    (9/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.539473575 seconds)
    (10/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.686387181 seconds)
    (11/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 7.408260469 seconds)
    (12/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.663979456 seconds)
    (13/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.441881497 seconds)
    (14/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.863729312 seconds)
    (15/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.464581338 seconds)
    (16/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.47506869 seconds)
    (17/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.480274991 seconds)
    (18/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.439284422 seconds)
    (19/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.522793565 seconds)
    (20/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.648857968 seconds)
    (21/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.533416655 seconds)
    (22/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.473534952 seconds)
    (23/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.729645981 seconds)
    (24/105) benchmarking ("Set", "Int", "first")...
    done (took 2.484193792 seconds)
    (25/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.473626393 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.640964645 seconds)
    (27/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.638024241 seconds)
    (28/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.636350127 seconds)
    (29/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.574621227 seconds)
    (30/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.662358735 seconds)
    (31/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.795920902 seconds)
    (32/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.457509804 seconds)
    (33/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.440202416 seconds)
    (34/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.482460673 seconds)
    (35/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.540925874 seconds)
    (36/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.612433636 seconds)
    (37/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.527934584 seconds)
    (38/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.826125274 seconds)
    (39/105) benchmarking ("Set", "Int", "length")...
    done (took 2.459697051 seconds)
    (40/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.648382663 seconds)
    (41/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.449962693 seconds)
    (42/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.817193288 seconds)
    (43/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.449028982 seconds)
    (44/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.489625146 seconds)
    (45/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.634871607 seconds)
    (46/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.543966285 seconds)
    (47/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.878041724 seconds)
    (48/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.95621179 seconds)
    (49/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.711398044 seconds)
    (50/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.486736125 seconds)
    (51/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.47760117 seconds)
    (52/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.546120709 seconds)
    (53/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.794301005 seconds)
    (54/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.666734334 seconds)
    (55/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 3.831398372 seconds)
    (56/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.440436925 seconds)
    (57/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.874572588 seconds)
    (58/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.716984759 seconds)
    (59/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.694985249 seconds)
    (60/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.438008073 seconds)
    (61/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.694607789 seconds)
    (62/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.467413465 seconds)
    (63/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.473925697 seconds)
    (64/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 3.531190774 seconds)
    (65/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.925872061 seconds)
    (66/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.628138153 seconds)
    (67/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.795309672 seconds)
    (68/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.733044568 seconds)
    (69/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.471520153 seconds)
    (70/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.920159384 seconds)
    (71/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.483757918 seconds)
    (72/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.68378412 seconds)
    (73/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 3.133774406 seconds)
    (74/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.574595729 seconds)
    (75/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 4.146736631 seconds)
    (76/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.604012091 seconds)
    (77/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.447701297 seconds)
    (78/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.489313526 seconds)
    (79/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.482474674 seconds)
    (80/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.778564647 seconds)
    (81/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.472015301 seconds)
    (82/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.54551697 seconds)
    (83/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.504773996 seconds)
    (84/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.566650974 seconds)
    (85/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.627085483 seconds)
    (86/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.575662207 seconds)
    (87/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.772048073 seconds)
    (88/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.921855807 seconds)
    (89/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.515162066 seconds)
    (90/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.820621146 seconds)
    (91/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 4.142193972 seconds)
    (92/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.744107768 seconds)
    (93/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.45752692 seconds)
    (94/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.537451228 seconds)
    (95/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.445225851 seconds)
    (96/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.541660573 seconds)
    (97/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.619692698 seconds)
    (98/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.783040519 seconds)
    (99/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.886745996 seconds)
    (100/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.727199543 seconds)
    (101/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 3.260695549 seconds)
    (102/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.943615538 seconds)
    (103/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.449133623 seconds)
    (104/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.528698996 seconds)
    (105/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.472911419 seconds)
  done (took 288.207641153 seconds)
  (4/6) benchmarking "deletion"...
    (1/28) benchmarking ("Vector", "Int", "filter")...
    done (took 4.812047096 seconds)
    (2/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.658960514 seconds)
    (3/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 3.013018557 seconds)
    (4/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.787437514 seconds)
    (5/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.826717549 seconds)
    (6/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.60788175 seconds)
    (7/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.542133615 seconds)
    (8/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.486311245 seconds)
    (9/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.609005091 seconds)
    (10/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.478136735 seconds)
    (11/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.567108839 seconds)
    (12/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.527324292 seconds)
    (13/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.708826687 seconds)
    (14/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.969980947 seconds)
    (15/28) benchmarking ("Set", "String", "filter")...
    done (took 2.690907106 seconds)
    (16/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 3.083754549 seconds)
    (17/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.484382001 seconds)
    (18/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.926422315 seconds)
    (19/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.599975507 seconds)
    (20/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.562556567 seconds)
    (21/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 3.002607713 seconds)
    (22/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.48317116 seconds)
    (23/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.714925058 seconds)
    (24/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.650570528 seconds)
    (25/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.406571446 seconds)
    (26/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.687992496 seconds)
    (27/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.743957812 seconds)
    (28/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.625545098 seconds)
  done (took 84.658217171 seconds)
  (5/6) benchmarking "iteration"...
    (1/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.494679201 seconds)
    (2/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.545715217 seconds)
    (3/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.459357067 seconds)
    (4/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.587051357 seconds)
    (5/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.573012431 seconds)
    (6/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.555960547 seconds)
    (7/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.503642979 seconds)
    (8/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.921129312 seconds)
    (9/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.52534451 seconds)
    (10/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.509321199 seconds)
    (11/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.536344484 seconds)
    (12/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.460382211 seconds)
    (13/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.974992249 seconds)
    (14/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.458938316 seconds)
    (15/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.486805731 seconds)
    (16/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.560278345 seconds)
    (17/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.540896244 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.944683818 seconds)
    (19/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.548801195 seconds)
    (20/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.973892599 seconds)
    (21/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.510394355 seconds)
    (22/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.549171833 seconds)
    (23/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.501727713 seconds)
    (24/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.471188687 seconds)
    (25/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.494262797 seconds)
    (26/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.468877114 seconds)
  done (took 69.577435431 seconds)
  (6/6) benchmarking "initialization"...
    (1/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.547140753 seconds)
    (2/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 3.688772432 seconds)
    (3/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.538522651 seconds)
    (4/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.686810261 seconds)
    (5/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.93154294 seconds)
    (6/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.603817421 seconds)
    (7/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.84076972 seconds)
    (8/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.43097662 seconds)
    (9/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.630366899 seconds)
    (10/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.519104725 seconds)
    (11/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 5.461317548 seconds)
    (12/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.972280379 seconds)
    (13/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.600801299 seconds)
    (14/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.964169738 seconds)
    (15/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.563174324 seconds)
    (16/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.479842501 seconds)
    (17/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.909100302 seconds)
    (18/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.543952079 seconds)
    (19/42) benchmarking ("Set", "String", "loop")...
    done (took 2.783616056 seconds)
    (20/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.592802334 seconds)
    (21/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.046798773 seconds)
    (22/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.560527115 seconds)
    (23/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.658962402 seconds)
    (24/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.653957589 seconds)
    (25/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.560328006 seconds)
    (26/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.612354803 seconds)
    (27/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.530309725 seconds)
    (28/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.961303902 seconds)
    (29/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.551071637 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.579596232 seconds)
    (31/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.682198391 seconds)
    (32/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.536786732 seconds)
    (33/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.053054185 seconds)
    (34/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.527800528 seconds)
    (35/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.541702171 seconds)
    (36/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.842856771 seconds)
    (37/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.622243971 seconds)
    (38/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.949818116 seconds)
    (39/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.56237678 seconds)
    (40/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.388482489 seconds)
    (41/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.553883716 seconds)
    (42/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.621393504 seconds)
  done (took 123.29368123 seconds)
done (took 1102.921384751 seconds)
(20/22) benchmarking "simd"...
  (1/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 2.576123105 seconds)
  (2/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 2.448027239 seconds)
  (3/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 2.417500806 seconds)
  (4/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 2.427011947 seconds)
  (5/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.456399085 seconds)
  (6/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 2.432181547 seconds)
  (7/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 2.418680906 seconds)
  (8/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 2.625240133 seconds)
  (9/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 2.433110664 seconds)
  (10/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 2.429834691 seconds)
  (11/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 2.436968213 seconds)
  (12/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 2.435966127 seconds)
  (13/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 2.43008645 seconds)
  (14/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 2.475901562 seconds)
  (15/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.641495436 seconds)
  (16/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 2.66692782 seconds)
  (17/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 2.791213628 seconds)
  (18/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.464215938 seconds)
  (19/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 2.490232102 seconds)
  (20/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.517989434 seconds)
  (21/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 2.491233571 seconds)
  (22/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 2.503706779 seconds)
  (23/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 2.490697758 seconds)
  (24/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 2.43986127 seconds)
  (25/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 2.460570583 seconds)
  (26/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 2.425146915 seconds)
  (27/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 2.41164401 seconds)
  (28/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 2.443903251 seconds)
  (29/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 2.432011627 seconds)
  (30/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 2.451176432 seconds)
  (31/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 2.430320076 seconds)
  (32/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 2.435410475 seconds)
  (33/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 2.430287614 seconds)
  (34/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 2.429192316 seconds)
  (35/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 2.438906829 seconds)
  (36/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 2.428890536 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 2.419447006 seconds)
  (38/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 2.428371155 seconds)
  (39/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 2.422600352 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 2.421805469 seconds)
  (41/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.419660646 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 2.43617766 seconds)
  (43/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 2.43792542 seconds)
  (44/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 2.47724294 seconds)
  (45/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.448069376 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 2.431708846 seconds)
  (47/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 2.429016651 seconds)
  (48/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 2.442112235 seconds)
  (49/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 2.55124388 seconds)
  (50/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 2.435574993 seconds)
  (51/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 2.435786181 seconds)
  (52/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 2.430395711 seconds)
  (53/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 2.428461588 seconds)
  (54/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 2.426268995 seconds)
  (55/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 2.424510851 seconds)
  (56/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 2.442400277 seconds)
  (57/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 2.4250711 seconds)
  (58/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 2.424886266 seconds)
  (59/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 2.453089364 seconds)
  (60/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 2.427475226 seconds)
  (61/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.451865126 seconds)
  (62/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.40996379 seconds)
  (63/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 2.456693651 seconds)
  (64/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 2.420943713 seconds)
  (65/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 2.419300066 seconds)
  (66/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 2.421843257 seconds)
  (67/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 2.433057308 seconds)
  (68/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 2.424548897 seconds)
  (69/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 2.423878788 seconds)
  (70/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 2.412783553 seconds)
  (71/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 2.423648332 seconds)
  (72/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.458487161 seconds)
  (73/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 2.427987535 seconds)
  (74/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 2.420894691 seconds)
  (75/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 2.427527136 seconds)
  (76/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 2.425840007 seconds)
  (77/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 2.450590426 seconds)
  (78/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 2.445480386 seconds)
  (79/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 2.421389104 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 2.427401676 seconds)
  (81/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 2.440918219 seconds)
  (82/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 2.440277211 seconds)
  (83/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 2.447037192 seconds)
  (84/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.535843316 seconds)
  (85/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 2.453079706 seconds)
  (86/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.424942782 seconds)
  (87/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.456627054 seconds)
  (88/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 2.426309406 seconds)
  (89/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 2.451492922 seconds)
  (90/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 2.459182121 seconds)
  (91/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 2.433639405 seconds)
  (92/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 2.42805918 seconds)
  (93/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 2.422637446 seconds)
  (94/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 2.4328771 seconds)
  (95/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.416868159 seconds)
  (96/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 2.432196459 seconds)
  (97/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 2.451989328 seconds)
  (98/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 2.446191699 seconds)
  (99/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 2.438879131 seconds)
  (100/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 2.429198117 seconds)
  (101/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.446592596 seconds)
  (102/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 2.436366883 seconds)
  (103/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 2.461864325 seconds)
  (104/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 2.431660661 seconds)
  (105/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 2.410889704 seconds)
  (106/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 2.44711763 seconds)
  (107/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 2.437692372 seconds)
  (108/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 2.442341794 seconds)
  (109/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 2.437926493 seconds)
  (110/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.536048346 seconds)
  (111/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 2.440048653 seconds)
  (112/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.451367785 seconds)
  (113/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 2.422955217 seconds)
  (114/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 2.421577459 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 2.417675919 seconds)
  (116/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 2.420643527 seconds)
  (117/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 2.425363468 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 2.418176325 seconds)
  (119/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 2.623010331 seconds)
  (120/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.424041275 seconds)
  (121/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 2.418351103 seconds)
  (122/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 2.425912644 seconds)
  (123/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 2.409619382 seconds)
  (124/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 2.424793227 seconds)
  (125/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 2.418598635 seconds)
  (126/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.418466496 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.415234945 seconds)
  (128/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 2.429000221 seconds)
  (129/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.484995722 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 2.473952625 seconds)
  (131/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 2.430800808 seconds)
  (132/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 2.434223183 seconds)
  (133/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 2.445316649 seconds)
  (134/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 2.428825093 seconds)
  (135/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 2.422345404 seconds)
  (136/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 2.429852389 seconds)
  (137/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.44649359 seconds)
  (138/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 2.422549386 seconds)
  (139/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 2.429014349 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 2.434315438 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 2.434753359 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 2.426447902 seconds)
  (143/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 2.448189098 seconds)
  (144/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 2.458126447 seconds)
  (145/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.419512364 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 2.431490167 seconds)
  (147/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 2.416878282 seconds)
  (148/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 2.425848175 seconds)
  (149/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 2.445648261 seconds)
  (150/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 2.429224222 seconds)
  (151/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 2.424086576 seconds)
  (152/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 2.435731027 seconds)
  (153/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 2.42649858 seconds)
  (154/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.420219092 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 2.446076205 seconds)
  (156/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.413686566 seconds)
  (157/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 2.427847297 seconds)
  (158/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.421342371 seconds)
  (159/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 2.422884284 seconds)
  (160/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 2.427403996 seconds)
  (161/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 2.44906198 seconds)
  (162/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.458781645 seconds)
  (163/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 2.429370368 seconds)
  (164/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 2.417285713 seconds)
  (165/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 2.41906161 seconds)
  (166/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 2.42540859 seconds)
  (167/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 2.4221138 seconds)
  (168/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 2.429262428 seconds)
  (169/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 2.42690036 seconds)
  (170/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 2.418614035 seconds)
  (171/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 2.451983295 seconds)
  (172/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 2.444228209 seconds)
  (173/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.420911733 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.452097952 seconds)
  (175/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.420969073 seconds)
  (176/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 2.425696281 seconds)
  (177/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 2.45012961 seconds)
  (178/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.448064251 seconds)
  (179/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.45528467 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 2.429140612 seconds)
  (181/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 2.45967397 seconds)
  (182/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.458866303 seconds)
  (183/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 2.424804935 seconds)
  (184/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.451592036 seconds)
  (185/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 2.437413926 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.448345469 seconds)
  (187/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 2.416549086 seconds)
  (188/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 2.422109328 seconds)
  (189/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 2.418608222 seconds)
  (190/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 2.422680544 seconds)
  (191/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.419094585 seconds)
  (192/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.447256992 seconds)
  (193/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 2.424903438 seconds)
  (194/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 2.426439775 seconds)
  (195/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 2.436477563 seconds)
  (196/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 2.432526682 seconds)
  (197/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 2.43369543 seconds)
  (198/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 2.434709186 seconds)
  (199/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 2.427595539 seconds)
  (200/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 2.422376236 seconds)
  (201/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.429452705 seconds)
  (202/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 2.452257584 seconds)
  (203/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 2.419182571 seconds)
  (204/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 2.437312021 seconds)
  (205/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.422429724 seconds)
  (206/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 2.419879921 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 2.436368261 seconds)
  (208/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 2.430227565 seconds)
  (209/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 2.436481188 seconds)
  (210/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 2.441661787 seconds)
  (211/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 2.413469872 seconds)
  (212/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 2.439177498 seconds)
  (213/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 2.441098817 seconds)
  (214/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 2.422778541 seconds)
  (215/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 2.436372542 seconds)
  (216/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 2.428677258 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 2.43229894 seconds)
  (218/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 2.416138942 seconds)
  (219/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 2.456438038 seconds)
  (220/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 2.431655496 seconds)
  (221/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 2.426604277 seconds)
  (222/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 2.425553871 seconds)
  (223/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.419460926 seconds)
  (224/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 2.424554672 seconds)
  (225/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 2.426612003 seconds)
  (226/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 2.42429434 seconds)
  (227/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 2.449956526 seconds)
  (228/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 2.439441024 seconds)
  (229/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 2.436620554 seconds)
  (230/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 2.42696554 seconds)
  (231/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 2.578483867 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 2.427915756 seconds)
  (233/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 2.434005618 seconds)
  (234/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 2.422194751 seconds)
  (235/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.425843837 seconds)
  (236/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 2.427101812 seconds)
  (237/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 2.426142382 seconds)
  (238/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 2.421623928 seconds)
  (239/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 2.437859557 seconds)
  (240/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 2.429172827 seconds)
  (241/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 2.422028081 seconds)
  (242/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 2.417677033 seconds)
  (243/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 2.436194048 seconds)
  (244/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 2.419200308 seconds)
  (245/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 2.445408739 seconds)
  (246/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 2.450507136 seconds)
  (247/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 2.418185935 seconds)
  (248/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 2.42869069 seconds)
  (249/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 2.425615233 seconds)
  (250/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 2.432092819 seconds)
  (251/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 2.431639056 seconds)
  (252/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 2.437816351 seconds)
  (253/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 2.425943398 seconds)
  (254/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 2.42773347 seconds)
  (255/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 2.426384609 seconds)
  (256/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.448222481 seconds)
  (257/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 2.428119986 seconds)
  (258/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 2.42053708 seconds)
  (259/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 2.424003545 seconds)
  (260/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 2.431369111 seconds)
  (261/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 2.43525666 seconds)
  (262/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 2.578800366 seconds)
  (263/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 2.470385291 seconds)
  (264/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 2.417115147 seconds)
  (265/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 2.439615121 seconds)
  (266/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 2.426189975 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 2.435973805 seconds)
  (268/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 2.430291703 seconds)
  (269/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.417309591 seconds)
  (270/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 2.446382569 seconds)
  (271/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 2.414232457 seconds)
  (272/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.420517159 seconds)
  (273/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 2.430084366 seconds)
  (274/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 2.449691131 seconds)
  (275/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 2.41946293 seconds)
  (276/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 2.430173763 seconds)
  (277/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 2.446240252 seconds)
  (278/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.42131234 seconds)
  (279/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.423308967 seconds)
  (280/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 2.411052388 seconds)
  (281/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 2.464245649 seconds)
  (282/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 2.427481498 seconds)
  (283/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 2.445720319 seconds)
  (284/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 2.428553503 seconds)
  (285/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.421210646 seconds)
  (286/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 2.433983714 seconds)
  (287/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 2.423837613 seconds)
  (288/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 2.431949724 seconds)
  (289/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 2.429800229 seconds)
  (290/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 2.437335609 seconds)
  (291/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 2.424704333 seconds)
  (292/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 2.420618985 seconds)
  (293/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 2.427428142 seconds)
  (294/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 2.423444459 seconds)
  (295/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 2.434867096 seconds)
  (296/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 2.42745422 seconds)
  (297/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 2.414805374 seconds)
  (298/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 2.42878051 seconds)
  (299/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 2.42343693 seconds)
  (300/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 2.423701511 seconds)
  (301/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 2.425797818 seconds)
  (302/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.428661273 seconds)
  (303/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.477391821 seconds)
  (304/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 2.428755427 seconds)
  (305/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 2.425556555 seconds)
  (306/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.456822996 seconds)
  (307/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.473217887 seconds)
  (308/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 2.42453191 seconds)
  (309/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 2.422778524 seconds)
  (310/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 2.422647528 seconds)
  (311/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.473343305 seconds)
  (312/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 2.421723219 seconds)
  (313/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 2.416588141 seconds)
  (314/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 2.438825611 seconds)
  (315/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 2.454363749 seconds)
  (316/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 2.427885512 seconds)
  (317/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 2.430698041 seconds)
  (318/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 2.42664604 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 2.440258522 seconds)
  (320/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 2.42825891 seconds)
  (321/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 2.432156665 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 2.432426412 seconds)
  (323/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 2.411342563 seconds)
  (324/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 2.436051098 seconds)
  (325/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 2.437377007 seconds)
  (326/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.449436322 seconds)
  (327/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 2.439237395 seconds)
  (328/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.419105419 seconds)
  (329/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 2.554972982 seconds)
  (330/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 2.432931967 seconds)
  (331/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 2.4512343 seconds)
  (332/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 2.431718188 seconds)
  (333/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 2.455196471 seconds)
  (334/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 2.424909293 seconds)
  (335/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 2.419094805 seconds)
  (336/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 2.415967004 seconds)
  (337/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 2.421385937 seconds)
  (338/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 2.458156767 seconds)
  (339/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 2.423623733 seconds)
  (340/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 2.425792329 seconds)
  (341/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 2.425800685 seconds)
  (342/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.452677213 seconds)
  (343/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 2.440105594 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 2.410919412 seconds)
  (345/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 2.4212844 seconds)
  (346/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 2.425189187 seconds)
  (347/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.419737905 seconds)
  (348/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 2.438748174 seconds)
  (349/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 2.432474916 seconds)
  (350/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 2.411510139 seconds)
  (351/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 2.424664681 seconds)
  (352/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 2.419173795 seconds)
  (353/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 2.410631354 seconds)
  (354/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 2.436673147 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 2.455690754 seconds)
  (356/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 2.418339359 seconds)
  (357/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 2.426650448 seconds)
  (358/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 2.432437614 seconds)
  (359/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.421420501 seconds)
  (360/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 2.425568326 seconds)
  (361/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 2.421005106 seconds)
  (362/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.537674587 seconds)
  (363/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 2.428056018 seconds)
  (364/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 2.427562055 seconds)
  (365/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.439756992 seconds)
  (366/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.475257759 seconds)
  (367/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 2.429114146 seconds)
  (368/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 2.429382455 seconds)
  (369/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 2.431281932 seconds)
  (370/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.41752403 seconds)
  (371/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 2.420002592 seconds)
  (372/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 2.428214505 seconds)
  (373/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 2.421609355 seconds)
  (374/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.533225759 seconds)
  (375/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 2.438344134 seconds)
  (376/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 2.437132777 seconds)
  (377/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.421989632 seconds)
  (378/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 2.423637197 seconds)
  (379/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 2.43975954 seconds)
  (380/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 2.427097346 seconds)
  (381/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.426799118 seconds)
  (382/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 2.428340073 seconds)
  (383/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 2.425406345 seconds)
  (384/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 2.422285183 seconds)
  (385/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 2.626883218 seconds)
  (386/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 2.429198486 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 2.44139513 seconds)
  (388/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.542139706 seconds)
  (389/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 2.420384663 seconds)
  (390/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 2.431298381 seconds)
  (391/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.419043743 seconds)
  (392/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 2.434127713 seconds)
  (393/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 2.428421429 seconds)
  (394/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 2.421812404 seconds)
  (395/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 2.435358751 seconds)
  (396/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 2.430193554 seconds)
  (397/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.452036541 seconds)
  (398/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 2.428185051 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 2.441167716 seconds)
  (400/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 2.457803511 seconds)
  (401/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 2.433070695 seconds)
  (402/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 2.416397668 seconds)
  (403/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 2.462416827 seconds)
  (404/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.423353249 seconds)
  (405/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 2.428716075 seconds)
  (406/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 2.44929826 seconds)
  (407/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 2.416142114 seconds)
  (408/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 2.447241837 seconds)
  (409/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 2.432633708 seconds)
  (410/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 2.42263463 seconds)
  (411/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 2.442896454 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.418629805 seconds)
  (413/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 2.427581457 seconds)
  (414/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 2.415110993 seconds)
  (415/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.423385137 seconds)
  (416/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 2.430739442 seconds)
  (417/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 2.442560589 seconds)
  (418/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 2.423797998 seconds)
  (419/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 2.432443971 seconds)
  (420/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 2.426203784 seconds)
  (421/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 2.449747596 seconds)
  (422/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.42679903 seconds)
  (423/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 2.428847897 seconds)
  (424/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 2.410275667 seconds)
  (425/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 2.422341977 seconds)
  (426/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 2.432489775 seconds)
  (427/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 2.428474666 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 2.430793945 seconds)
  (429/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 2.431756576 seconds)
  (430/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.42122 seconds)
  (431/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 2.425322253 seconds)
  (432/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 2.422945877 seconds)
  (433/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.423535295 seconds)
  (434/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 2.424422321 seconds)
  (435/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 2.434337165 seconds)
  (436/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.418769342 seconds)
  (437/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 2.427994649 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 2.424321115 seconds)
  (439/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 2.425833539 seconds)
  (440/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 2.416904694 seconds)
  (441/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 2.421947555 seconds)
  (442/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 2.411965556 seconds)
  (443/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 2.439838913 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.42134444 seconds)
  (445/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 2.42301416 seconds)
  (446/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.420324214 seconds)
  (447/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 2.440019699 seconds)
  (448/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 2.423771521 seconds)
  (449/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 2.417585309 seconds)
  (450/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 2.467770981 seconds)
  (451/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 2.539613759 seconds)
  (452/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.448714804 seconds)
  (453/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 2.479379229 seconds)
  (454/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 2.436000309 seconds)
  (455/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 2.428789034 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.414232795 seconds)
  (457/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 2.429104518 seconds)
  (458/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 2.429804924 seconds)
  (459/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.495794872 seconds)
  (460/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.448653253 seconds)
  (461/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 2.441360517 seconds)
  (462/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.444068573 seconds)
  (463/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 2.435336842 seconds)
  (464/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 2.463198525 seconds)
  (465/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 2.447362301 seconds)
  (466/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.461141154 seconds)
  (467/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 2.45770902 seconds)
  (468/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 2.43461438 seconds)
  (469/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 2.447637601 seconds)
  (470/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 2.429646419 seconds)
  (471/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.420015823 seconds)
  (472/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 2.431112294 seconds)
  (473/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 2.434686069 seconds)
  (474/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 2.44359179 seconds)
  (475/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 2.416583351 seconds)
  (476/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 2.424238228 seconds)
  (477/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 2.438385947 seconds)
  (478/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 2.42164359 seconds)
  (479/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.458336017 seconds)
  (480/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 2.456033019 seconds)
  (481/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 2.435274808 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 2.451811918 seconds)
  (483/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 2.455623838 seconds)
  (484/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 2.467864843 seconds)
  (485/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 2.431274773 seconds)
  (486/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 2.437227078 seconds)
  (487/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.450493964 seconds)
  (488/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 2.411251056 seconds)
  (489/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 2.416393559 seconds)
  (490/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 2.432283688 seconds)
  (491/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 2.424845122 seconds)
  (492/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 2.444431737 seconds)
  (493/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 2.417773595 seconds)
  (494/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 2.43617769 seconds)
  (495/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 2.548793825 seconds)
  (496/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.427549267 seconds)
  (497/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 2.578846048 seconds)
  (498/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 2.419782617 seconds)
  (499/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 2.441459252 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 2.436479609 seconds)
  (501/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 2.42945158 seconds)
  (502/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.419460564 seconds)
  (503/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 2.437715737 seconds)
  (504/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 2.41125722 seconds)
  (505/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 2.421181177 seconds)
  (506/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 2.467560348 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 2.435020386 seconds)
  (508/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 2.418548468 seconds)
  (509/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 2.435153453 seconds)
  (510/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 2.423250213 seconds)
  (511/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 2.551983189 seconds)
  (512/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 2.491755927 seconds)
  (513/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 2.43562344 seconds)
  (514/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.423257306 seconds)
  (515/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 2.427063452 seconds)
  (516/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.416124422 seconds)
  (517/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 2.433670118 seconds)
  (518/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 2.438312001 seconds)
  (519/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 2.429789472 seconds)
  (520/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 2.436123448 seconds)
  (521/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.448104993 seconds)
  (522/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.427381378 seconds)
  (523/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 2.439275486 seconds)
  (524/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 2.411973419 seconds)
  (525/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 2.420754409 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.426036038 seconds)
  (527/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 2.425780282 seconds)
  (528/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 2.49446587 seconds)
  (529/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 2.576433059 seconds)
  (530/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 2.415433044 seconds)
  (531/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 2.416460746 seconds)
  (532/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 2.410812129 seconds)
  (533/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 2.426903066 seconds)
  (534/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 2.424150299 seconds)
  (535/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 2.426349801 seconds)
  (536/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 2.431344676 seconds)
  (537/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.504758687 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 2.418619646 seconds)
  (539/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 2.431201636 seconds)
  (540/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.443458243 seconds)
  (541/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.5021601 seconds)
  (542/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 2.420003604 seconds)
  (543/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 2.434373522 seconds)
  (544/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 2.472230262 seconds)
  (545/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.420697826 seconds)
  (546/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 2.424031345 seconds)
  (547/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 2.427523932 seconds)
  (548/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 2.418330051 seconds)
  (549/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.427535465 seconds)
  (550/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 2.416064287 seconds)
  (551/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 2.41842881 seconds)
  (552/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.420292966 seconds)
  (553/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 2.41747521 seconds)
  (554/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.44895934 seconds)
  (555/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 2.431256164 seconds)
  (556/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 2.465454155 seconds)
  (557/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.426163994 seconds)
  (558/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 2.461428522 seconds)
  (559/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 2.424611516 seconds)
  (560/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 2.418570615 seconds)
  (561/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 2.428183205 seconds)
  (562/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 2.436286913 seconds)
  (563/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 2.464112338 seconds)
  (564/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.421716449 seconds)
  (565/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 2.442168348 seconds)
  (566/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 2.441804909 seconds)
  (567/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.433298613 seconds)
  (568/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 2.418559525 seconds)
  (569/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 2.464953545 seconds)
  (570/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.423176597 seconds)
  (571/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 2.424260608 seconds)
  (572/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 2.43851443 seconds)
  (573/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 2.429473242 seconds)
  (574/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 2.432847682 seconds)
  (575/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 2.490777356 seconds)
  (576/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.450520709 seconds)
  (577/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.430453461 seconds)
  (578/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 2.428345353 seconds)
  (579/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 2.433597885 seconds)
  (580/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.538189377 seconds)
  (581/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 2.456441377 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 2.41944614 seconds)
  (583/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 2.434288549 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 2.43800143 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 2.435508901 seconds)
  (586/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 2.439188771 seconds)
  (587/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.45475049 seconds)
  (588/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.41973186 seconds)
  (589/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.422173342 seconds)
  (590/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 2.432299169 seconds)
  (591/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 2.439889621 seconds)
  (592/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.418999885 seconds)
  (593/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 2.428862363 seconds)
  (594/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 2.434623923 seconds)
  (595/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.435785349 seconds)
  (596/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.421883107 seconds)
  (597/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 2.424731596 seconds)
  (598/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.43852168 seconds)
  (599/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.428237685 seconds)
  (600/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 2.42952688 seconds)
  (601/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 2.430640854 seconds)
  (602/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.418147608 seconds)
  (603/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 2.429097335 seconds)
  (604/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 2.427477392 seconds)
  (605/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 2.415860042 seconds)
  (606/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 2.437134702 seconds)
  (607/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 2.42594429 seconds)
  (608/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.426691637 seconds)
  (609/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.450483584 seconds)
  (610/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 2.428172143 seconds)
  (611/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.421833167 seconds)
  (612/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 2.432921912 seconds)
  (613/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 2.427291373 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 2.428280358 seconds)
  (615/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 2.431192189 seconds)
  (616/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.465476252 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.450741608 seconds)
  (618/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.415350348 seconds)
  (619/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.418739996 seconds)
  (620/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 2.424823477 seconds)
  (621/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 2.424510335 seconds)
  (622/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 2.445216243 seconds)
  (623/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 2.428132281 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 2.414032629 seconds)
  (625/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 2.436057781 seconds)
  (626/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 2.427429773 seconds)
  (627/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 2.428428526 seconds)
  (628/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 2.438018433 seconds)
  (629/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.469153655 seconds)
  (630/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 2.430225236 seconds)
  (631/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 2.41559784 seconds)
  (632/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 2.440249458 seconds)
  (633/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 2.42932701 seconds)
  (634/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 2.422380415 seconds)
  (635/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 2.439905278 seconds)
  (636/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 2.429858668 seconds)
  (637/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 2.465252607 seconds)
  (638/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 2.435236886 seconds)
  (639/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 2.43031404 seconds)
  (640/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.46449503 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 2.441698595 seconds)
  (642/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 2.426113531 seconds)
  (643/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 2.413577416 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 2.429705383 seconds)
  (645/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.418631673 seconds)
  (646/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 2.420348588 seconds)
  (647/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 2.623398472 seconds)
  (648/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 2.431919757 seconds)
  (649/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 2.447267227 seconds)
  (650/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 2.441735815 seconds)
  (651/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 2.431086981 seconds)
  (652/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 2.430693904 seconds)
  (653/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.419722691 seconds)
  (654/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 2.428179893 seconds)
  (655/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 2.446533688 seconds)
  (656/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.452842929 seconds)
  (657/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.465594862 seconds)
  (658/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 2.42789016 seconds)
  (659/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.483306531 seconds)
  (660/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 2.426733982 seconds)
  (661/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 2.494007326 seconds)
  (662/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 2.426910796 seconds)
  (663/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 2.431531271 seconds)
  (664/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.477979259 seconds)
  (665/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.421594824 seconds)
  (666/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 2.436554178 seconds)
  (667/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 2.577711636 seconds)
  (668/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 2.456944737 seconds)
  (669/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 2.433436179 seconds)
  (670/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 2.421693706 seconds)
  (671/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 2.575981227 seconds)
  (672/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 2.429412253 seconds)
  (673/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 2.432045266 seconds)
  (674/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 2.4200102 seconds)
  (675/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 2.430903904 seconds)
  (676/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 2.419685862 seconds)
  (677/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 2.427615991 seconds)
  (678/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 2.429147702 seconds)
  (679/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 2.442522529 seconds)
  (680/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.47635775 seconds)
done (took 1661.153974743 seconds)
(21/22) benchmarking "inference"...
  (1/3) benchmarking "allinference"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 41.154157449 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 33.710275949 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 34.913542928 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 33.388429829 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 35.447257325 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 34.743893969 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 41.005624745 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 33.789639778 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 34.419891091 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 36.608004745 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 35.643225668 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 36.401043774 seconds)
  done (took 433.626899385 seconds)
  (2/3) benchmarking "optimization"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 45.097723172 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 37.524853177 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 38.460734381 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 37.185059392 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 38.149773913 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 35.873783262 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 45.817532472 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 38.354320847 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 37.666151948 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 37.886705088 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 35.142317013 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 37.760993739 seconds)
  done (took 468.525975402 seconds)
  (3/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 41.114364132 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 39.878709997 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 35.158469137 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 37.851812452 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 35.476592432 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 35.347781816 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 40.52186288 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 37.115237752 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 38.890019971 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 37.362719057 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 38.84918944 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 37.36236487 seconds)
  done (took 459.607323486 seconds)
done (took 1364.160790829 seconds)
(22/22) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 5.400059628 seconds)
    (2/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 5.511590542 seconds)
    (3/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 5.394228263 seconds)
    (4/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 5.384496888 seconds)
    (5/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 5.970039892 seconds)
    (6/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 5.547605864 seconds)
    (7/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 5.824463503 seconds)
    (8/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 10.360802351 seconds)
    (9/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 5.644584006 seconds)
    (10/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 10.328774278 seconds)
    (11/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 6.167093431 seconds)
    (12/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 5.630240536 seconds)
    (13/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 10.330241218 seconds)
    (14/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 6.37037067 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 5.956326677 seconds)
    (16/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 10.330116598 seconds)
    (17/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 6.668820646 seconds)
    (18/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 5.383355366 seconds)
    (19/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 5.966463548 seconds)
    (20/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 10.337906493 seconds)
    (21/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 5.774300212 seconds)
    (22/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 8.914717775 seconds)
    (23/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 10.329121366 seconds)
    (24/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 10.334790331 seconds)
    (25/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 5.4012864 seconds)
    (26/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 5.753126466 seconds)
    (27/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 10.340905533 seconds)
    (28/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 5.46299292 seconds)
    (29/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 5.876311682 seconds)
    (30/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 5.520622481 seconds)
    (31/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 5.342286216 seconds)
    (32/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 5.462343358 seconds)
    (33/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 5.649468343 seconds)
    (34/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 6.355683662 seconds)
    (35/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 5.860974845 seconds)
    (36/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 5.352235435 seconds)
    (37/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 5.751454094 seconds)
    (38/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 5.562564506 seconds)
    (39/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 5.850928108 seconds)
    (40/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 5.66580295 seconds)
    (41/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 5.762984111 seconds)
    (42/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 5.596652841 seconds)
    (43/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 5.56655563 seconds)
    (44/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 10.325538426 seconds)
    (45/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 5.339719747 seconds)
    (46/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 5.569175124 seconds)
    (47/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 6.347943501 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 5.812535107 seconds)
    (49/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 5.354603136 seconds)
    (50/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 5.99630937 seconds)
    (51/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 5.388773755 seconds)
    (52/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 5.648438654 seconds)
    (53/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 5.546714025 seconds)
    (54/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 5.525582186 seconds)
    (55/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 5.388612489 seconds)
    (56/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 5.341471921 seconds)
    (57/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 5.566047885 seconds)
    (58/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 6.324158512 seconds)
    (59/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 5.563066374 seconds)
    (60/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 5.458226319 seconds)
    (61/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 5.40766459 seconds)
    (62/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 5.655728816 seconds)
    (63/434) benchmarking ("sort", "Int64", 0)...
    done (took 7.875863514 seconds)
    (64/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 5.414462131 seconds)
    (65/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 10.326837197 seconds)
    (66/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 6.419756546 seconds)
    (67/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 5.346501556 seconds)
    (68/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 5.650338859 seconds)
    (69/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 10.336198607 seconds)
    (70/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 5.34943324 seconds)
    (71/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 5.521552398 seconds)
    (72/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 5.771677249 seconds)
    (73/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 5.421211798 seconds)
    (74/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 5.984380846 seconds)
    (75/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 5.543492206 seconds)
    (76/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 5.412582745 seconds)
    (77/434) benchmarking ("perf_countequals", "Float32")...
    done (took 5.390854961 seconds)
    (78/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 5.688648544 seconds)
    (79/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 10.334179845 seconds)
    (80/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 11.080538147 seconds)
    (81/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 5.665607732 seconds)
    (82/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 5.57167893 seconds)
    (83/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 5.41808346 seconds)
    (84/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 5.551767735 seconds)
    (85/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 5.662304604 seconds)
    (86/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 5.548812953 seconds)
    (87/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 5.40172504 seconds)
    (88/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 10.324448432 seconds)
    (89/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 6.30801097 seconds)
    (90/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 5.350106536 seconds)
    (91/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 5.386309895 seconds)
    (92/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 5.498720393 seconds)
    (93/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 10.324093347 seconds)
    (94/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 6.392019434 seconds)
    (95/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 5.429024852 seconds)
    (96/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 5.970046253 seconds)
    (97/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 10.553300458 seconds)
    (98/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 6.564407124 seconds)
    (99/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 5.404722886 seconds)
    (100/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 5.736302904 seconds)
    (101/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 6.109313691 seconds)
    (102/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 5.410127847 seconds)
    (103/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 5.868760904 seconds)
    (104/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 5.414647504 seconds)
    (105/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 6.14132444 seconds)
    (106/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 5.830890838 seconds)
    (107/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 5.344173971 seconds)
    (108/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 10.343155424 seconds)
    (109/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 5.473014687 seconds)
    (110/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 5.382534297 seconds)
    (111/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 5.462539215 seconds)
    (112/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 10.318694073 seconds)
    (113/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 5.358282715 seconds)
    (114/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 5.517106104 seconds)
    (115/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 5.344922731 seconds)
    (116/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 5.659116076 seconds)
    (117/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 5.510362498 seconds)
    (118/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 5.661937963 seconds)
    (119/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 10.341488195 seconds)
    (120/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 5.354733217 seconds)
    (121/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 5.659807146 seconds)
    (122/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 5.355143257 seconds)
    (123/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 10.320100663 seconds)
    (124/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 10.333540774 seconds)
    (125/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 5.51771157 seconds)
    (126/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 5.79736926 seconds)
    (127/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 5.426487963 seconds)
    (128/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 5.605035807 seconds)
    (129/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 11.849159754 seconds)
    (130/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 8.241143251 seconds)
    (131/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 5.613532017 seconds)
    (132/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 11.786650554 seconds)
    (133/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 5.935625428 seconds)
    (134/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 5.831942897 seconds)
    (135/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 12.120306043 seconds)
    (136/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 5.698856679 seconds)
    (137/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 5.63034589 seconds)
    (138/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 5.42357964 seconds)
    (139/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 5.389983143 seconds)
    (140/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 5.460246975 seconds)
    (141/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 12.020770128 seconds)
    (142/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 6.05278324 seconds)
    (143/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 5.36875743 seconds)
    (144/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 5.617268066 seconds)
    (145/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 5.438079928 seconds)
    (146/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 5.497599968 seconds)
    (147/434) benchmarking ("sort", "Bool", 0)...
    done (took 5.350947376 seconds)
    (148/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 5.599578888 seconds)
    (149/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 5.40576759 seconds)
    (150/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 5.380368015 seconds)
    (151/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 10.319714839 seconds)
    (152/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 5.408194551 seconds)
    (153/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 5.613973728 seconds)
    (154/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 5.445230175 seconds)
    (155/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 5.943990384 seconds)
    (156/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 11.054916181 seconds)
    (157/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 5.842081349 seconds)
    (158/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 5.544587561 seconds)
    (159/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 5.522152008 seconds)
    (160/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 12.776383822 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 10.63835805 seconds)
    (162/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 5.90269252 seconds)
    (163/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 5.852913553 seconds)
    (164/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 5.633173409 seconds)
    (165/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 5.62534711 seconds)
    (166/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 5.564443975 seconds)
    (167/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 5.694086747 seconds)
    (168/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 5.395139431 seconds)
    (169/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 11.704113455 seconds)
    (170/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 5.980380939 seconds)
    (171/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 5.987816686 seconds)
    (172/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 10.32981928 seconds)
    (173/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 5.459803799 seconds)
    (174/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 5.899406121 seconds)
    (175/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 10.327325038 seconds)
    (176/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 12.640574095 seconds)
    (177/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 6.197496611 seconds)
    (178/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 5.68158319 seconds)
    (179/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 5.609062817 seconds)
    (180/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 5.570559981 seconds)
    (181/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 5.582182298 seconds)
    (182/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 5.753530967 seconds)
    (183/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 5.46233368 seconds)
    (184/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 5.34590823 seconds)
    (185/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 5.748444282 seconds)
    (186/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 5.625428339 seconds)
    (187/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 5.744445194 seconds)
    (188/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 5.534447805 seconds)
    (189/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 5.869745742 seconds)
    (190/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 5.617983456 seconds)
    (191/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 5.692858787 seconds)
    (192/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 5.691417011 seconds)
    (193/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 5.469642207 seconds)
    (194/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 5.528372013 seconds)
    (195/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 5.33556744 seconds)
    (196/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 5.703489761 seconds)
    (197/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 5.377288117 seconds)
    (198/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 5.619265962 seconds)
    (199/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 5.521228244 seconds)
    (200/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 5.533859109 seconds)
    (201/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 5.360558415 seconds)
    (202/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 6.260034869 seconds)
    (203/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 10.192732643 seconds)
    (204/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 10.382244599 seconds)
    (205/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 5.967546731 seconds)
    (206/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.428154754 seconds)
    (207/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 5.749909656 seconds)
    (208/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 5.415189341 seconds)
    (209/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 5.513915112 seconds)
    (210/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 8.253085329 seconds)
    (211/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 5.681728676 seconds)
    (212/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 5.573198838 seconds)
    (213/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 5.390618145 seconds)
    (214/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 5.390068967 seconds)
    (215/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 5.507547718 seconds)
    (216/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 10.320404679 seconds)
    (217/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 5.55651356 seconds)
    (218/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 5.339683456 seconds)
    (219/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 5.334861827 seconds)
    (220/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 5.505807742 seconds)
    (221/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 10.3263196 seconds)
    (222/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 5.650897498 seconds)
    (223/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 5.346426261 seconds)
    (224/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 5.773191464 seconds)
    (225/434) benchmarking ("perf_countequals", "Int64")...
    done (took 5.405042753 seconds)
    (226/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 5.608600478 seconds)
    (227/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 5.549477728 seconds)
    (228/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 5.458647917 seconds)
    (229/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 10.320982237 seconds)
    (230/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 5.590905581 seconds)
    (231/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 5.561284425 seconds)
    (232/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 5.61495176 seconds)
    (233/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 5.551940665 seconds)
    (234/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 5.509312433 seconds)
    (235/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 5.538328733 seconds)
    (236/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 5.417539542 seconds)
    (237/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 5.725552142 seconds)
    (238/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 6.009011326 seconds)
    (239/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 5.90394149 seconds)
    (240/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 5.410088703 seconds)
    (241/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 5.435613493 seconds)
    (242/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 5.39124513 seconds)
    (243/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 5.379139464 seconds)
    (244/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 11.654030409 seconds)
    (245/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 5.819457513 seconds)
    (246/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 5.674283043 seconds)
    (247/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 5.42602158 seconds)
    (248/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 5.401476256 seconds)
    (249/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 6.262039774 seconds)
    (250/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 10.326000472 seconds)
    (251/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 5.5606944 seconds)
    (252/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 5.668701822 seconds)
    (253/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 5.601052278 seconds)
    (254/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 5.61942473 seconds)
    (255/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 5.723707813 seconds)
    (256/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 5.435679209 seconds)
    (257/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 5.406439149 seconds)
    (258/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 5.454541274 seconds)
    (259/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 5.407245506 seconds)
    (260/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 5.396004479 seconds)
    (261/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 5.341358929 seconds)
    (262/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 5.421243596 seconds)
    (263/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 5.537871326 seconds)
    (264/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 5.42596121 seconds)
    (265/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 5.764029874 seconds)
    (266/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 5.639503535 seconds)
    (267/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 5.348163826 seconds)
    (268/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 5.404220917 seconds)
    (269/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 5.500035395 seconds)
    (270/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 5.544621532 seconds)
    (271/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 5.579689309 seconds)
    (272/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 12.062421953 seconds)
    (273/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 5.790643833 seconds)
    (274/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 5.624137831 seconds)
    (275/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 5.634265771 seconds)
    (276/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 6.025961721 seconds)
    (277/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 10.336811835 seconds)
    (278/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 12.12247349 seconds)
    (279/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 5.416065796 seconds)
    (280/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 5.462756187 seconds)
    (281/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 10.334446597 seconds)
    (282/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 12.583986649 seconds)
    (283/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 5.348491563 seconds)
    (284/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 5.48071167 seconds)
    (285/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.571567368 seconds)
    (286/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 5.418959657 seconds)
    (287/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 5.671036097 seconds)
    (288/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 10.016394457 seconds)
    (289/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 5.614119995 seconds)
    (290/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 5.349124295 seconds)
    (291/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 5.461436725 seconds)
    (292/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 5.578413082 seconds)
    (293/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 5.380587914 seconds)
    (294/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 5.334834495 seconds)
    (295/434) benchmarking ("perf_countequals", "Int8")...
    done (took 5.368443765 seconds)
    (296/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 5.500962472 seconds)
    (297/434) benchmarking ("sort", "Float32", 0)...
    done (took 6.030631869 seconds)
    (298/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 5.68222653 seconds)
    (299/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 5.560152544 seconds)
    (300/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 10.330937963 seconds)
    (301/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 14.304005884 seconds)
    (302/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 10.324359113 seconds)
    (303/434) benchmarking ("sort", "BigInt", 0)...
    done (took 14.771190573 seconds)
    (304/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 5.533976036 seconds)
    (305/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 5.685483297 seconds)
    (306/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 5.364133778 seconds)
    (307/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 10.322824975 seconds)
    (308/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 12.265266473 seconds)
    (309/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 5.339529981 seconds)
    (310/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 5.67279779 seconds)
    (311/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 5.791739052 seconds)
    (312/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 5.515473267 seconds)
    (313/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 5.336782477 seconds)
    (314/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 5.437674208 seconds)
    (315/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 5.410223502 seconds)
    (316/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 5.609684086 seconds)
    (317/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 5.347699569 seconds)
    (318/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 5.670419672 seconds)
    (319/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 10.333339583 seconds)
    (320/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 9.619434069 seconds)
    (321/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 5.806246087 seconds)
    (322/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 5.522967492 seconds)
    (323/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 5.684734376 seconds)
    (324/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 8.061615842 seconds)
    (325/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 6.220402428 seconds)
    (326/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 5.383642211 seconds)
    (327/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 5.668641635 seconds)
    (328/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 5.530417611 seconds)
    (329/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 10.319783481 seconds)
    (330/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 5.588437293 seconds)
    (331/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 5.550329093 seconds)
    (332/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 5.435092929 seconds)
    (333/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 5.502759554 seconds)
    (334/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 5.560586192 seconds)
    (335/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 5.646008361 seconds)
    (336/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 5.358031629 seconds)
    (337/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 5.435365225 seconds)
    (338/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 10.328435406 seconds)
    (339/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 5.431590838 seconds)
    (340/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 5.390586024 seconds)
    (341/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 5.398196939 seconds)
    (342/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 5.525082434 seconds)
    (343/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 5.405474882 seconds)
    (344/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 9.777464445 seconds)
    (345/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 6.581817121 seconds)
    (346/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 5.578229996 seconds)
    (347/434) benchmarking ("perf_countequals", "Float64")...
    done (took 5.416870097 seconds)
    (348/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 5.748723584 seconds)
    (349/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.421069409 seconds)
    (350/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 8.10633722 seconds)
    (351/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 6.898798334 seconds)
    (352/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 5.575498595 seconds)
    (353/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 5.348838754 seconds)
    (354/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 6.894328225 seconds)
    (355/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 5.793159729 seconds)
    (356/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 10.327081301 seconds)
    (357/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 10.421133719 seconds)
    (358/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 6.147565767 seconds)
    (359/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.510078538 seconds)
    (360/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 5.43394435 seconds)
    (361/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 5.341088999 seconds)
    (362/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 5.553817368 seconds)
    (363/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 5.519153438 seconds)
    (364/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 5.405175727 seconds)
    (365/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 5.680125288 seconds)
    (366/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 5.343428364 seconds)
    (367/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 5.782544639 seconds)
    (368/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 5.341057502 seconds)
    (369/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 5.838108859 seconds)
    (370/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.717363966 seconds)
    (371/434) benchmarking ("sort", "Float64", 0)...
    done (took 8.058185345 seconds)
    (372/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 5.858685194 seconds)
    (373/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 10.490298083 seconds)
    (374/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 6.018345235 seconds)
    (375/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 5.58158431 seconds)
    (376/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 5.349528633 seconds)
    (377/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 9.761681004 seconds)
    (378/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 5.510353781 seconds)
    (379/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 5.663776597 seconds)
    (380/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 5.351896029 seconds)
    (381/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 10.323113233 seconds)
    (382/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 5.962427674 seconds)
    (383/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 10.330809632 seconds)
    (384/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 10.259213139 seconds)
    (385/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 5.688661479 seconds)
    (386/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 5.759453483 seconds)
    (387/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 5.672074358 seconds)
    (388/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 5.618689882 seconds)
    (389/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 5.543622269 seconds)
    (390/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 5.504700342 seconds)
    (391/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 5.346157157 seconds)
    (392/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 5.457901762 seconds)
    (393/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 5.344976284 seconds)
    (394/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 10.31818051 seconds)
    (395/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 5.792309125 seconds)
    (396/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 5.58117194 seconds)
    (397/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 5.408108624 seconds)
    (398/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 5.526963791 seconds)
    (399/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 5.922719414 seconds)
    (400/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 5.402929414 seconds)
    (401/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 10.322859416 seconds)
    (402/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 5.606001281 seconds)
    (403/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 5.566568554 seconds)
    (404/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 5.584967343 seconds)
    (405/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 5.512450996 seconds)
    (406/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 5.682616995 seconds)
    (407/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 5.412431509 seconds)
    (408/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 5.464878602 seconds)
    (409/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 5.519787444 seconds)
    (410/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 5.412790606 seconds)
    (411/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 9.280345364 seconds)
    (412/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 9.253232316 seconds)
    (413/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 5.346152305 seconds)
    (414/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 5.83303787 seconds)
    (415/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 5.5626637 seconds)
    (416/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 10.331170674 seconds)
    (417/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 17.583071899 seconds)
    (418/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 12.569624722 seconds)
    (419/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 5.573883034 seconds)
    (420/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 5.531294503 seconds)
    (421/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 5.696882842 seconds)
    (422/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 5.376117184 seconds)
    (423/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 5.445447724 seconds)
    (424/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 5.405630728 seconds)
    (425/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 10.324416374 seconds)
    (426/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 5.800139775 seconds)
    (427/434) benchmarking ("perf_countequals", "Bool")...
    done (took 5.367711522 seconds)
    (428/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 5.548449729 seconds)
    (429/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 5.624597268 seconds)
    (430/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 5.348350391 seconds)
    (431/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 5.78415129 seconds)
    (432/434) benchmarking ("sort", "Int8", 0)...
    done (took 5.409914071 seconds)
    (433/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 6.038263535 seconds)
    (434/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 5.688868988 seconds)
  done (took 2836.473337283 seconds)
done (took 2841.789646935 seconds)
SAVING RESULT...
DONE!
