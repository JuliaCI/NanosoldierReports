cset: moving following pidspec: 437863
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.381987596 seconds)
loading group "shootout"... done (took 0.856239052 seconds)
loading group "string"... done (took 0.222986244 seconds)
loading group "linalg"... done (took 3.205141144 seconds)
loading group "parallel"... done (took 0.021553631 seconds)
loading group "find"... done (took 1.205847167 seconds)
loading group "tuple"... done (took 0.709332467 seconds)
loading group "union"... done (took 3.170854237 seconds)
loading group "dates"... done (took 0.159509114 seconds)
loading group "micro"... done (took 0.058465307 seconds)
loading group "simd"... done (took 0.411163754 seconds)
loading group "io"... done (took 1.21392538 seconds)
loading group "random"... done (took 2.394962592 seconds)
loading group "problem"... done (took 1.324482422 seconds)
loading group "array"... done (took 4.630358235 seconds)
loading group "misc"... done (took 0.969031487 seconds)
loading group "scalar"... done (took 3.493905301 seconds)
loading group "sort"... done (took 0.309080991 seconds)
loading group "sparse"... done (took 3.604724846 seconds)
loading group "collection"... done (took 6.094118995 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.552131536 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.073923851 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.258086405 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.080715031 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.287630767 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.075346773 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.089187283 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.071713809 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.181531453 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.169756224 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.220375724 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.397817863 seconds)
done (took 5.196215973 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.314450494 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.034223745 seconds)
    (2/2) benchmarking "String"...
    done (took 0.130230317 seconds)
  done (took 0.775742756 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.144076648 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.015923806 seconds)
    (3/3) benchmarking "different"...
    done (took 0.022999607 seconds)
  done (took 0.784811125 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020703263 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.100903382 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.021779683 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.022383578 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.022316113 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.021738316 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.021552247 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.021448653 seconds)
  done (took 0.837003391 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.029785102 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.023284006 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.021285034 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.022615779 seconds)
  done (took 0.700129301 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.023069367 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.085885072 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.020471466 seconds)
    (4/4) benchmarking "different"...
    done (took 0.020354539 seconds)
  done (took 0.749421593 seconds)
done (took 4.80114456 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.204676027 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.781471119 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.998900598 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.186148765 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.362628737 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.303359793 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.081980583 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.243369901 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.153041564 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.0318774 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.19598471 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.040164278 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.537485049 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.551813517 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.02916678 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.140639112 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.577933188 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.039977086 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.071013837 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.219787267 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.033966987 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.037607167 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.044297116 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.027210545 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.115567686 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.138831502 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.671560018 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.064619464 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.025305655 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.04766371 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.028067702 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.027330642 seconds)
  done (took 9.657625912 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.154977418 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.150329992 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.024015453 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.060761793 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.05161454 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.025186252 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.03046309 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.023226491 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.043521061 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.089448047 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.046857275 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.163979381 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.021543791 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.024947536 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.144213346 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.116878235 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.040992194 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.03773779 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.022752051 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.036779346 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.0496128 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.035182427 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.033233862 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.032950503 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.06877949 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.090446542 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.0418904 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.064306254 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.023177328 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.035421409 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.051786459 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.064414994 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.023174444 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.022018124 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.066253359 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.040687363 seconds)
  done (took 2.688722065 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.717433906 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.051512469 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.140285892 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.138336762 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.06040213 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.050833975 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.181899972 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.074387215 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.056621291 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.022114592 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.203905772 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.674592777 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.175516827 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.081600291 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.033334336 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.177845249 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.747742062 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.952026688 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.023237786 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.02471048 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.141739593 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024919944 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.182124481 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.021952506 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.138305777 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.575731341 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.029250174 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.027765907 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.048678354 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.146841228 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.021240061 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.102839069 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.046339478 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.02311416 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.284908326 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.021990631 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.020105085 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.043429905 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.051530021 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022323006 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.022652709 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.030388028 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.021378047 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.070798665 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.032138749 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.501103897 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.03001818 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.691791859 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.833376194 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.031187462 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.027980541 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.053366249 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.020249088 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.022454261 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.610005963 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.116187004 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.023213379 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.299252794 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.026093877 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.024730198 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.024828803 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.05617555 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.022448761 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.022580812 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.026914097 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.040106195 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.966455464 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.033314401 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.041848374 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.021852163 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.023176953 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.020360959 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.403535208 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.029887878 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.025533905 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.020710218 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.025615098 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.023280841 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022694105 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.06850519 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.050035574 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.172514601 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.029237929 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.021662341 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.022065005 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.486959532 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.925253242 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.025228667 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.02304397 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.260119499 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.020493998 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022627219 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.021891439 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.044443227 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.023029904 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.019941561 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.056834466 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.023304127 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.130095064 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.497740541 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.025723748 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.020254597 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.433756381 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.024770842 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.056997972 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.07366136 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022939729 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.062972268 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.023215631 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.020388432 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.026356363 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.02018731 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.024407092 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.02134638 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.021958161 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.02010543 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.02238543 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.02287611 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022940058 seconds)
  done (took 18.913433806 seconds)
done (took 33.579309855 seconds)
(4/20) benchmarking "parallel"...
done (took 0.765924749 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.219530109 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.050000685 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.019791675 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.224878948 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.047008608 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.141866 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.183098858 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.132507879 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.046807755 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.046463971 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.046505632 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.189298419 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.199857492 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.047871445 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.123626299 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.200555673 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.047724292 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.020181884 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.047151361 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.048483963 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.04851956 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.020560727 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.048476925 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.048992334 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.126177341 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.048310446 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.020135179 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.125826435 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.049472089 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.130060281 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.050630037 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.049616438 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.050274337 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.127404044 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.050791115 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.127517299 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.020537215 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.050501003 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.050776078 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.051583246 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.051182275 seconds)
  done (took 4.144306651 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.046929118 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.03850342 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.040780243 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.018399981 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.028451041 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.038650659 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.018397925 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.038095652 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.04217843 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.038601223 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.038572332 seconds)
  done (took 1.145461604 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.041320814 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.039416906 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.040829921 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.018394841 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.030199329 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.039184001 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.018298543 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.040138235 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.04214359 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.039335807 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.039338077 seconds)
  done (took 1.081555677 seconds)
done (took 7.041541127 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.157778857 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.126720429 seconds)
  done (took 0.965641021 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.561744611 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.22245135 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.13787782 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.260691162 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.129645775 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.161457617 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.348616021 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.300095707 seconds)
  done (took 6.861155224 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.07621908 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.147317235 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.024621206 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.023228498 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.023458566 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.023431378 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.024892206 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.023630702 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.022945453 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.025417494 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.024987495 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.023086517 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.023827551 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.025050056 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.02319708 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.023418484 seconds)
  done (took 1.318033204 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.029400129 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.025970055 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.02723742 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.017452458 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.028014274 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.026971077 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.028146014 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.028677959 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.02733265 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.026914713 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.024881058 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.02805878 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.026590831 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.025355515 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.028018835 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.017409402 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.0282384 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.027498673 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.029353094 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.028452578 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.027809259 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.025295805 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.029387018 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.02653024 seconds)
  done (took 1.348269232 seconds)
done (took 11.18483161 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.142726802 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.029878916 seconds)
  done (took 0.865923588 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.132397743 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.131153181 seconds)
  done (took 0.967003971 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.02948381 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.016296621 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.033000567 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.024792485 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.016541088 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.016246256 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.031957102 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.016499422 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.016317648 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.016404103 seconds)
  done (took 0.924101416 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.019828623 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.02357668 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.021400222 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.019568032 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.021217012 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.017480124 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.019775243 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.017613946 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.023298921 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.016672139 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.020568481 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.038620207 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.019897147 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.039091283 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.019868458 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.020489784 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.022100986 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.020029038 seconds)
  done (took 1.112433344 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.018230345 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.017298978 seconds)
  done (took 0.743130308 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.021112789 seconds)
    (2/7) benchmarking "second"...
    done (took 0.017410142 seconds)
    (3/7) benchmarking "month"...
    done (took 0.019133565 seconds)
    (4/7) benchmarking "year"...
    done (took 0.018911604 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.016832787 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.016293593 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.016838387 seconds)
  done (took 0.827532057 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.39247934 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.090877928 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.325158302 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.020157917 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.03898134 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.237243555 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.020094481 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.024462532 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.024352983 seconds)
  done (took 1.877634931 seconds)
done (took 8.02310593 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.040932291 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.144652945 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.154059053 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.457609786 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.034657634 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.022937266 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.051493909 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.238115021 seconds)
done (took 1.863918982 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.485024258 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.250187869 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.178844157 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.024246498 seconds)
  done (took 2.164486282 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.310558845 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.146742699 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.031181491 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.023332386 seconds)
  done (took 1.241441062 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.02286249 seconds)
    (2/2) benchmarking "read"...
    done (took 0.02787399 seconds)
  done (took 0.769198905 seconds)
done (took 5.383675851 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.030819869 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.017129707 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.023467664 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.018630636 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.018233475 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.017718218 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.017903708 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.018789734 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.016712386 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.018764265 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.018768246 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018728801 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.018450589 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018424422 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.017932493 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018743826 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.016778476 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.018443014 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018402995 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.018471311 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.016712928 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.01902577 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.018202386 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.018732317 seconds)
  done (took 1.161583876 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.036698451 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.021276328 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.021893229 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.021682 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.022339658 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.021761094 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.021722278 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.021010444 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.022013474 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.020796445 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.022411177 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.022485396 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.020682967 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.022531204 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020728683 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.022454471 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.022041253 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.021139029 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020757219 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.022486284 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.021882443 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.021192555 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.022403331 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.021905351 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.022439548 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.022468708 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.020838763 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.021422763 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.022134582 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.022726574 seconds)
  done (took 1.388554502 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.023489779 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.015428273 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.015631297 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.025872136 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.015274038 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.015480605 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.015908417 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.015077561 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.015430911 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.016310598 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.015809956 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.01518324 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.016072971 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.015234457 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.015416162 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.015956884 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.020650292 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.035591489 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.0155405 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.015354916 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.020082263 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.015578357 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.015360661 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.015357919 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.015838956 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.01538519 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.015220187 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.015750043 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.015385669 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.015997449 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.015394535 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.02010208 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.021671993 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.01584772 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.025871551 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.020581621 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.015882387 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.020083056 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.016475862 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.015427667 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.015396351 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.015384397 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.015569683 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.015527731 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.026245791 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.015776857 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.016808136 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.016041724 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.015717644 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.015408556 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.015561136 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.01718296 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.021390901 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.016792259 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.015399432 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.016746854 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.015504605 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.016211965 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.015630963 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.015421626 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.015387733 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.019577103 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.016919028 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.016263773 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.03760904 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.016976902 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.026295461 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.015627815 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.016025941 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.019857689 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.016374228 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.035703651 seconds)
  done (took 2.010624369 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.028525691 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.026140411 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.034775751 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.025360801 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018821009 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.016230622 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.019475092 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.016297066 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.025730691 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.019926977 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016308122 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.019539103 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.025816035 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.019926611 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.017429551 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.025762705 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.019978202 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.01917388 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.016332023 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.020206242 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.017650498 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.019817379 seconds)
  done (took 1.19501186 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.105214312 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.02181193 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.066303079 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.025356448 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.024127047 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.025219102 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.021787313 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.021772253 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021928522 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.022495041 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.022524732 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021896773 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.02402131 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.022376742 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.022459581 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.022418374 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.022184309 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.022546837 seconds)
  done (took 1.256755026 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.034635735 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.021605686 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.049369875 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.02125758 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.021326362 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.020968817 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.024857229 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.025065995 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.021075719 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.02157792 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.025178861 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021156417 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.021221027 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.021621232 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021163226 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.02157989 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.021125792 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.021596764 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.025204336 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.025134059 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.025121043 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.0251117 seconds)
  done (took 1.263206745 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.035651297 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.020502265 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.037190595 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.02210434 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.015726705 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.015805547 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.022091358 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.020806233 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.022054491 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.020483343 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.021023146 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.015881697 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.023046861 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.021066128 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.023242618 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.021038859 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.020506422 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.021085344 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020510619 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.015881886 seconds)
  done (took 1.157385135 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.135998903 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.01799685 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.017828704 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.022314135 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.017814997 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.017882337 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.022519231 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.017862995 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.017833893 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.042431478 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.017937299 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.017882539 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.022572419 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.020797993 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.017821367 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.022491965 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.022662478 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.022849932 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.018066909 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.018116763 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.043107276 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.018193762 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.023018178 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.018162409 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.018534218 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.018100812 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.018143422 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.021243083 seconds)
  done (took 1.433527441 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.040032755 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.015233068 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.015571623 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.019369132 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.019309534 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.025284731 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.019383622 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.019427536 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.015102351 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.015477949 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.017456211 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.015126088 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.015077715 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.02486892 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.015032838 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.017479683 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.02489252 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.019485758 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.025612457 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.025422007 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.017451304 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.02470483 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.01743891 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.015630916 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.026019788 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.017682775 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.019775195 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.020779603 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.017705537 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.015654882 seconds)
  done (took 1.324804321 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.02776629 seconds)
    (2/2) benchmarking "in"...
    done (took 0.024306824 seconds)
  done (took 0.779800494 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.018879786 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.033788645 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.015272322 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.028759428 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.024281182 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.01962851 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.024267989 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.024099767 seconds)
  done (took 0.907315478 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.131066338 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.155026717 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.017626439 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.017739725 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.12852581 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.078802819 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.139753726 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.028902901 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.030892109 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.020066642 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.017373236 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.140880768 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.017121843 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.030827512 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.018744803 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.026966649 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.024316288 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.035334015 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.030173601 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.015957961 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.02964554 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.017751638 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.01690708 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.017809265 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.018168244 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.023871627 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.033034739 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.029635031 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.026031548 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.015362218 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.035897679 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.016186803 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.016925778 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.025391062 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.130827277 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.016398692 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.054727056 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.016346496 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.020860658 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.01600527 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.028231666 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.037345214 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.030650836 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.034439727 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.017637362 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.018089258 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.015982075 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.017815647 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.020117461 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.025297744 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.016283625 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023522551 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.015885137 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.017683061 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.026759103 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.016345505 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.021042467 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.025497741 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.029818384 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.030478544 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.02868293 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.031709521 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.025102615 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.025152969 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.017010097 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.036442803 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.017892963 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.029723318 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.03134442 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.017537608 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.0282968 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.016159408 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.015359059 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.01629514 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.05063931 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.01773047 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.017197703 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.016390444 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.016517936 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.017702476 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.025895816 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021338165 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023623275 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.019555734 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.032307031 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.025395084 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.016164317 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.023920255 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.034974732 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.020338303 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.016344262 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.033686674 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.020321147 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.016130983 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.026965902 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.026815757 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.017905572 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.017025069 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.020150728 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.034762756 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.019596293 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.016309261 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.025654322 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.018680456 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.134930022 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.022298426 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.025105556 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.016673315 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.027237398 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.023825804 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.018502589 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.015839672 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.021621494 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.017734399 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.015856023 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.026401532 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.016852399 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.036209784 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.02388327 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.031652881 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.032073655 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.03143609 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.033229092 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.016674413 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.015832332 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.035905257 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.026323816 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.018149341 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.03556507 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.016678307 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.031283217 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.016821204 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.018420205 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.026355731 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.01608219 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.018617997 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.017015999 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.02380299 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.01839775 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.018661044 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.022961782 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.025567648 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.033478362 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.018241173 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.025852794 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.01731604 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.033407178 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.030652791 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.021903296 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020820199 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.017950898 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.033297146 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.02400766 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.026328681 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.016932007 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.017863435 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.017012238 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.02820148 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.026710615 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.018922259 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.027451783 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.021931964 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.017878622 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.017064197 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.01814214 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.020902119 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020766156 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.017654403 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024717729 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.025831665 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.035518497 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.025692668 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.02631068 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.016391887 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.016916496 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.019031829 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.016957055 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.021839007 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.026450231 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.033025015 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.029325406 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.0321728 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.017323797 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.030553431 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.018916977 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.02730412 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.030584004 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.018050607 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.022294487 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.016125353 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.019020418 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.026601179 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028797084 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.03543962 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.032493107 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.022073694 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.021943775 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.016998777 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.032558036 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.017482329 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.025569253 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.026514803 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.024098254 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.016942891 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.019060422 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.026269735 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.021996694 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.018177634 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.033270989 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.025766836 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.0169489 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.031713061 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.017435006 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.028187071 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.163567377 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.020393706 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.021741284 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.017699965 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.025559519 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.031218869 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.015161329 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.016213937 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.031490322 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.017433744 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.017228128 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.024035573 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.031157604 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.020999613 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.023797642 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.026299964 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.026618104 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.020818719 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.02634461 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.016735341 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.025050577 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.018732412 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.027402399 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.015830895 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.033846781 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.015127433 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.031028755 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.016504566 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.026751596 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.016206007 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.025047202 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.016584923 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.032768189 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.017168814 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.016543718 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.029798593 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.015089999 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.024915064 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.015660149 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.021303727 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.02285749 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.024957193 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.017389034 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.02511119 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.017234748 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.024765601 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.020868144 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.024423316 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.024795838 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.020712433 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.015615534 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.023889784 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.026269447 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.023772118 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.01702697 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.017027003 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.01608875 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.024805477 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.017085723 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.016579539 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.023723312 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.020762474 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.021899741 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.017120442 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.017203013 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.017102929 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.024057217 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.02504944 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.033686052 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.024206151 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.023144262 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.024753069 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.015620485 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.031080523 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.015598777 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.023117968 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.015012153 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.022578166 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.025036046 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.016209235 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.0352511 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.017572926 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.023859074 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.026872626 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.024531663 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.020095933 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.026657863 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.019161947 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.024285121 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.023943749 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.021002169 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.023162924 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.017681503 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.024375519 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.026484761 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.027520917 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.017014845 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.023629925 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.025056452 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.017879853 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.025144192 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.017710574 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.024563535 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.017969745 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.015541264 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.021232266 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.027567148 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.021373941 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.021634296 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.016511335 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.015410372 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.016429879 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.023871509 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.021217586 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.024821436 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.031997557 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.01557604 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.017176406 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.016183697 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.020280799 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.034890685 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.02598432 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.024199576 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.021401038 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.01569629 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.017730882 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.017942239 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.016382327 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.019569343 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.015677905 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.016130484 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.026934282 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.017927839 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.021093745 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016573927 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.017382152 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.0300666 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.020827615 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.017145365 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.023880847 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.016591312 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.022154953 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.01610375 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.018514678 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.021690066 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.016414114 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.020684429 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.031066328 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.033752935 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.023876311 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.025612375 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.017715813 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.024653714 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.032569436 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.026706571 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.017811029 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.026276307 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.016329912 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.036148608 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.026237016 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.025377337 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.026770029 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.017818876 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.026954379 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.021612037 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.026951135 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.032501597 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.017822539 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.02615465 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.016687728 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.032826249 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.021650362 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.016621331 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.025550243 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.024515676 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.023120327 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.030877878 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.017610572 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.025578063 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.022466613 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.020882468 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.018643989 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.018793492 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.025731235 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.026474346 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.017988635 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.023682448 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.025056335 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.025329062 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.021858572 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.033328834 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.025115928 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.018010737 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.01881965 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.020782607 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.017834104 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.033109299 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.017293114 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.021721162 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.021777091 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.016836597 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.023997345 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.033855419 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.026313293 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.026582097 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.016910538 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.01627074 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.035688203 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.020878308 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.020820664 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.025009207 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.030559756 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.0334563 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.02624244 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.027147251 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.01737979 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.02341139 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.033199376 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.017905547 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.016688757 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.02079973 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.018706577 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.026053662 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.026856139 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.024308473 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.019021546 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.024155777 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.030630261 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.018594118 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.021884856 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.023999005 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.017923003 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.027645688 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.02498929 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.025614722 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.018735029 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.016923073 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.020621386 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.025853825 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.024431737 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.026031 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.018066478 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.026927662 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.03539779 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.024669459 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.020935807 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.016943615 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020834092 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.026198064 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.024544973 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.016987202 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.022077554 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.020900074 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.027141103 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.026581376 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.021883778 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.016860327 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.027257895 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.025868413 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.026167768 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.16766273 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.017743945 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.016234179 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.015789935 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.026892289 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.015766753 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.0172358 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.021048005 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.017312406 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.033613078 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.02391057 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.031537682 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.016644992 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.020794495 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.015633904 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.025120167 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.02080076 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.01569756 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.026095197 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.015303561 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.031125969 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.027275978 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.021726062 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.01563846 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.021306035 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.024181904 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.030771821 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.025221059 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.024592854 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.018665093 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.025123813 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.017153681 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.026462568 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.015616055 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.014976531 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.025461439 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.024248796 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.031444795 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.015620808 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.025513299 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.017187128 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.023838975 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.024130495 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.017069666 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.017074408 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.017034709 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.024932038 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.020685182 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.025304867 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.021723695 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.032798244 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.01656162 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.026677927 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.024653742 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.026329935 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.029395812 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.026303694 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.024073849 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.016019103 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.022991686 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.023988404 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.016556943 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.021192559 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.018485251 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.037254924 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.017072478 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.017048931 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.033199907 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.022531196 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.015702248 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.02239364 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.020873537 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.025827883 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.016872366 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.030090173 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.021150914 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.016846964 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.02097205 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.021080697 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.015258196 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.015930581 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.016177677 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.025604095 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.021188718 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.016187423 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.035148146 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.017415312 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.024644161 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.026964011 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.023083989 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.017525788 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.015272744 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.016881649 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.029339446 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.031527843 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.020298451 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.024608298 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.017737632 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.025255894 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.015359706 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.02470139 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.024013337 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.024544948 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.016087946 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.01639062 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.031178724 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.031802734 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.021262662 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.033135877 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.025205701 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.017849773 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.038522565 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.025065812 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.017086119 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.027064108 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.018275849 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.015726028 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.015513532 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.017753834 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.027688377 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.016041342 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.018462486 seconds)
  done (took 15.47519287 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.061944137 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.017030211 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.015621153 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.015598607 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.022682452 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.016802078 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.015511343 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.016810909 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.016899043 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.017917191 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.0157069 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.015651867 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.021221912 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.031039241 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.023709063 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.019398001 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.015611586 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.016903078 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.015642152 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.016905632 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.021744808 seconds)
  done (took 1.212462355 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.020194052 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.020145265 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.01943906 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.019665403 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018875391 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.015789757 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.019205258 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015738578 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.019779694 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.016239805 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.019770745 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015889642 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.016227607 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.016171841 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.016217662 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.017308239 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.019793286 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.019020877 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.015834324 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.019378685 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.017309518 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.019422937 seconds)
  done (took 1.155811509 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.018598951 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.016458756 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.024241199 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.015286396 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.015185785 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.017961597 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.015126048 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.019894842 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.019893951 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.019911074 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.024325642 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.016945454 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.015577759 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.021533922 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.015270294 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.016065261 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.060775225 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.016142826 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.016199468 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.015420602 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.017648223 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.024398859 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.015463978 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.015617128 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.019999653 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.018126098 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.015379638 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.017691695 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.015962176 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.020169856 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.016345859 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.015394077 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.02434513 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.0236398 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.020287005 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.020177346 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.016890309 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.016282015 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.015605005 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.015558274 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.023805056 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.016838406 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.015838518 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.016614074 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.024310456 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.015618121 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.015279454 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.024360123 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.015371276 seconds)
  done (took 1.692445645 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.029062207 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.068438022 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.021760443 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.050911779 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.027720051 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.020838337 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.021482642 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.053764608 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.016685008 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.017124053 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.028566106 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.028672987 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.018186037 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.019389399 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.021521344 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.018335609 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.018980769 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.017617584 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.020777528 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.018088857 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.020797817 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.023093686 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.028138818 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.028654715 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.019353936 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.017710984 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.017980498 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.019522673 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.028315565 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.021268307 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.019777855 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.020312965 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.028759316 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.023571055 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.018027611 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.018163309 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.029376201 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.018678296 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.018458262 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.0169083 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.01815097 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.019676782 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.023168799 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.029594716 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.018626109 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.023624243 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.018495703 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.016476678 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.028800026 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.018252671 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.021944441 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.029608199 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.019432888 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.018752826 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.019996409 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.028934505 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.018630667 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.017260922 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.018707549 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.028498873 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.01685931 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.019239822 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.029340005 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.018018334 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.02150079 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.029464567 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.023631981 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.01952722 seconds)
  done (took 2.473180575 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.026063171 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.051773002 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.029600209 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.029556446 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.025004869 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.025469026 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.025306139 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.025349057 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.025235312 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.028158855 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.025429164 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.171254077 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.022671655 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.027650686 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.025940507 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.025948482 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.0259374 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.025890018 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.025864177 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.025790976 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.025887218 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.030579319 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.025905757 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.030644958 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.030346286 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.02251553 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.025738823 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.025789038 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.030778195 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.025806428 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.030327488 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.026028185 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.02648537 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.032092532 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.03147038 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.026221959 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.016536926 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.025916526 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.026161819 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.02603381 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.022627987 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.031040849 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.025904403 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.022616832 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.026072898 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.025846966 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.030915319 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.030613901 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.027837797 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.028964983 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.026109782 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.031089406 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.026092639 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.026257195 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.031289319 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.034470088 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.03121586 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.031571929 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.026488711 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.031407959 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.031529194 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.035002077 seconds)
  done (took 2.645806605 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.031322073 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.021426443 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.034681129 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.015355409 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.015410021 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.024532416 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.015395643 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.015414833 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.021313357 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.021288475 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.022801842 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.024759598 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.026558114 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.022796557 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.024772906 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.026533351 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.024641241 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.024871852 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.021749728 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.025074101 seconds)
  done (took 1.241017692 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.019429667 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.020903856 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.016162955 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.031972586 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.016141479 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.023582558 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.016126296 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.016089374 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.016204317 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.01622625 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.020747662 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.020681276 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.016208204 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.02423302 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.019743879 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.023832348 seconds)
  done (took 1.081852506 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.020856199 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.024712898 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.130795417 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.01680842 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.018794306 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.016207036 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.017006489 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.015474085 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.018277178 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.030298401 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.016984023 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.019043044 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.017010627 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.015717661 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.016290034 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.019007981 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.018203408 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.016665886 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.017035476 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.133025028 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.025846209 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.017889048 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.019494423 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.017986705 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.019039238 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.025573249 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.018205675 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.019023398 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.017198844 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.019419435 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.018986759 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.023719631 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.018947855 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.017323484 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.015886464 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.01679459 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.017254188 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.019347292 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.019377445 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.017170789 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.016001794 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.018986655 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.017282608 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.01762254 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.018931909 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.020286993 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.018747196 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.023137615 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.017253444 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.019121433 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.017358095 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.018573547 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.017741999 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.028765651 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.019433065 seconds)
  done (took 2.035142196 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.035282136 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.021211043 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.015296411 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.015261374 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.020714869 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.021470199 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.02080324 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.020949837 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.021360158 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.015178256 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.021475139 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.020546774 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.021625798 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.021161151 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.021582122 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.021124159 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.015318999 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.021292358 seconds)
  done (took 1.146557 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.024740606 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.021077462 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.02124258 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.017198975 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.017256059 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.021165077 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.015629324 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.016926553 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.016939452 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.017378803 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.017344784 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.016906612 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016987464 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.01692298 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.020933379 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.017293603 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.016961297 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.015897842 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.017324331 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.015687151 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.021415294 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.015856375 seconds)
  done (took 1.163530196 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.196660553 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.153481617 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.04023834 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.035587128 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.027203288 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.052493715 seconds)
  done (took 1.271636744 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.053480375 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.054460516 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.021026865 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.020852954 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024947847 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023349302 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02333628 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023664983 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02659255 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.029326591 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023707128 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02699629 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026656729 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028524846 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025194916 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.025604665 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02522343 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.024505739 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.021459101 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.032026311 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024260999 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027405842 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024264504 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023986311 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.024128804 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02904587 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027331649 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.030016122 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.024105625 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027488694 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025698624 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024191705 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027516789 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.030015747 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.021332619 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027259227 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.024163889 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.032079507 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025849956 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029203934 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.021244927 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025798709 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027473822 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027125293 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027690463 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.024420268 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02708649 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024242418 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024289127 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.035671265 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.025931871 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.029110102 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025859385 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.027638752 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027363667 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.035681165 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.030354723 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.029353962 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026250278 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.031004765 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.029850917 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026376678 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02969946 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.032249754 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027664375 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.031754723 seconds)
  done (took 2.592867878 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06198627 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.021314846 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023633649 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028923125 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.027911723 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023674992 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023777798 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023819124 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.0237803 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.021530695 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.060476534 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023954158 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.028496702 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028520504 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023862576 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02383785 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024040289 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028973368 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02166669 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.035293344 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024139738 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.028962087 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.028975527 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.028873784 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02996751 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025781691 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.024187692 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024207086 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02410885 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024065972 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027092867 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024239629 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.029060846 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.021639193 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.029007351 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024372698 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02418656 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027248129 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024295814 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025992228 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029296069 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.032214866 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.024307268 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02416919 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.03023761 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024208263 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.024238864 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.021809813 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02434639 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.021838776 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.030363489 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.030189359 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.030320196 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.029253432 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024411454 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024352288 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.024348485 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.024302141 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024355962 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.025989389 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.029665845 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024751482 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.036734245 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024686493 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02464828 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.030730998 seconds)
  done (took 2.581913576 seconds)
done (took 52.362379417 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.214317759 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.177670052 seconds)
  done (took 1.15337438 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.142595329 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.139691167 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.168759151 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.023956552 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.081721917 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.174804962 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.125834372 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.02657543 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.02436034 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.025855604 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.023921476 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.025408935 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.025598775 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.023755976 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.086595923 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.026535998 seconds)
  done (took 1.921554547 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.073927406 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.274291848 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.033583862 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.023005905 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.10377769 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.0295843 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.05408131 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.028704934 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.02902328 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.023643329 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.070905111 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.035370986 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.02767964 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.028744825 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.026679481 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.02763329 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.028560003 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.029137873 seconds)
  done (took 1.722655156 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.07883401 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.033314116 seconds)
  done (took 0.891462541 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.139587743 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.064214797 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.222500283 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.308585116 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.097131621 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.31007457 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.102935973 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.101266316 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.071625525 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.096210559 seconds)
  done (took 2.282028604 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.062610663 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.057212122 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.271346338 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.054801409 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.035100355 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.030030454 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.03034063 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.030602368 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.022161924 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.02956634 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.077217479 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.028133072 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.024516557 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.07395583 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.049894284 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.059722519 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.024017687 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.030109469 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.03311819 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.023836899 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.02883551 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.030870313 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.115377011 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.030733489 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.052119929 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.028613144 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.030236386 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.029996362 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.029906545 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.031229 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.031832983 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.057612834 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.03065222 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.037799352 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.029670937 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.048922102 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.024957139 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.051139093 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.027769071 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.024723509 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.028357393 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.031978546 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.02549204 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.031130642 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.022623551 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.031012224 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.031389371 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.024053938 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.022625642 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.027960741 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.024899655 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.029545488 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.029202358 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.03028261 seconds)
  done (took 2.998764329 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.078398791 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.067062278 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.024376585 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.07438401 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066134295 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.024637779 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.080244007 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.060681672 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.078504867 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023994204 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023702652 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.023633369 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.031600587 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.035472657 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.077292572 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.070193961 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.026098488 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.024552855 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.069510342 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.069505387 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.023242655 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.081424938 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.07075504 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.06869778 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.022968953 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.024568692 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.023232231 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.023933143 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.032383887 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.031960987 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.023591497 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.034750923 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.035978019 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.031286568 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022906785 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.023274625 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.023199564 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.032384539 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.03398676 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.03393039 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.03082983 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022958521 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.023256189 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.023917906 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.024411079 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.022847359 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.033831418 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.031784827 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.033875462 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023910651 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.023907349 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.023153719 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.024155982 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.031359739 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.030094914 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.031929451 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.035140034 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.023756895 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023760872 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.025114477 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.035568662 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.032337397 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.032500609 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.024749701 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.033486696 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.023540741 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.034433917 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.037547174 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.023464742 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.024075859 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.023592559 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.023621431 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.023981756 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.030535178 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.030615347 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024083485 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.02422751 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023942601 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.032992702 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.030733138 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.023494285 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.033084972 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023105112 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023820663 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.02422069 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.024421379 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.036094398 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.034018141 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.025068909 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.024676059 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.024481318 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.024343415 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.023469513 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.034924594 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.033646272 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.033750654 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.035956718 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.024834786 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.036557387 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.03402491 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.02506639 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.032976316 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.024503925 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.02487628 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.025952868 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.033405993 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.032596167 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.034083454 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.024460962 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.024011071 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.033628402 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.035688656 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.024244692 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.032371128 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.035304153 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.033149077 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.023865286 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.036122487 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.024472112 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.036306154 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.02473584 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.035834913 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.024840613 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.03348065 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.024693463 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.023802936 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.024570028 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.037295566 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.025144629 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024627891 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.02495284 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024504909 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.033600695 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.037930885 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.025329415 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.034029189 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.033723148 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.025267087 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.036298364 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024813596 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.036447307 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024866584 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.02515663 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023881435 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.03851392 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.024473158 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.024999207 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.024541121 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.035606404 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.024722803 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.035313127 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.032705328 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023945731 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.036921722 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.035036264 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.032686385 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.03566869 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.025374884 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.024689072 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.024306852 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.02460325 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.036108297 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.182296117 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.024575447 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.023698253 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.02937078 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.032469889 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.022868678 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.029391002 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.02918325 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.029895787 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.023670921 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.023447949 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.032846034 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.033881171 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.029679808 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.032075779 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.030643242 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.023163236 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.029435139 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.032232635 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023164951 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.036382743 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023085839 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.033122382 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.032482422 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.028708855 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.032055781 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.033449858 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.031952559 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.031574302 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.03365139 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022657982 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.022882183 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.029570745 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.022949727 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.023248746 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.029378912 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.023560298 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.023874311 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.036390342 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.023356612 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.032505432 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.022665737 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.030351118 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.022554657 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023597685 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.034657981 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022998671 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.02357267 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.029881448 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.023187265 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.029405365 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.032631489 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.029769709 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023196771 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.023894475 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.034277228 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.033411387 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.023391633 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023270073 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023996004 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.033139298 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.032592477 seconds)
  done (took 7.942432442 seconds)
done (took 19.697358795 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.145781552 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.073658684 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.13897499 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.084057298 seconds)
  done (took 1.213031354 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.058093655 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.019683541 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.146397588 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.158539739 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.019979508 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.140777087 seconds)
  done (took 1.333414407 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.263663264 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.155796307 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.159086793 seconds)
  done (took 1.3700663 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.154475315 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.27189238 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.559741895 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.148549797 seconds)
  done (took 1.933829018 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.1745053 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.170656448 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.03192491 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.189703436 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.040489807 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.016666632 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.090551731 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.017561586 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.05390535 seconds)
  done (took 1.638786229 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.10197276 seconds)
done (took 8.38413419 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.191298513 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.143436066 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.030498615 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.028229155 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.135033759 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.13754016 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.144107462 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.029850898 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.134082618 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.295671357 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.162433028 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.049093094 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.161990844 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.044183526 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.269489008 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.031837044 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.029319367 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.025222147 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.144114305 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.133390215 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.249893094 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.029153782 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.10116591 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.031008111 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.104832449 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.081439858 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.168215808 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.298452314 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.284677138 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.031134169 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.130569462 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.043555005 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.120022858 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.13471219 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.141592704 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.049135622 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.020505922 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.250157187 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.111803801 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.319024427 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.154043511 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.027748669 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.144257115 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.026313854 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.020407404 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.153744796 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.033926896 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.027820726 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.04441742 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.027802564 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.04361153 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.028078574 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.14459104 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.024499599 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.094196374 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.149520772 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.164221499 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.099637642 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.027238625 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.042656146 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.030272189 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.159695965 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.039273972 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.045214656 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.033080058 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.020828656 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.145172994 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.04064202 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.021111284 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.031220163 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.029129632 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.113053486 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.16377278 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.06774468 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.030378016 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.120547797 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.096026148 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.047517049 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.048077012 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.030493014 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.020451646 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.170809194 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.02604604 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.039204554 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.027618741 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.053539219 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.020620597 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.036317144 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.159842284 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.304173423 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.085383883 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.020578285 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.205616868 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.021190753 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.044309657 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.020612718 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.020123117 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.161385911 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.019918788 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.020106556 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.02938582 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.028317441 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.021696261 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.15043371 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.102438193 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.02749349 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.026982525 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.020082856 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.025975659 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.021109644 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.020164561 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.020060884 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.094597469 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.037082323 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.019686287 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.108206697 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.127382002 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.03327433 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.036143364 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.084418551 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.023187041 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.029269651 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.027140979 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.125019493 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.026609027 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.13517211 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.021467634 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.042720653 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.119638001 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.097006523 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.107169946 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.019980735 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.155918319 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.030110617 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.01951106 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.027202693 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.047612359 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.030313849 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.037137097 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.028270291 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.156520638 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.032937864 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.025778922 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.120218779 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.019659327 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.117496453 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.099590589 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.131002843 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.025610821 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.032911395 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.09324041 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.045420475 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.049269377 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.043771265 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.024942077 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.020553336 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.02018687 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.033380443 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.019642443 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.020432092 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.03434618 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.027211469 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.036283056 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.25104529 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.03053171 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.024727218 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.266139966 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.030465956 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.098113549 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.041030835 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.020764384 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.105285716 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.021010486 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.041002383 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.085839961 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.020718274 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.095206959 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.021167704 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.020515016 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.026533288 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.022096926 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.029281621 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.030578586 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.021022625 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.033763827 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.028138019 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.020382189 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.104680707 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.022232123 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.168158924 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.102717844 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.113904708 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.02077095 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.039361919 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.020234072 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.137607372 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.020615938 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.071300033 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.115068061 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.035189476 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.041033873 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.021585166 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.099514882 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.035214831 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.025972981 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.1010091 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.134026399 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.099472575 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.02727432 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.259174387 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.029924425 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.021393881 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.026865189 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.029079369 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.021193909 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.097446312 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.025768552 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.020369963 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.020587092 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.022516788 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.019885453 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.045844534 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.020145651 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.02802841 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.026691036 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.024102761 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.023837923 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.020304833 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.028597382 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.10259714 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.13355064 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.02716231 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.041109897 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.034145815 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.034353148 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.068992487 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.028231661 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.147818566 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.020352935 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.030357841 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.057798285 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.02057909 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.025937165 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.026480222 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.039061487 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.024448703 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.022322233 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.02935201 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.021172405 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.021145929 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.020951067 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.021119002 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.029182921 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.022479532 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.020484684 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.020436876 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.037055421 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.025613955 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.026113088 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.03169559 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.04136506 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.490946782 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.022892115 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.023122539 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.033533516 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.1952994 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.022315833 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.022647781 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.020295348 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.022208109 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.02045149 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.019777815 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.050610027 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.024581385 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.021070275 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.040555576 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.02596421 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.029370472 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.127852529 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.03640988 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.024286781 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.0193122 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.268503511 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.105575776 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.040578169 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.039027513 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.020232415 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.029974089 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.020352639 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.021097201 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.019540594 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.047405488 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.024640875 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.020287467 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.019241865 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.019568498 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.066483035 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.027708184 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.019561704 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.027694804 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.019541562 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.019804411 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.046768948 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.02051285 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.019742289 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.037196088 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.031432874 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.109234896 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.031428495 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.023002026 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.071412999 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.019280952 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.019856164 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.020173596 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.116999684 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.033018088 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.020993745 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.019843831 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.024889213 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.02843644 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.073687647 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.026110029 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.022633166 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.027622787 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.019188309 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.020130949 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.044430118 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.047130185 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.02090601 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.023459789 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.019711895 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.020019577 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.098768589 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.027570023 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.024636023 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.11310265 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.022232652 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.027696352 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.019564721 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.491545424 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.025181293 seconds)
  done (took 22.59062721 seconds)
done (took 23.398592419 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.171310781 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.034726233 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.038194278 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.028727909 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.032365665 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.03518538 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.034229879 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.029719663 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.032763777 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.031862728 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.148550367 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.020147551 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.027755386 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.035397181 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.028568631 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.036417476 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.034972643 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.03567918 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.020624608 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.0359353 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.031213768 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.031282881 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.028981694 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.035510394 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.020705212 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.028765791 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.163627188 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.040794393 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.024090357 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.029942876 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.01979507 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.034139247 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.019758544 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.01980491 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.029709825 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.025616375 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.030474197 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.026636568 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.16346091 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.025887008 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.020666489 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.036041712 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.027518521 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.027951435 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.028795555 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.031614058 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.025560012 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.034178051 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.02013956 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.032361627 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.162982635 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.024787846 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.02409264 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.028632728 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.025672095 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.02966742 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.023862108 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.032137741 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.025517644 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.031741553 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.028694997 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.028067455 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.020003946 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.02883588 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.020202381 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.019709169 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.019280597 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024773667 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.020089218 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.020020989 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.019632163 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.028878026 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.027274305 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.025249491 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.019794762 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.020078429 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.019849117 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.031908377 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.019734414 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.029069544 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.0204645 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.02566546 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.025175908 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.020569758 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.024777705 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.031623067 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.029129063 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.020609275 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.019767709 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.031824341 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.026766563 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.020071487 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.031599788 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.02463745 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.024353933 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.020169182 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.019803691 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.02457159 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.028097093 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.020051447 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.019332511 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024617927 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.025289654 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.028918155 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.020436559 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.024497619 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.024367309 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.01938673 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.028862062 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.020250115 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.029320753 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.032554731 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.029354328 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.031710875 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.020629374 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.019349212 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.030029492 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.020465719 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.02480396 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.028139073 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.025500187 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.027933376 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.020563157 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.019681645 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024598564 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.026121586 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.020484706 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.020566475 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.020382349 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.029069375 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.02009787 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.019342262 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.020006927 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.028976153 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.02877367 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.019850813 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.019746253 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.028987663 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.020566176 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.026146922 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.025580507 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.028964619 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.020113223 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.020411295 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.019569886 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.020063186 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.028969617 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.02546487 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.024684226 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.020599805 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.028877715 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.019760631 seconds)
done (took 5.553602297 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.078043212 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.064186128 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.184529863 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.148090883 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.038208644 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.038862778 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.025587211 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.041444879 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.027499226 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.046462913 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.04624019 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.042887485 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.170914375 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.041780618 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.0205772 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.032755119 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.021045204 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.048958865 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.152212305 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.041328049 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.065038358 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.020172438 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.037754962 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.039773472 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.03390848 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.044320446 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.040472466 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.021537786 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.03909322 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.038897993 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.04506341 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.023147187 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.020357171 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.041356154 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.037575477 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.030236196 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.020361961 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.028002933 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.033386566 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.020542719 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.06664746 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.04019095 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.02829652 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.028299307 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.021609873 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.036519383 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.021425237 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.03008646 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.037393059 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.028113514 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.034413412 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.039267901 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.023274559 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.03976685 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.02053776 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.02886142 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.02864352 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.020324789 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.020550773 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.020481112 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.020429907 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.023395138 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.034238358 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.041072484 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.0243886 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.028653433 seconds)
  done (took 3.645380673 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.048014667 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.068316177 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.035091764 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.035371739 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.020034257 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.020572285 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.020519276 seconds)
  done (took 1.154185721 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.093897712 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.142748459 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.151017946 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.152457518 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.163570692 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.149465742 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.033579046 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.051199068 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.056280761 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.167868759 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.161216119 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.155539738 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.025049396 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.033663216 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.053979885 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.159228829 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.034452597 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.028923465 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.151196814 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.158800178 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.026196806 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.055844737 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.034139502 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.024063664 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.160227794 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.145725571 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.025239261 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.063896238 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.023884511 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.021661225 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021523068 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.044803037 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.147137602 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.029066662 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021762611 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.020452746 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.144180673 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021966736 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.147129463 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.02892334 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.146652099 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.024011936 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.024215164 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.021889181 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.022785012 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.1498713 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.022948457 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.021507882 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.02108699 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.149090515 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.03272237 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.147060266 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.024799087 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.026741475 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.028539197 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.02842949 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.028678561 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.021821257 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.150235785 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.031855189 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.023369979 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.153936265 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.158148019 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.148328271 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.161090712 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.025725082 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.151566507 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.15098477 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.022089997 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.030038834 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.022616852 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.163509128 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.028219759 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.024219003 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.020280242 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.029150399 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.168136459 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.168082931 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.168115831 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.036623023 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.023521607 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.022504226 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.1650577 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.169183648 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.02804008 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.022260118 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.022433924 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.038659362 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.048077164 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.024485179 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.026907645 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.022184999 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.032938419 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.024489985 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.175472973 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.154015541 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.020351557 seconds)
  done (took 8.214920558 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.036676831 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.021814692 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.021288885 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.021735336 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.021871977 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.021712533 seconds)
  done (took 1.07810516 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.044995801 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.022377096 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.034944257 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.022151618 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.049901248 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.141003886 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.141291221 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.024405011 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.036297 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.034520785 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.141344637 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.144590632 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.144958955 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.023594887 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.142894321 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.034508805 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.143345985 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.027398107 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.033811708 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.02362472 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.036348102 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.023250013 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.023425292 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.15817359 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.017559263 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.034112907 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.034843722 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.034023065 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.033561637 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.024334125 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.023196141 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.017188391 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.02850236 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.024225807 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.144740059 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.028919674 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022684591 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.018425032 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.027049704 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.017207256 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.14794489 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.023931035 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.027585965 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.018421658 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.024367151 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.028651557 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.018470808 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.035703832 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.145495449 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.018906797 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.018468045 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.023110924 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.017296055 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.018262758 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.028671293 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.024412652 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.018295293 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.146167743 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.023574169 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.028825491 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.02265831 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.017239073 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.024360881 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.017141056 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.028095455 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.019407023 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.029133967 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.023683198 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.023402157 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.022543213 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.018337464 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.022418439 seconds)
  done (took 4.20339276 seconds)
done (took 19.202698826 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.565179552 seconds)
  done (took 1.474395751 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.040532433 seconds)
  done (took 1.986707074 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.053350779 seconds)
  done (took 0.994997429 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.31122591 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.538403512 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.722088606 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.094815494 seconds)
  done (took 2.589090333 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.853420792 seconds)
  done (took 1.804313609 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.221837947 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.178369911 seconds)
  done (took 1.373811407 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.50173982 seconds)
  done (took 1.436399977 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.337758718 seconds)
  done (took 2.279882357 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.199811698 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.13019658 seconds)
  done (took 1.273558325 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.614032301 seconds)
  done (took 1.551851494 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.661273534 seconds)
  done (took 5.602574413 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.190151388 seconds)
  done (took 1.192875452 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.192527065 seconds)
  done (took 1.141985618 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.699039331 seconds)
  done (took 1.637580314 seconds)
done (took 27.292483708 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.044495579 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.037710587 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.037623032 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.035047771 seconds)
  done (took 1.085068213 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.032277433 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.02564488 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.027833988 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.028290313 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.02552075 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.027302537 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.028063646 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.02423005 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.025455343 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.024627221 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.023049028 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.024643568 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.027272673 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.02433009 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.026868256 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.028296615 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.024708584 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.025269464 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.026617678 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.024311093 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.027255325 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.024565493 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.024652606 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.026009038 seconds)
  done (took 1.574110822 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.034846569 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.026188107 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.029376755 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.025010619 seconds)
  done (took 1.061937952 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.033867026 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.031439856 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.040160918 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.044364274 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.031039648 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.031737848 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.038337986 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.038545716 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.045390047 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.041583499 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.022135087 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.02188795 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.020975648 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.039901761 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.037834641 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.01631006 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.017199844 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.031867824 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.030806567 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.033689396 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.024106407 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.019727012 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.031280612 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.031800203 seconds)
  done (took 1.699559313 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.041930572 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.019958973 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.047917606 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.046670582 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.046766036 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.019802442 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.03389597 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.046112719 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.084432275 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.019902825 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.019780986 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.019800689 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.054699299 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.019812909 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.034718214 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.065513087 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.068526839 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.020242508 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.051717695 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.019755809 seconds)
  done (took 1.732460472 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.028999378 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.024146843 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.02551322 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.019566157 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.030692188 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.027056452 seconds)
  done (took 1.108154082 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.029561746 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.021620187 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.025099439 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.025775993 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.021342293 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.021313051 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.020160224 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.020192205 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.020139421 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.020130238 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.020052574 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.020034814 seconds)
  done (took 1.212329102 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.167703733 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.026912644 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.024720513 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.019930367 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.020725148 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.019792132 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.033645454 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.02296279 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.036977687 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.020769954 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.021213413 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.023462521 seconds)
  done (took 1.386397498 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.06190128 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.067151052 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102396244 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071527296 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.071002717 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05400404 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.205218707 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.033802322 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.123667018 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.095177839 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073439462 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047240504 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.043683613 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.02419143 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.057096851 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.075772044 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092358387 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027687301 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.070194303 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.249750723 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09279601 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.096248723 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109017768 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074494297 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.051769995 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108794114 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.051982159 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.060606457 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081352783 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.086179316 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077010009 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.055015531 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.026011874 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.025642902 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111672338 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.065829855 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080065916 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.049569669 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.062681376 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.045100047 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.084973833 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.024542071 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.037816962 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.069487506 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.047238936 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.097412343 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.049740802 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.077776867 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040344537 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102919353 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091557469 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.1861762 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.044111907 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065623342 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107641043 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.076075361 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.24875732 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.062991394 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.036897068 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.076010909 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.063446254 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.056374508 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062576315 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035016672 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.136320906 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.043965594 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.072862481 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070698837 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.050273079 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.049729684 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.061819018 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.092208297 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082013014 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.082061328 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094363743 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.047399598 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.079959592 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.057304086 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.093733609 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061193523 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.027298526 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.082510133 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086429748 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.056695332 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.056593689 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094872194 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.049104574 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.031017081 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.057830132 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.077411414 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.035225488 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.072525399 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.036693577 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.088541117 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.098791891 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055484389 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068604338 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.077092067 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.033679516 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128407548 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.066387817 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.028500016 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.076091701 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.076744308 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119802467 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057869958 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.030512051 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.070153098 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064347409 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.117951542 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07285478 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.040095398 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072778831 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10969375 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.210169509 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.255183858 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.050748908 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097018861 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070655663 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.040673743 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.029561842 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.044713686 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068432966 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061312799 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06856679 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048892366 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.03822589 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.040423647 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073993712 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047728739 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.035417847 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.070501983 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.058126313 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.03171311 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045230812 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.031071469 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102042674 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.033061607 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.093756701 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08213783 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.034300757 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062496174 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.051835902 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.061479601 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.054164097 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076927359 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100571611 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.144744904 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.047028011 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.051242293 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064432543 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.105184123 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085894688 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.04768279 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.032352662 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.056624956 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062639175 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.057112382 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08354034 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.050168474 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065121888 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.060656241 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102977655 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107904926 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061401966 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.057963688 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068876781 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.083724548 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030732288 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12402814 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065034996 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078760612 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.044178413 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109109794 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.071319704 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069501496 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.043740226 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.059925201 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.070210384 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067550902 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.26533942 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.050494234 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.026469685 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050142732 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103189717 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.031568178 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066326492 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.044813332 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.047244098 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.073011692 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.04841941 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.038673759 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.022744741 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081820552 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115593311 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.02441868 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.067453396 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.067421376 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.057291555 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.076798321 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.023611935 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.069274954 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092841795 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072631489 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103395944 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153845932 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07924624 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.076451919 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.076801427 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.062822288 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.034526196 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.08497948 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09531436 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053660616 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048664274 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.094768987 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.074792112 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.096948435 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.077585206 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082899667 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.06792214 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.065279615 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063227787 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.066105097 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111849123 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.077851075 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.087034083 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.04042069 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066471689 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.079946626 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101691612 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.037773386 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110016574 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.038972277 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112612608 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.192711486 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.079992435 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.034952727 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.126400183 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033979274 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.054753534 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.024018482 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.030854509 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098623415 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.072284575 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.061150021 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054523187 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.093539699 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.092537681 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.036166833 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.062465828 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.068618581 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.05555428 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07051566 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.062087358 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.043624678 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051441938 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.062338522 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.039037642 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.037948816 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075286421 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051825727 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084346638 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.038000722 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029436634 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.099734779 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061421281 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052392902 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.031424205 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065466452 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.082830827 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.048229933 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.041681774 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.072881359 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061648906 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102612106 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.047411551 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.055312308 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.08495166 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.038895631 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.048557507 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.024446164 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.040944078 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.031386311 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086959784 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.031225106 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.076471665 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.023571931 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090838104 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.041632459 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.049517379 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.058511316 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068787625 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.087102931 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.050180897 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102698856 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051339745 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.082760287 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067428198 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.076633622 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.045178987 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.062365417 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.059605804 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086251997 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.054007706 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088636218 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116347877 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.21896425 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.099845083 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045156537 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.073227653 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061438105 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.079219937 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.066404966 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148373539 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094776217 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065841457 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.064318138 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029305264 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.049341313 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059218698 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.066689959 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130562423 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079285192 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.026464546 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.059197417 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.048257449 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.064854428 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059235843 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.037051821 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105334742 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060432416 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.042836217 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.07001161 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.048819767 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.060932817 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033955807 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.058758586 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.058160393 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.05127522 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.055783448 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.072026657 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088414989 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070929764 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.104309617 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.058185897 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.047536862 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.077616263 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068285928 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067080273 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.042355256 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.041781486 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103609004 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.078959078 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.079413311 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.059293978 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070039649 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.070267642 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060397406 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.089068321 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06908064 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.091268778 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039649888 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.034278514 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.023873569 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.027631388 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08811977 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070172263 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074118529 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.220936507 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.026777015 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.058019636 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.05862704 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026459019 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040248224 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050738847 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.0531779 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.046361902 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06080052 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.066241805 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.050735057 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.057685982 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.051976632 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10291824 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.052129137 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045263278 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100135059 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102277048 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044576544 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049087485 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.025560914 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033085921 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069958881 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100753082 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112427589 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.03635214 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.04112416 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.041321527 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045319465 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.026003575 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.047486543 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.045852474 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062257749 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.054095898 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.071790368 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061782787 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030752622 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.058813167 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.056319933 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.048744962 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.064608252 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079326089 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.085955117 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.106962927 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.070690352 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065065026 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033838808 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.039050919 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.031334809 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034564936 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.057669141 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.034041908 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033812326 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108351923 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.047670866 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062591674 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066655248 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.046228351 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03092949 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095812163 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.024387751 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097226378 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.026201368 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.039408766 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.039410552 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035411821 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.055924477 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108182764 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.071862717 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.075354345 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067840677 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065616581 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.305665247 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116330939 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.035822176 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098183517 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030175434 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.030792948 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.030466009 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064911794 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046632936 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.068421332 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.099033605 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042457602 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057763742 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.027425465 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098622864 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.053819309 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.057894566 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.041858739 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.033373664 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098873174 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033787692 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.035838331 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.045769527 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.064543854 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.026373614 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.056946257 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.038243851 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034238588 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148770868 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.66836965 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053327662 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.033578117 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.052813229 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.102056094 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097792473 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053348047 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065073662 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.077551889 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.057458233 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.050269029 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065337115 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.154957615 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.028643325 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053845025 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.060857981 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.053635338 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058757703 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.055594942 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.049253578 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.049570609 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.041566227 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.03451692 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06500398 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042547567 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.053955536 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.063545872 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.038837591 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.044500414 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.091052622 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.060765251 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.034263444 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048141856 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.07102655 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044724362 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07024118 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.025005668 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.072316748 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.046568276 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084746655 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.057888872 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.219141045 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082412022 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048750638 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092904949 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.064695552 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077581603 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.041156118 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.035171936 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079697063 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.046710687 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031669629 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100259854 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.050311857 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.060750921 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057764732 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.04957162 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067154768 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.070904875 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061000958 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.050581627 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034915645 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054933858 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.055362942 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.036233462 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.036879406 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.031796441 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.03007517 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062732733 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.038671887 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.041230483 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.069331542 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.04527709 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.059899175 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.056404323 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082023286 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.044590775 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.058916735 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.064045485 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048977675 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093982443 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.056871237 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.088719032 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138724846 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.084177307 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089044321 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095716045 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.028383873 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.031750731 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.023765236 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.070739699 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.035120709 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.045655958 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.034174758 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096082761 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.039621429 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.07110575 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.217463732 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.036809262 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.054265065 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05640107 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.02538137 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.040440141 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067785802 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.043278636 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039397176 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.081030279 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.038994796 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.093490815 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.073790718 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060595173 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.05559231 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.194988912 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069176448 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.059977263 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.085786964 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.049398511 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.032040619 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.078036457 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.057308224 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096634974 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.031061309 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037089191 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084549954 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057356942 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.087528638 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.037560429 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.376594045 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098987266 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.054198909 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090324434 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.025223788 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.043335706 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.043721995 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.088567236 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.034054616 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065805912 seconds)
  done (took 42.553223642 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.147492756 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.135109904 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.078593209 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.089702036 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.245532331 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.345936371 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.109214401 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.078121931 seconds)
  done (took 2.295771191 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.028348631 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.038481811 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.03596443 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.297393278 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.058886079 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.021543911 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.026234281 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.03669282 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.024857506 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.020884112 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.059785375 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.021198629 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.025036687 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.464743211 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.020470826 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.0264736 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.025094118 seconds)
  done (took 2.337044265 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.320296518 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.667064937 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.328202151 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.51128427 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.105442679 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.568851584 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.030413864 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.035480122 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.641355394 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.356024786 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.099736647 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.181283038 seconds)
  done (took 17.91091081 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.03166419 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.160713608 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.159419141 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.028164217 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.027750059 seconds)
  done (took 1.475742928 seconds)
done (took 78.449854528 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.04110041 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.123375149 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.021149794 seconds)
  done (took 1.236286162 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.164444608 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.158696252 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.160545838 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.161947972 seconds)
  done (took 1.704932307 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.031015222 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.030311996 seconds)
  done (took 1.132035761 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.2012332 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.257535504 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.048931149 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.040340162 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.034396862 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.035856365 seconds)
  done (took 1.179861446 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.027619208 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.025348187 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.025314334 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.025799355 seconds)
  done (took 1.16499881 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.141378977 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.019998034 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.022609928 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.024251356 seconds)
  done (took 1.269807996 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.044538245 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.055768447 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.08022646 seconds)
  done (took 1.245295597 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.040569852 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.03935434 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.033978291 seconds)
  done (took 1.180856644 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.065101167 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.050616164 seconds)
  done (took 1.17858417 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.036786754 seconds)
  done (took 1.101180069 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.051481047 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.05290672 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.225560932 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.192118117 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.229900735 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.211033559 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.026082461 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.024829033 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.026688941 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.02593421 seconds)
  done (took 2.130305185 seconds)
done (took 16.135341138 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.036861374 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.134092813 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.399252242 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.041341318 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.606640964 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.3904072 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.677809298 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.0378015 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.050572371 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.02220124 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.038889239 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.586566213 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.682963873 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.098134629 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.668914821 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.096101176 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.513363306 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.021035679 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021428005 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022016406 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.660927032 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021820734 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021977398 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.020801179 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.513627521 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.288274928 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022867621 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.089224766 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.022254229 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.03004965 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.266753585 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.023313891 seconds)
  done (took 12.182987893 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.026458786 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.070702887 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.030821207 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.037758873 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.02809666 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.023993314 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.025686241 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.022390273 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.062029657 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.022211633 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.039502687 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.021747402 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.026449586 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.023237792 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.042623687 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.022049698 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.021669929 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.021160957 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021965556 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022509937 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.04103128 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021808964 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.022481402 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.020864763 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.022304742 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.037095511 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.023166757 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.021861606 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.022389421 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.029083644 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.02439167 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.023380444 seconds)
  done (took 1.999334537 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.079332876 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.072687221 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.031958581 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.062151066 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.071801837 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.0249815 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.105512932 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.038187943 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.064586884 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.022792021 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.03962113 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.022163214 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.058973381 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.023524571 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.043323165 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.022408968 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.022109636 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.021415023 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.022036314 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022698258 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.041749144 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.022201637 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.022416729 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.02115197 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.022808471 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.038723983 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.023111705 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.022194345 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.022313872 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.028934361 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.024620806 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.023549277 seconds)
  done (took 2.262506911 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.022504318 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.028268665 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.031239092 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.02988072 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.020845196 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.019722089 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.019725679 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.020729353 seconds)
  done (took 1.274805081 seconds)
done (took 18.800338128 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.036176406 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.022732776 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.025786553 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.041667981 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.02895225 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.149978382 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.019561452 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.027514218 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.027918682 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.025475259 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.029927847 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.020775068 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.020098847 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.019389824 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.028218937 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.020630459 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.152944074 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.025039108 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.150602694 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.152124486 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.023319442 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.028138721 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.029049018 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.150954169 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.151045208 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.151791021 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.032093674 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.026613123 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.020833005 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.019995679 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.14938021 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.152167561 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.023987671 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.149677303 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.02116807 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.020820999 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.020888876 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.021558952 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.155284139 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.025967078 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.023280347 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.025530771 seconds)
  done (took 3.509247803 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.155468552 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.160518276 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.153381423 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.033360194 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.029537029 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.032708507 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.159566748 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.029865972 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.028517635 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.15876273 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.024234611 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.028287877 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.030630019 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.021298481 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.028007183 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.024648305 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.03008207 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.022510666 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.028045792 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.02834276 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.159557133 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.021816283 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.02917926 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.029573835 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.024041256 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.030179646 seconds)
  done (took 2.598262325 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.033943514 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.043991805 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.046016712 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.096702154 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.059951258 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.036588358 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.037415231 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.04791582 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.053797971 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.021616602 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.044184811 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.064060091 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.05316655 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.028757754 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.05688524 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.040613696 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.032085009 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.02338518 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.028427916 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.057647914 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.045916753 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.041356123 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.054752702 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.041514993 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.020865959 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.031094617 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.029186197 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.038247847 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.029184461 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.034422054 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.025607745 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.025313427 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.025877421 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.032555949 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.025546206 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.019954097 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.045022746 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.034477095 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.03669062 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.057373929 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.031917902 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.023057086 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.048487304 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.086368208 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.021202901 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.024614741 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.025861651 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.034385755 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.022982547 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.051185018 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.036913899 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.021268671 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.040901615 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.023061281 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.023079353 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.032082212 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.023380489 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.02372335 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.033617432 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.028093103 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.044449374 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.027907937 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.042585829 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.021637533 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.033845834 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.023258643 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.023697017 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.02069614 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.056431297 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.02905421 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.072170167 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.022979431 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.020563574 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.034679636 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.033764166 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.029745116 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.021538131 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.042406301 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.034902609 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.025742462 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.032859576 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.024790838 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.025403254 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.05816595 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.021282748 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.020171464 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.020232358 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.024441124 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.02520547 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.022515745 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.035064052 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.02146326 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.0253767 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.036502564 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.021703634 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.022708465 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.02463613 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.023740233 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.021242346 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.031943986 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.025520287 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.023739634 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.034891663 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.02286107 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.025238118 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.037272628 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.031436034 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.021168966 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.023157294 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.024482062 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.023417154 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.026252919 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.0251803 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.023675115 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.029537703 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.029353133 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.027769378 seconds)
  done (took 5.008319767 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.248689108 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.238224137 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.022663143 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.234537057 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.030600125 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.167744693 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.237280724 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.23826993 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.022418474 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.023386768 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.021501672 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.180032868 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.175557366 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.18763922 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.167414642 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.02445215 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.048906528 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.186771221 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.244126784 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.239605973 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.048115547 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.029624135 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.024689738 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.023857301 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.023215247 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.031178702 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.038732299 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.031274519 seconds)
  done (took 4.296832156 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.031681074 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.067159498 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.025951823 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.047257986 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.039755699 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.022473563 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.024108142 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.022851827 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.039207555 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.028053098 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.022235935 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.02634908 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.025885068 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.024596466 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.022593405 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.028877965 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.028830542 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.021167993 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.025896892 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.029295179 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.033593882 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.046879454 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.026218902 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.022048513 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.025657198 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.021994249 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.027771929 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.03078709 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.021887826 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.021843779 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.019392191 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.026699428 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.037483086 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.023352422 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.021883059 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.022788557 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.02254408 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.022531602 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.022428252 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.020632747 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.020529001 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.027368419 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.021040629 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.027343972 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.035918585 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.024432346 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.023963377 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.02495801 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.024891221 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.019342456 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.025381812 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.025512459 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.024849156 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.030810113 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.026115315 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.02570206 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.02475307 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.037513724 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.031256209 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.021991082 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.021755715 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.02095621 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.024606943 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.029450262 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.038982701 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.024503287 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.020860932 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.022745842 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.024045501 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.03630985 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.021920024 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.028064936 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.019600868 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.022756657 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.024853581 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.025247243 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.023853801 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.020944749 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.022053466 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.021872422 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.022582421 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.022283665 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.021733846 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.024961214 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.020444955 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.020951004 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.023064238 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.024300409 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.028092023 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.021341748 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.025207646 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.023887278 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.021085681 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.024915675 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.027726857 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.025215129 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.043307432 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.030352567 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.023172733 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.020377846 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.037579154 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.024382203 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.021790624 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.024426554 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.026852681 seconds)
  done (took 3.896698017 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.053609364 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.024647491 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.042260514 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.05443342 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.032732992 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.028238306 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.036162701 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.023669678 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.044155081 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.021542704 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.031758292 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.02076928 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.035522017 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.031403646 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.024422541 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.032402619 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.025268582 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.043184846 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.037430813 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.021229183 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.031165387 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.034927298 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.035158748 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.040150558 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.039544947 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.040828721 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.034707526 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.025196155 seconds)
  done (took 2.055407485 seconds)
done (took 22.436998375 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.131613061 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.328606095 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.110666204 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.81138488 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.222754485 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.10301394 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.302538922 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.090638235 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.286723355 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.190864581 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.967345927 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.760083113 seconds)
done (took 60.4810076 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.196945007 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.274677876 seconds)
    (2/2) benchmarking "String"...
    done (took 1.376305203 seconds)
  done (took 3.758013891 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.547130192 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.109517803 seconds)
    (3/3) benchmarking "different"...
    done (took 1.148231414 seconds)
  done (took 4.89160531 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.440764672 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.984506836 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.423872124 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.098179588 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.114169547 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.789069703 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.288627038 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.779819018 seconds)
  done (took 27.574694808 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.109783445 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.370877899 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.43915501 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.52912523 seconds)
  done (took 17.617813418 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.557795063 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.572527832 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.573289001 seconds)
    (4/4) benchmarking "different"...
    done (took 1.830353061 seconds)
  done (took 7.740934956 seconds)
done (took 71.321504662 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.096553009 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.402220181 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.125443556 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.292821163 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.177486577 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.202943007 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.117436267 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.135148002 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.10720268 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.11676468 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.107227823 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.107046286 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.102035307 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.178765072 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.11266055 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.130412336 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.383046385 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.114485611 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.148317172 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 6.921300847 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.469017562 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.112881313 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.115089239 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.179634827 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.522609032 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.120792265 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.5333054 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.11690551 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.707803853 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.101822505 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.11307869 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.105627556 seconds)
  done (took 182.365876138 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.097212206 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.902531259 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.913195695 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.132755125 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.492195439 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.461455312 seconds)
    (7/36) benchmarking "scal!"...
    done (took 1.970736738 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.517036177 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.109976519 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.142839687 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.152273062 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.107100613 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.146418781 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.687691466 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.144001795 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.143825235 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.024923508 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.950727917 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.153788884 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.032323083 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.104891127 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.593896944 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.560176788 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.961097489 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.131714263 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.134638424 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.112181681 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.119447308 seconds)
    (29/36) benchmarking "asum"...
    done (took 1.622054994 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 2.972505449 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.122692896 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.121056717 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.299497521 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.344141508 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.108365278 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.120267984 seconds)
  done (took 152.812276949 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.34344768 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.106484626 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.142057602 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.215493035 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.058062132 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 3.908849713 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.108499079 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.096954858 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.095971609 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.109877837 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.097669384 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.165890454 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.10576551 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.83451446 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.133225546 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.098636174 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.096382631 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.829508818 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.114751603 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.096576686 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.09647724 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.208531014 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.450263475 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.210626801 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.106342681 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.10973888 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.205193365 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.114092653 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.097807616 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.099187021 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.206623801 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.106332325 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.227030843 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.214659371 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.11117805 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.154071369 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.114093792 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.420817995 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.108179398 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.096477605 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.103557503 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.145119549 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.106203239 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.162652406 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.209374155 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.110090736 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.122793461 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.584469593 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.711751908 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.108854384 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.097247199 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.096226614 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.100755438 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.103972749 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.53005827 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.110228508 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.130522152 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.792828898 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.112493824 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.097504519 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.097673611 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.097629127 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.100125228 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.102814583 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.132065854 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.715303734 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.779317704 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.463133753 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.841827251 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.10602862 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.096463929 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.103404322 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.895352397 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.164370348 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.098917764 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.10411793 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.273558687 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.106353923 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.096567058 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.018741274 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.01780386 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.107723703 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.206316852 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.107875401 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.097376635 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.139078987 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.850940382 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.115702264 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.116032115 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.152862901 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.100703384 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.097177366 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.103308692 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.018738488 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.106950795 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.109332219 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.435183421 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.107842633 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.100009559 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.202082671 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.467597858 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.106389048 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.183601093 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.508352452 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.020916774 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.107158262 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.096399863 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.117408674 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.105357281 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.109928924 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.107925539 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.098117356 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.102453553 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.101585873 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.097501238 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.096439639 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.096405018 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.122960924 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.098467287 seconds)
  done (took 327.966562509 seconds)
done (took 665.708475782 seconds)
(4/20) benchmarking "parallel"...
done (took 1.086112914 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.357139999 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.120798918 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.21017011 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.365768465 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.30929136 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.287172347 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.316118884 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.401524284 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.335609853 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.274418586 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.342624091 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.279674067 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.407371361 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.364625586 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.406956657 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.374752388 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.308411175 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.782230619 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.32130235 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.277873686 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.319793194 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.283192058 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.261580881 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.339743205 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.411270105 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.284333046 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.503668599 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.346867947 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.324614366 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.359076367 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.378476142 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.400596365 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.322927535 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.397570425 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.362823814 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.423326974 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.301515871 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.371975114 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.299894285 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.323349435 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.331599032 seconds)
  done (took 63.282652042 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.474670555 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.30061035 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.41162599 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.407113681 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.014162704 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.405760331 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.545926866 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.288645645 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.295443661 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.425916512 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.426148448 seconds)
  done (took 18.111492463 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.370748846 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.298106231 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.424915863 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.429798706 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.521808206 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.429480175 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.481977366 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.289907407 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.299711404 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.425125629 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.43735846 seconds)
  done (took 17.521603091 seconds)
done (took 100.002849604 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.689219388 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.174588144 seconds)
  done (took 3.966007698 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.133359268 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.117830929 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.10955215 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.112936995 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.112064632 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.115734913 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.161150068 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.12387293 seconds)
  done (took 10.073450646 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.116407704 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.110880416 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.109818859 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.110211413 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.109318858 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.115373754 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.109440986 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.109139697 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.109465737 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.115585708 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.108944812 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.110139065 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.110515377 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.109825793 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.118451058 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.109835406 seconds)
  done (took 18.873298382 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.10934097 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.116697781 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.109394282 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.108867672 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.109551759 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.110974004 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.116100177 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.119763838 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.110673604 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.108526218 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.115682075 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.110411237 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.110207184 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.110002505 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.110273165 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.115485976 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.110429137 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.110981165 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.109967951 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.11572264 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.109367662 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.110538312 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.110966471 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.11343996 seconds)
  done (took 27.771422949 seconds)
done (took 61.795850524 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.781007605 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.177550989 seconds)
  done (took 7.04542022 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.118258087 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.110559866 seconds)
  done (took 3.42979555 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.109429662 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.109707787 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.113529088 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.110455126 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.109051815 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.110221392 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.113145723 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.109655428 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.109442678 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.109765099 seconds)
  done (took 12.191980266 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.111684867 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.109090625 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.112715799 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.110845046 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.112312672 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.111678556 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.109502629 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.110337778 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.110277123 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.114459642 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.109685706 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.300045782 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.111636121 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.343204508 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.109992341 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.112521859 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.112247465 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.116674641 seconds)
  done (took 21.516125517 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.111766422 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.110548798 seconds)
  done (took 3.310374678 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.117562594 seconds)
    (2/7) benchmarking "second"...
    done (took 1.113383589 seconds)
    (3/7) benchmarking "month"...
    done (took 1.112353738 seconds)
    (4/7) benchmarking "year"...
    done (took 1.114751968 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.117009083 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.111645998 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.111959215 seconds)
  done (took 8.885666449 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.559439466 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.280366895 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.331599759 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.582396932 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.773292274 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.033393213 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.776642656 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.03639867 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.929479942 seconds)
  done (took 16.390391101 seconds)
done (took 73.863609958 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.803787087 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.10181646 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.752332082 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.243010947 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.109009729 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.430307857 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.099002644 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.63722764 seconds)
done (took 37.290774291 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.26103891 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.101880953 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.143517719 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.144061175 seconds)
  done (took 19.485790551 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.107446297 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.698221446 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.143449351 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.238607885 seconds)
  done (took 19.371907319 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.623175826 seconds)
    (2/2) benchmarking "read"...
    done (took 1.530831925 seconds)
  done (took 4.259765972 seconds)
done (took 50.475101944 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.109558007 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.115199827 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.109271141 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.109183759 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.109646012 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.113098547 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.110198173 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.109761227 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.110352314 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.110112997 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.113600882 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.109403652 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.109457261 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.109603421 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.11455245 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.110800222 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.109840595 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.109354248 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.109129894 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.112438717 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.109767222 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.108940101 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.109202542 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.11350469 seconds)
  done (took 27.744270943 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.183452413 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.174987434 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.18556556 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.190649107 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.207192007 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.188403927 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.182386292 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.158468307 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.190599607 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.157788411 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.146328372 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.204137027 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.150938386 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.205657379 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.149992482 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.210222468 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.186831346 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.151863194 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.148940992 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.207486335 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.185705292 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.151718004 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.202362896 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.143507767 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.20178154 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.145338305 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.15900747 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.175824188 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.15598969 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.199255557 seconds)
  done (took 36.390834114 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.144215737 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.11364657 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.113038674 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.201445514 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.111956363 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.110328326 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.116632589 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.110228323 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.110808296 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.110187841 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.117246012 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.110885358 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.111392866 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.111047744 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.112476453 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.117044276 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.143933019 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.29584243 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.11005547 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.117192632 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.161623662 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.114420259 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.115415495 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.111433252 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.117992266 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.111023445 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.111452529 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.112180931 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.115358447 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.111847543 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.111026397 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.155849404 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.14638502 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.111883332 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.23307671 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.168425401 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.110992648 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.148517629 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.110240981 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.109942596 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.111754706 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.114617394 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.110664084 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.11208808 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.175719751 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.111006785 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.11515818 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.110720294 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.119670457 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.111663481 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.113775882 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.111025761 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.12540064 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.111350576 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.111018051 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.113558718 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.115441729 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.112946015 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.112722976 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.114267409 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.112252071 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.18235455 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.111032446 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.112430512 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.492527888 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.112803586 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.176616988 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.11053551 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.113443358 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.330060709 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.111977256 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.321341288 seconds)
  done (took 82.890884039 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.109696487 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.11011579 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.189518458 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.192323986 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.110388599 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.110859091 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.110638828 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.112169537 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.780041975 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.111800382 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.110281008 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.110990034 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.786022707 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.111515347 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.1104789 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.190181525 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.111028939 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.110823181 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.110468232 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.109824436 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.113365481 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.110387285 seconds)
  done (took 27.116839325 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.142561424 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.129657679 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.152061092 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.125205087 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.12547732 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.125012211 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.156390407 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.124484484 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.149530361 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.148904534 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.155608551 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.144057327 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.128631308 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.152356883 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.147973198 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.195753294 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.142918185 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.191970339 seconds)
  done (took 21.726678935 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.292032525 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.275385381 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.19428041 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.152649079 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.375212725 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.346200465 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.215180407 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.285142217 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.156543998 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.276379276 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.286095868 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.155991599 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.359055259 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.153159072 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.152259176 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.372535353 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.200635169 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.154408376 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.222746103 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.214415506 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.289556101 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.222530824 seconds)
  done (took 28.44174615 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.153051471 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.167047308 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.187313963 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.19324006 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.110341972 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.110213406 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.177416248 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.146625794 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.124979344 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.14746632 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.150157697 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.109974483 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.200329064 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.170089919 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.202828456 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.149303078 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.164929193 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.171493051 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.154797945 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.114068007 seconds)
  done (took 24.19388887 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.110302643 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.111403569 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.113912626 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.110337437 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.111462434 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.110983308 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.11291193 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.113218257 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.109982344 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.38979611 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.110720209 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.113576643 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.112147588 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.111315779 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.110403448 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.11272435 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.111125937 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.112503332 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.110391527 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.111744451 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.393129712 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.110228683 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.111035368 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.112086607 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.114766131 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.11167399 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.111595987 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.110066277 seconds)
  done (took 32.77492586 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.172333999 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.109970979 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.110890958 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.112181198 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.113144747 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.184624116 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.111189094 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.110670194 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.114819897 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.110488385 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.109858633 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.109938168 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.111444392 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.17715531 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.110731865 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.110323663 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.199613231 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.11816905 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.183994417 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.100111314 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.120025093 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.204411823 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.120574984 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.114385648 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.099537925 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.11863202 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.111515091 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.109901069 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.114611285 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.111520531 seconds)
  done (took 52.896693062 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.166477721 seconds)
    (2/2) benchmarking "in"...
    done (took 1.17222563 seconds)
  done (took 3.426720899 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.110867187 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.212085023 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.111118756 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.31326683 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.277546431 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.286603838 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.277745747 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.213901308 seconds)
  done (took 10.890811167 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.111542723 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.46279993 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.132979519 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.114836541 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.111281757 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.598905898 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.073256106 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.995314612 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.873215882 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.059161058 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.128404955 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.612695236 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.073573302 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.436747162 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.227710663 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.957701808 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.326890446 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.61969445 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.145439496 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.235135925 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.822271707 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.214039893 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.113802617 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.116585663 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.11058995 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.030558811 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.982763185 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.56656883 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.236262388 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.237000714 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.864046144 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.196983079 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.113571059 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.390052571 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.233952799 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.112245985 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.277607046 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.220731559 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.113058694 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.111622845 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.816327169 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.783456841 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.390895349 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.338048721 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.205978934 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.112782368 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.110976191 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.111496351 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.371239668 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.74349577 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.073541741 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.09767177 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.249897159 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.118107202 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.778814939 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.125913596 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.111947558 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.028385386 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.636119737 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.369715263 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.484978948 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.206503517 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.128817598 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.245494109 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.11155364 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.336104063 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.918450132 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.891415717 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.858311075 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.228430934 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.643990204 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.136298251 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.114785815 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.11150603 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.051841997 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.425783843 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.116838472 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.111984961 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.111547132 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.117281606 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.381916834 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.233753357 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.93910476 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.250001415 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.301697673 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.539985409 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.240428039 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.113377205 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.796740017 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.010018647 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.207457966 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.72308924 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.32736735 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.249841459 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.073166851 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.385232066 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.158991966 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.111340233 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.955452371 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.764850006 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.126917274 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.11208917 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.495791455 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.132171398 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.124645363 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.112292277 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.800382149 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.23864193 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.222473536 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.16511986 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.111550487 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.112037353 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.720926454 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.209773105 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.122868114 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.602758335 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.075992641 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.663856563 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.352260714 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.376693878 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.453991633 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.074047869 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.389506444 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.917119068 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.12027368 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.609377323 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.92940311 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.684138793 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.34090715 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.234813625 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.967675411 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.182497285 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.113427246 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.188620984 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.193508448 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.113288842 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.111511376 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.113942811 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.119757286 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.111739664 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.24442536 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.505127474 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 4.93789117 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.126345394 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.360407845 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.231313733 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.925775728 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.341657895 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.811064145 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.250260206 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.119140598 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.84222124 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.345904754 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.814967343 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.238774609 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.116847954 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.111432135 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.960981395 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.110497525 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.212233518 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.117436586 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.733637457 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.211487483 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.123293155 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.11339153 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.609951937 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.251502985 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.11238767 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.203125287 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.881208967 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 4.977058392 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.126914494 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.42895125 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.229609545 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.111738949 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.114035098 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.112590796 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.901073578 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.746115168 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 6.187330023 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.729072313 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.798946263 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.209064851 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.277093953 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.208158996 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.373036599 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.343297997 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.250339614 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.113997499 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.118485704 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.113842497 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.602272159 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.930773731 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 5.142389155 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.978961266 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.124718649 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.073849814 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.199307261 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.918308345 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.131666445 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.800186086 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.061839498 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.217487096 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.113833789 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.113267672 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.273837448 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.294865359 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.249499087 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.633941446 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.126359051 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.115471957 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.763980742 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.239702723 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.792179161 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.218745944 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.940147581 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.167819525 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.239904824 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.243242452 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.73181928 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.246532525 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.112000295 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.77387164 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.259624399 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.113231247 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.135679321 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.768793687 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.913064591 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.85292791 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.758591333 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.057052394 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.703068494 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.360599819 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.251910618 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 3.941721421 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.214847873 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.360914608 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.148094514 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.556441421 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.134758125 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.851328881 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.12970834 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 4.803670005 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.12698679 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.087108975 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.235625846 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.549889375 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.229738012 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.112598278 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.302798106 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.211184657 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.771880387 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.238797153 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.249055205 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 4.404663566 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.020634999 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.221473308 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.357427014 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.150872325 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.027601803 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.103961091 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.456931969 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.017154886 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.118277996 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.19750683 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.869094515 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.256847262 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.376814308 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.248366901 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.115685856 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.112700503 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.269493643 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.205565743 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.113285127 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.422237723 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.090218024 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.155514387 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.198951449 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.122653776 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.113396689 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.349659902 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.227324452 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.352010679 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.609584659 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.71401016 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.894295515 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.244268632 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.70898784 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.244559985 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.829011813 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.210461919 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.123276444 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.759255899 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.242105171 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.414040337 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.263878023 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.234789228 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.768959733 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.222760989 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.410610026 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.192999853 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.236769428 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.85870072 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.688938032 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.363635939 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.487365215 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.16275156 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.646224715 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.142961893 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.66471249 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 3.092633995 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.852247388 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.171919595 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.17554263 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.114001368 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.114232139 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.637262914 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.067212103 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.125428568 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.893590494 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.778651672 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.044228109 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.858473057 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.209830831 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.123394994 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.117161136 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.113544474 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.027332233 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.147062062 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 4.409978038 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.249126631 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.116821467 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.113631717 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.083342729 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.392395511 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.884941511 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.973985265 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.096342059 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.250147295 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.114216417 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.120908478 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.113681079 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.113485351 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.115760866 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.11747031 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.612397421 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.131255758 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.733286062 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.210684164 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.12532799 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.317373898 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.18248162 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.117134907 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 4.262410573 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.200551963 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.236946022 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.185100617 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.118622038 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.541278291 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.251154692 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.082961203 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.38178788 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.396745875 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.360611727 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.58417129 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.16899459 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.565367933 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.430363848 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.877809592 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.123062642 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.030428699 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.202676064 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.862464868 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.11456661 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.56076242 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.721633975 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.08892196 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.376445223 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.015080305 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.49311592 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.215925476 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.186272692 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.115148796 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.114543734 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.155147434 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.374846055 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.174024223 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 4.34329147 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.329136242 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.100935389 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.403351561 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.212228282 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.312574204 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.155096333 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.129093379 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.114225311 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.114997278 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.53122031 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.93803388 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.206795618 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.11543503 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.027674594 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.949407866 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.026389312 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.79196652 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 5.008614302 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.250657877 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.115014006 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.328399181 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.178057944 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 4.871200568 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.141306931 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.892062509 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.448546746 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.167770694 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 4.255346474 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.487598886 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.795168976 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.506684281 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.229911618 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.115161873 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.451572999 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.105562117 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.255565513 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.031606454 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.442842859 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.724179755 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.540509569 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.335950455 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.2302788 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.019074142 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.712909751 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 3.091782203 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.129820279 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.95765519 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.254152571 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.428445661 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.080382503 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.394737046 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.253161476 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.758739607 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.820727952 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.25197678 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.71526046 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.252390073 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.117202725 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.851335782 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.040676673 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.226777769 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.238136735 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.114714551 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.129888688 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.769376605 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.729409506 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.326037352 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.193315681 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.12157524 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.867882827 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.863401718 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.21051805 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.125036781 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.116399496 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 4.498466727 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.169652777 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.113691231 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.553661669 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.736586877 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.251701958 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.610609073 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.209744055 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.252879565 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.372060862 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.452880336 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.339143312 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.180310502 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.116950106 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.114773881 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.114085219 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.660614509 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.130330011 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.115485743 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.711394992 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.253350694 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.855106052 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.053999779 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.346814934 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.187885522 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.557054379 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.252281221 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.608819233 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 3.972068075 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.20399144 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.386759967 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.155582329 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.204308459 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.879510127 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.220304891 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.11816957 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.035587403 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.400546023 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.43671393 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.520886091 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.423241986 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.206939695 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.772213655 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.227718967 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.821361073 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.137087923 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.115316411 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.595043392 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.208654514 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.579011881 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.265953351 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.552117549 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.229766848 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.471056865 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.345580204 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.207419239 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.116855087 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.11865168 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.098140217 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.144816959 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.652025261 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 5.005544258 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.562548682 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.244642619 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.940239711 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.618254922 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 4.770443733 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.449677701 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.394416944 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.373682255 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.161350226 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.089547189 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.43686532 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.199728623 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.289034348 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.20956825 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.865039448 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.191224271 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.116035201 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.702812623 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.129608147 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.117361248 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.116675106 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.026276198 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.887680425 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.220072869 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.315594329 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.213841491 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.116172277 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.723414675 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.406107954 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.162428727 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.116743068 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.116483343 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.977817589 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.227332631 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.115744306 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.477412701 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.266319439 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.436686977 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.938016032 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.569482262 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.207459252 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.115378012 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.115291966 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.812144174 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 4.622713594 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.153609217 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.488580336 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.134137864 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.620080335 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 3.07604601 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.543426855 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.665319549 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.085960345 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.241794585 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.116352941 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.134348092 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 4.95338338 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.050964612 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.869985106 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.536870637 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.212397927 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.859969266 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.108756495 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.180931453 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.214727633 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.189669846 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.114901401 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.118545438 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.116339908 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.600445563 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 3.084885757 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.124561001 seconds)
  done (took 1432.683261302 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.414073881 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.115800672 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.115014063 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.11596231 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.121896681 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.11571381 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.115170868 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.11520543 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.119485128 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.116460149 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.115042826 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.114979946 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.114834522 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.413496701 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.11609622 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.114733642 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.11431885 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.118962556 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.116093861 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.114865009 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.115544948 seconds)
  done (took 25.127994903 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.116738884 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.116063378 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.115240071 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.116422814 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.117900126 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.116169871 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.115963412 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.115021519 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.117719735 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.118208722 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.115972883 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.115547393 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.116188129 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.119211982 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.117142888 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.11600649 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.11626167 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.120319347 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.116044638 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.116769481 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.115737968 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.115467874 seconds)
  done (took 25.661661586 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.115753239 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.114630874 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.808357314 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.239424392 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.115842015 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.115752708 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.118335666 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.328959924 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.148992516 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.034903836 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.547290177 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.138376067 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.125297379 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.309966906 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.210881744 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.116024034 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.244699527 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.117028503 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.115280276 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.1176725 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.116863558 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.353977526 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.255057783 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.123211862 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.949560621 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.254783631 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.118256068 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.117658492 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.116295198 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.089836952 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.198493169 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.125538086 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.964105687 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.838721192 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.452155262 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.037890414 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.21198234 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.125462379 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.120697744 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.117516211 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.325150943 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.875428143 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.128532272 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.116087293 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.391013947 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.231445009 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.11596185 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.499132641 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.136230183 seconds)
  done (took 88.789688696 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.124752748 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.254124169 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.172129058 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.116096646 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.248365646 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.120059024 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.170588672 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.116009393 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.115031906 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.122392947 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.260409294 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.275111898 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.115672868 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.120221238 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.180867045 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.115975276 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.116365369 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.118516214 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.116021273 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.11469425 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.115588409 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.167989146 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.245796136 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.273486184 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.115594368 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.114768804 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.121840363 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.115547897 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.267585925 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.115795717 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.119200444 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.115931527 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.252040136 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.224413615 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.118354307 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.116320145 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.250667148 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.115273597 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.116232693 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.122153093 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.116556161 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.115365425 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.1755923 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.258197451 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.115795907 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.217229117 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.115282831 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.117373568 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.263615055 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.116640167 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.115619103 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.282914186 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.119289829 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.115595894 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.115774013 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.24383564 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.119818097 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.117338921 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.116882039 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.260226024 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.1188407 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.115647021 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.272114518 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.115361848 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.11586111 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.289240648 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.218041205 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.116552706 seconds)
  done (took 79.976530478 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.117845608 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.252882301 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.290331131 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.292354384 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.255711567 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.249281809 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.257652881 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.253841381 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.260337744 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.256189117 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.252110741 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.205924822 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.225962573 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.209384629 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.255243503 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.241151333 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.251992432 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.242295912 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.255830819 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.255644021 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.25126219 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.291176182 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.252379091 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.292127479 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.496789011 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.222997091 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.252061921 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.25639722 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.300370545 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.252604311 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.4914324 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.256856419 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.260052709 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.29451174 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.491692579 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.253941236 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.118594456 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.252979575 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.25601356 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.25392128 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.224803771 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.294902021 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.250577203 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.225116903 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.247515495 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.24991245 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.292818784 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.490842578 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.210585912 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.256111431 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.253046795 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.296597137 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.250528646 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.250643707 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.293494443 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.214490173 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.291496627 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.293390461 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.256601535 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.29556942 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.293823313 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.215368671 seconds)
  done (took 79.723975653 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.119419494 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.116563848 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.200198976 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.116208374 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.115641661 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.20533296 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.11644464 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.116287496 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.116149353 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.120846216 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.116248235 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.200052701 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.478260556 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.121991498 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.202065993 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.480601911 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.207465145 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.201698525 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.115552843 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.200996755 seconds)
  done (took 26.763026537 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.115670214 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.116154754 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.116602588 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.275919953 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.115880193 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.252130822 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.116091778 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.122086635 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.116406006 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.116785454 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.116013305 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.116526968 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.121913808 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.272013235 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.116585788 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.252301171 seconds)
  done (took 19.557955877 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.117001553 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.117560468 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.115890764 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.116104915 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.122673806 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.119379503 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.116820392 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.117456594 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.118889018 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.573032032 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.116258482 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.115917191 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.121677836 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.116672007 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.118236661 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.116363087 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.116863173 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.123342458 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.117408007 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.116492056 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.692364485 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.123036588 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.115810794 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.115636185 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.11655736 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.692847476 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.117091394 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.117640667 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.116399777 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.119282558 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.11692413 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.603586476 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.117131206 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.119625689 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.11758267 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.117089095 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.118328911 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.120559395 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.118160049 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.11642707 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.116966912 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.11605987 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.11972199 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.116673357 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.115810953 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.115888796 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.120579531 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.585805385 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.119713818 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.116288943 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.119060657 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.117177349 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.116829347 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.588471191 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.123174709 seconds)
  done (took 65.613095985 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.161205289 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.175517737 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.116724594 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.122746517 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.17378791 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.153368881 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.158543924 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.134916767 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.154661019 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.117842248 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.179198101 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.133309824 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.163451262 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.179380258 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.176599137 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.160870417 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.120439531 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.184679961 seconds)
  done (took 21.863628621 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.115696232 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.121784636 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.116781588 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.116184098 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.115939732 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.116767974 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.122491188 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.116547696 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.117226746 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.116311713 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.118108245 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.11725174 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.116568885 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.116387653 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.116055255 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.119545995 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.116604619 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.117057157 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.116373627 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.120527324 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.117153007 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.116141379 seconds)
  done (took 25.677722883 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.149041566 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.16648213 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 1.117855194 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 1.117423298 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 1.11837331 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.146008155 seconds)
  done (took 7.908713776 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.180893929 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.188110249 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.156902884 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.167835185 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.194920378 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.203243803 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.200111689 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.203367034 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.188021431 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.420329532 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.206704045 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.20464967 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.19150707 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.247673141 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.188940553 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.195565639 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.20743181 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.200212775 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.172932078 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.201493134 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.212894665 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.19221482 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.209004654 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.200513744 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.206303213 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.247805897 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.188861135 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.435697933 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.21398048 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.191394151 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.194725217 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.202254256 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.200763481 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.431195353 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.170080266 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.187223414 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.203197118 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.197632741 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.195487332 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.245277851 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.160541925 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.188077817 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.187143443 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.203487921 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.19880757 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.212495619 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.20383202 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.206685173 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.208860221 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.430994328 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.191925293 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.241386165 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.187860616 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.201433504 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.190289423 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.423563976 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.442229285 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.240694592 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.185602917 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.422124009 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.246921339 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.196426088 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.241386578 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.434537851 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.189433782 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.243641783 seconds)
  done (took 82.246269181 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.242295344 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.15983596 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.208100739 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.435982859 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.242071621 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.202833147 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.204206938 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.208284263 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.206024766 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.187146496 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.203034661 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.199776766 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.2423397 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.250675141 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.211932894 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.200037251 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.203857565 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.248352194 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.186345536 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.424918333 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.202660582 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.248810457 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.24402866 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.242694717 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.419235766 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.189351617 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.206322378 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.200336385 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.200886949 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.206439854 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.208883878 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.20119838 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.244020154 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.157401789 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.241816863 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.209168986 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.200997615 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.2161763 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.201187831 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.187093852 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.249362992 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.202176271 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.200710861 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.200145994 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.431526232 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.209763381 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.206849524 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.180421093 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.203909072 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.182811408 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.433353178 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.420946117 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.435574446 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.246934816 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.210980135 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.200893981 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.203563083 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.212229925 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.2117933 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.188728061 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.241776094 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.20219606 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.42778578 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.201431858 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.206993398 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.24668665 seconds)
  done (took 82.75414441 seconds)
done (took 2413.932700605 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.146436263 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.241157866 seconds)
  done (took 13.482803233 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.117139488 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.117802785 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.275408223 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.123940719 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.14341264 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.222979746 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.155112819 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.134055533 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.116854535 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.200600291 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.118225693 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.249795083 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.22324203 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.118988551 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.156544186 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.127286118 seconds)
  done (took 39.71373492 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.118523961 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.668293413 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 3.015858718 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.858180272 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.144452181 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 1.967799078 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.465441759 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 5.709665199 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.41538864 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.568466242 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.376865938 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 4.93239633 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 5.910540121 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.170160798 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.631810737 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.700528859 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.788301417 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.848074765 seconds)
  done (took 60.388822402 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.110373357 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.264975156 seconds)
  done (took 8.495809103 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.142337433 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.13870595 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.138579493 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.136016549 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.131935066 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.125301384 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.16732206 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.148357807 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.150381437 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.134123157 seconds)
  done (took 62.525918472 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 6.190406806 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.687504964 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.451264941 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.686622753 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.804577712 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.595947784 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.266264838 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.461257849 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.21278475 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.112717873 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 5.253540103 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.49353595 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 3.02637153 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.35267544 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.766735979 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.552568907 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.756085923 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.483261234 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.442886495 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.597233116 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.306082396 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 5.161012581 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.735602003 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 1.939346847 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.117160871 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.860368453 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.232389186 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.252529219 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.191339402 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.241027946 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 5.33449812 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.133337122 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 5.357210362 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.135349998 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.236692139 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 3.55347505 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.819642937 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.320456107 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.490004845 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.447299916 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.523406395 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.740970442 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.180610208 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.724466975 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.282529334 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.539784151 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.102491542 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.346131892 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.209240934 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.239889413 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.724968097 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.294693242 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.259209789 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.232546757 seconds)
  done (took 155.566665577 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.106122554 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.51991948 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.263506955 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.107944762 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.592218208 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.326821486 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 4.847085879 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.583027405 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.12011225 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.331864494 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.285786246 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.247866692 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.107720977 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.118726617 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.116104416 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.114195808 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.308026375 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.608006863 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.122345882 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.114662321 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.33223243 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.362338814 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.242892883 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.109525736 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.284270667 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.36236768 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.518488074 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.250464256 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.491379392 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.110024264 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.557355392 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.122421265 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.117251529 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.020829062 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.504856531 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.458791617 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.579456217 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.116558914 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.894286515 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.116138861 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.766070401 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.319408418 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.444986832 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.255593326 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.371694985 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.34695306 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.701095959 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.106615126 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.903942748 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.287167412 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.33734892 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.331260127 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.389762078 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.113134576 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.678046014 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.116070911 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.116543453 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.37605738 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.271055957 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.237841455 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.112778015 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.116523519 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.113883403 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.365265497 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.112233965 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.238124181 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.108079736 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.115999349 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.245769361 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.236960445 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.273402367 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.356521192 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.366469944 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.418614446 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.109515374 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.354648222 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.530190143 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.355099825 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.108935633 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.11476704 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.566010903 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.556475465 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.272055244 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.35201744 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.424225076 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.412659977 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.686225526 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.109699794 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.347257832 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.281600563 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.494537628 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.385933118 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.477972311 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.003592304 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.113199532 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.11446579 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.366383171 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.246944934 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.10944642 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.636283789 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.385355529 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.194749808 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.300894325 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.599859548 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.219225107 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.11229077 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.671618574 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.109570148 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.339194562 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.408183571 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.116373345 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.114515043 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.273925932 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.057953403 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.109788318 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.522862714 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.531412939 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.121821482 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.281335976 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.108756321 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.372394048 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.960999508 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.353196514 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.914851038 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.394765783 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.309924225 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.394870834 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.108895915 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.455562837 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.389141063 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.517541908 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.441400734 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.109478049 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.115930993 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.473400443 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.108975492 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.114252341 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.300776782 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.12027579 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.298054875 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.10979234 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.534488004 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.278789601 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.492364071 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.108644826 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.361256323 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.36378927 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.479316407 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.109047739 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.25587394 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.107516255 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.200045292 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.277926389 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.111407815 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.116964938 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 4.966050002 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.116297667 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.273941214 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.350084871 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.817785449 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.481677547 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.471562141 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.107396879 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.561576899 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.311890891 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.566730901 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.62513294 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.289162816 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 5.840464101 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 5.341610913 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.116693114 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.362397283 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.41156208 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.110243994 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.12138591 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.849901565 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.23988922 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.112803171 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.285014441 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.758106589 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.544866902 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.329475416 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.109329596 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.483451451 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.108224211 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.306739569 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.617004796 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.447287993 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.11679087 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.116548306 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.116198908 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.121063226 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.332288741 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.371778845 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.770441993 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.266937322 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.413763533 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.331055429 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.435467471 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.584804312 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.120560773 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.441285659 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.113251748 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.509401256 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.115245569 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.269713268 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.366848287 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.108816861 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.337607624 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.475101312 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.299253702 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.507972427 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.112001489 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.116534825 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 5.724410415 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.294115987 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.532950347 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.107564894 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.283999036 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.483141143 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.24307868 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.325651352 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.344242022 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.128519542 seconds)
  done (took 731.295301137 seconds)
done (took 1072.563585303 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.106847573 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.116987561 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.116854967 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.116904194 seconds)
  done (took 25.556263461 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.104184491 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.212604644 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.309602966 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.156562194 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.478808868 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.196838387 seconds)
  done (took 11.594730792 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 4.635886957 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.115755149 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.116586173 seconds)
  done (took 17.989884348 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.385787927 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.576507254 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.293706737 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.224692249 seconds)
  done (took 6.590826505 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.119573635 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.118816349 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.121827739 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.119820822 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.120360348 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.119539857 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.120064226 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.124561136 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.119291915 seconds)
  done (took 11.185026464 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.803754103 seconds)
done (took 78.822873382 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.469698943 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.418464426 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.279914406 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.284534012 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.265287657 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.434965395 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.234978792 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.136974139 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.467543699 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.54439884 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.576190301 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.152869401 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.54354842 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.589844427 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.364867363 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.144388975 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.129003663 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.185137596 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.65156876 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.326952273 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 6.126623892 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.253927755 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 5.757238309 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.146499622 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.016685064 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.238057855 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.366311278 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 6.997314021 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 2.206351645 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.139726134 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.194541392 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.687704587 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.294767574 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.422240546 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.213143616 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 1.941411682 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.631027313 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.206930735 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.276367908 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.552593651 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.420100435 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.244544824 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.106642651 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.284270176 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.545043682 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.136324599 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.021776164 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.280100758 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.613115586 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.309936338 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.513177304 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.122091147 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.738470395 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.195547253 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.207892806 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.107468209 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.070791068 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.704521299 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.274591305 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.423474446 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.136208012 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.173394009 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.05346611 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.148413483 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.512953999 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 1.4269632 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.531327719 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.208272507 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.74119488 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.141572857 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.132722489 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.144488647 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.809367086 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.263732638 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.111336662 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.264976015 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.379724782 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.254526198 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.118069869 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.582185767 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 1.339424609 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.108936024 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.255721462 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.47458905 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.282791785 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.461839014 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.55819273 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.53644323 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.528780289 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 7.023752706 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.893245992 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 7.067656629 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 6.212624466 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.120084129 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 6.122593793 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 7.88112305 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 3.155431878 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.58993009 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.255700166 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.728284453 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.150775842 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.134361261 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.506022162 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.508001287 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.902339956 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.154629587 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.254784711 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.110408189 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.411944791 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 6.948825951 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 6.217474031 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.722887623 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.120145797 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.179475146 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.67623391 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.116460096 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.436833552 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.557451945 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.186660943 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.119393464 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.409572086 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.127537211 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.239144963 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.760900977 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.492914386 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.318169481 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.11098919 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 3.403751369 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.120026007 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.334243428 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.125222555 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.698104919 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.658541691 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.160254287 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.369828807 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.241985491 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.10614882 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.399133914 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.16902594 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.254691589 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.451398495 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.43639161 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.287263717 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.108054472 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.469271483 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 6.12131033 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.351976639 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.438069213 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.281528874 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.444820111 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.203812555 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.135157018 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.05303944 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.564320283 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.712131695 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.747201574 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.340426761 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.249279788 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.658989018 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.46723785 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.908486143 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.227523141 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.174408777 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.119902156 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.136021323 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.181308199 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.114204377 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.117370957 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.413163081 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.338978288 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.655753592 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 1.934228777 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 5.846436994 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.383571642 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.270524539 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 2.065620123 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.712741497 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.120937226 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.502447437 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.609518289 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.243519262 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.148379869 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.109040538 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.165209695 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.825928514 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.160676458 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.490584708 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.615561661 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.405087392 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.477258707 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.30809311 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.160273032 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.495953984 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.377956579 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.369610607 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.381551505 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.480351344 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.240333464 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.464236466 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.228858974 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.371761622 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.120598896 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 3.142373497 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.337404744 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.599801632 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.493323024 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.362287658 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.286022242 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.456311134 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.121091547 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.78694577 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 6.313168799 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.599216524 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.248282819 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.742970122 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.297959915 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.562666539 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.123358438 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.37537283 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.507788044 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.3424186 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.319270811 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.742788933 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.213864908 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.503181692 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.347348505 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.302001084 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.394486578 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.220867909 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.344204646 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.364970132 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.320854424 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.399064285 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 1.997734108 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.584024818 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.955115776 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 1.301197759 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.173278074 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.572166585 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.20170759 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.193160672 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.517554061 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.380892728 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.488329475 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.311924605 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.335011433 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.170048327 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.199134975 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.602751679 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 2.024926872 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.755192707 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.227988941 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.171326417 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.135468122 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.583902803 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.570300787 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.201498682 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.273482792 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.705694493 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.152244022 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.30357613 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.125011173 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.122458503 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.895021245 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.249646759 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.362288905 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.666084518 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.124390677 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 3.247065945 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.145342942 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.534606308 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.599861584 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.174427123 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.241778123 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.68530879 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.217789095 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.499023851 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.152529403 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.273978457 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.501880367 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.239177227 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.232244042 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.112206923 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.15548063 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.594358252 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.345399913 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.644373638 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.153939303 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.531702263 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 7.289805721 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 1.337671516 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.136154292 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.202272917 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.568067467 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.266484561 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.472902204 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.124079239 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.275563784 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.375115588 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.141803052 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.119954886 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.256577951 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 7.899776812 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.821632236 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 1.417910971 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.274094416 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.042110638 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.3557569 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.117997484 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.363542142 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.280781103 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.217923079 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.706019019 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.686148205 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.121648213 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.34777999 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.112428178 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.506448956 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.149104922 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.138946941 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.273277621 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.210447558 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.111110072 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 3.279395267 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.290348932 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.648524882 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.197360751 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 1.959055099 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 7.316566468 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 1.292924284 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.23596863 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.455950906 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 5.896578372 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.136425792 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.263638959 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.794329095 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.317206319 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.150243335 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.396407863 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.118373802 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.72431172 seconds)
  done (took 875.226958247 seconds)
done (took 876.482475959 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.301722904 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.482046934 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.360658098 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 1.996229986 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.918844393 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.75608184 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.370207409 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.341766701 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.184842813 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.366339447 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.058049157 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.909758472 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.20730479 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.22235586 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.187298764 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.203857133 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.296690621 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.35059588 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.223715772 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 1.919673843 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.474806691 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 1.915200853 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.528669427 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.404133 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.480973225 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.211044545 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.316441501 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.462959187 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.463421081 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.088630568 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.29022794 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.351109795 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.943768135 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.368742372 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.191003994 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.19160333 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.01724732 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.206552418 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.358161985 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.192300134 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.48166122 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.235736094 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.82241511 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.049377993 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.888970682 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.529027575 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 1.993172229 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.211405557 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.204625041 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.32729484 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.364956444 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.356845708 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.463035953 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.103730532 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.000208911 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.042279464 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.467267856 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.065094612 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.847794566 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.32591551 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.483157893 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.206340425 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.328362192 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.339322776 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.226876375 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.404865101 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.525897216 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.356460565 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.347942781 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.376227083 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.35258953 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.332273682 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.223015102 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.310831034 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.226165889 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.371078475 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 1.721860719 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.362249011 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 1.901150669 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.209310386 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.065366264 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 1.974326214 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.060913419 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.185726267 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.302036654 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.889484911 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 1.934407672 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.073455003 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.227766167 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.349022495 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.055386339 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.364602126 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.566162234 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.317527404 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.302498238 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.3601809 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 1.937048564 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.362212724 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.200966136 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.349137534 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.898978716 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.310728606 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.109281484 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.196679389 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.210094989 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.35720284 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.319023146 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.529931011 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.332915518 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.269774273 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.484856213 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.226455213 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.34101438 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.222765963 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.18261474 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.88738637 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.394473054 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.065915323 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.357243429 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.784950781 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.364881902 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.192119552 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.488470053 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.405238256 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.299236218 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.209831007 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.21069454 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.05831335 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.217845552 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.206582419 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.30109675 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.559020105 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.325675134 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 1.998703874 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.335860507 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.807704595 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.346301023 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.333397229 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.188880392 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 1.949264141 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.203545812 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.189999111 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.406129362 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.48355474 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.356061392 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.403967709 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.230884285 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.368304869 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.359178363 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.225093193 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.341855843 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.242302565 seconds)
done (took 244.590749661 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.467110105 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 5.161828885 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.383755601 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.337288232 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.532551288 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.404978153 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.188368946 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.55532966 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.176501462 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.536157354 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.32020876 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 3.06664699 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 5.324301174 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.340661154 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.527482411 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.35826446 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.170007659 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.371721562 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.572607298 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.619066839 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.88849396 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.327743298 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.255711291 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.509665804 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.11285267 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.858948993 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.570353995 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.236835217 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.38376279 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.909972038 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.99789492 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.382865622 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.569951932 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 4.773569273 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 3.591694639 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.808598041 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.446901076 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.958689022 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.371430917 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.451474703 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.330250077 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 5.863569761 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.920887407 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.871367597 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.223400576 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.386981077 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.187011227 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 4.964676193 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.115788215 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.828928746 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.389571065 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.910071845 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 3.067045171 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.382715597 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.33732911 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 4.818270744 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.51570068 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.501233514 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.61886908 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.430584552 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.370562389 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.540828511 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.508784521 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.272699728 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 3.012703305 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.471042935 seconds)
  done (took 147.769101 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.590126944 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.446219467 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.540291191 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.537877507 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.69974817 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.55061556 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.647125184 seconds)
  done (took 14.160746515 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.191644426 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.205579997 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.463720069 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.457102994 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.21950119 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.345759613 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.30676971 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.931283483 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.398258082 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.271183098 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.476764946 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.365694282 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.765657525 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.871046259 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.261175402 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.507056576 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.145962084 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.235137468 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.225806876 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.64312894 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.883263922 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.855353854 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.328209291 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.148490788 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.183036555 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.273247856 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.165473998 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.136921509 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.168603215 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.150370841 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.176346406 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.280387331 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.166710202 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.885765316 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.153284484 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.489534431 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.172717023 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.167186272 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.299214633 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.120570528 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.15485051 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.170375685 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.305882368 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.18117246 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.147705314 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.354497168 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.152568998 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.177824368 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.153311117 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.166643022 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.355032231 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.168515062 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.15206389 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.770626217 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.38164011 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.858331085 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.236301473 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.167264462 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.167548028 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.227641149 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.164387216 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.649213291 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.413144592 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.146727793 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.408994595 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.550822401 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.162896189 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.146693864 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.152988761 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.390436141 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.160322839 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.410732631 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.187514255 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.215377939 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.171709617 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.302452543 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.355959254 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 1.9651044 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.930353285 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.782851145 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 1.490904068 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.150389833 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.482729284 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.103190009 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.816879924 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.157508001 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.169594373 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.817246781 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.079419881 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.169483222 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.478054609 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.148477114 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.22456576 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.221566204 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.150923147 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.225847074 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.328765854 seconds)
  done (took 153.101900546 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.350180244 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.786544901 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.398173668 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.196986983 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.288904961 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.445142145 seconds)
  done (took 15.570210499 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.49760971 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.985345731 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.184665178 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.184756095 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.221856748 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.122565147 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.124753358 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.38754277 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.311983346 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.173967394 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.1208584 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.122234158 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.123766131 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.298000141 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.122315513 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.170609351 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.123582358 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.192572917 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.176136091 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.262623477 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.477211719 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.227236113 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.261153073 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.064255196 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.18241754 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.16798875 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.881379534 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.179815924 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.176874266 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.481028972 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.359820899 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.121354478 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.009678709 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.526835708 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.899062313 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.069605632 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.316099493 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.128846973 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.174122348 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.121471359 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.120549386 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.261254547 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.193218317 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.120743645 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.536629453 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.998157213 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.18576478 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.41778764 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.122314385 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.122493429 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.121774961 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.187785874 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.122304698 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.122451853 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.754891702 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.625198116 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.081173625 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.123613398 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.222065147 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.072385569 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.246592924 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.123987011 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.52529379 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.073441093 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.814922117 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.123274953 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.080801009 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.3019025 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.264754673 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.183342236 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.125279329 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.188690525 seconds)
  done (took 117.460127738 seconds)
done (took 449.162304609 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.13852058 seconds)
  done (took 7.236372027 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.115532324 seconds)
  done (took 7.329367061 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.109552708 seconds)
  done (took 7.217782786 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.116697102 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.164994196 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.128153704 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.146879898 seconds)
  done (took 25.692853394 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.414581398 seconds)
  done (took 7.522460626 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.114939723 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.132697717 seconds)
  done (took 13.451954679 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.108809658 seconds)
  done (took 7.231241533 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.553382595 seconds)
  done (took 7.663434297 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.111263841 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.129124106 seconds)
  done (took 13.387159499 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.110289428 seconds)
  done (took 7.219313437 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.646000256 seconds)
  done (took 8.836764315 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.122171935 seconds)
  done (took 7.266864746 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.15311568 seconds)
  done (took 7.261243298 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.451213813 seconds)
  done (took 7.557575321 seconds)
done (took 135.973312912 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.109808282 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.120828408 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.120219103 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.118321194 seconds)
  done (took 25.571020397 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.446205386 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.4462299 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.424227039 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.60199313 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.392784397 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.390924338 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.45123883 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.446924492 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.390465851 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.491184608 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.451506177 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.490515113 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.599135461 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.430954368 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.42522458 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.575357128 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.60358839 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.447484591 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.390142858 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.425230778 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.601866291 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.596391341 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.879668311 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.863739248 seconds)
  done (took 37.376000531 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.329539433 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.490738944 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.289946967 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.438761423 seconds)
  done (took 6.649179463 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.158816074 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.498142326 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.479849112 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.544970731 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.480307616 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.292646179 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.479408272 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.334708459 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.302759419 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.302578798 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.74656276 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.278629988 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.286262765 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.538629799 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.297550841 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.121683635 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.121402902 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.301103361 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.499094457 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.322526195 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.386142505 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.479634129 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.483206645 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.479743211 seconds)
  done (took 34.315596281 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.280426382 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.076929744 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.549712721 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.045191317 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.828450519 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 1.921848205 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.446209604 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.632029462 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.388576425 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.365327227 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.144526743 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 1.921007871 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.2682699 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.440990714 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.3028823 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.456673968 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.414640882 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.368818015 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.638943129 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.502802708 seconds)
  done (took 41.093959838 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.201472885 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.463956553 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.457458445 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.403132822 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.2144221 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 6.203569397 seconds)
  done (took 27.138912728 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.488558735 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.286699401 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.554910112 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.409252483 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.307912926 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.27390935 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.704501376 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.368267013 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.905503238 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.849350011 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.64618222 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.68237948 seconds)
  done (took 22.621991004 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.144308554 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.177738489 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.148970732 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.312610911 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.014175615 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.113163788 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.526788644 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.14741188 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.263785803 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.351390519 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.107462289 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.326418619 seconds)
  done (took 40.782231039 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.350619639 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.342507889 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.500121023 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.203915101 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.673407383 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.236168485 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.519255211 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.116990531 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.976882514 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.02837435 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.686032883 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.205975545 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.690160035 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.128006395 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.889357027 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.458154366 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.75915806 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.644008717 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.602098866 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.227948544 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.116961033 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.304570676 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.148073548 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.704376267 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.470361787 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.151734175 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.348074094 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.395590617 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.145933453 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.398393484 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.147877751 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.640955085 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.335187276 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.460414241 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.684111228 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.238007473 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.247571629 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.149039619 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.738718573 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.447689395 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.293914441 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.311378914 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 5.400358496 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.158648964 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.408455871 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.936118919 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.151515861 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.779642743 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.134134934 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.273969025 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.03610433 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.383911203 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.602647343 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.121292865 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.296856571 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.457186531 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.312227451 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.148091852 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.403810239 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.191174896 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.324375614 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.238271277 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.354958986 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.120790003 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.355320707 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.484112215 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.380674844 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.475236894 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.44863858 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.449526601 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.530067513 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.257953182 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.968085839 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.297154417 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.66125615 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.067321785 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.512194019 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.149284856 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.41374776 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.750539678 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.129870217 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.272058551 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.095048443 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.113692437 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.146305121 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.324940034 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.385546988 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.121402686 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.24530954 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.209545599 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.524836481 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.289531737 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.29907917 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.388873508 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.855825929 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.162335739 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.148142727 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.433853762 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.11970309 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.710218043 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.149296318 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.123455883 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.151246293 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.733434565 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.574473601 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.948236933 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.87236896 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.589960378 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.552105457 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.753725504 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.314545285 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.985024569 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.52423824 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.475625529 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.146477182 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.792624611 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.148260243 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.195791786 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.494131275 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.149566699 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.12209084 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.550843196 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.331674601 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.14563281 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.373773178 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.15054759 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.300638193 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.146324457 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.747717833 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.118523011 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.393245524 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.681628436 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.252009372 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.248926054 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.116914533 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.294488969 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.66772623 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.233186769 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.476697933 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.594216311 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.380958339 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.939113362 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.141113344 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.979140821 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.628340786 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.410125501 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.491389916 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.851913308 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.333277903 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.242541804 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.144863308 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.305788254 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.15932595 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.69122028 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.1503491 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.692295836 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.148731876 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.554760119 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.145391355 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.313374107 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.149196358 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.397137035 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.810228615 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.199014849 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.319293947 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.442365523 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.346751379 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.14596758 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.121930979 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.535117821 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.398219095 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.680010898 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.403103543 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.801358814 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.578180106 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.651814469 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.346414506 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.526363618 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.923557871 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.371834595 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.5065324 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.74546337 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.168661834 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.183759107 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.203511021 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.559388461 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.3735308 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.919956994 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.703600479 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.620063723 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.194608736 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.147536506 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.120135015 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.295534181 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.651938428 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.17992933 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.714030232 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.245555186 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.400177089 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.434074896 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.184313767 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 5.862731563 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.987868209 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.575127657 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.508475032 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.479054342 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.12725834 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.566682463 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.572063841 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.539392829 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.276866894 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.396141444 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.129387525 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.20149905 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.148344231 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.497283777 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.885056702 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.856185304 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.456109776 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.74981554 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.089494309 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.297141067 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.679586728 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.168394754 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.079853588 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.182282106 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.184341435 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.997708077 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.698203274 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.41081693 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.475138254 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.149552894 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.153678676 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.406271566 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.457623807 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.426254174 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.672491153 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.390676531 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.845888982 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.251162975 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.382368667 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.396288055 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.197694631 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.878319386 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.354703439 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.094260473 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.327489565 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.845480752 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.270404201 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.020100444 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.445327164 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.146845405 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.628320732 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.767068648 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.196171781 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.117062452 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.280310617 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.149799647 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.35388782 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.914344557 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.372769364 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.883007214 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 5.67461623 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.383287978 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.326645095 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.567067986 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.680004823 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.933594553 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.121586457 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.311292808 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.268472298 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.443563518 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.146818843 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.430459901 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.809604761 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.809216853 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 1.917920239 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.701522456 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.359307331 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.327777619 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.626412388 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.394906032 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.451843991 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.122699543 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.781252106 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.133425613 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.290728664 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.122218211 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.952390519 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.465991901 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.528885351 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.631200514 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.210873798 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.686586382 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.522516895 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.174406902 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.323061134 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.409039686 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.14600375 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.447025755 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.145870664 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.756262566 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.590102741 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.149648464 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.678434939 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.340487619 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.479645073 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.316805177 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.723318554 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.18307017 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.177964491 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.606533256 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.322194632 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.287875298 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.491606612 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.999979255 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.182886996 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.168382749 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.353655767 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.786082234 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.627792212 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.751556732 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.759109266 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.53728599 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.870370425 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.150256072 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.345906693 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.31075203 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.149440341 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.323661739 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.576764916 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.18376503 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.354737615 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.497220205 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.349188773 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.712657563 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.132070063 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.836159869 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.306697757 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.660713105 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.718798582 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.916716198 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.603111022 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.185209068 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.666928767 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.117142598 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.317846516 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.411807794 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.877558526 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.220139203 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.978983574 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.94770914 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.271391648 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.57260798 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.215966939 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.607733243 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.397251353 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.390109959 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.342409399 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.287426439 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.115949803 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.782959921 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.926071318 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.427710841 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.320268033 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.325643876 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.26093571 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.352390952 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.635030591 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.46078504 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.870824751 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.628508182 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.379134974 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.117479972 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.148860914 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.836412545 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.525522407 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.248846294 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.446925394 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.596786682 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.201124025 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.19233547 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.171615824 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.353158355 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.755200996 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.906940306 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.507708585 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.705887532 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.748904111 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.185981517 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.875898895 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.344321044 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.513634365 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.570792049 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.071769186 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.534197419 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.443407954 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.303316279 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.124099828 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.332867684 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.156137755 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.228243874 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.914063955 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.447255358 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.199742016 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.984561194 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.755300108 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.187811303 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.150227388 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.571744781 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.376701654 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.344875776 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.147477961 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.793457973 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.515609936 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.305302747 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.133491154 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.91283718 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.121149021 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.347569056 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.207240933 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.302394642 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.984087296 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.201732483 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.788584408 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.708206556 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.2200876 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.36146802 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.119783428 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.951799062 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.162364412 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.814943942 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 1.91388976 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.398340228 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.652468865 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.327811187 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.150776539 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.478126706 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.281816843 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.500569213 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.423209471 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.6330584 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.579164801 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.533628946 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.443354589 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.862233731 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.283302341 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.39185421 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.119623805 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.179042959 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.157027763 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.519398018 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.510181473 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.146586656 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.714521442 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.399503895 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.256647636 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.31165084 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.282150443 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.68005789 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.358860723 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.252343365 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.302504561 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.358518395 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.502030529 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.218663907 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.326666735 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.14739721 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.205483081 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.34769642 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.398642784 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.528134992 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.460178347 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 1.752820899 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.311420793 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.869668834 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.85988826 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.68427021 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.151083343 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 4.021333792 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.497396801 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.147330388 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.633873245 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.799338974 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.329133192 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.849916372 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.198556069 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.157374608 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.31279911 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.642865453 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.16584185 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.788761894 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.540663561 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.146694961 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.633359413 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.21872093 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.315049949 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.926106536 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.649957234 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.148599204 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.956958182 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.243851835 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.689178197 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.427105618 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.155497998 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.205484144 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.760143875 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.128394053 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.150144931 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.274927373 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.685080282 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.1691265 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.706019853 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.254591331 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.298618933 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.154673326 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.300072036 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.155108236 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.346504057 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.344381583 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.395868192 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.404435039 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.328777495 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.154297204 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.730339018 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.846579362 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.247462872 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.354255342 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.147831464 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.504619034 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.19391853 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.15304534 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.7022519 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.345910464 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.290260964 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.56857143 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.405734581 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.19759284 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.34920533 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.160092934 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.432557711 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.314520204 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.715234743 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.413535909 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.746441546 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.265261368 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.159691999 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.687907199 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.633015534 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.824632377 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.147840346 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.458892989 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.845592391 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.957907394 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.7987622 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.341831298 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.266790232 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.119517834 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.72483766 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.360843664 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.269671743 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.148906072 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.363330907 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.645048346 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.122256612 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.959027174 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.056434756 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.364672382 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.480190142 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.120079513 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.331838101 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.165193066 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.129753175 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.650021126 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.149039547 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.489302863 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.121612651 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.664766838 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.161564913 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.20877486 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.296055158 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.46232096 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.147566926 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.135848175 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.321441361 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.151983102 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.149189929 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.531991214 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.246976561 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.40104677 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.6269811 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.357875421 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.477104018 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.058229599 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.958488792 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.156981542 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.4573876 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.147203699 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.704639219 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.207842385 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.656224638 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.947190005 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.158676045 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.686482101 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.396727139 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.568604317 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.374729227 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.63741203 seconds)
  done (took 1987.528750296 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.147768829 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.215390131 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.22164589 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.236742949 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.205246494 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.319549321 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.186158303 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.163858939 seconds)
  done (took 50.835662338 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.147919716 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.299819977 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.584751395 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.315107622 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.164754526 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.348415397 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.300681456 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.648090678 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.335203194 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.139898078 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.202639417 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.174713997 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.15592401 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.17326353 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 6.008277238 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.238232342 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.149948701 seconds)
  done (took 91.530616293 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.197797015 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.174630852 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.170003775 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.192071975 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.22727779 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.598183315 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.157314116 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.152660632 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.552372328 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.827236706 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.19364541 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.299912749 seconds)
  done (took 81.907622472 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.185151016 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.187263649 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.185273091 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.186424648 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.185973722 seconds)
  done (took 7.067776016 seconds)
done (took 2455.557603501 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.380448267 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.620770147 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.697777355 seconds)
  done (took 4.45336241 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.213993573 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.278983169 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.352460568 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.296434428 seconds)
  done (took 6.297967945 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.45947034 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.629095128 seconds)
  done (took 4.225680201 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.526265099 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.148009692 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.172650494 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.144800396 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.149748176 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.153651978 seconds)
  done (took 19.653453896 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.180133542 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.181288458 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.180202077 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.176599228 seconds)
  done (took 5.856995906 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.144309189 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.189717724 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.151456013 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.138204371 seconds)
  done (took 18.75940278 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.400858222 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.244922171 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.895889415 seconds)
  done (took 5.684597966 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.969340687 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.290098936 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.950420482 seconds)
  done (took 6.346820604 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.102042732 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.087316443 seconds)
  done (took 5.325595127 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.324317319 seconds)
  done (took 2.460467307 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.6408615 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.639304134 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.036808371 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.042227045 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.172680655 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.447278965 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.482835208 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.411084273 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.86169389 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.727284228 seconds)
  done (took 18.600580507 seconds)
done (took 110.026162633 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.089786167 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.544716292 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.314811185 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.848636086 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.243364095 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.316116002 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.765250512 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.657103685 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.744517668 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.746058462 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 2.856399006 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.240961279 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.177726659 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.537698288 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.179080139 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.499329777 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.55845188 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.106249536 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 3.70040942 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 3.878456805 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.770348783 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.738663598 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.575834706 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.743955845 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.560886896 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.294972945 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.042432567 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.50592647 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 3.947582412 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.046165008 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.29802298 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.134285976 seconds)
  done (took 153.801001944 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.148929661 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.154222194 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.155309059 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.151622717 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.130176394 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.158376049 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.150798521 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.150058234 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.074396141 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.072776239 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.153876945 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.121716656 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.159984094 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.150492515 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.15630042 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.150705352 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.326759513 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.156642953 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.154513924 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.153991357 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.156223207 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.013815813 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.157358247 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.001561044 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.326645827 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.153813977 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.150620593 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.153801633 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.157042147 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.155518235 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.157305177 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.150265424 seconds)
  done (took 189.909126062 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.149391864 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.154127379 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.153932005 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.150765757 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.155211496 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.155369929 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.152553226 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.155561547 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.157071125 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.154614432 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.154368047 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.154663324 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.155882261 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.152856404 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.156831855 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.150661683 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.155033966 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.156185545 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.153022073 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.153125994 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.155198425 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.153324869 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.153624607 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.153516862 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.153264437 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.156010428 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.153493985 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.15415723 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.152640889 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.153508967 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.159727242 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.151289935 seconds)
  done (took 198.075175005 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.458629283 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.204426695 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.14834856 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 1.900478706 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 1.216059708 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.3564906 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 1.898500738 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.461551146 seconds)
  done (took 13.787210866 seconds)
done (took 556.719033369 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.852181295 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.085413918 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.328693955 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.420218857 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.763651581 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.438813382 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.41273005 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.577379321 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.883828859 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.562721933 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.624453516 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.352505279 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 1.972085897 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.409794207 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.345665751 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.611190702 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.586090055 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.91439288 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.362671497 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.035614552 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.372235339 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 2.014864891 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.629793953 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.950858214 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.627347574 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.061382291 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.321948831 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.584437053 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.395263145 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.367748169 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.221543372 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.617890861 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.406988077 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.400391178 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.666929405 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.612429356 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.557023272 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.600617752 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.329653413 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.820583913 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.047382793 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.759694942 seconds)
  done (took 77.043472356 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.180368427 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.199840412 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.342383596 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.241976054 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.817185559 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.245511694 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.431017344 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.387048949 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.25538357 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.381850347 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.433553755 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.849793187 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.417758336 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.831887814 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.40620392 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.439179784 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.248001538 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.816318452 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.405226645 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.381631163 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.214247376 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.348044254 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.214130605 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.369256014 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.2056286 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.228200663 seconds)
  done (took 37.447953638 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.235677707 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.361690838 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.435292326 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.409496379 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.378499221 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.173393032 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.530396015 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.340607127 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.980609539 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.533029 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.291322181 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.139772381 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.478907821 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.464063098 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.441235964 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.289225947 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.347266724 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.353090369 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.372048615 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.391899716 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.310152328 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.261338918 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.533036802 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.291133957 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.849158331 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 4.702811826 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.391664323 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.802772262 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.473838023 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.299298439 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.312836205 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.51312786 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.569479139 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.44624929 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.319446545 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.998049478 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.315186808 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.292802231 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.061373081 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.347765561 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.528037669 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 4.56286858 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.481865055 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.760279224 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 4.458043198 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.344486339 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.695464299 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.301070475 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.316586861 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.963311155 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.488984911 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 3.863155564 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.089568552 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.487211654 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.306416515 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.790035661 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.347079506 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.505363792 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.272975681 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.748315671 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.261738204 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.576692527 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.37868174 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 4.46184668 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.417984643 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.389999328 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.360760128 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 4.782682095 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.483190726 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.210248007 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.886243126 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.269944004 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.225493623 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.286904752 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.367690673 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.733367063 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 4.170098756 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.410802925 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.589211256 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.520178191 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.41908697 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.818366676 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.188813348 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.737109117 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.228285688 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.205123197 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.277574457 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.504534695 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.514246291 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.703423368 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.771602785 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.52276617 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.642840242 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.481643582 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 4.727664708 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.536741421 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.187105632 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.201504578 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.428675727 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.772728417 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.270965834 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.388472484 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.876974719 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 4.517011058 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.553122451 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.313156686 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.546441299 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 4.461424129 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.51167008 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.178181749 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.359741762 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.245248684 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.439052506 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.467368682 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.204246996 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.743034845 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.30718073 seconds)
  done (took 242.526885425 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.147981142 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.155707818 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.152061342 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.155872915 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.154112526 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.764606642 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.213867146 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.15036351 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.764815775 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.213392558 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.151420861 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.150352241 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.152644949 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.157907342 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.681079523 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.652427675 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 2.97285208 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.152409125 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.152208777 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.15532834 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 2.854848401 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.1525396 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.152749939 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.152856962 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.154123931 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.152759543 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.164405378 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.193959102 seconds)
  done (took 153.371973141 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.204802064 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.581978227 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.232283543 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.304787385 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.244907149 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.222141376 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.719845027 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.336060533 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.27913988 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.228442904 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.222065337 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.44684979 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.532558575 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.804140606 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.337622164 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.615181639 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.897454627 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.35855509 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.226878808 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.230826604 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.378338365 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.56063317 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.466919657 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.488940024 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.361464972 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.503694534 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.280032749 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.214892329 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.333303265 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.693059797 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.225629711 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.570635163 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.352231051 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.211223753 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.699068772 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.56611816 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.786214623 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.846465019 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.395504993 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.179739171 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.176709341 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.449686971 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.532815932 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.26142729 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.211627273 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.852599357 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.22647584 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.618663743 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.251278493 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.177223302 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.327073303 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.325524576 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.451115696 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.224815012 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.382558388 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.385282909 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.812992764 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.187139583 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.317547555 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.555812535 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.185122092 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.69311855 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 3.161666852 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.279497288 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.221370302 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.069241734 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.306930271 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.72571271 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.825784484 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.251982709 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.556827271 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.404328807 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.187056205 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.474819348 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.390386772 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.678068518 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.787725514 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.346988715 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.319023987 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.282018005 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.482738249 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.19734119 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.766120747 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.307991975 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.185913814 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.701468704 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.597218644 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.185243081 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.208236627 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.347485174 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.372909717 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.427364857 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.502242756 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.276900865 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.123812951 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.495358763 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.503359777 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.226438444 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.340503774 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.201456284 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.629464615 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.395550642 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.201967411 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.521973838 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.875435225 seconds)
  done (took 162.235803425 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.957379042 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.262293886 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.413444569 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.789350515 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.555503403 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 2.658359303 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.424466542 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.281810562 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.464625542 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.414724536 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.396837008 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.315054969 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.917044332 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.930299191 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.260121848 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.386710554 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.278474938 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.121906259 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.509949557 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.218697775 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.516865677 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 1.962521834 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.52478379 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.611980103 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.611631544 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.743361264 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.882654482 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.351859318 seconds)
  done (took 49.908841144 seconds)
done (took 723.670994592 seconds)
SAVING RESULT...
DONE!
