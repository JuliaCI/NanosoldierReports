cset: moving following pidspec: 2025451
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "shootout"... done (took 1.740944014 seconds)
loading group "string"... done (took 0.324157664 seconds)
loading group "linalg"... done (took 4.32084212 seconds)
loading group "parallel"... done (took 0.023746887 seconds)
loading group "find"... done (took 1.489624044 seconds)
loading group "tuple"... done (took 1.071543583 seconds)
loading group "dates"... done (took 0.262815127 seconds)
loading group "micro"... done (took 0.066589402 seconds)
loading group "io"... done (took 1.57854774 seconds)
loading group "frontend"... done (took 0.012599137 seconds)
loading group "scalar"... done (took 5.358584822 seconds)
loading group "sparse"... done (took 3.950780363 seconds)
loading group "alloc"... done (took 0.016750551 seconds)
loading group "broadcast"... done (took 0.419325953 seconds)
loading group "union"... done (took 3.883478029 seconds)
loading group "simd"... done (took 3.225936965 seconds)
loading group "random"... done (took 4.026235816 seconds)
loading group "inference"... done (took 2.199596586 seconds)
loading group "problem"... done (took 1.200275795 seconds)
loading group "array"... done (took 4.802805688 seconds)
loading group "misc"... done (took 0.939942112 seconds)
loading group "sort"... done (took 0.770816579 seconds)
loading group "collection"... done (took 6.720313832 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/8) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.491759458 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.104637457 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.081066811 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.073874336 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.166733494 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.093152717 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.094917039 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.055723425 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.908354844 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.074622055 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.150903337 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.43257231 seconds)
done (took 5.468537089 seconds)
(2/8) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.373035012 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.026395205 seconds)
    (2/2) benchmarking "String"...
    done (took 0.026321109 seconds)
  done (took 0.710464038 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.023341024 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.022335339 seconds)
    (3/3) benchmarking "different"...
    done (took 0.022348101 seconds)
  done (took 0.722767441 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.022268291 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.155161517 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.02387156 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.024784468 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.024976317 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.024784834 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.024493294 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.024463333 seconds)
  done (took 0.9579728 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.080304664 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.02538075 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.021963477 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.021835158 seconds)
  done (took 0.804971817 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.022775416 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.041591198 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.020938786 seconds)
    (4/4) benchmarking "different"...
    done (took 0.02066802 seconds)
  done (took 0.761875429 seconds)
done (took 5.026673681 seconds)
(3/8) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.242855647 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.020998672 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.172520987 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.021779949 seconds)
  done (took 1.914529483 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.329342897 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.053917344 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.039372528 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.03107251 seconds)
  done (took 1.118791933 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.025374223 seconds)
    (2/2) benchmarking "read"...
    done (took 0.029339855 seconds)
  done (took 0.715981069 seconds)
done (took 4.651063522 seconds)
(4/8) benchmarking "problem"...
  (1/1) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 5.686515552 seconds)
  done (took 6.341274773 seconds)
done (took 7.000325272 seconds)
(5/8) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.042889322 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.133324933 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.021612065 seconds)
  done (took 0.861807462 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.028314086 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.030816739 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.031180139 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.031430956 seconds)
  done (took 0.794345796 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.038006452 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.029861072 seconds)
  done (took 0.772215732 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.191686628 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.212083405 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.056739272 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.045344483 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.043297015 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.047349417 seconds)
  done (took 0.85140117 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.026460966 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.02635011 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.026832045 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.025041382 seconds)
  done (took 0.812970521 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.02495359 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.023095014 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.024174653 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.046904938 seconds)
  done (took 0.818553486 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.057918298 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.06015172 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.125042409 seconds)
  done (took 0.943800365 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.041067476 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.032387276 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.033867853 seconds)
  done (took 0.783751861 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.055721391 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.039881695 seconds)
  done (took 0.765905616 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.044733066 seconds)
  done (took 0.716647661 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.041314767 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.052472436 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.085388761 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.046611944 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.106825016 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.075780394 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.019959786 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.031294357 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.029126698 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.019810417 seconds)
  done (took 1.179309587 seconds)
done (took 10.467070835 seconds)
(6/8) benchmarking "tuple"...
  (1/1) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.045108066 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.021699288 seconds)
  done (took 0.736110645 seconds)
done (took 1.412514011 seconds)
(7/8) benchmarking "dates"...
  (1/1) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.166286757 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.020270145 seconds)
  done (took 0.857241123 seconds)
done (took 1.536798273 seconds)
(8/8) benchmarking "alloc"...
  (1/1) benchmarking "strings"...
  done (took 0.108070126 seconds)
done (took 0.785304017 seconds)
RUNNING BENCHMARKS...
(1/8) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 5.722999454 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.830363081 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 5.689554808 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 1.888306068 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 5.745273701 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 5.764079228 seconds)
  (7/12) benchmarking "nbody"...
  done (took 1.730667524 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 5.682546633 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 6.024981908 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 5.685452544 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.069637561 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 4.919011497 seconds)
done (took 52.489616882 seconds)
(2/8) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 5.717440681 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.794065129 seconds)
    (2/2) benchmarking "String"...
    done (took 0.875682643 seconds)
  done (took 2.348994793 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.972913856 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.709942724 seconds)
    (3/3) benchmarking "different"...
    done (took 0.741614998 seconds)
  done (took 3.096623603 seconds)
  (4/7) benchmarking "replace"...
  done (took 1.696179549 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 3.819637553 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.895626078 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 5.672756273 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 5.24747891 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 1.755683928 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 1.707317524 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.478579903 seconds)
  done (took 21.251536397 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 2.74224466 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.795365188 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 1.857786946 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 1.87385809 seconds)
  done (took 7.96250024 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.980149169 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.863344004 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.863799228 seconds)
    (4/4) benchmarking "different"...
    done (took 0.757818038 seconds)
  done (took 4.148217996 seconds)
done (took 46.946505549 seconds)
(3/8) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 5.698824926 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 5.229152074 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 5.411575539 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 5.740416857 seconds)
  done (took 17.053925043 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 5.671886894 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 1.780699 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 5.68131073 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 2.02818113 seconds)
  done (took 15.843714561 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.893126242 seconds)
    (2/2) benchmarking "read"...
    done (took 0.964287279 seconds)
  done (took 2.538898654 seconds)
done (took 41.810852628 seconds)
(4/8) benchmarking "problem"...
  (1/1) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.026265125 seconds)
  done (took 7.700344868 seconds)
done (took 8.373479701 seconds)
(5/8) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.936055436 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.99604969 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.136530686 seconds)
  done (took 2.805397834 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.826896928 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.876802126 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.99810757 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.908972641 seconds)
  done (took 4.286110132 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.902972279 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.045292853 seconds)
  done (took 2.621699712 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.999352272 seconds)
  (6/15) benchmarking "18129"...
  done (took 5.689046632 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.0880662 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 5.674236283 seconds)
    (2/3) benchmarking "Float64"...
    done (took 5.672674646 seconds)
    (3/3) benchmarking "Float16"...
    done (took 5.676428141 seconds)
  done (took 17.70086195 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.713487426 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.714740178 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.71332417 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.713539541 seconds)
  done (took 3.532295804 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 2.963700857 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 1.141912474 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 5.348902696 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 5.681282026 seconds)
  done (took 15.809592946 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.908842872 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.761186089 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.410043365 seconds)
  done (took 3.786299483 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.309217764 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.745596187 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.284094613 seconds)
  done (took 4.015548762 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 1.894425908 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 1.865583854 seconds)
  done (took 4.433050619 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.848113766 seconds)
  done (took 1.521179667 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.517650064 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.99353898 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.989248475 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 1.027498534 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 1.082513103 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.86184053 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.968698943 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.904666284 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.937642487 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.074107758 seconds)
  done (took 11.033109598 seconds)
done (took 80.934908664 seconds)
(6/8) benchmarking "tuple"...
  (1/1) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.097595018 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.73889372 seconds)
  done (took 2.50913404 seconds)
done (took 3.185441885 seconds)
(7/8) benchmarking "dates"...
  (1/1) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 1.738109829 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.90615669 seconds)
  done (took 4.316834676 seconds)
done (took 4.98900351 seconds)
(8/8) benchmarking "alloc"...
  (1/1) benchmarking "strings"...
  done (took 5.707528038 seconds)
done (took 6.485426205 seconds)
SAVING RESULT...
DONE!
