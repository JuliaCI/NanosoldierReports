cset: moving following pidspec: 2021127
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "shootout"... done (took 1.741838278 seconds)
loading group "string"... done (took 0.323858318 seconds)
loading group "linalg"... done (took 4.310372113 seconds)
loading group "parallel"... done (took 0.023556141 seconds)
loading group "find"... done (took 1.52757484 seconds)
loading group "tuple"... done (took 0.959660455 seconds)
loading group "dates"... done (took 0.255093665 seconds)
loading group "micro"... done (took 0.063578477 seconds)
loading group "io"... done (took 1.585293718 seconds)
loading group "frontend"... done (took 0.012271831 seconds)
loading group "scalar"... done (took 5.265189002 seconds)
loading group "sparse"... done (took 3.917650604 seconds)
loading group "alloc"... done (took 0.017653062 seconds)
loading group "broadcast"... done (took 0.409722434 seconds)
loading group "union"... done (took 3.836469488 seconds)
loading group "simd"... done (took 3.172514631 seconds)
loading group "random"... done (took 3.910554602 seconds)
loading group "inference"... done (took 2.201689692 seconds)
loading group "problem"... done (took 1.178521021 seconds)
loading group "array"... done (took 4.830153621 seconds)
loading group "misc"... done (took 0.965338862 seconds)
loading group "sort"... done (took 0.772341908 seconds)
loading group "collection"... done (took 6.689446315 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/8) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.49559739 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.105789976 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.08164995 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.075442429 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.168363959 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.094365698 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.095485854 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.056396009 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.928257788 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.072071221 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.147886935 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.427479641 seconds)
done (took 5.486169324 seconds)
(2/8) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.371039588 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.025158945 seconds)
    (2/2) benchmarking "String"...
    done (took 0.025339532 seconds)
  done (took 0.708902763 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.022062441 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.021320935 seconds)
    (3/3) benchmarking "different"...
    done (took 0.021379789 seconds)
  done (took 0.724053495 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.021520996 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.149201873 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.024065416 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.0248745 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.024711963 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.023987078 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.023734494 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.02365219 seconds)
  done (took 0.950232598 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.077748857 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.02441081 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.021049482 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.021199625 seconds)
  done (took 0.801483087 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.021579088 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.040459865 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.020325282 seconds)
    (4/4) benchmarking "different"...
    done (took 0.020195875 seconds)
  done (took 0.758582648 seconds)
done (took 5.008012724 seconds)
(3/8) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.247267814 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.023349038 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.173409909 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.022136524 seconds)
  done (took 1.915265985 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.326553258 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.05694609 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.040685408 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.032226999 seconds)
  done (took 1.117244367 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.024221971 seconds)
    (2/2) benchmarking "read"...
    done (took 0.028342768 seconds)
  done (took 0.714587924 seconds)
done (took 4.648915686 seconds)
(4/8) benchmarking "problem"...
  (1/1) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 5.618421709 seconds)
  done (took 6.274868336 seconds)
done (took 6.935322236 seconds)
(5/8) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.04386546 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.133103589 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.021629182 seconds)
  done (took 0.858163167 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.027455042 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.030460608 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.030386369 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.03063908 seconds)
  done (took 0.788327001 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.032816202 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.028966997 seconds)
  done (took 0.730319612 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.175460649 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.208122859 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.056475828 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.042069606 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.038013058 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.04393105 seconds)
  done (took 0.797656686 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.022809441 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.022596912 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.022354423 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.022529738 seconds)
  done (took 0.757902402 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.022022684 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.021238845 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.022478551 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.043093283 seconds)
  done (took 0.776879946 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.051970212 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.057030983 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.127240776 seconds)
  done (took 0.907746627 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.039974673 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.032644047 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.034072259 seconds)
  done (took 0.781327384 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.054467071 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.039666317 seconds)
  done (took 0.764105555 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.043628021 seconds)
  done (took 0.717742342 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.039767036 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.052409583 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.085526208 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.046210426 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.109328198 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.078453491 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.020763017 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.032760361 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.029989807 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.020612369 seconds)
  done (took 1.190165046 seconds)
done (took 10.227960283 seconds)
(6/8) benchmarking "tuple"...
  (1/1) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.0437618 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.021555854 seconds)
  done (took 0.73863915 seconds)
done (took 1.417921348 seconds)
(7/8) benchmarking "dates"...
  (1/1) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.163567642 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.020165174 seconds)
  done (took 0.856319185 seconds)
done (took 1.532699477 seconds)
(8/8) benchmarking "alloc"...
  (1/1) benchmarking "strings"...
  done (took 0.106308699 seconds)
done (took 0.785056845 seconds)
RUNNING BENCHMARKS...
(1/8) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 5.730124514 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.828367757 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 5.68425713 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 1.908150121 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 5.775921357 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 5.743182892 seconds)
  (7/12) benchmarking "nbody"...
  done (took 1.725120982 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 5.675418173 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 6.167213021 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 5.681616329 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.0509198 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 4.919854802 seconds)
done (took 52.625451428 seconds)
(2/8) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 5.760149773 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.793433502 seconds)
    (2/2) benchmarking "String"...
    done (took 0.881147552 seconds)
  done (took 2.358357332 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.975312404 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.71483569 seconds)
    (3/3) benchmarking "different"...
    done (took 0.727440902 seconds)
  done (took 3.093033405 seconds)
  (4/7) benchmarking "replace"...
  done (took 1.700965157 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 3.789219773 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.891790423 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 5.675380458 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 5.299012014 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 1.756613554 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 1.702093662 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.488829873 seconds)
  done (took 21.282119829 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 2.761418919 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.78417976 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 1.868023901 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 1.88370038 seconds)
  done (took 7.994338126 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.979887769 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.864796796 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.865375803 seconds)
    (4/4) benchmarking "different"...
    done (took 0.762231752 seconds)
  done (took 4.158173328 seconds)
done (took 47.077772401 seconds)
(3/8) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 5.706546975 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 5.322855931 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 5.514781634 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 5.739369191 seconds)
  done (took 17.254048066 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 5.679066511 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 1.764611026 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 5.684939884 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 1.986276857 seconds)
  done (took 15.79822673 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.894431266 seconds)
    (2/2) benchmarking "read"...
    done (took 0.957957652 seconds)
  done (took 2.540136681 seconds)
done (took 41.973222233 seconds)
(4/8) benchmarking "problem"...
  (1/1) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 6.978954644 seconds)
  done (took 7.654860969 seconds)
done (took 8.330190397 seconds)
(5/8) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.937550479 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.997979448 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.143897019 seconds)
  done (took 2.817646697 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.832751816 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.876414793 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.002294323 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.916109241 seconds)
  done (took 4.30597329 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.908819876 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.047508531 seconds)
  done (took 2.632118574 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.990763337 seconds)
  (6/15) benchmarking "18129"...
  done (took 5.693691633 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.087962335 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 5.676695805 seconds)
    (2/3) benchmarking "Float64"...
    done (took 5.681598607 seconds)
    (3/3) benchmarking "Float16"...
    done (took 5.675966425 seconds)
  done (took 17.714742687 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.715125999 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.71475069 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.714885077 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.710241242 seconds)
  done (took 3.533977238 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 2.92007443 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 1.151479921 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 5.372900126 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 5.680756219 seconds)
  done (took 15.801892391 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.916850945 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.761009239 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.430472862 seconds)
  done (took 3.814653906 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.316778539 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.744829705 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.285912572 seconds)
  done (took 4.024480239 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 1.485151115 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 1.466199001 seconds)
  done (took 3.627670007 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.849558682 seconds)
  done (took 1.526056707 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.522206403 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.999326506 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.99889412 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 1.012542151 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 1.102563139 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.863752567 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.977564488 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.910582399 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.942479846 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.075247967 seconds)
  done (took 11.083798231 seconds)
done (took 80.270142922 seconds)
(6/8) benchmarking "tuple"...
  (1/1) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.110161556 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.742836253 seconds)
  done (took 2.529928773 seconds)
done (took 3.210433448 seconds)
(7/8) benchmarking "dates"...
  (1/1) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 1.744045719 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.871861018 seconds)
  done (took 4.292364566 seconds)
done (took 4.966984233 seconds)
(8/8) benchmarking "alloc"...
  (1/1) benchmarking "strings"...
  done (took 5.692477084 seconds)
done (took 6.471883178 seconds)
SAVING RESULT...
DONE!
