cset: moving following pidspec: 1117524
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "problem"... done (took 2.796194616 seconds)
loading group "array"... done (took 3.086357608 seconds)
loading group "misc"... done (took 0.41081258 seconds)
loading group "sort"... done (took 0.245626198 seconds)
loading group "frontend"... done (took 0.004573787 seconds)
loading group "shootout"... done (took 0.691223384 seconds)
loading group "sparse"... done (took 0.495578768 seconds)
loading group "scalar"... done (took 0.986259812 seconds)
loading group "dates"... done (took 0.135955699 seconds)
loading group "alloc"... done (took 0.016793662 seconds)
loading group "find"... done (took 1.189842008 seconds)
loading group "io"... done (took 1.171374034 seconds)
loading group "tuple"... done (took 0.731837332 seconds)
loading group "string"... done (took 0.206785585 seconds)
loading group "random"... done (took 2.148568716 seconds)
loading group "micro"... done (took 0.047594199 seconds)
loading group "broadcast"... done (took 0.556238934 seconds)
loading group "parallel"... done (took 0.01955314 seconds)
loading group "linalg"... done (took 2.63015655 seconds)
loading group "collection"... done (took 5.611208317 seconds)
loading group "simd"... done (took 0.886278512 seconds)
loading group "inference"... done (took 2.374082935 seconds)
loading group "union"... done (took 2.739579743 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/23) benchmarking "problem"...
  (1/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 1.126350032 seconds)
  done (took 1.827162681 seconds)
  (2/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_devec"...
    done (took 0.135948961 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 1.244521745 seconds)
    (3/4) benchmarking "laplace_iter_vec"...
    done (took 0.59540329 seconds)
    (4/4) benchmarking "laplace_sparse_matvec"...
    done (took 1.156326397 seconds)
  done (took 3.816219905 seconds)
  (3/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.695102299 seconds)
  done (took 1.3883132 seconds)
  (4/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.981622455 seconds)
  done (took 1.692555166 seconds)
  (5/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.972209511 seconds)
  done (took 1.664764726 seconds)
  (6/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_devec"...
    done (took 0.22878845 seconds)
    (2/2) benchmarking "euro_option_vec"...
    done (took 0.198214048 seconds)
  done (took 1.120080211 seconds)
  (7/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.839979054 seconds)
  done (took 5.539928372 seconds)
  (8/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.526426223 seconds)
  done (took 2.22919981 seconds)
  (9/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.049756543 seconds)
  done (took 0.779125211 seconds)
  (10/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float64")...
    done (took 0.227567528 seconds)
    (2/2) benchmarking ("seismic", "Float32")...
    done (took 0.22048393 seconds)
  done (took 1.188165604 seconds)
  (11/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.229728138 seconds)
  done (took 0.941975834 seconds)
  (12/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.421897413 seconds)
  done (took 1.137043907 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.322283504 seconds)
  done (took 1.039173829 seconds)
  (14/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.343000518 seconds)
  done (took 2.05771479 seconds)
done (took 27.18239552 seconds)
(2/23) benchmarking "array"...
  (1/13) benchmarking "index"...
    (1/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.263903653 seconds)
    (2/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.126041139 seconds)
    (3/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120380048 seconds)
    (4/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.163060543 seconds)
    (5/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.000328861 seconds)
    (6/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.164684393 seconds)
    (7/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.094843503 seconds)
    (8/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.325970845 seconds)
    (9/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112700901 seconds)
    (10/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.186564682 seconds)
    (11/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.035236724 seconds)
    (12/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.477258539 seconds)
    (13/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.026860836 seconds)
    (14/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.254152065 seconds)
    (15/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048525916 seconds)
    (16/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03064664 seconds)
    (17/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.165213892 seconds)
    (18/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020345964 seconds)
    (19/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.444313152 seconds)
    (20/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.021248216 seconds)
    (21/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 7.1855e-5 seconds)
    (22/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.015845132 seconds)
    (23/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.19717061 seconds)
    (24/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.318697938 seconds)
    (25/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077660381 seconds)
    (26/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077341643 seconds)
    (27/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.039581962 seconds)
    (28/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04278372 seconds)
    (29/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031463656 seconds)
    (30/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.065000918 seconds)
    (31/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.022982308 seconds)
    (32/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.374059 seconds)
    (33/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060110317 seconds)
    (34/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.607710155 seconds)
    (35/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.03679596 seconds)
    (36/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061361675 seconds)
    (37/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092098264 seconds)
    (38/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.149127802 seconds)
    (39/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.023977316 seconds)
    (40/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.024509153 seconds)
    (41/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.032127069 seconds)
    (42/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076110521 seconds)
    (43/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.029800027 seconds)
    (44/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 7.3529e-5 seconds)
    (45/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.070160725 seconds)
    (46/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06836459 seconds)
    (47/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.04779783 seconds)
    (48/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033117698 seconds)
    (49/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.019926518 seconds)
    (50/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062998676 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034427534 seconds)
    (52/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072906993 seconds)
    (53/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.019930484 seconds)
    (54/608) benchmarking "ind2sub"...
    done (took 0.082537901 seconds)
    (55/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.045519511 seconds)
    (56/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.04138237 seconds)
    (57/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.05344821 seconds)
    (58/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087173871 seconds)
    (59/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.027609036 seconds)
    (60/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.02922018 seconds)
    (61/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.030332133 seconds)
    (62/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.048194019 seconds)
    (63/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020520425 seconds)
    (64/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059319737 seconds)
    (65/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.0467386 seconds)
    (66/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.077263139 seconds)
    (67/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.128707549 seconds)
    (68/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.067796298 seconds)
    (69/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.027021917 seconds)
    (70/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.023091532 seconds)
    (71/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.0843446 seconds)
    (72/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.041667938 seconds)
    (73/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.029456476 seconds)
    (74/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.04681596 seconds)
    (75/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.040297838 seconds)
    (76/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.041305378 seconds)
    (77/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.079354376 seconds)
    (78/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057697588 seconds)
    (79/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.063183746 seconds)
    (80/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083911386 seconds)
    (81/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.061805209 seconds)
    (82/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.093673213 seconds)
    (83/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051786709 seconds)
    (84/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07157537 seconds)
    (85/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.041409389 seconds)
    (86/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.035050421 seconds)
    (87/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.03090567 seconds)
    (88/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.175209144 seconds)
    (89/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.018167377 seconds)
    (90/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.030190872 seconds)
    (91/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.046196218 seconds)
    (92/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.027921661 seconds)
    (93/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.047333969 seconds)
    (94/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.016674698 seconds)
    (95/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.000305176 seconds)
    (96/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02853065 seconds)
    (97/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.019340263 seconds)
    (98/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.03062424 seconds)
    (99/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057368243 seconds)
    (100/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.000194954 seconds)
    (101/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.040594764 seconds)
    (102/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.042016318 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.049241654 seconds)
    (104/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.010858296 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04662221 seconds)
    (106/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.000489001 seconds)
    (107/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.032629303 seconds)
    (108/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.012231991 seconds)
    (109/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.968e-5 seconds)
    (110/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.058119448 seconds)
    (111/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.012769102 seconds)
    (112/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 5.8855e-5 seconds)
    (113/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.023469625 seconds)
    (114/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.027863193 seconds)
    (115/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.01248588 seconds)
    (116/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066127705 seconds)
    (117/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.024318621 seconds)
    (118/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053204081 seconds)
    (119/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.061530873 seconds)
    (120/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016281315 seconds)
    (121/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.019685463 seconds)
    (122/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.089723389 seconds)
    (123/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057492262 seconds)
    (124/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.024505444 seconds)
    (125/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.030048812 seconds)
    (126/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046591581 seconds)
    (127/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.01403117 seconds)
    (128/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.5269e-5 seconds)
    (129/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.079165898 seconds)
    (130/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.014851795 seconds)
    (131/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.021763522 seconds)
    (132/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.051388832 seconds)
    (133/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.042950686 seconds)
    (134/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.01543283 seconds)
    (135/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052208028 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.022379811 seconds)
    (137/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.030237417 seconds)
    (138/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.1454e-5 seconds)
    (139/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.028642859 seconds)
    (140/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.039090357 seconds)
    (141/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.010669395 seconds)
    (142/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.067739142 seconds)
    (143/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05925851 seconds)
    (144/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.01169075 seconds)
    (145/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.073600045 seconds)
    (146/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017936318 seconds)
    (147/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.048969361 seconds)
    (148/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09115165 seconds)
    (149/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049841402 seconds)
    (150/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014855652 seconds)
    (151/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.042359109 seconds)
    (152/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.011894278 seconds)
    (153/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.031414416 seconds)
    (154/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043718506 seconds)
    (155/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050351061 seconds)
    (156/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.033160397 seconds)
    (157/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.952e-5 seconds)
    (158/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.04973042 seconds)
    (159/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.014585948 seconds)
    (160/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.064196774 seconds)
    (161/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.06597183 seconds)
    (162/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.059158496 seconds)
    (163/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047780535 seconds)
    (164/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.024117798 seconds)
    (165/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052312928 seconds)
    (166/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.043514262 seconds)
    (167/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07071442 seconds)
    (168/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.013690543 seconds)
    (169/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.0488187 seconds)
    (170/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.020091005 seconds)
    (171/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.021720337 seconds)
    (172/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.027436039 seconds)
    (173/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.019700195 seconds)
    (174/608) benchmarking "5d"...
    done (took 0.210300035 seconds)
    (175/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.015497143 seconds)
    (176/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 3.3475e-5 seconds)
    (177/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.053723529 seconds)
    (178/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.014653308 seconds)
    (179/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.038450845 seconds)
    (180/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.019540274 seconds)
    (181/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.00676128 seconds)
    (182/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.000207259 seconds)
    (183/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.033162751 seconds)
    (184/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.010848574 seconds)
    (185/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03461054 seconds)
    (186/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.9653e-5 seconds)
    (187/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.014897714 seconds)
    (188/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.072176405 seconds)
    (189/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.027973509 seconds)
    (190/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052601193 seconds)
    (191/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.000303286 seconds)
    (192/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.075457032 seconds)
    (193/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.031936564 seconds)
    (194/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.083930435 seconds)
    (195/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.018339905 seconds)
    (196/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.035457027 seconds)
    (197/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.021571527 seconds)
    (198/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 6.8445e-5 seconds)
    (199/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046425626 seconds)
    (200/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.061452747 seconds)
    (201/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.048690521 seconds)
    (202/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.548273901 seconds)
    (203/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.085528637 seconds)
    (204/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061936587 seconds)
    (205/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.9879e-5 seconds)
    (206/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.035267391 seconds)
    (207/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.028173849 seconds)
    (208/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032158764 seconds)
    (209/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.027451501 seconds)
    (210/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.001401634 seconds)
    (211/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.045194592 seconds)
    (212/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.047928756 seconds)
    (213/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.006842229 seconds)
    (214/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.035600478 seconds)
    (215/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.048044447 seconds)
    (216/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.014533657 seconds)
    (217/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.02404518 seconds)
    (218/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.3802e-5 seconds)
    (219/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.3479e-5 seconds)
    (220/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.02023717 seconds)
    (221/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029416562 seconds)
    (222/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.006753625 seconds)
    (223/608) benchmarking "6d"...
    done (took 0.196592646 seconds)
    (224/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085038376 seconds)
    (225/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.024605428 seconds)
    (226/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.5239e-5 seconds)
    (227/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.026101923 seconds)
    (228/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.075614732 seconds)
    (229/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.018132731 seconds)
    (230/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.01912368 seconds)
    (231/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.096338708 seconds)
    (232/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.018188908 seconds)
    (233/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.050151552 seconds)
    (234/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.027089529 seconds)
    (235/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048563149 seconds)
    (236/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.071112541 seconds)
    (237/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.018309338 seconds)
    (238/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080965414 seconds)
    (239/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015129566 seconds)
    (240/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048223832 seconds)
    (241/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075546331 seconds)
    (242/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048385809 seconds)
    (243/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 7.5453e-5 seconds)
    (244/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.052008155 seconds)
    (245/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034117381 seconds)
    (246/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.041992354 seconds)
    (247/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.019347194 seconds)
    (248/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046559041 seconds)
    (249/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.051764491 seconds)
    (250/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.000119606 seconds)
    (251/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 1.6753e-5 seconds)
    (252/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.039222931 seconds)
    (253/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.043023572 seconds)
    (254/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 9.5645e-5 seconds)
    (255/608) benchmarking "3d"...
    done (took 0.059406751 seconds)
    (256/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.061418164 seconds)
    (257/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.022294605 seconds)
    (258/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.028604922 seconds)
    (259/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.05318458 seconds)
    (260/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.023712632 seconds)
    (261/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048273656 seconds)
    (262/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.022978765 seconds)
    (263/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.066777412 seconds)
    (264/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047198518 seconds)
    (265/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.023026826 seconds)
    (266/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.000235419 seconds)
    (267/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.017599393 seconds)
    (268/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077961794 seconds)
    (269/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070551774 seconds)
    (270/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.000181319 seconds)
    (271/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.034163564 seconds)
    (272/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.01989138 seconds)
    (273/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.055838013 seconds)
    (274/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082719371 seconds)
    (275/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.043340551 seconds)
    (276/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.067420403 seconds)
    (277/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.016677019 seconds)
    (278/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.029586807 seconds)
    (279/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.046669494 seconds)
    (280/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.038380278 seconds)
    (281/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.0001241 seconds)
    (282/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033754363 seconds)
    (283/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039377875 seconds)
    (284/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.057757188 seconds)
    (285/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.030263364 seconds)
    (286/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.036215044 seconds)
    (287/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.020022167 seconds)
    (288/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033781429 seconds)
    (289/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.016238994 seconds)
    (290/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.000158729 seconds)
    (291/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.027815763 seconds)
    (292/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.011751793 seconds)
    (293/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014012693 seconds)
    (294/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.016241424 seconds)
    (295/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.047610183 seconds)
    (296/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.027172565 seconds)
    (297/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.000102267 seconds)
    (298/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.028136408 seconds)
    (299/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.023475754 seconds)
    (300/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.037582155 seconds)
    (301/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.000439746 seconds)
    (302/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.054541549 seconds)
    (303/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.7727e-5 seconds)
    (304/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.2775e-5 seconds)
    (305/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.041543534 seconds)
    (306/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.051826118 seconds)
    (307/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.016068938 seconds)
    (308/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.048836984 seconds)
    (309/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059667107 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.029936043 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052644863 seconds)
    (312/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.020609691 seconds)
    (313/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016119254 seconds)
    (314/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.070334436 seconds)
    (315/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.062503547 seconds)
    (316/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.026464959 seconds)
    (317/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065345608 seconds)
    (318/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.07687306 seconds)
    (319/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.015866178 seconds)
    (320/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.022967951 seconds)
    (321/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.019907356 seconds)
    (322/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.01923348 seconds)
    (323/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.056641052 seconds)
    (324/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033916409 seconds)
    (325/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.047806806 seconds)
    (326/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055361619 seconds)
    (327/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.051327677 seconds)
    (328/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.000106554 seconds)
    (329/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.018009023 seconds)
    (330/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.016099304 seconds)
    (331/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.021910912 seconds)
    (332/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071520156 seconds)
    (333/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.060944746 seconds)
    (334/608) benchmarking "sub2ind"...
    done (took 0.308870263 seconds)
    (335/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 4.5353e-5 seconds)
    (336/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.000160161 seconds)
    (337/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.014682252 seconds)
    (338/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073187282 seconds)
    (339/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.012236126 seconds)
    (340/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.032188082 seconds)
    (341/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.000107796 seconds)
    (342/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052104415 seconds)
    (343/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.000328245 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.077132605 seconds)
    (345/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 7.1257e-5 seconds)
    (346/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10563335 seconds)
    (347/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.000487756 seconds)
    (348/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.046973801 seconds)
    (349/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.075863337 seconds)
    (350/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030504936 seconds)
    (351/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.017741026 seconds)
    (352/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030457381 seconds)
    (353/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.015851797 seconds)
    (354/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.9256e-5 seconds)
    (355/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.061545272 seconds)
    (356/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.06787201 seconds)
    (357/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.032471391 seconds)
    (358/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.171014174 seconds)
    (359/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.05164976 seconds)
    (360/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 6.9456e-5 seconds)
    (361/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.050679945 seconds)
    (362/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.044425859 seconds)
    (363/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.011673276 seconds)
    (364/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.9419e-5 seconds)
    (365/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.024799596 seconds)
    (366/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.000488634 seconds)
    (367/608) benchmarking ("sum", "3darray")...
    done (took 0.048960666 seconds)
    (368/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030055719 seconds)
    (369/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.029756949 seconds)
    (370/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041271316 seconds)
    (371/608) benchmarking "7d"...
    done (took 0.254856654 seconds)
    (372/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064805468 seconds)
    (373/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.036369019 seconds)
    (374/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 9.8565e-5 seconds)
    (375/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.023381551 seconds)
    (376/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.018002843 seconds)
    (377/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034369595 seconds)
    (378/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.01875642 seconds)
    (379/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.075092619 seconds)
    (380/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.017497624 seconds)
    (381/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.016715076 seconds)
    (382/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.025575235 seconds)
    (383/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.024461894 seconds)
    (384/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055634695 seconds)
    (385/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.055629583 seconds)
    (386/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044446439 seconds)
    (387/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051552182 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065123514 seconds)
    (389/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.077313077 seconds)
    (390/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.036142379 seconds)
    (391/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.013137136 seconds)
    (392/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.017118355 seconds)
    (393/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.046714347 seconds)
    (394/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.187381053 seconds)
    (395/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.017493293 seconds)
    (396/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033817675 seconds)
    (397/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.061416987 seconds)
    (398/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.013611215 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.021807964 seconds)
    (400/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.059554824 seconds)
    (401/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.041844968 seconds)
    (402/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.000481828 seconds)
    (403/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.050407861 seconds)
    (404/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.046611756 seconds)
    (405/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062736835 seconds)
    (406/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.075052695 seconds)
    (407/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064446009 seconds)
    (408/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015832669 seconds)
    (409/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.022476365 seconds)
    (410/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050349999 seconds)
    (411/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.4929e-5 seconds)
    (412/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033690994 seconds)
    (413/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.000329611 seconds)
    (414/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.000121809 seconds)
    (415/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.026768541 seconds)
    (416/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 4.3369e-5 seconds)
    (417/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.000108538 seconds)
    (418/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.015867168 seconds)
    (419/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.014367195 seconds)
    (420/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.013947977 seconds)
    (421/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.000173251 seconds)
    (422/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029690416 seconds)
    (423/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.03297986 seconds)
    (424/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.027065498 seconds)
    (425/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.049030037 seconds)
    (426/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017917125 seconds)
    (427/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.6737e-5 seconds)
    (428/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020294244 seconds)
    (429/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.01645169 seconds)
    (430/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017274078 seconds)
    (431/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033789144 seconds)
    (432/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.073663154 seconds)
    (433/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.035028924 seconds)
    (434/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.012158172 seconds)
    (435/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.034298197 seconds)
    (436/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057608118 seconds)
    (437/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079304558 seconds)
    (438/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026838239 seconds)
    (439/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.014379654 seconds)
    (440/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.02750176 seconds)
    (441/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.0278e-5 seconds)
    (442/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.040415583 seconds)
    (443/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.010368975 seconds)
    (444/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.6515e-5 seconds)
    (445/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.018845434 seconds)
    (446/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.038134616 seconds)
    (447/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.021335565 seconds)
    (448/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.0199e-5 seconds)
    (449/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.044387607 seconds)
    (450/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049942226 seconds)
    (451/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.014881635 seconds)
    (452/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.055102298 seconds)
    (453/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077308075 seconds)
    (454/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.044240018 seconds)
    (455/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067360497 seconds)
    (456/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.1951e-5 seconds)
    (457/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.029728289 seconds)
    (458/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.063368921 seconds)
    (459/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.01405816 seconds)
    (460/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.046935427 seconds)
    (461/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.039339538 seconds)
    (462/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.025129941 seconds)
    (463/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.022665273 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.9501e-5 seconds)
    (465/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057365991 seconds)
    (466/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.012068925 seconds)
    (467/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031546858 seconds)
    (468/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.052435474 seconds)
    (469/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.032187775 seconds)
    (470/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040350093 seconds)
    (471/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015681768 seconds)
    (472/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060901662 seconds)
    (473/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.023472994 seconds)
    (474/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.022106781 seconds)
    (475/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.051468282 seconds)
    (476/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073107175 seconds)
    (477/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.023823237 seconds)
    (478/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027796229 seconds)
    (479/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.038783142 seconds)
    (480/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.057924235 seconds)
    (481/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.027561655 seconds)
    (482/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.067584253 seconds)
    (483/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.063573864 seconds)
    (484/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.033481362 seconds)
    (485/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.042855714 seconds)
    (486/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.015557036 seconds)
    (487/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060577247 seconds)
    (488/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.064667472 seconds)
    (489/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027374448 seconds)
    (490/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.024911607 seconds)
    (491/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050080316 seconds)
    (492/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067151693 seconds)
    (493/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.011228468 seconds)
    (494/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.0414589 seconds)
    (495/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.1742e-5 seconds)
    (496/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027806655 seconds)
    (497/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.000561658 seconds)
    (498/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.014572352 seconds)
    (499/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070709205 seconds)
    (500/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.070212011 seconds)
    (501/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.019792592 seconds)
    (502/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.029675266 seconds)
    (503/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.070666038 seconds)
    (504/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.058137222 seconds)
    (505/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.01658795 seconds)
    (506/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.070057428 seconds)
    (507/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.876e-5 seconds)
    (508/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.021647041 seconds)
    (509/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.011034978 seconds)
    (510/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.040334441 seconds)
    (511/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047848226 seconds)
    (512/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.472238871 seconds)
    (513/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.00015938 seconds)
    (514/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.019801339 seconds)
    (515/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027640503 seconds)
    (516/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.000320795 seconds)
    (517/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051399286 seconds)
    (518/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.045579787 seconds)
    (519/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.038780027 seconds)
    (520/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.061088471 seconds)
    (521/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.012527338 seconds)
    (522/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.084891767 seconds)
    (523/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.012862991 seconds)
    (524/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.018157449 seconds)
    (525/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028799495 seconds)
    (526/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030579852 seconds)
    (527/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030348453 seconds)
    (528/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058182609 seconds)
    (529/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058580267 seconds)
    (530/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.0173e-5 seconds)
    (531/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.054309552 seconds)
    (532/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.039114185 seconds)
    (533/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.025991269 seconds)
    (534/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.01327245 seconds)
    (535/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.021827521 seconds)
    (536/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.015301312 seconds)
    (537/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.000110474 seconds)
    (538/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.081741085 seconds)
    (539/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048314753 seconds)
    (540/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.046294187 seconds)
    (541/608) benchmarking "2d"...
    done (took 0.046195212 seconds)
    (542/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033183802 seconds)
    (543/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.3822e-5 seconds)
    (544/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.021823742 seconds)
    (545/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014547588 seconds)
    (546/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.9854e-5 seconds)
    (547/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.068870344 seconds)
    (548/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.033763004 seconds)
    (549/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.084485121 seconds)
    (550/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03403311 seconds)
    (551/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.7954e-5 seconds)
    (552/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.03026569 seconds)
    (553/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.060835645 seconds)
    (554/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.022494351 seconds)
    (555/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050998258 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028203475 seconds)
    (557/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.058495377 seconds)
    (558/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 7.1284e-5 seconds)
    (559/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.01779259 seconds)
    (560/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064434275 seconds)
    (561/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.2642e-5 seconds)
    (562/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.06468344 seconds)
    (563/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.045568219 seconds)
    (564/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.029984552 seconds)
    (565/608) benchmarking "4d"...
    done (took 0.09305197 seconds)
    (566/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 3.8131e-5 seconds)
    (567/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 1.3523e-5 seconds)
    (568/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069137039 seconds)
    (569/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.046167968 seconds)
    (570/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067901965 seconds)
    (571/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.013880075 seconds)
    (572/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.053192988 seconds)
    (573/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.026922844 seconds)
    (574/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.06815672 seconds)
    (575/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02468742 seconds)
    (576/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034356403 seconds)
    (577/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.039839447 seconds)
    (578/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.032434929 seconds)
    (579/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.034211365 seconds)
    (580/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.015661313 seconds)
    (581/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064680155 seconds)
    (582/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.030634685 seconds)
    (583/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.025304359 seconds)
    (584/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.022421998 seconds)
    (585/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 6.9244e-5 seconds)
    (586/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.000108207 seconds)
    (587/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041457272 seconds)
    (588/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066506218 seconds)
    (589/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.019611185 seconds)
    (590/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.053928239 seconds)
    (591/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.041504682 seconds)
    (592/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078548889 seconds)
    (593/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.047813258 seconds)
    (594/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.025758233 seconds)
    (595/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.027951313 seconds)
    (596/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.0782752 seconds)
    (597/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.027498561 seconds)
    (598/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.013637423 seconds)
    (599/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.025689353 seconds)
    (600/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.064019902 seconds)
    (601/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.028816064 seconds)
    (602/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.000364166 seconds)
    (603/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060065907 seconds)
    (604/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.171148976 seconds)
    (605/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.048314564 seconds)
    (606/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.000117635 seconds)
    (607/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.024483179 seconds)
    (608/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.063386537 seconds)
  done (took 28.547909835 seconds)
  (2/13) benchmarking "reductions"...
    (1/20) benchmarking ("sumabs", "Int64")...
    done (took 0.06196483 seconds)
    (2/20) benchmarking ("norminf", "Float64")...
    done (took 0.22882574 seconds)
    (3/20) benchmarking ("norm", "Float64")...
    done (took 0.039560416 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.057888555 seconds)
    (5/20) benchmarking ("maxabs", "Float64")...
    done (took 0.05992753 seconds)
    (6/20) benchmarking ("maxabs", "Int64")...
    done (took 0.053601584 seconds)
    (7/20) benchmarking ("mean", "Float64")...
    done (took 0.033885885 seconds)
    (8/20) benchmarking ("norm1", "Int64")...
    done (took 0.196119236 seconds)
    (9/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.065109091 seconds)
    (10/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.053078809 seconds)
    (11/20) benchmarking ("sum", "Float64")...
    done (took 0.040195239 seconds)
    (12/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.068397785 seconds)
    (13/20) benchmarking ("sum", "Int64")...
    done (took 0.040834429 seconds)
    (14/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.052838396 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.049644289 seconds)
    (16/20) benchmarking ("norm", "Int64")...
    done (took 0.035457769 seconds)
    (17/20) benchmarking ("norm1", "Float64")...
    done (took 0.040662849 seconds)
    (18/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.053394165 seconds)
    (19/20) benchmarking ("norminf", "Int64")...
    done (took 0.100381841 seconds)
    (20/20) benchmarking ("mean", "Int64")...
    done (took 0.068074072 seconds)
  done (took 2.216478576 seconds)
  (3/13) benchmarking "cat"...
    (1/17) benchmarking ("catnd_setind", 5)...
    done (took 0.199210479 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.02924926 seconds)
    (3/17) benchmarking ("hcat", 500)...
    done (took 0.096725176 seconds)
    (4/17) benchmarking ("hcat_setind", 500)...
    done (took 0.074085233 seconds)
    (5/17) benchmarking ("vcat_setind", 500)...
    done (took 0.074884917 seconds)
    (6/17) benchmarking ("catnd", 500)...
    done (took 0.519501956 seconds)
    (7/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.055655027 seconds)
    (8/17) benchmarking ("catnd", 5)...
    done (took 5.4375e-5 seconds)
    (9/17) benchmarking ("hvcat", 5)...
    done (took 0.291220264 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 0.057324686 seconds)
    (11/17) benchmarking ("hcat_setind", 5)...
    done (took 2.5863e-5 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 0.006920882 seconds)
    (13/17) benchmarking ("vcat_setind", 5)...
    done (took 1.5846e-5 seconds)
    (14/17) benchmarking ("catnd_setind", 500)...
    done (took 0.007170154 seconds)
    (15/17) benchmarking ("hcat", 5)...
    done (took 1.328e-5 seconds)
    (16/17) benchmarking ("hvcat", 500)...
    done (took 0.00853915 seconds)
    (17/17) benchmarking ("hvcat_setind", 5)...
    done (took 1.2236e-5 seconds)
  done (took 2.280540422 seconds)
  (4/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.176357229 seconds)
    (2/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.345031991 seconds)
    (3/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.108760553 seconds)
    (4/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.193916007 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.132443311 seconds)
    (6/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.305466664 seconds)
    (7/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.487100032 seconds)
    (8/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.286748819 seconds)
  done (took 2.866911747 seconds)
  (5/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Float64")...
    done (took 0.132885628 seconds)
    (2/4) benchmarking ("Float64", "Int")...
    done (took 0.034377396 seconds)
    (3/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.112488786 seconds)
    (4/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.098472668 seconds)
  done (took 1.204394765 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "boolarray_bool_load!"...
    done (took 0.055946167 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.024458901 seconds)
    (3/6) benchmarking "bitarray_true_load!"...
    done (took 0.034051225 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.024204576 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.043937287 seconds)
    (6/6) benchmarking "boolarray_true_fill!"...
    done (took 0.025075904 seconds)
  done (took 1.034423245 seconds)
  (7/13) benchmarking "accumulate"...
    (1/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.045295652 seconds)
    (2/12) benchmarking ("accumulate", "Float64")...
    done (took 0.05194799 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.17608049 seconds)
    (4/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.035121554 seconds)
    (5/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.035934999 seconds)
    (6/12) benchmarking ("cumsum", "Int")...
    done (took 0.040199182 seconds)
    (7/12) benchmarking ("cumsum", "Float64")...
    done (took 0.056277211 seconds)
    (8/12) benchmarking ("accumulate!", "Int")...
    done (took 0.047060095 seconds)
    (9/12) benchmarking ("cumsum!", "Int")...
    done (took 0.037494238 seconds)
    (10/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.041615186 seconds)
    (11/12) benchmarking ("accumulate", "Int")...
    done (took 0.032651601 seconds)
    (12/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.027227731 seconds)
  done (took 1.485883472 seconds)
  (8/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.058225743 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.046258471 seconds)
    (3/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.050527825 seconds)
    (4/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 0.043561585 seconds)
    (5/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.03941787 seconds)
    (6/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.039209758 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 0.051290381 seconds)
    (8/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 0.044774915 seconds)
    (9/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.038591485 seconds)
    (10/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.025143051 seconds)
    (11/24) benchmarking ("==", "BitArray")...
    done (took 0.030966587 seconds)
    (12/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 0.048489904 seconds)
    (13/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.032011302 seconds)
    (14/24) benchmarking ("isequal", "BitArray")...
    done (took 0.031968523 seconds)
    (15/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.030826068 seconds)
    (16/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.03530379 seconds)
    (17/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.036533914 seconds)
    (18/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.020357395 seconds)
    (19/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 0.047078217 seconds)
    (20/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.042736852 seconds)
    (21/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 0.044842182 seconds)
    (22/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.04633129 seconds)
    (23/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.035971886 seconds)
    (24/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.047325958 seconds)
  done (took 1.801663914 seconds)
  (9/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 5)...
    done (took 0.049958855 seconds)
    (2/5) benchmarking ("setindex!", 2)...
    done (took 0.014268025 seconds)
    (3/5) benchmarking ("setindex!", 1)...
    done (took 0.010642207 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 0.014694519 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 0.015203579 seconds)
  done (took 0.939113687 seconds)
  (10/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 1.13531731 seconds)
    (2/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.512961642 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.326790199 seconds)
    (4/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.142543379 seconds)
    (5/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.009280526 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.005623469 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.559262635 seconds)
    (8/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.641700227 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.353743559 seconds)
    (10/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.748258493 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 10.600454443 seconds)
    (12/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.097609579 seconds)
  done (took 26.963454068 seconds)
  (11/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.051815961 seconds)
    (2/4) benchmarking "rev_load_slow!"...
    done (took 0.048777053 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.051688176 seconds)
    (4/4) benchmarking "rev_load_fast!"...
    done (took 0.047578996 seconds)
  done (took 1.032389393 seconds)
  (12/13) benchmarking "growth"...
    (1/12) benchmarking ("push_single!", 8)...
    done (took 0.030980331 seconds)
    (2/12) benchmarking ("push_single!", 2048)...
    done (took 2.4578e-5 seconds)
    (3/12) benchmarking ("append!", 2048)...
    done (took 0.0420828 seconds)
    (4/12) benchmarking ("append!", 8)...
    done (took 1.0816e-5 seconds)
    (5/12) benchmarking ("push_single!", 256)...
    done (took 1.0682e-5 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 0.042873298 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 0.037954463 seconds)
    (8/12) benchmarking ("append!", 256)...
    done (took 2.1481e-5 seconds)
    (9/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.335e-5 seconds)
    (10/12) benchmarking ("prerend!", 256)...
    done (took 1.1957e-5 seconds)
    (11/12) benchmarking ("push_multiple!", 256)...
    done (took 1.2481e-5 seconds)
    (12/12) benchmarking ("prerend!", 2048)...
    done (took 1.8934e-5 seconds)
  done (took 0.989468004 seconds)
  (13/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.037924783 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.045426899 seconds)
    (3/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.033685646 seconds)
    (4/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.039973164 seconds)
    (5/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.046175819 seconds)
    (6/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.02756629 seconds)
    (7/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.026323145 seconds)
    (8/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.039653885 seconds)
    (9/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.040281594 seconds)
    (10/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.037804572 seconds)
    (11/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.022395601 seconds)
    (12/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.045228708 seconds)
    (13/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.039864517 seconds)
    (14/24) benchmarking ("all", "BitArray")...
    done (took 0.028616734 seconds)
    (15/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.038185269 seconds)
    (16/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.023052061 seconds)
    (17/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.034470641 seconds)
    (18/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.041176718 seconds)
    (19/24) benchmarking ("any", "BitArray")...
    done (took 0.027841831 seconds)
    (20/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.034321587 seconds)
    (21/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.024175431 seconds)
    (22/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.045536836 seconds)
    (23/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.038993811 seconds)
    (24/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.023301942 seconds)
  done (took 1.680170364 seconds)
done (took 73.765243431 seconds)
(3/23) benchmarking "misc"...
  (1/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.09336351 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.037784069 seconds)
  done (took 0.96438865 seconds)
  (2/15) benchmarking "perf highdim generator"...
  done (took 0.208256906 seconds)
  (3/15) benchmarking "20517"...
  done (took 0.061000072 seconds)
  (4/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "no conditional"...
    done (took 0.061075824 seconds)
    (2/2) benchmarking "conditional"...
    done (took 0.054256302 seconds)
  done (took 0.958173166 seconds)
  (5/15) benchmarking "afoldl"...
    (1/3) benchmarking "Int"...
    done (took 0.03352901 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.034854755 seconds)
    (3/3) benchmarking "Complex{Float64}"...
    done (took 0.039639691 seconds)
  done (took 0.947650984 seconds)
  (6/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.046108756 seconds)
  done (took 0.904225465 seconds)
  (7/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.147510302 seconds)
    (2/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.237302804 seconds)
    (3/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.093968076 seconds)
  done (took 1.318703846 seconds)
  (8/15) benchmarking "18129"...
  done (took 0.16803757 seconds)
  (9/15) benchmarking "23042"...
    (1/4) benchmarking "Float64"...
    done (took 0.05638499 seconds)
    (2/4) benchmarking "ComplexF32"...
    done (took 0.055501985 seconds)
    (3/4) benchmarking "ComplexF64"...
    done (took 0.022550944 seconds)
    (4/4) benchmarking "Float32"...
    done (took 0.03222355 seconds)
  done (took 1.01669876 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.044710788 seconds)
    (2/4) benchmarking ("parse", "nested")...
    done (took 0.02797119 seconds)
    (3/4) benchmarking ("parse", "array")...
    done (took 0.019893554 seconds)
    (4/4) benchmarking ("parse", "function")...
    done (took 0.019517203 seconds)
  done (took 0.959149394 seconds)
  (11/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float64"...
    done (took 0.061781703 seconds)
    (2/3) benchmarking "Float16"...
    done (took 0.065301393 seconds)
    (3/3) benchmarking "Float32"...
    done (took 0.06022916 seconds)
  done (took 1.033687727 seconds)
  (12/15) benchmarking "fastmath many args"...
  done (took 0.062802992 seconds)
  (13/15) benchmarking "bitshift"...
    (1/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.022072308 seconds)
    (2/4) benchmarking ("Int", "UInt")...
    done (took 0.021705882 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.021666533 seconds)
    (4/4) benchmarking ("UInt", "UInt")...
    done (took 0.022133919 seconds)
  done (took 0.941528629 seconds)
  (14/15) benchmarking "iterators"...
    (1/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.174984583 seconds)
    (2/10) benchmarking "zip(1:1)"...
    done (took 0.081976215 seconds)
    (3/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.03640929 seconds)
    (4/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.089723269 seconds)
    (5/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.095905646 seconds)
    (6/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 3.1747e-5 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.2825e-5 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.0831e-5 seconds)
    (9/10) benchmarking "zip(1:1000)"...
    done (took 1.4204e-5 seconds)
    (10/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.073066063 seconds)
  done (took 1.399883159 seconds)
  (15/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 0.13020831 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 3.1316e-5 seconds)
  done (took 0.984547601 seconds)
done (took 12.767966429 seconds)
(4/23) benchmarking "sort"...
  (1/11) benchmarking "length = 30"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 0.104343068 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 1.118240864 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 7.667525168 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 0.58574469 seconds)
    (5/17) benchmarking "descending"...
    done (took 0.035951229 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 0.02446416 seconds)
    (7/17) benchmarking "all same"...
    done (took 0.029901841 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.4536e-5 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 0.023794645 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 1.2421e-5 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 0.938322334 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 0.028095632 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.584277495 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.027369911 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 0.083656165 seconds)
    (16/17) benchmarking "ascending"...
    done (took 0.030936273 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.4653e-5 seconds)
  done (took 12.128044774 seconds)
  (2/11) benchmarking "length = 10000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.8943e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 0.000907117 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 0.000379522 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 0.000934663 seconds)
    (5/17) benchmarking "descending"...
    done (took 0.000565244 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 1.0781e-5 seconds)
    (7/17) benchmarking "all same"...
    done (took 4.8951e-5 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 0.000353384 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 0.000953984 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 0.000365952 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 0.000361118 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 0.000582269 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.022708972 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.000532456 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 0.000413356 seconds)
    (16/17) benchmarking "ascending"...
    done (took 0.000560278 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 0.000378242 seconds)
  done (took 0.961939234 seconds)
  (3/11) benchmarking "length = 3"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.3961e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 8.651e-6 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 6.988e-6 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 6.936e-6 seconds)
    (5/17) benchmarking "descending"...
    done (took 6.129e-6 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 4.435e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 4.719e-6 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 3.93e-6 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 1.8893e-5 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 3.442e-6 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 7.288e-6 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 5.934e-6 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 1.9435e-5 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 4.409e-6 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.1628e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 4.21e-6 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 4.711e-6 seconds)
  done (took 0.901597157 seconds)
  (4/11) benchmarking "length = 100"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.364e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 3.2445e-5 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 1.2552e-5 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 1.7574e-5 seconds)
    (5/17) benchmarking "descending"...
    done (took 1.5712e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.309e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 5.121e-6 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 6.8e-6 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 1.5044e-5 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 9.281e-6 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 9.461e-6 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 1.378e-5 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.000216396 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 1.2833e-5 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.3552e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 1.1259e-5 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 8.74e-6 seconds)
  done (took 0.901131977 seconds)
  (5/11) benchmarking "issues"...
    (1/13) benchmarking "small Float64 view"...
    done (took 0.037739024 seconds)
    (2/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 0.034117787 seconds)
    (3/13) benchmarking "sortslices sorting very short slices"...
    done (took 1.733131797 seconds)
    (4/13) benchmarking "Float16"...
    done (took 0.984197464 seconds)
    (5/13) benchmarking "sort(rand(10^8))"...
    done (took 9.048902661 seconds)
    (6/13) benchmarking "sortperm(rand(10^5))"...
    done (took 0.036725187 seconds)
    (7/13) benchmarking "sortperm on a view (Int)"...
    done (took 0.189010986 seconds)
    (8/13) benchmarking "small Int view"...
    done (took 1.2503e-5 seconds)
    (9/13) benchmarking "sortperm on a view (Float64)"...
    done (took 0.389868899 seconds)
    (10/13) benchmarking "inplace sorting of a view"...
    done (took 0.034316747 seconds)
    (11/13) benchmarking "sortperm(rand(10^7))"...
    done (took 8.11490167 seconds)
    (12/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 0.281997866 seconds)
    (13/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 0.229625757 seconds)
  done (took 22.015843292 seconds)
  (6/11) benchmarking "mergesort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 0.246488625 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 0.215970711 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 0.130934096 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 0.061733554 seconds)
  done (took 1.589868074 seconds)
  (7/11) benchmarking "quicksort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 0.149559702 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 0.109392734 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 0.074123979 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 0.060751073 seconds)
  done (took 1.323773531 seconds)
  (8/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 0.104765952 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 0.051137906 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 0.068199924 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 0.055332921 seconds)
  done (took 1.20846785 seconds)
  (9/11) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ones")...
    done (took 0.037637217 seconds)
    (2/8) benchmarking ("reverse", "ascending")...
    done (took 0.056217617 seconds)
    (3/8) benchmarking ("forwards", "random")...
    done (took 0.038076403 seconds)
    (4/8) benchmarking ("forwards", "ascending")...
    done (took 0.029245298 seconds)
    (5/8) benchmarking ("forwards", "descending")...
    done (took 0.034864178 seconds)
    (6/8) benchmarking ("reverse", "random")...
    done (took 0.055823231 seconds)
    (7/8) benchmarking ("reverse", "descending")...
    done (took 0.025596666 seconds)
    (8/8) benchmarking ("reverse", "ones")...
    done (took 0.024969565 seconds)
  done (took 1.234570174 seconds)
  (10/11) benchmarking "length = 1000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.4745e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 0.000149053 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 4.5711e-5 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 9.2467e-5 seconds)
    (5/17) benchmarking "descending"...
    done (took 5.2948e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.747e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 9.795e-6 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.8422e-5 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 8.6368e-5 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 5.5192e-5 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.3596e-5 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 6.5082e-5 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.001880814 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 4.0476e-5 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 6.3318e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 5.5501e-5 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.5512e-5 seconds)
  done (took 0.932310553 seconds)
  (11/11) benchmarking "length = 10"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.3245e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 1.9682e-5 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 8.897e-6 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 8.063e-6 seconds)
    (5/17) benchmarking "descending"...
    done (took 7.372e-6 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 4.914e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 4.634e-6 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 4.883e-6 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 7.208e-6 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 4.714e-6 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 8.714e-6 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 6.832e-6 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 3.1789e-5 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.1e-6 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.2688e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 5.181e-6 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.836e-6 seconds)
  done (took 0.925134566 seconds)
done (took 44.974140302 seconds)
(5/23) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 0.027001548 seconds)
done (took 0.952473876 seconds)
(6/23) benchmarking "shootout"...
  (1/12) benchmarking "binary_trees"...
  done (took 0.09157146 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.074775321 seconds)
  (3/12) benchmarking "regex_dna"...
  done (took 0.052216939 seconds)
  (4/12) benchmarking "fannkuch"...
  done (took 0.120740603 seconds)
  (5/12) benchmarking "mandelbrot"...
  done (took 0.071670018 seconds)
  (6/12) benchmarking "pidigits"...
  done (took 0.109953989 seconds)
  (7/12) benchmarking "spectralnorm"...
  done (took 0.090112239 seconds)
  (8/12) benchmarking "k_nucleotide"...
  done (took 0.496815762 seconds)
  (9/12) benchmarking "nbody"...
  done (took 0.072100218 seconds)
  (10/12) benchmarking "revcomp"...
  done (took 0.071379299 seconds)
  (11/12) benchmarking "nbody_vec"...
  done (took 0.386633785 seconds)
  (12/12) benchmarking "meteor_contest"...
  done (took 2.897433285 seconds)
done (took 5.464717121 seconds)
(7/23) benchmarking "sparse"...
  (1/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.109355143 seconds)
    (2/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.209901179 seconds)
    (3/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.045959004 seconds)
    (4/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.08113558 seconds)
    (5/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.8339e-5 seconds)
    (6/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.040325752 seconds)
    (7/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.081604159 seconds)
    (8/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.038431202 seconds)
    (9/54) benchmarking ("spmat", "range", 100)...
    done (took 0.110204325 seconds)
    (10/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.055603764 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.090539509 seconds)
    (12/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.053079835 seconds)
    (13/54) benchmarking ("spmat", "range", 10)...
    done (took 2.5474e-5 seconds)
    (14/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 4.1896e-5 seconds)
    (15/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.054986932 seconds)
    (16/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.083681582 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.00073355 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.107690862 seconds)
    (19/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.035852038 seconds)
    (20/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 6.0271e-5 seconds)
    (21/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.7057e-5 seconds)
    (22/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.000705353 seconds)
    (23/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.000687059 seconds)
    (24/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.339e-5 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.033053369 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.000723312 seconds)
    (27/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.8718e-5 seconds)
    (28/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.000828372 seconds)
    (29/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.058952767 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 5.4046e-5 seconds)
    (31/54) benchmarking ("spmat", "array", 100)...
    done (took 0.000140955 seconds)
    (32/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.0652e-5 seconds)
    (33/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.4932e-5 seconds)
    (34/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.2203e-5 seconds)
    (35/54) benchmarking ("spmat", "array", 10)...
    done (took 1.4321e-5 seconds)
    (36/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.001098045 seconds)
    (37/54) benchmarking ("spmat", "logical", 100)...
    done (took 5.5603e-5 seconds)
    (38/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.06518142 seconds)
    (39/54) benchmarking ("spmat", "integer", 100)...
    done (took 5.5324e-5 seconds)
    (40/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.000816332 seconds)
    (41/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.012509608 seconds)
    (42/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.6211e-5 seconds)
    (43/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.000969884 seconds)
    (44/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.79e-5 seconds)
    (45/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.000135977 seconds)
    (46/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.001035961 seconds)
    (47/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 4.1306e-5 seconds)
    (48/54) benchmarking ("spmat", "splogical", 100)...
    done (took 3.3842e-5 seconds)
    (49/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.9181e-5 seconds)
    (50/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.000708936 seconds)
    (51/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 3.7567e-5 seconds)
    (52/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 3.4541e-5 seconds)
    (53/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.8428e-5 seconds)
    (54/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 8.615e-6 seconds)
  done (took 2.391685951 seconds)
  (2/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "adjoint"...
    done (took 0.545547757 seconds)
    (2/2) benchmarking "non-adjoint"...
    done (took 0.443138839 seconds)
  done (took 1.936319186 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("IJV", 1000)...
    done (took 0.059214978 seconds)
    (2/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.111473649 seconds)
    (3/18) benchmarking ("Diagonal", 100)...
    done (took 0.156450445 seconds)
    (4/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.128056261 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.115931008 seconds)
    (6/18) benchmarking ("Diagonal", 1000)...
    done (took 3.8458e-5 seconds)
    (7/18) benchmarking ("Diagonal", 10)...
    done (took 7.206e-6 seconds)
    (8/18) benchmarking ("IJV", 10)...
    done (took 9.412e-6 seconds)
    (9/18) benchmarking ("IV", 100)...
    done (took 0.209206066 seconds)
    (10/18) benchmarking ("SymTridiagonal", 100)...
    done (took 3.227e-5 seconds)
    (11/18) benchmarking ("IJV", 100)...
    done (took 1.7654e-5 seconds)
    (12/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.4762e-5 seconds)
    (13/18) benchmarking ("Bidiagonal", 10)...
    done (took 9.861e-6 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.7058e-5 seconds)
    (15/18) benchmarking ("Tridiagonal", 1000)...
    done (took 3.4517e-5 seconds)
    (16/18) benchmarking ("IV", 10)...
    done (took 8.703e-6 seconds)
    (17/18) benchmarking ("IV", 1000)...
    done (took 1.5762e-5 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.8313e-5 seconds)
  done (took 1.743071145 seconds)
  (4/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.462365133 seconds)
    (2/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.162472121 seconds)
    (3/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.078625596 seconds)
    (4/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.307271884 seconds)
    (5/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.07622975 seconds)
    (6/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.074845128 seconds)
    (7/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.129601412 seconds)
    (8/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.00016091 seconds)
    (9/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.073746503 seconds)
    (10/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 8.1027e-5 seconds)
    (11/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.077796844 seconds)
    (12/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.030246726 seconds)
    (13/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.072333001 seconds)
    (14/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 7.882e-5 seconds)
    (15/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.033736781 seconds)
    (16/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 6.5593e-5 seconds)
    (17/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.028272815 seconds)
    (18/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002562353 seconds)
    (19/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.09150336 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.002868269 seconds)
    (21/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.132483055 seconds)
    (22/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.002759299 seconds)
    (23/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.09168847 seconds)
    (24/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.002065706 seconds)
    (25/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 6.3092e-5 seconds)
    (26/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.033211862 seconds)
    (27/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.03306016 seconds)
    (28/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.032705457 seconds)
    (29/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.069307912 seconds)
    (30/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 8.3395e-5 seconds)
    (31/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002899061 seconds)
    (32/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.002214732 seconds)
    (33/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.000599405 seconds)
    (34/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.002223539 seconds)
    (35/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.035298364 seconds)
    (36/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000107511 seconds)
    (37/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.001525593 seconds)
    (38/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.034599499 seconds)
    (39/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.002125707 seconds)
    (40/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.001404271 seconds)
    (41/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.031084219 seconds)
    (42/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.002146118 seconds)
    (43/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.034828781 seconds)
    (44/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.002981456 seconds)
    (45/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.000108963 seconds)
    (46/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.005726498 seconds)
    (47/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000223585 seconds)
    (48/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.000132513 seconds)
    (49/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.004737691 seconds)
    (50/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.000178377 seconds)
    (51/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 8.3154e-5 seconds)
    (52/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.018446651 seconds)
    (53/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 4.7932e-5 seconds)
    (54/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.034976091 seconds)
    (55/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 5.1772e-5 seconds)
    (56/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 5.8964e-5 seconds)
    (57/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 6.5507e-5 seconds)
    (58/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002638575 seconds)
    (59/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000127992 seconds)
    (60/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 3.5623e-5 seconds)
    (61/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.003841697 seconds)
    (62/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.003906216 seconds)
    (63/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.00011176 seconds)
    (64/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.002338208 seconds)
    (65/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.032794353 seconds)
    (66/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 6.4508e-5 seconds)
    (67/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000198222 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.004751162 seconds)
    (69/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 6.5441e-5 seconds)
    (70/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.046674935 seconds)
    (71/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.000112295 seconds)
    (72/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.006285591 seconds)
    (73/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.001673831 seconds)
    (74/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 7.9529e-5 seconds)
    (75/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.003030915 seconds)
    (76/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.000575544 seconds)
    (77/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002443675 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000207133 seconds)
    (79/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000152512 seconds)
    (80/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.002524234 seconds)
    (81/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.012485525 seconds)
    (82/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.000176536 seconds)
    (83/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000105647 seconds)
    (84/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.002964873 seconds)
    (85/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.031750969 seconds)
    (86/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.000102045 seconds)
    (87/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 5.544e-5 seconds)
    (88/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.013505414 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000219385 seconds)
    (90/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.012729286 seconds)
    (91/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.002275311 seconds)
    (92/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000194068 seconds)
    (93/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.006325536 seconds)
    (94/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.00934074 seconds)
    (95/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.000214864 seconds)
    (96/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000106005 seconds)
    (97/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000189833 seconds)
    (98/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.007893861 seconds)
    (99/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000108057 seconds)
    (100/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.042926153 seconds)
    (101/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.001878576 seconds)
    (102/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 9.2295e-5 seconds)
    (103/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000229009 seconds)
    (104/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.001194344 seconds)
    (105/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 6.8878e-5 seconds)
    (106/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.000774242 seconds)
    (107/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.000695668 seconds)
    (108/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.3787e-5 seconds)
    (109/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.001426691 seconds)
    (110/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.000151227 seconds)
    (111/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000124679 seconds)
    (112/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.00147103 seconds)
    (113/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 7.2235e-5 seconds)
    (114/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.00012756 seconds)
    (115/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 7.1764e-5 seconds)
    (116/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000210035 seconds)
    (117/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.008192412 seconds)
    (118/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.008083643 seconds)
    (119/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.001374783 seconds)
    (120/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000145001 seconds)
    (121/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.00828604 seconds)
    (122/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.002011954 seconds)
    (123/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.011042751 seconds)
    (124/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000122088 seconds)
    (125/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.001444157 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 5.0367e-5 seconds)
    (127/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000115714 seconds)
    (128/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.00018075 seconds)
    (129/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.001543049 seconds)
    (130/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.007428707 seconds)
    (131/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.005011744 seconds)
    (132/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000162429 seconds)
    (133/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000221269 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.013325098 seconds)
    (135/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.002328855 seconds)
    (136/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.000485426 seconds)
    (137/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.00808294 seconds)
    (138/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.000118313 seconds)
    (139/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.012545305 seconds)
    (140/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.009074354 seconds)
    (141/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000252978 seconds)
    (142/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.000781031 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000136795 seconds)
    (144/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.001616918 seconds)
    (145/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.002575443 seconds)
    (146/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.006286308 seconds)
    (147/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 9.4092e-5 seconds)
    (148/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 6.2288e-5 seconds)
    (149/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.000183641 seconds)
    (150/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.012032047 seconds)
    (151/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 9.3122e-5 seconds)
    (152/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 7.7709e-5 seconds)
    (153/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 3.1482e-5 seconds)
    (154/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.015707515 seconds)
    (155/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 6.0828e-5 seconds)
    (156/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000142649 seconds)
    (157/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.001427316 seconds)
    (158/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.000112485 seconds)
    (159/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 4.7333e-5 seconds)
    (160/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 4.1754e-5 seconds)
    (161/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.002425634 seconds)
    (162/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 6.8372e-5 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002216578 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 7.4864e-5 seconds)
    (165/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.1338e-5 seconds)
    (166/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.001150943 seconds)
    (167/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.004738451 seconds)
    (168/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.00069423 seconds)
    (169/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000136882 seconds)
    (170/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 5.2758e-5 seconds)
    (171/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.000235461 seconds)
    (172/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 5.6852e-5 seconds)
    (173/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.00052857 seconds)
    (174/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 5.2536e-5 seconds)
    (175/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.001732235 seconds)
    (176/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.004989549 seconds)
    (177/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.000178235 seconds)
    (178/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.008621985 seconds)
    (179/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.003390711 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.002097611 seconds)
    (181/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.000810168 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 6.8957e-5 seconds)
    (183/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.001710528 seconds)
    (184/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 6.2603e-5 seconds)
    (185/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.00022077 seconds)
    (186/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000133083 seconds)
    (187/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.002608575 seconds)
    (188/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000132637 seconds)
    (189/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 5.9348e-5 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.00165426 seconds)
    (191/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.007009353 seconds)
    (192/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.014324017 seconds)
    (193/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000158795 seconds)
    (194/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 5.2213e-5 seconds)
    (195/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.002666911 seconds)
    (196/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.001451463 seconds)
    (197/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000131905 seconds)
    (198/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000179201 seconds)
    (199/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000130078 seconds)
    (200/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.001986808 seconds)
    (201/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.000473381 seconds)
    (202/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.003616876 seconds)
    (203/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.000748536 seconds)
    (204/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 6.8997e-5 seconds)
    (205/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002159196 seconds)
    (206/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.009154926 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 6.7541e-5 seconds)
    (208/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.00011377 seconds)
    (209/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.008644301 seconds)
    (210/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.002971724 seconds)
    (211/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000126361 seconds)
    (212/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000185254 seconds)
    (213/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 3.849e-5 seconds)
    (214/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000112152 seconds)
    (215/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.00024707 seconds)
    (216/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.000932352 seconds)
    (217/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 3.7688e-5 seconds)
    (218/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.007227169 seconds)
    (219/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.001252735 seconds)
    (220/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000141895 seconds)
    (221/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000146687 seconds)
    (222/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.005067429 seconds)
    (223/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 5.3446e-5 seconds)
    (224/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.001507869 seconds)
  done (took 3.795099357 seconds)
  (5/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.058952932 seconds)
    (2/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.149268584 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.237912578 seconds)
    (4/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.03203489 seconds)
    (5/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.000194204 seconds)
    (6/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.149202495 seconds)
    (7/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.000164939 seconds)
    (8/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.262458514 seconds)
    (9/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.000117862 seconds)
    (10/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.995721548 seconds)
    (11/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.000101092 seconds)
    (12/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.055061972 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.000232178 seconds)
    (14/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.474638259 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.266591658 seconds)
    (16/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.216350828 seconds)
  done (took 3.848352342 seconds)
  (6/7) benchmarking "sparse solves"...
    (1/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 1.884032699 seconds)
    (2/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.897203071 seconds)
    (3/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.262110472 seconds)
    (4/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.411663844 seconds)
    (5/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.134557845 seconds)
    (6/10) benchmarking "square system (default), vector rhs"...
    done (took 0.451621065 seconds)
    (7/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.12864933 seconds)
    (8/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.108421806 seconds)
    (9/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.113036381 seconds)
    (10/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.099992786 seconds)
  done (took 5.46658361 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.059519448 seconds)
    (2/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.19161581 seconds)
  done (took 1.215388374 seconds)
done (took 21.327490078 seconds)
(8/23) benchmarking "scalar"...
  (1/25) benchmarking "fastmath"...
    (1/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.020389213 seconds)
    (2/49) benchmarking ("sub", "BigFloat")...
    done (took 0.020380766 seconds)
    (3/49) benchmarking ("div", "Int64")...
    done (took 0.020324619 seconds)
    (4/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.022692789 seconds)
    (5/49) benchmarking ("add", "Int64")...
    done (took 0.019812865 seconds)
    (6/49) benchmarking "13786"...
    done (took 0.037081939 seconds)
    (7/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.020587745 seconds)
    (8/49) benchmarking ("sub", "UInt64")...
    done (took 0.020016406 seconds)
    (9/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.050326661 seconds)
    (10/49) benchmarking ("mul", "BigFloat")...
    done (took 0.020995991 seconds)
    (11/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.027157742 seconds)
    (12/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.033479797 seconds)
    (13/49) benchmarking ("add", "BigFloat")...
    done (took 0.020893567 seconds)
    (14/49) benchmarking ("sub", "Float32")...
    done (took 0.019566068 seconds)
    (15/49) benchmarking ("div", "Float64")...
    done (took 0.020019513 seconds)
    (16/49) benchmarking ("div", "Float32")...
    done (took 0.01982985 seconds)
    (17/49) benchmarking ("sub", "BigInt")...
    done (took 0.020494395 seconds)
    (18/49) benchmarking ("sub", "Float64")...
    done (took 0.019898356 seconds)
    (19/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.022058074 seconds)
    (20/49) benchmarking ("mul", "Float64")...
    done (took 0.020180767 seconds)
    (21/49) benchmarking ("add", "ComplexF64")...
    done (took 0.02079653 seconds)
    (22/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.021457891 seconds)
    (23/49) benchmarking ("add", "ComplexF32")...
    done (took 0.020688023 seconds)
    (24/49) benchmarking ("div", "ComplexF64")...
    done (took 0.021033994 seconds)
    (25/49) benchmarking ("add", "BigInt")...
    done (took 0.02032078 seconds)
    (26/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.026477139 seconds)
    (27/49) benchmarking ("div", "BigFloat")...
    done (took 0.020616143 seconds)
    (28/49) benchmarking ("add", "Float64")...
    done (took 0.019998764 seconds)
    (29/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.026424521 seconds)
    (30/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.021807587 seconds)
    (31/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.02088533 seconds)
    (32/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.020930479 seconds)
    (33/49) benchmarking ("mul", "Int64")...
    done (took 0.019985025 seconds)
    (34/49) benchmarking ("sub", "Int64")...
    done (took 0.020035273 seconds)
    (35/49) benchmarking ("mul", "BigInt")...
    done (took 0.020338637 seconds)
    (36/49) benchmarking ("mul", "Float32")...
    done (took 0.019570525 seconds)
    (37/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.027516031 seconds)
    (38/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.020959847 seconds)
    (39/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.021278694 seconds)
    (40/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.021958812 seconds)
    (41/49) benchmarking ("div", "UInt64")...
    done (took 0.020672269 seconds)
    (42/49) benchmarking ("div", "ComplexF32")...
    done (took 0.021338895 seconds)
    (43/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.021116343 seconds)
    (44/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.021724421 seconds)
    (45/49) benchmarking ("mul", "UInt64")...
    done (took 0.020048933 seconds)
    (46/49) benchmarking ("add", "Float32")...
    done (took 0.019403155 seconds)
    (47/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.022154198 seconds)
    (48/49) benchmarking ("div", "BigInt")...
    done (took 0.021821028 seconds)
    (49/49) benchmarking ("add", "UInt64")...
    done (took 0.019667144 seconds)
  done (took 2.053353132 seconds)
  (2/25) benchmarking "atan2"...
    (1/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.035177485 seconds)
    (2/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.676e-5 seconds)
    (3/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.035528771 seconds)
    (4/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 3.5818e-5 seconds)
    (5/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.2714e-5 seconds)
    (6/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.3837e-5 seconds)
    (7/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.1102e-5 seconds)
    (8/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 7.887e-6 seconds)
    (9/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 6.837e-6 seconds)
    (10/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 7.057e-6 seconds)
    (11/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.5512e-5 seconds)
    (12/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 7.377e-6 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 5.392e-6 seconds)
    (14/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 6.016e-6 seconds)
    (15/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 5.708e-6 seconds)
    (16/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 5.429e-6 seconds)
    (17/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.009145585 seconds)
    (18/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.8451e-5 seconds)
    (19/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.2622e-5 seconds)
    (20/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 7.246e-6 seconds)
    (21/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 6.883e-6 seconds)
    (22/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 6.47e-6 seconds)
    (23/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 6.085e-6 seconds)
    (24/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 6.055e-6 seconds)
    (25/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 6.111e-6 seconds)
    (26/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 5.923e-6 seconds)
    (27/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 6.326e-6 seconds)
    (28/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 5.868e-6 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 5.989e-6 seconds)
    (30/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 5.872e-6 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 6.011e-6 seconds)
    (32/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 5.844e-6 seconds)
    (33/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.1521e-5 seconds)
    (34/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.6983e-5 seconds)
    (35/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 6.276e-6 seconds)
    (36/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 6.107e-6 seconds)
    (37/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.9959e-5 seconds)
    (38/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 6.232e-6 seconds)
    (39/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 6.393e-6 seconds)
    (40/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 5.924e-6 seconds)
    (41/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 5.522e-6 seconds)
    (42/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 6.77e-6 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.674e-5 seconds)
    (44/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 7.613e-6 seconds)
    (45/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 5.908e-6 seconds)
    (46/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 6.127e-6 seconds)
    (47/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 6.077e-6 seconds)
    (48/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 5.767e-6 seconds)
    (49/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 5.672e-6 seconds)
    (50/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 6.006e-6 seconds)
    (51/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 6.214e-6 seconds)
    (52/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 5.702e-6 seconds)
    (53/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 5.763e-6 seconds)
    (54/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 5.863e-6 seconds)
    (55/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 8.151e-6 seconds)
    (56/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 6.67e-6 seconds)
    (57/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 6.625e-6 seconds)
    (58/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 5.565e-6 seconds)
    (59/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 5.254e-6 seconds)
    (60/68) benchmarking ("x one", "Float64")...
    done (took 1.1413e-5 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 6.005e-6 seconds)
    (62/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 5.606e-6 seconds)
    (63/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 6.556e-6 seconds)
    (64/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 6.334e-6 seconds)
    (65/68) benchmarking ("x one", "Float32")...
    done (took 5.658e-6 seconds)
    (66/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 5.867e-6 seconds)
    (67/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 5.773e-6 seconds)
    (68/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 5.514e-6 seconds)
  done (took 1.156576842 seconds)
  (3/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.019585383 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.4035e-5 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 9.145e-6 seconds)
    (4/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 8.425e-6 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 8.247e-6 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 6.905e-6 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 6.771e-6 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 7.103e-6 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.404e-6 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.128e-6 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.0102e-5 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 6.758e-6 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.453e-6 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.609e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 6.545e-6 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.501e-6 seconds)
    (17/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 6.19e-6 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.746e-6 seconds)
    (19/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.494e-6 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 6.097e-6 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.321e-6 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.019460843 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.6925e-5 seconds)
    (24/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 9.635e-6 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 8.714e-6 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 7.73e-6 seconds)
    (27/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 7.995e-6 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 7.548e-6 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 7.567e-6 seconds)
    (30/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 7.283e-6 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 7.007e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.656e-6 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.816e-6 seconds)
    (34/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 7.93e-6 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.341e-6 seconds)
    (36/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 7.188e-6 seconds)
    (37/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 7.202e-6 seconds)
    (38/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.1418e-5 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.694e-6 seconds)
    (40/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.706e-6 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 6.672e-6 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.431e-6 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.376e-5 seconds)
    (44/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 7.6e-6 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 6.032e-6 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.922e-6 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.568e-6 seconds)
    (48/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.28e-6 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.842e-6 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.01e-6 seconds)
    (51/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.482e-6 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.061e-6 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.484e-6 seconds)
    (54/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.296e-6 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.155e-6 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 6.201e-6 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.614e-6 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.933e-6 seconds)
    (59/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 5.238e-6 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.368e-6 seconds)
    (61/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.533e-6 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.676e-6 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.744e-6 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.147e-6 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.656e-6 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.866e-6 seconds)
  done (took 1.000901905 seconds)
  (4/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "UInt64", "+")...
    done (took 0.043529334 seconds)
    (2/6) benchmarking ("#8", "Int64", "+")...
    done (took 0.026614011 seconds)
    (3/6) benchmarking ("#6", "BigInt", "+")...
    done (took 0.046431592 seconds)
    (4/6) benchmarking ("#6", "UInt64", "+")...
    done (took 0.043264096 seconds)
    (5/6) benchmarking ("#6", "Int64", "+")...
    done (took 0.037930277 seconds)
    (6/6) benchmarking ("#8", "BigInt", "+")...
    done (took 0.050687827 seconds)
  done (took 1.21023612 seconds)
  (5/25) benchmarking "atanh"...
    (1/16) benchmarking ("zero", "Float64")...
    done (took 0.02245069 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.9596e-5 seconds)
    (3/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.021712236 seconds)
    (4/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.3463e-5 seconds)
    (5/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.1598e-5 seconds)
    (6/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 7.815e-6 seconds)
    (7/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 7.308e-6 seconds)
    (8/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 7.98e-6 seconds)
    (9/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 6.97e-6 seconds)
    (10/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 7.08e-6 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.216e-5 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 6.354e-6 seconds)
    (13/16) benchmarking ("one", "Float32")...
    done (took 1.1825e-5 seconds)
    (14/16) benchmarking ("zero", "Float32")...
    done (took 6.696e-6 seconds)
    (15/16) benchmarking ("one", "Float64")...
    done (took 5.918e-6 seconds)
    (16/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.682e-6 seconds)
  done (took 1.011883523 seconds)
  (6/25) benchmarking "acos"...
    (1/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.020454378 seconds)
    (2/18) benchmarking ("zero", "Float64")...
    done (took 1.8981e-5 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 7.993e-6 seconds)
    (4/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.017822046 seconds)
    (5/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.019224036 seconds)
    (6/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.2155e-5 seconds)
    (7/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.9388e-5 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.000278838 seconds)
    (9/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.0312e-5 seconds)
    (10/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 7.147e-6 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.0128e-5 seconds)
    (12/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 6.122e-6 seconds)
    (13/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 5.885e-6 seconds)
    (14/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.943e-6 seconds)
    (15/18) benchmarking ("zero", "Float32")...
    done (took 1.0796e-5 seconds)
    (16/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 6.367e-6 seconds)
    (17/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.402e-6 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.704e-6 seconds)
  done (took 1.023602611 seconds)
  (7/25) benchmarking "asinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.019568069 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.8696e-5 seconds)
    (3/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.019112099 seconds)
    (4/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.6648e-5 seconds)
    (5/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 9.622e-6 seconds)
    (6/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 8.135e-6 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 7.214e-6 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 7.525e-6 seconds)
    (9/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 5.799e-6 seconds)
    (10/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 5.036e-6 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.0276e-5 seconds)
    (12/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 6.251e-6 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.436e-6 seconds)
    (14/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 5.864e-6 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 6.165e-6 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.743e-6 seconds)
    (17/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.61e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.4949e-5 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 9.977e-6 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.345e-6 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 4.964e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 5.188e-6 seconds)
  done (took 1.005057777 seconds)
  (8/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.02013008 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.444e-5 seconds)
    (3/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019601552 seconds)
    (4/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.546e-5 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 9.021e-6 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 7.121e-6 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 6.839e-6 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.442e-6 seconds)
    (9/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.346e-6 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.658e-6 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 9.172e-6 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.914e-6 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.781e-6 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.112e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.203e-6 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.171e-6 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.562e-6 seconds)
    (18/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 5.568e-6 seconds)
    (19/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.28e-6 seconds)
    (20/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.444e-6 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 4.909e-6 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.428e-6 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.49e-6 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.063e-6 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 5.402e-6 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.089e-6 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.344e-6 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 5.997e-6 seconds)
    (29/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.1968e-5 seconds)
    (30/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.428e-6 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.021e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.301e-6 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 4.827e-6 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.035e-6 seconds)
    (35/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.3e-6 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.202e-6 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.579e-6 seconds)
    (38/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.293e-6 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.202e-6 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.259e-6 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.029e-6 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.176e-6 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.9332e-5 seconds)
    (44/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 7.894e-6 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.771e-6 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.245e-6 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.057e-6 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 5.008e-6 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.187e-6 seconds)
    (50/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 5.393e-6 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.086e-6 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.707e-6 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 5.513e-6 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.112e-6 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 4.953e-6 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 4.96e-6 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.205e-6 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.119e-6 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 4.97e-6 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.338e-6 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.158e-6 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.026e-6 seconds)
    (63/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 4.972e-6 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.171e-6 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 4.855e-6 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.58e-6 seconds)
  done (took 1.006597756 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("zero", "Float64")...
    done (took 0.020123148 seconds)
    (2/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.019456927 seconds)
    (3/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.5611e-5 seconds)
    (4/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 8.486e-6 seconds)
    (5/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 7.176e-6 seconds)
    (6/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 6.637e-6 seconds)
    (7/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 6.34e-6 seconds)
    (8/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 5.795e-6 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.327e-6 seconds)
    (10/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 5.423e-6 seconds)
    (11/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 9.402e-6 seconds)
    (12/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.641e-6 seconds)
    (13/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 5.511e-6 seconds)
    (14/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.406e-6 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 6.045e-6 seconds)
    (16/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.588e-6 seconds)
    (17/30) benchmarking ("one", "Float32")...
    done (took 1.0687e-5 seconds)
    (18/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 5.671e-6 seconds)
    (19/30) benchmarking ("zero", "Float32")...
    done (took 5.198e-6 seconds)
    (20/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 4.904e-6 seconds)
    (21/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 5.131e-6 seconds)
    (22/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.0616e-5 seconds)
    (23/30) benchmarking ("one", "Float64")...
    done (took 6.06e-6 seconds)
    (24/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 5.869e-6 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.842e-6 seconds)
    (26/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 4.823e-6 seconds)
    (27/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 5.076e-6 seconds)
    (28/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 4.745e-6 seconds)
    (29/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 4.633e-6 seconds)
    (30/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 4.706e-6 seconds)
  done (took 1.010274817 seconds)
  (10/25) benchmarking "cosh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 0.020259755 seconds)
    (2/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.0751e-5 seconds)
    (3/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.021111679 seconds)
    (4/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.5173e-5 seconds)
    (5/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 7.435e-6 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 7.897e-6 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 5.24e-6 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 5.253e-6 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 6.1e-6 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 5.565e-6 seconds)
    (11/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 9.967e-6 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.531e-6 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 5.115e-6 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 5.129e-6 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.234e-6 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.367e-6 seconds)
    (17/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 4.883e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 4.641e-6 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 4.927e-6 seconds)
    (20/22) benchmarking ("zero", "Float32")...
    done (took 1.0717e-5 seconds)
    (21/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.555e-6 seconds)
    (22/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.273e-6 seconds)
  done (took 1.009193339 seconds)
  (11/25) benchmarking "cbrt"...
    (1/20) benchmarking ("zero", "Float64")...
    done (took 0.020234259 seconds)
    (2/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.7759e-5 seconds)
    (3/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 8.517e-6 seconds)
    (4/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.01921022 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.592e-5 seconds)
    (6/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 7.69e-6 seconds)
    (7/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 7.024e-6 seconds)
    (8/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 7.399e-6 seconds)
    (9/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.718e-6 seconds)
    (10/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.618e-6 seconds)
    (11/20) benchmarking ("one", "Float32")...
    done (took 1.5429e-5 seconds)
    (12/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 5.835e-6 seconds)
    (13/20) benchmarking ("zero", "Float32")...
    done (took 5.234e-6 seconds)
    (14/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 5.778e-6 seconds)
    (15/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 5.135e-6 seconds)
    (16/20) benchmarking ("one", "Float64")...
    done (took 5.652e-6 seconds)
    (17/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.616e-6 seconds)
    (18/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.279e-6 seconds)
    (19/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 5.304e-6 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.095e-6 seconds)
  done (took 1.005528758 seconds)
  (12/25) benchmarking "sinh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 0.022118164 seconds)
    (2/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.019142289 seconds)
    (3/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.4329e-5 seconds)
    (4/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.264e-5 seconds)
    (5/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 7.997e-6 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 7.427e-6 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 6.82e-6 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 7.231e-6 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 6.488e-6 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 6.852e-6 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.0138e-5 seconds)
    (12/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 6.169e-6 seconds)
    (13/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 6.212e-6 seconds)
    (14/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 6.085e-6 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.409e-6 seconds)
    (16/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 5.798e-6 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 5.999e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 6.124e-6 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 1.089e-5 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 6.016e-6 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.234e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 5.447e-6 seconds)
  done (took 1.008706528 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.01956576 seconds)
    (2/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.3705e-5 seconds)
    (3/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 7.087e-6 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 7.812e-6 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 6.858e-6 seconds)
    (6/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 5.901e-6 seconds)
    (7/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 5.889e-6 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.864e-6 seconds)
    (9/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.401e-6 seconds)
    (10/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.188e-6 seconds)
    (11/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 7.903e-6 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.411e-6 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.23e-6 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 5.146e-6 seconds)
    (15/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.445e-6 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.19e-6 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.078e-6 seconds)
    (18/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.691e-6 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 4.96e-6 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 4.905e-6 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 4.973e-6 seconds)
  done (took 0.988872028 seconds)
  (14/25) benchmarking "predicate"...
    (1/72) benchmarking ("isinf", "Float32")...
    done (took 0.019997504 seconds)
    (2/72) benchmarking ("isinteger", "Float64")...
    done (took 0.01979717 seconds)
    (3/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.021245494 seconds)
    (4/72) benchmarking ("iseven", "BigInt")...
    done (took 0.020849537 seconds)
    (5/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.016207397 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.020107377 seconds)
    (7/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.016376376 seconds)
    (8/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.024290668 seconds)
    (9/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.016024281 seconds)
    (10/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.019783077 seconds)
    (11/72) benchmarking ("isnan", "Float64")...
    done (took 0.019236674 seconds)
    (12/72) benchmarking ("isnan", "Float32")...
    done (took 0.019770021 seconds)
    (13/72) benchmarking ("isequal", "Float32")...
    done (took 0.020164149 seconds)
    (14/72) benchmarking ("isless", "BigFloat")...
    done (took 0.023677113 seconds)
    (15/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.016260655 seconds)
    (16/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.02025513 seconds)
    (17/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.020423397 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.02213114 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.020395574 seconds)
    (20/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.020797663 seconds)
    (21/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.020542746 seconds)
    (22/72) benchmarking ("isinf", "Int64")...
    done (took 0.015984571 seconds)
    (23/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.019843736 seconds)
    (24/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.019927969 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.020742031 seconds)
    (26/72) benchmarking ("isequal", "BigInt")...
    done (took 0.020873967 seconds)
    (27/72) benchmarking ("isless", "Float64")...
    done (took 0.021287877 seconds)
    (28/72) benchmarking ("isfinite", "Int64")...
    done (took 0.016038569 seconds)
    (29/72) benchmarking ("isnan", "BigInt")...
    done (took 0.015988578 seconds)
    (30/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.019858321 seconds)
    (31/72) benchmarking ("isodd", "Int64")...
    done (took 0.019761048 seconds)
    (32/72) benchmarking ("isinteger", "Float32")...
    done (took 0.019912695 seconds)
    (33/72) benchmarking ("isless", "Float32")...
    done (took 0.021440886 seconds)
    (34/72) benchmarking ("isequal", "Int64")...
    done (took 0.019783188 seconds)
    (35/72) benchmarking ("isequal", "Float64")...
    done (took 0.020063302 seconds)
    (36/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.029431551 seconds)
    (37/72) benchmarking ("isless", "BigInt")...
    done (took 0.020845284 seconds)
    (38/72) benchmarking ("isnan", "UInt64")...
    done (took 0.015996332 seconds)
    (39/72) benchmarking ("isinf", "BigInt")...
    done (took 0.016010559 seconds)
    (40/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.020968393 seconds)
    (41/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.020269902 seconds)
    (42/72) benchmarking ("isodd", "BigInt")...
    done (took 0.020644249 seconds)
    (43/72) benchmarking ("isfinite", "Float64")...
    done (took 0.019310187 seconds)
    (44/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.016233511 seconds)
    (45/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.020269733 seconds)
    (46/72) benchmarking ("iseven", "UInt64")...
    done (took 0.01959941 seconds)
    (47/72) benchmarking ("isinf", "Float64")...
    done (took 0.019659603 seconds)
    (48/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.015939523 seconds)
    (49/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.016137399 seconds)
    (50/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.020212101 seconds)
    (51/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.016044632 seconds)
    (52/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.020117343 seconds)
    (53/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.016354015 seconds)
    (54/72) benchmarking ("isfinite", "Float32")...
    done (took 0.019460426 seconds)
    (55/72) benchmarking ("isless", "UInt64")...
    done (took 0.019646037 seconds)
    (56/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.015874976 seconds)
    (57/72) benchmarking ("isinf", "UInt64")...
    done (took 0.015850535 seconds)
    (58/72) benchmarking ("iseven", "Int64")...
    done (took 0.019624286 seconds)
    (59/72) benchmarking ("isinteger", "Int64")...
    done (took 0.015860753 seconds)
    (60/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.019692908 seconds)
    (61/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.016055076 seconds)
    (62/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.015976779 seconds)
    (63/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.020232492 seconds)
    (64/72) benchmarking ("isnan", "Int64")...
    done (took 0.015950904 seconds)
    (65/72) benchmarking ("isless", "Int64")...
    done (took 0.019884848 seconds)
    (66/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.015948146 seconds)
    (67/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.020042367 seconds)
    (68/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.019569215 seconds)
    (69/72) benchmarking ("isequal", "UInt64")...
    done (took 0.019503703 seconds)
    (70/72) benchmarking ("isodd", "UInt64")...
    done (took 0.019692207 seconds)
    (71/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.023276933 seconds)
    (72/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.020976649 seconds)
  done (took 2.359569498 seconds)
  (15/25) benchmarking "sincos"...
    (1/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.020951513 seconds)
    (2/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.020285909 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.7854e-5 seconds)
    (4/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 8.284e-6 seconds)
    (5/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 6.595e-6 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 6.892e-6 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 6.418e-6 seconds)
    (8/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 6.9e-6 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 6.689e-6 seconds)
    (10/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 6.082e-6 seconds)
    (11/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 8.243e-6 seconds)
    (12/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 5.617e-6 seconds)
    (13/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.798e-6 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 5.549e-6 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.544e-6 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.469e-6 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.907e-6 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 5.052e-6 seconds)
    (19/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.28e-6 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 5.318e-6 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 5.651e-6 seconds)
    (22/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 5.244e-6 seconds)
    (23/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 5.391e-6 seconds)
    (24/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.552e-6 seconds)
    (25/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 5.484e-6 seconds)
    (26/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 4.881e-6 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.364e-6 seconds)
    (28/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 4.725e-6 seconds)
    (29/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 4.745e-6 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 8.295e-6 seconds)
    (31/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 5.345e-6 seconds)
    (32/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 4.679e-6 seconds)
    (33/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 5.423e-6 seconds)
    (34/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.208e-6 seconds)
    (35/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 5.047e-6 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 5.176e-6 seconds)
    (37/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 4.673e-6 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 4.699e-6 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 4.975e-6 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 4.879e-6 seconds)
    (41/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 4.902e-6 seconds)
    (42/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 4.895e-6 seconds)
    (43/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.7783e-5 seconds)
    (44/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 6.33e-6 seconds)
    (45/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 5.179e-6 seconds)
    (46/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.291e-6 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 4.852e-6 seconds)
    (48/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 4.911e-6 seconds)
    (49/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 4.82e-6 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 4.909e-6 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 5.194e-6 seconds)
    (52/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 4.732e-6 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 4.696e-6 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 4.69e-6 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 5.321e-6 seconds)
    (56/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 5.152e-6 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 4.698e-6 seconds)
    (58/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.15e-6 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 4.994e-6 seconds)
    (60/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 4.918e-6 seconds)
    (61/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.361e-6 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 4.656e-6 seconds)
  done (took 1.011973498 seconds)
  (16/25) benchmarking "tan"...
    (1/18) benchmarking ("zero", "Float64")...
    done (took 0.020075702 seconds)
    (2/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.017677416 seconds)
    (3/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.017716646 seconds)
    (4/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.019235548 seconds)
    (5/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.01760918 seconds)
    (6/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.6012e-5 seconds)
    (7/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 7.2747e-5 seconds)
    (8/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 8.376e-6 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 8.108e-6 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 6.943e-6 seconds)
    (11/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.017553251 seconds)
    (12/18) benchmarking ("zero", "Float32")...
    done (took 1.7162e-5 seconds)
    (13/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 6.978e-5 seconds)
    (14/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 5.3127e-5 seconds)
    (15/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 9.277e-6 seconds)
    (16/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 6.738e-6 seconds)
    (17/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 5.9948e-5 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 7.343e-6 seconds)
  done (took 1.078371185 seconds)
  (17/25) benchmarking "exp2"...
    (1/24) benchmarking ("zero", "Float64")...
    done (took 0.020257316 seconds)
    (2/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.019234003 seconds)
    (3/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.7442e-5 seconds)
    (4/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 9.577e-6 seconds)
    (5/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 7.559e-6 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 6.894e-6 seconds)
    (7/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 7.068e-6 seconds)
    (8/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.363e-6 seconds)
    (9/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 6.961e-6 seconds)
    (10/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.782e-6 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.5668e-5 seconds)
    (12/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 5.918e-6 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 5.602e-6 seconds)
    (14/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 5.435e-6 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 5.176e-6 seconds)
    (16/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 4.725e-6 seconds)
    (17/24) benchmarking ("one", "Float64")...
    done (took 4.799e-6 seconds)
    (18/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 5.298e-6 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.527e-6 seconds)
    (20/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 4.743e-6 seconds)
    (21/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 5.606e-6 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 4.515e-6 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 4.739e-6 seconds)
    (24/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 4.71e-6 seconds)
  done (took 1.008424106 seconds)
  (18/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.052706837 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.4085e-5 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 8.673e-6 seconds)
    (4/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 6.995e-6 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 6.197e-6 seconds)
    (6/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 6.456e-6 seconds)
    (7/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 6.528e-6 seconds)
    (8/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 6.535e-6 seconds)
    (9/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 6.513e-6 seconds)
    (10/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 6.302e-6 seconds)
    (11/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 8.037e-6 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.878e-6 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.936e-6 seconds)
    (14/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 6.11e-6 seconds)
    (15/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.644e-6 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.811e-6 seconds)
    (17/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.114e-5 seconds)
    (18/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.614e-6 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 5.166e-6 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.714e-6 seconds)
    (21/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.313e-6 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 5.889e-6 seconds)
    (23/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.553e-6 seconds)
    (24/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.778e-6 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.182e-6 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 5.786e-6 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.443e-6 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.69e-6 seconds)
  done (took 1.023956188 seconds)
  (19/25) benchmarking "atan"...
    (1/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.019728996 seconds)
    (2/30) benchmarking ("zero", "Float64")...
    done (took 0.019745912 seconds)
    (3/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.0147e-5 seconds)
    (4/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 9.701e-6 seconds)
    (5/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 7.136e-6 seconds)
    (6/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 7.128e-6 seconds)
    (7/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 6.646e-6 seconds)
    (8/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 6.641e-6 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.389e-6 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 6.106e-6 seconds)
    (11/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 9.849e-6 seconds)
    (12/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 5.941e-6 seconds)
    (13/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 5.705e-6 seconds)
    (14/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 5.34e-6 seconds)
    (15/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 5.837e-6 seconds)
    (16/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.267e-6 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 5.373e-6 seconds)
    (18/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.886e-6 seconds)
    (19/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.346e-6 seconds)
    (20/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.295e-6 seconds)
    (21/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 5.289e-6 seconds)
    (22/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.091e-6 seconds)
    (23/30) benchmarking ("zero", "Float32")...
    done (took 7.128e-6 seconds)
    (24/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 6.186e-6 seconds)
    (25/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.745e-6 seconds)
    (26/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.216e-6 seconds)
    (27/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 5.261e-6 seconds)
    (28/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 5.569e-6 seconds)
    (29/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 4.959e-6 seconds)
    (30/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 5.412e-6 seconds)
  done (took 1.007414653 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.020809002 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.018906464 seconds)
    (3/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.023827092 seconds)
    (4/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.649e-5 seconds)
    (5/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 8.077e-6 seconds)
    (6/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.019269435 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.3746e-5 seconds)
    (8/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.019552655 seconds)
    (9/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.022725664 seconds)
    (10/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.022990337 seconds)
    (11/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.024426789 seconds)
    (12/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.7845e-5 seconds)
    (13/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.019409479 seconds)
    (14/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.7806e-5 seconds)
    (15/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.1418e-5 seconds)
    (16/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.021513093 seconds)
    (17/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.4321e-5 seconds)
    (18/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.2318e-5 seconds)
    (19/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 9.977e-6 seconds)
    (20/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 9.193e-6 seconds)
    (21/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 7.91e-6 seconds)
    (22/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 7.547e-6 seconds)
    (23/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 6.476e-6 seconds)
    (24/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 9.166e-6 seconds)
    (25/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 6.439e-6 seconds)
    (26/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 6.659e-6 seconds)
    (27/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 5.887e-6 seconds)
    (28/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 5.518e-6 seconds)
    (29/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 5.737e-6 seconds)
    (30/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 6.429e-6 seconds)
    (31/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 6.888e-6 seconds)
    (32/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 5.502e-6 seconds)
    (33/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 6.213e-6 seconds)
    (34/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 4.944e-6 seconds)
    (35/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 5.662e-6 seconds)
    (36/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 5.093e-6 seconds)
    (37/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 5.357e-6 seconds)
    (38/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 5.964e-6 seconds)
    (39/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 5.883e-6 seconds)
    (40/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 5.404e-6 seconds)
    (41/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.020874541 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.5032e-5 seconds)
    (43/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 3.1682e-5 seconds)
    (44/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.231e-5 seconds)
    (45/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 7.805e-6 seconds)
    (46/55) benchmarking ("significand", "norm", "Float64")...
    done (took 7.672e-6 seconds)
    (47/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.02119661 seconds)
    (48/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.3565e-5 seconds)
    (49/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.2727e-5 seconds)
    (50/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 6.341e-6 seconds)
    (51/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.0534e-5 seconds)
    (52/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 8.354e-6 seconds)
    (53/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 5.904e-6 seconds)
    (54/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 7.268e-6 seconds)
    (55/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 5.106e-6 seconds)
  done (took 1.222442921 seconds)
  (21/25) benchmarking "asin"...
    (1/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.019308624 seconds)
    (2/20) benchmarking ("zero", "Float64")...
    done (took 1.528e-5 seconds)
    (3/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 6.79e-6 seconds)
    (4/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.018821725 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.2964e-5 seconds)
    (6/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.0408e-5 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 7.256e-6 seconds)
    (8/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 6.861e-6 seconds)
    (9/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 6.184e-6 seconds)
    (10/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 7.19e-6 seconds)
    (11/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.0027e-5 seconds)
    (12/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 6.376e-6 seconds)
    (13/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 5.86e-6 seconds)
    (14/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.017491788 seconds)
    (15/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.4806e-5 seconds)
    (16/20) benchmarking ("zero", "Float32")...
    done (took 1.277e-5 seconds)
    (17/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 7.833e-6 seconds)
    (18/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 7.6072e-5 seconds)
    (19/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 7.173e-6 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.83e-6 seconds)
  done (took 1.022805793 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.020274983 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.7083e-5 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.021196838 seconds)
    (4/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.6576e-5 seconds)
    (5/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 9.212e-6 seconds)
    (6/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 8.453e-6 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.921e-6 seconds)
    (8/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 7.067e-6 seconds)
    (9/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 6.481e-6 seconds)
    (10/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 5.938e-6 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.0949e-5 seconds)
    (12/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 6.104e-6 seconds)
    (13/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 6.074e-6 seconds)
    (14/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 6.197e-6 seconds)
    (15/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 6.065e-6 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.71e-6 seconds)
    (17/22) benchmarking ("zero", "Float32")...
    done (took 1.0197e-5 seconds)
    (18/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 5.334e-6 seconds)
    (19/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 5.439e-6 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.388e-6 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.048e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 5.574e-6 seconds)
  done (took 1.014169177 seconds)
  (23/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float32")...
    done (took 0.019900506 seconds)
    (2/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.01967316 seconds)
    (3/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.6889e-5 seconds)
    (4/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 7.816e-6 seconds)
    (5/8) benchmarking ("one", "Float64")...
    done (took 1.2877e-5 seconds)
    (6/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 7.176e-6 seconds)
    (7/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 7.178e-6 seconds)
    (8/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 6.978e-6 seconds)
  done (took 1.016319543 seconds)
  (24/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.020438937 seconds)
    (2/2) benchmarking "in"...
    done (took 0.020298604 seconds)
  done (took 1.024533406 seconds)
  (25/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.032204586 seconds)
    (2/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.021504272 seconds)
    (3/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.01967834 seconds)
    (4/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.023763597 seconds)
    (5/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.025045606 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.025078847 seconds)
    (7/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.020559307 seconds)
    (8/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.028484208 seconds)
    (9/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021631109 seconds)
    (10/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.02250042 seconds)
    (11/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.021466545 seconds)
    (12/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020983994 seconds)
    (13/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.024904075 seconds)
    (14/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.021193713 seconds)
    (15/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.022586572 seconds)
    (16/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.022611555 seconds)
    (17/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.021223377 seconds)
    (18/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.021508281 seconds)
    (19/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.023558453 seconds)
    (20/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021840869 seconds)
    (21/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.021510843 seconds)
    (22/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.022880137 seconds)
    (23/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.021416899 seconds)
    (24/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.020737622 seconds)
    (25/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.02744189 seconds)
    (26/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.021343835 seconds)
    (27/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.022035108 seconds)
    (28/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.020407952 seconds)
    (29/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.023032752 seconds)
    (30/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.02074736 seconds)
    (31/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021528464 seconds)
    (32/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.02659828 seconds)
    (33/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.021244952 seconds)
    (34/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.020465046 seconds)
    (35/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020804017 seconds)
    (36/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.022486145 seconds)
    (37/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.021743209 seconds)
    (38/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.021982216 seconds)
    (39/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.02240059 seconds)
    (40/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.020243607 seconds)
    (41/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.02001737 seconds)
    (42/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.021487119 seconds)
    (43/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.024027791 seconds)
    (44/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.020733838 seconds)
    (45/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.004566737 seconds)
    (46/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.024251761 seconds)
    (47/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.02057195 seconds)
    (48/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.019981193 seconds)
    (49/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.020449718 seconds)
    (50/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.02330831 seconds)
    (51/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.027108671 seconds)
    (52/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.022785955 seconds)
    (53/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.023116216 seconds)
    (54/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.021809169 seconds)
    (55/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.02186515 seconds)
    (56/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.020486838 seconds)
    (57/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.02153867 seconds)
    (58/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.022244086 seconds)
    (59/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.021005585 seconds)
    (60/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.022495375 seconds)
    (61/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.027226196 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.027600052 seconds)
    (63/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.021882689 seconds)
    (64/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.02108267 seconds)
    (65/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.021890209 seconds)
    (66/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.027205886 seconds)
    (67/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.02256061 seconds)
    (68/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.020618443 seconds)
    (69/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.020077634 seconds)
    (70/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.021826251 seconds)
    (71/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.024810051 seconds)
    (72/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.022520424 seconds)
    (73/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.0229522 seconds)
    (74/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023175763 seconds)
    (75/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.021275779 seconds)
    (76/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.022285341 seconds)
    (77/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.027578814 seconds)
    (78/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.020903894 seconds)
    (79/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.023191682 seconds)
    (80/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.021012039 seconds)
    (81/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.021040843 seconds)
    (82/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.02169437 seconds)
    (83/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.020753117 seconds)
    (84/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.024158419 seconds)
    (85/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.022024136 seconds)
    (86/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.027536161 seconds)
    (87/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.021468435 seconds)
    (88/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.023353436 seconds)
    (89/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.021194498 seconds)
    (90/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.021731624 seconds)
    (91/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.021541796 seconds)
    (92/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.027668178 seconds)
    (93/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.022605811 seconds)
    (94/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.023576597 seconds)
    (95/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.0225578 seconds)
    (96/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.022977729 seconds)
    (97/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.020301202 seconds)
    (98/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.019747312 seconds)
    (99/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.021901009 seconds)
    (100/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.023359874 seconds)
    (101/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.02136064 seconds)
    (102/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.022231166 seconds)
    (103/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.027652167 seconds)
    (104/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.021370275 seconds)
    (105/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.020739356 seconds)
    (106/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021830995 seconds)
    (107/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.028754043 seconds)
    (108/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.02312896 seconds)
    (109/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.003417306 seconds)
    (110/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.021927212 seconds)
    (111/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.022963256 seconds)
    (112/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.021841438 seconds)
    (113/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.021827713 seconds)
    (114/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.027498672 seconds)
    (115/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.021553023 seconds)
    (116/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.026506905 seconds)
    (117/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.023930595 seconds)
    (118/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.020862489 seconds)
    (119/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.020320522 seconds)
    (120/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.020788109 seconds)
    (121/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.003682177 seconds)
    (122/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.019674551 seconds)
    (123/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.02054999 seconds)
    (124/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.0208781 seconds)
    (125/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.022009624 seconds)
    (126/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.023328974 seconds)
    (127/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.021596603 seconds)
    (128/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.019774446 seconds)
    (129/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.021396318 seconds)
    (130/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.022038673 seconds)
    (131/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.020007685 seconds)
    (132/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.02077528 seconds)
    (133/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.021243002 seconds)
    (134/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.020893554 seconds)
    (135/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.0204659 seconds)
    (136/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.020445029 seconds)
    (137/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.02252405 seconds)
    (138/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.021449445 seconds)
    (139/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.02126952 seconds)
    (140/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.021048088 seconds)
    (141/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.023306159 seconds)
    (142/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.02329374 seconds)
    (143/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.020676834 seconds)
    (144/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.021173024 seconds)
    (145/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.022393639 seconds)
    (146/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.023794158 seconds)
    (147/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.021447701 seconds)
    (148/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.021925504 seconds)
    (149/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.022138355 seconds)
    (150/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.019484438 seconds)
    (151/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.02159843 seconds)
    (152/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.022208254 seconds)
    (153/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.020017889 seconds)
    (154/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.020879711 seconds)
    (155/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.021418049 seconds)
    (156/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.022258156 seconds)
    (157/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.022833558 seconds)
    (158/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.022030822 seconds)
    (159/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.020058163 seconds)
    (160/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.021781675 seconds)
    (161/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020447597 seconds)
    (162/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.019806944 seconds)
    (163/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.028135807 seconds)
    (164/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.020063838 seconds)
    (165/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.022391102 seconds)
    (166/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.022634784 seconds)
    (167/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.021470121 seconds)
    (168/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.003199212 seconds)
    (169/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.002815012 seconds)
    (170/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.021034362 seconds)
    (171/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.022877842 seconds)
    (172/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.021338081 seconds)
    (173/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.021424603 seconds)
    (174/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.020628636 seconds)
    (175/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.021274374 seconds)
    (176/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.021622793 seconds)
    (177/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.022812364 seconds)
    (178/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.020831467 seconds)
    (179/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.02151248 seconds)
    (180/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.023110936 seconds)
    (181/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.021573189 seconds)
    (182/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.019796521 seconds)
    (183/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.02045119 seconds)
    (184/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.022875551 seconds)
    (185/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.019514687 seconds)
    (186/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.021184817 seconds)
    (187/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.022234812 seconds)
    (188/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.022626652 seconds)
    (189/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.004244585 seconds)
    (190/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.022828694 seconds)
    (191/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.019131822 seconds)
    (192/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.021886277 seconds)
    (193/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.020691279 seconds)
    (194/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.022631081 seconds)
    (195/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.021079954 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.021112785 seconds)
    (197/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.019398765 seconds)
    (198/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.022452291 seconds)
    (199/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.026771015 seconds)
    (200/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.020785259 seconds)
    (201/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.022363137 seconds)
    (202/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.02203591 seconds)
    (203/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.020254691 seconds)
    (204/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021136714 seconds)
    (205/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.021304739 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.021828186 seconds)
    (207/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.021783237 seconds)
    (208/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.021492743 seconds)
    (209/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.020130168 seconds)
    (210/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.023627476 seconds)
    (211/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.019491947 seconds)
    (212/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.022591668 seconds)
    (213/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.020410804 seconds)
    (214/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021345627 seconds)
    (215/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.021128821 seconds)
    (216/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.020759722 seconds)
    (217/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.020437562 seconds)
    (218/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.02171372 seconds)
    (219/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.020792159 seconds)
    (220/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.028609671 seconds)
    (221/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.022041408 seconds)
    (222/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.020985568 seconds)
    (223/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.027069264 seconds)
    (224/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.026528703 seconds)
    (225/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.019932631 seconds)
    (226/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.020554851 seconds)
    (227/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.026917295 seconds)
    (228/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.02138816 seconds)
    (229/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.021378827 seconds)
    (230/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.021880753 seconds)
    (231/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.026623347 seconds)
    (232/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.022540166 seconds)
    (233/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.021136026 seconds)
    (234/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.021292117 seconds)
    (235/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.024072691 seconds)
    (236/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.023346914 seconds)
    (237/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.022366487 seconds)
    (238/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.019180425 seconds)
    (239/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.021475099 seconds)
    (240/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021631248 seconds)
    (241/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.02252835 seconds)
    (242/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.020148707 seconds)
    (243/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.01933648 seconds)
    (244/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.021887583 seconds)
    (245/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.022678549 seconds)
    (246/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.023842819 seconds)
    (247/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.021897314 seconds)
    (248/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.02220694 seconds)
    (249/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.02095859 seconds)
    (250/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.022145785 seconds)
    (251/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.021236392 seconds)
    (252/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.023404786 seconds)
    (253/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.022381434 seconds)
    (254/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.020362117 seconds)
    (255/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.022383657 seconds)
    (256/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.024272258 seconds)
    (257/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.022326379 seconds)
    (258/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.020982807 seconds)
    (259/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.022517311 seconds)
    (260/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.026649653 seconds)
    (261/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.020171433 seconds)
    (262/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.02087384 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.020934977 seconds)
    (264/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.021292446 seconds)
    (265/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.021856356 seconds)
    (266/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.022047131 seconds)
    (267/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.021789887 seconds)
    (268/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.022747107 seconds)
    (269/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.021575976 seconds)
    (270/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.02327709 seconds)
    (271/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.0206477 seconds)
    (272/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.027906289 seconds)
    (273/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.020710589 seconds)
    (274/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.020756397 seconds)
    (275/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.019428544 seconds)
    (276/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.027984077 seconds)
    (277/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.021112227 seconds)
    (278/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.019186727 seconds)
    (279/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.020550853 seconds)
    (280/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.022041226 seconds)
    (281/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.021644399 seconds)
    (282/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.022547078 seconds)
    (283/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.01969156 seconds)
    (284/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.021851156 seconds)
    (285/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.019520111 seconds)
    (286/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.022059566 seconds)
    (287/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.026396975 seconds)
    (288/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.023951412 seconds)
    (289/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.022258571 seconds)
    (290/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.021988708 seconds)
    (291/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020737337 seconds)
    (292/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.021052891 seconds)
    (293/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.020973114 seconds)
    (294/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.021143222 seconds)
    (295/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.02132588 seconds)
    (296/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.021595323 seconds)
    (297/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.021565107 seconds)
    (298/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.020336459 seconds)
    (299/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.021228114 seconds)
    (300/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.020921108 seconds)
    (301/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.025907002 seconds)
    (302/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.019567351 seconds)
    (303/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.021304752 seconds)
    (304/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.01936984 seconds)
    (305/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.022128035 seconds)
    (306/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.01996217 seconds)
    (307/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.022317898 seconds)
    (308/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.022085322 seconds)
    (309/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.021313133 seconds)
    (310/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.020602768 seconds)
    (311/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.022545452 seconds)
    (312/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.022380296 seconds)
    (313/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.021209317 seconds)
    (314/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.02093796 seconds)
    (315/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.020860812 seconds)
    (316/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.021424237 seconds)
    (317/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.020661013 seconds)
    (318/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.020553757 seconds)
    (319/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.019622379 seconds)
    (320/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.019384528 seconds)
    (321/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.021858153 seconds)
    (322/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.021700153 seconds)
    (323/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.021203757 seconds)
    (324/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.023250669 seconds)
    (325/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.022615442 seconds)
    (326/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.020381118 seconds)
    (327/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.022071069 seconds)
    (328/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.020837418 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.022171013 seconds)
    (330/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.022946729 seconds)
    (331/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.023422704 seconds)
    (332/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.023511872 seconds)
    (333/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.022464703 seconds)
    (334/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.021096751 seconds)
    (335/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.02151676 seconds)
    (336/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.021060571 seconds)
    (337/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.029274843 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.023064939 seconds)
    (339/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020442969 seconds)
    (340/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.021149794 seconds)
    (341/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.021672441 seconds)
    (342/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.021174082 seconds)
    (343/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.021494587 seconds)
    (344/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.019672255 seconds)
    (345/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.022400744 seconds)
    (346/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.00897694 seconds)
    (347/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.02058906 seconds)
    (348/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.021461632 seconds)
    (349/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.02144453 seconds)
    (350/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.023497391 seconds)
    (351/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.022254221 seconds)
    (352/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021046333 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.021914362 seconds)
    (354/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.020798162 seconds)
    (355/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.02004075 seconds)
    (356/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020140299 seconds)
    (357/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.020480078 seconds)
    (358/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.020574056 seconds)
    (359/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.020308175 seconds)
    (360/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.025482203 seconds)
    (361/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.020515517 seconds)
    (362/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.0203723 seconds)
    (363/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.026055172 seconds)
    (364/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.022792067 seconds)
    (365/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.02213712 seconds)
    (366/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.021858239 seconds)
    (367/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.020358755 seconds)
    (368/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.020481263 seconds)
    (369/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.02345928 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.026500268 seconds)
    (371/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.021328471 seconds)
    (372/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.02211251 seconds)
    (373/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.021503222 seconds)
    (374/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.022062654 seconds)
    (375/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020957645 seconds)
    (376/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.02283564 seconds)
    (377/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020380095 seconds)
    (378/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.022630615 seconds)
    (379/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.021684236 seconds)
    (380/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021005578 seconds)
    (381/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020343937 seconds)
    (382/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.019200585 seconds)
    (383/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.022227974 seconds)
    (384/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.021139295 seconds)
    (385/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.020995612 seconds)
    (386/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.021160299 seconds)
    (387/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.022100075 seconds)
    (388/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.019555497 seconds)
    (389/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.020494719 seconds)
    (390/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.021141323 seconds)
    (391/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.022078181 seconds)
    (392/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.020493046 seconds)
    (393/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.020923186 seconds)
    (394/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.021893569 seconds)
    (395/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.021032434 seconds)
    (396/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.020324822 seconds)
    (397/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.02064929 seconds)
    (398/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.021834421 seconds)
    (399/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.022485116 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.026583554 seconds)
    (401/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.02009645 seconds)
    (402/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.021926383 seconds)
    (403/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.020900756 seconds)
    (404/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.020011192 seconds)
    (405/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.020387925 seconds)
    (406/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.020334118 seconds)
    (407/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.022988938 seconds)
    (408/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.019141182 seconds)
    (409/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.0194956 seconds)
    (410/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.026741588 seconds)
    (411/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021741061 seconds)
    (412/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.02049532 seconds)
    (413/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.019470118 seconds)
    (414/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.021989136 seconds)
    (415/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.021238135 seconds)
    (416/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.020422172 seconds)
    (417/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.021715909 seconds)
    (418/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.022760335 seconds)
    (419/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.020178594 seconds)
    (420/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.021317365 seconds)
    (421/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.019324058 seconds)
    (422/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.022982753 seconds)
    (423/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.019579531 seconds)
    (424/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.022442645 seconds)
    (425/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.020462186 seconds)
    (426/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.020229068 seconds)
    (427/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.021337266 seconds)
    (428/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.021188186 seconds)
    (429/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.019322501 seconds)
    (430/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.019728102 seconds)
    (431/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.020582431 seconds)
    (432/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.022873239 seconds)
    (433/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.021655099 seconds)
    (434/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.021283558 seconds)
    (435/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.021429366 seconds)
    (436/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.020550485 seconds)
    (437/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.021829628 seconds)
    (438/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.019257227 seconds)
    (439/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.021748011 seconds)
    (440/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.022332733 seconds)
    (441/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.026230121 seconds)
    (442/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.022374129 seconds)
    (443/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.020373002 seconds)
    (444/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.020409619 seconds)
    (445/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.026232967 seconds)
    (446/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.020563577 seconds)
    (447/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.021631208 seconds)
    (448/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.022125216 seconds)
    (449/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.020538597 seconds)
    (450/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.020241965 seconds)
    (451/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.020580499 seconds)
    (452/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.00391779 seconds)
    (453/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.02294418 seconds)
    (454/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.020361531 seconds)
    (455/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.021502885 seconds)
    (456/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.020563478 seconds)
    (457/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.022562954 seconds)
    (458/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.022708049 seconds)
    (459/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.020487128 seconds)
    (460/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.019034454 seconds)
    (461/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.020743464 seconds)
    (462/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.020563188 seconds)
    (463/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.02066022 seconds)
    (464/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.022014995 seconds)
    (465/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.022110921 seconds)
    (466/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.02077826 seconds)
    (467/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021301919 seconds)
    (468/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.003056884 seconds)
    (469/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.019199052 seconds)
    (470/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.020598141 seconds)
    (471/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.020410887 seconds)
    (472/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.020613613 seconds)
    (473/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020752696 seconds)
    (474/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021503381 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021254981 seconds)
    (476/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.020390729 seconds)
    (477/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.019102611 seconds)
    (478/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.020273904 seconds)
    (479/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.003298169 seconds)
    (480/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.020822238 seconds)
    (481/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.021627884 seconds)
    (482/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.020933654 seconds)
    (483/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.020487985 seconds)
    (484/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.021286213 seconds)
    (485/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.020562276 seconds)
    (486/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.021525886 seconds)
    (487/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.021435493 seconds)
    (488/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.021235005 seconds)
    (489/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.026130068 seconds)
    (490/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.003515861 seconds)
    (491/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.019474613 seconds)
    (492/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.021822227 seconds)
    (493/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.02242776 seconds)
    (494/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.020685699 seconds)
    (495/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.02049923 seconds)
    (496/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.02015569 seconds)
    (497/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.020811837 seconds)
    (498/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.020342264 seconds)
    (499/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.02025857 seconds)
    (500/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.019745312 seconds)
    (501/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.020403045 seconds)
    (502/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.020863129 seconds)
    (503/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.02050542 seconds)
    (504/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.026432254 seconds)
    (505/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.021188832 seconds)
    (506/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.019324953 seconds)
    (507/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.02041506 seconds)
    (508/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.020051879 seconds)
    (509/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020454434 seconds)
    (510/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.021241174 seconds)
    (511/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.022842228 seconds)
    (512/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.020453257 seconds)
    (513/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.021314609 seconds)
    (514/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.02012452 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.019966476 seconds)
    (516/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.021989921 seconds)
    (517/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.026365746 seconds)
    (518/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.022743095 seconds)
    (519/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.022815844 seconds)
    (520/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.020999131 seconds)
    (521/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.01915837 seconds)
    (522/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.022641795 seconds)
    (523/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.020332466 seconds)
    (524/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.020247069 seconds)
    (525/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.021584121 seconds)
    (526/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.02768547 seconds)
    (527/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.019046059 seconds)
    (528/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.020282283 seconds)
    (529/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020723727 seconds)
    (530/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020619305 seconds)
    (531/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.020247716 seconds)
    (532/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.021739227 seconds)
    (533/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.020056542 seconds)
    (534/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.020758401 seconds)
    (535/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.020012346 seconds)
    (536/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.022134921 seconds)
    (537/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.020737811 seconds)
    (538/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.021212231 seconds)
    (539/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.019870663 seconds)
    (540/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.025395804 seconds)
    (541/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.021575625 seconds)
    (542/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.020677938 seconds)
    (543/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.020152473 seconds)
    (544/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.021714716 seconds)
    (545/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.020543517 seconds)
    (546/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.020511884 seconds)
    (547/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.021617796 seconds)
    (548/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.026235574 seconds)
    (549/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.02180957 seconds)
    (550/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.019714148 seconds)
    (551/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.022927016 seconds)
    (552/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.019159706 seconds)
    (553/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.021527476 seconds)
    (554/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.008711719 seconds)
    (555/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.022470856 seconds)
    (556/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.019770721 seconds)
    (557/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.021694998 seconds)
    (558/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.026012645 seconds)
    (559/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.021006941 seconds)
    (560/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.020119099 seconds)
    (561/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.021562076 seconds)
    (562/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.020677917 seconds)
    (563/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.020473024 seconds)
    (564/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.020201412 seconds)
    (565/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.02113647 seconds)
    (566/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.019977789 seconds)
    (567/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.021797271 seconds)
    (568/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.020166707 seconds)
    (569/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.019596938 seconds)
    (570/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.020444547 seconds)
    (571/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.026132226 seconds)
    (572/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.019992555 seconds)
    (573/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.01902574 seconds)
    (574/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.022101959 seconds)
    (575/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.023319817 seconds)
    (576/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.020388972 seconds)
    (577/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.02272935 seconds)
    (578/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.022950153 seconds)
    (579/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.019793568 seconds)
    (580/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021455346 seconds)
    (581/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.025760198 seconds)
    (582/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.025860804 seconds)
    (583/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.023420691 seconds)
    (584/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.021276462 seconds)
    (585/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.020146743 seconds)
    (586/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.019124621 seconds)
    (587/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.020422601 seconds)
    (588/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.022357383 seconds)
    (589/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.003780772 seconds)
    (590/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.021575439 seconds)
    (591/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.008867002 seconds)
    (592/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.019886596 seconds)
    (593/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.019563018 seconds)
    (594/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.022735675 seconds)
    (595/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.020956085 seconds)
    (596/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.003897522 seconds)
  done (took 13.715999219 seconds)
done (took 41.973135389 seconds)
(9/23) benchmarking "dates"...
  (1/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.019268871 seconds)
    (2/7) benchmarking "month"...
    done (took 0.019124255 seconds)
    (3/7) benchmarking "year"...
    done (took 0.019274329 seconds)
    (4/7) benchmarking "millisecond"...
    done (took 0.020470596 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.02106296 seconds)
    (6/7) benchmarking "minute"...
    done (took 0.021021913 seconds)
    (7/7) benchmarking "second"...
    done (took 0.021411045 seconds)
  done (took 1.140882801 seconds)
  (2/7) benchmarking "parse"...
    (1/9) benchmarking "DateTime"...
    done (took 0.022011208 seconds)
    (2/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.480686128 seconds)
    (3/9) benchmarking "Date"...
    done (took 0.021878943 seconds)
    (4/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.026541466 seconds)
    (5/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.279882638 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.189245307 seconds)
    (7/9) benchmarking ("Date", "DateFormat")...
    done (took 0.19580459 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.025523292 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.025635949 seconds)
  done (took 2.2668444 seconds)
  (3/7) benchmarking "query"...
    (1/18) benchmarking ("isleapyear", "Date")...
    done (took 0.021625947 seconds)
    (2/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.022114478 seconds)
    (3/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.022034021 seconds)
    (4/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.023496406 seconds)
    (5/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.039978956 seconds)
    (6/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.020375334 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.023275906 seconds)
    (8/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.020479847 seconds)
    (9/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.021589847 seconds)
    (10/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.027310168 seconds)
    (11/18) benchmarking ("dayofyear", "Date")...
    done (took 0.022416133 seconds)
    (12/18) benchmarking ("dayofweek", "Date")...
    done (took 0.020748709 seconds)
    (13/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.029599291 seconds)
    (14/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.025161695 seconds)
    (15/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.024389043 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.021804756 seconds)
    (17/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.021575775 seconds)
    (18/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.022616343 seconds)
  done (took 1.451340658 seconds)
  (4/7) benchmarking "construction"...
    (1/2) benchmarking "DateTime"...
    done (took 0.042785816 seconds)
    (2/2) benchmarking "Date"...
    done (took 0.022843266 seconds)
  done (took 1.076179073 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.020359764 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.021039979 seconds)
  done (took 1.054574135 seconds)
  (6/7) benchmarking "string"...
    (1/2) benchmarking "DateTime"...
    done (took 0.020270985 seconds)
    (2/2) benchmarking "Date"...
    done (took 0.157106026 seconds)
  done (took 1.192132632 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("DateTime", "Month")...
    done (took 0.036184957 seconds)
    (2/10) benchmarking ("DateTime", "Hour")...
    done (took 0.020886722 seconds)
    (3/10) benchmarking ("DateTime", "Minute")...
    done (took 0.021311991 seconds)
    (4/10) benchmarking ("DateTime", "Second")...
    done (took 0.021344918 seconds)
    (5/10) benchmarking ("Date", "Year")...
    done (took 0.031492765 seconds)
    (6/10) benchmarking ("DateTime", "Year")...
    done (took 0.034437936 seconds)
    (7/10) benchmarking ("Date", "Month")...
    done (took 0.033800932 seconds)
    (8/10) benchmarking ("Date", "Day")...
    done (took 0.02110686 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.021260513 seconds)
    (10/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.020726458 seconds)
  done (took 1.28024578 seconds)
done (took 10.481972234 seconds)
(10/23) benchmarking "alloc"...
  (1/4) benchmarking "structs"...
  done (took 0.062265783 seconds)
  (2/4) benchmarking "strings"...
  done (took 0.092592269 seconds)
  (3/4) benchmarking "grow_array"...
  done (took 0.031320535 seconds)
  (4/4) benchmarking "arrays"...
  done (took 0.053556509 seconds)
done (took 1.258999497 seconds)
(11/23) benchmarking "find"...
  (1/3) benchmarking "findnext"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.044517849 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.043109458 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.041673546 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.028993302 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.057662654 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 0.039820379 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.043941319 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 2.018e-5 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.043789012 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.057885032 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.4735e-5 seconds)
  done (took 1.421569647 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.042337407 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.041570541 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.04153677 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.030803864 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.052085833 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 0.029460231 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.044074486 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 2.0369e-5 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.04369541 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.054929694 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 3.2254e-5 seconds)
  done (took 1.424413666 seconds)
  (3/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.092941767 seconds)
    (2/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.089993203 seconds)
    (3/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.085349861 seconds)
    (4/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.093668087 seconds)
    (5/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.088171536 seconds)
    (6/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.027919966 seconds)
    (7/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.7522e-5 seconds)
    (8/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.083048448 seconds)
    (9/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082454853 seconds)
    (10/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.8791e-5 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.09082351 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.08783907 seconds)
    (13/41) benchmarking ("BitVector", "10-90")...
    done (took 0.020470954 seconds)
    (14/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.089196477 seconds)
    (15/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.5136e-5 seconds)
    (16/41) benchmarking ("BitVector", "50-50")...
    done (took 9.806e-6 seconds)
    (17/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.0581e-5 seconds)
    (18/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 7.056e-6 seconds)
    (19/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.089941277 seconds)
    (20/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.086471431 seconds)
    (21/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 3.5503e-5 seconds)
    (22/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.9381e-5 seconds)
    (23/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.2147e-5 seconds)
    (24/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.7815e-5 seconds)
    (25/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 9.586e-6 seconds)
    (26/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 8.246e-6 seconds)
    (27/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 8.562e-6 seconds)
    (28/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.5457e-5 seconds)
    (29/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.0967e-5 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.08660316 seconds)
    (31/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.086735278 seconds)
    (32/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.219e-5 seconds)
    (33/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.3464e-5 seconds)
    (34/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 9.574e-6 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 7.84e-6 seconds)
    (36/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 6.509e-6 seconds)
    (37/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.1845e-5 seconds)
    (38/41) benchmarking ("BitVector", "90-10")...
    done (took 1.0603e-5 seconds)
    (39/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.0028e-5 seconds)
    (40/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 8.607e-6 seconds)
    (41/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 9.971e-6 seconds)
  done (took 2.370865323 seconds)
done (took 6.227067784 seconds)
(12/23) benchmarking "io"...
  (1/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.024684053 seconds)
    (2/2) benchmarking "read"...
    done (took 0.035709738 seconds)
  done (took 1.141580495 seconds)
  (2/4) benchmarking "skipchars"...
  done (took 0.249147447 seconds)
  (3/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.895662232 seconds)
    (2/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.753901984 seconds)
    (3/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.90573334 seconds)
  done (took 4.714921257 seconds)
  (4/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.862274685 seconds)
    (2/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.106555998 seconds)
    (3/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.051167671 seconds)
    (4/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.043231023 seconds)
  done (took 2.125640154 seconds)
done (took 9.319461057 seconds)
(13/23) benchmarking "tuple"...
  (1/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.073931106 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.024148268 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.022122912 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.022664691 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.021381148 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.022289165 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.021951895 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.022996813 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.021193477 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.023625012 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.022983247 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.024423694 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.02256221 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.02442046 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.025143935 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.022354093 seconds)
  done (took 1.589435282 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.142021241 seconds)
    (2/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.232076355 seconds)
    (3/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.304136233 seconds)
    (4/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.038195959 seconds)
    (5/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.083460209 seconds)
    (6/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.02954556 seconds)
    (7/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.144426651 seconds)
    (8/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.022364927 seconds)
  done (took 4.079250422 seconds)
  (3/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.02553024 seconds)
    (2/24) benchmarking ("minimum", "(4,)")...
    done (took 0.024018277 seconds)
    (3/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.027737719 seconds)
    (4/24) benchmarking ("minimum", "(2,)")...
    done (took 0.022874197 seconds)
    (5/24) benchmarking ("minimum", "(16,)")...
    done (took 0.023990528 seconds)
    (6/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.024922558 seconds)
    (7/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.023043512 seconds)
    (8/24) benchmarking ("sum", "(16,)")...
    done (took 0.024269535 seconds)
    (9/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.021022877 seconds)
    (10/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.022532796 seconds)
    (11/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.023725345 seconds)
    (12/24) benchmarking ("minimum", "(8,)")...
    done (took 0.022923637 seconds)
    (13/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.024549962 seconds)
    (14/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.023630799 seconds)
    (15/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.02305482 seconds)
    (16/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.026356613 seconds)
    (17/24) benchmarking ("sum", "(2,)")...
    done (took 0.023164122 seconds)
    (18/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.022899681 seconds)
    (19/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.026898126 seconds)
    (20/24) benchmarking ("sum", "(4,)")...
    done (took 0.024052646 seconds)
    (21/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.026872599 seconds)
    (22/24) benchmarking ("sum", "(8,)")...
    done (took 0.024040022 seconds)
    (23/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.022883799 seconds)
    (24/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.028037007 seconds)
  done (took 1.653184932 seconds)
  (4/4) benchmarking "misc"...
    (1/2) benchmarking "11899"...
    done (took 0.022634129 seconds)
    (2/2) benchmarking "longtuple"...
    done (took 0.047384673 seconds)
  done (took 1.134476481 seconds)
done (took 9.486410577 seconds)
(14/23) benchmarking "string"...
  (1/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.025038348 seconds)
    (2/2) benchmarking "String"...
    done (took 0.024006267 seconds)
  done (took 1.110398884 seconds)
  (2/7) benchmarking "join"...
  done (took 0.286793949 seconds)
  (3/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "equal"...
    done (took 0.041717474 seconds)
    (2/4) benchmarking "different"...
    done (took 1.0465e-5 seconds)
    (3/4) benchmarking "identical"...
    done (took 0.02183689 seconds)
    (4/4) benchmarking "different length"...
    done (took 1.9088e-5 seconds)
  done (took 1.155703394 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.021158344 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "backtracking"...
    done (took 0.147529851 seconds)
    (2/7) benchmarking "target length 50000"...
    done (took 0.000213108 seconds)
    (3/7) benchmarking "target length 2"...
    done (took 4.52e-6 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.000902457 seconds)
    (5/7) benchmarking "target length 1000"...
    done (took 8.863e-6 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.617e-6 seconds)
    (7/7) benchmarking "no backtracking"...
    done (took 0.000577297 seconds)
  done (took 1.214832318 seconds)
  (6/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.023658294 seconds)
    (2/3) benchmarking "different"...
    done (took 9.539e-6 seconds)
    (3/3) benchmarking "different length"...
    done (took 4.19e-6 seconds)
  done (took 1.091490054 seconds)
  (7/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.038325602 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.025212953 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.0215798 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.021497612 seconds)
  done (took 1.139632494 seconds)
done (took 7.090623772 seconds)
(15/23) benchmarking "random"...
  (1/5) benchmarking "ranges"...
    (1/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.023095022 seconds)
    (2/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.021260068 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.031546315 seconds)
    (4/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.024594316 seconds)
    (5/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.02183366 seconds)
    (6/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.024138588 seconds)
    (7/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.023892851 seconds)
    (8/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.020963424 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.038789877 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.061790417 seconds)
    (11/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 3.1262e-5 seconds)
    (12/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.034134829 seconds)
    (13/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.0208598 seconds)
    (14/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.033697265 seconds)
    (15/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.022209377 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.024223472 seconds)
    (17/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.021124943 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.3984e-5 seconds)
    (19/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.020717879 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.0998e-5 seconds)
    (21/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.02393714 seconds)
    (22/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.021500416 seconds)
    (23/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.022536974 seconds)
    (24/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.2905e-5 seconds)
    (25/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.1337e-5 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.026310386 seconds)
    (27/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 1.9455e-5 seconds)
    (28/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.173e-5 seconds)
    (29/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.4016e-5 seconds)
    (30/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.164e-5 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.2484e-5 seconds)
    (32/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.02276376 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.4116e-5 seconds)
    (34/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.184e-5 seconds)
    (35/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.8005e-5 seconds)
    (36/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 8.863e-6 seconds)
    (37/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 7.579e-6 seconds)
    (38/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 6.48e-6 seconds)
    (39/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.02400898 seconds)
    (40/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.3834e-5 seconds)
    (41/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 1.5396e-5 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.024105613 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 4.2487e-5 seconds)
    (44/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.0646e-5 seconds)
    (45/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.5077e-5 seconds)
    (46/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 9.318e-6 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.0221e-5 seconds)
    (48/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 5.72e-6 seconds)
    (49/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 1.2834e-5 seconds)
    (50/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 8.083e-6 seconds)
    (51/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 1.1647e-5 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 6.671e-6 seconds)
    (53/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 1.1061e-5 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.021184021 seconds)
    (55/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.024081817 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 1.8471e-5 seconds)
    (57/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.2681e-5 seconds)
    (58/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.7048e-5 seconds)
    (59/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.1639e-5 seconds)
    (60/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.0918e-5 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.025515231 seconds)
    (62/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.021499233 seconds)
    (63/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 1.5178e-5 seconds)
    (64/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.8271e-5 seconds)
    (65/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.4535e-5 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 8.971e-6 seconds)
    (67/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.5667e-5 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.1081e-5 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 9.353e-6 seconds)
    (70/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.034883075 seconds)
    (71/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.035396264 seconds)
    (72/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.3737e-5 seconds)
  done (took 1.834048774 seconds)
  (2/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.039455178 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.044820192 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.02483732 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.024212775 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.024386987 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.019829412 seconds)
  done (took 1.216967703 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.022877033 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.021853954 seconds)
    (3/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.025290944 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.035086212 seconds)
    (5/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.022321138 seconds)
    (6/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.040640038 seconds)
    (7/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.021751811 seconds)
    (8/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.021548049 seconds)
    (9/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.025235683 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.026144462 seconds)
    (11/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.021278432 seconds)
    (12/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.021858678 seconds)
    (13/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021202684 seconds)
    (14/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.032375846 seconds)
    (15/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.025616212 seconds)
    (16/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.022534653 seconds)
    (17/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.02240766 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.024590821 seconds)
    (19/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.051467595 seconds)
    (20/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.024756661 seconds)
    (21/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.021859813 seconds)
    (22/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.024734069 seconds)
    (23/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.034281711 seconds)
    (24/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.024655077 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.022312596 seconds)
    (26/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.039618835 seconds)
    (27/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.021599974 seconds)
    (28/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.024390897 seconds)
    (29/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021045223 seconds)
    (30/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.02981613 seconds)
    (31/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.035846048 seconds)
    (32/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.024568605 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.025511298 seconds)
    (34/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.028753786 seconds)
    (35/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.023413937 seconds)
    (36/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.031506128 seconds)
    (37/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.037626575 seconds)
    (38/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.033688882 seconds)
    (39/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.048198758 seconds)
    (40/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.032168966 seconds)
    (41/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.021510896 seconds)
    (42/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.051197644 seconds)
    (43/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.064003283 seconds)
    (44/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.040227042 seconds)
    (45/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.034213006 seconds)
    (46/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.021052803 seconds)
    (47/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020712189 seconds)
    (48/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.021805601 seconds)
    (49/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.024966735 seconds)
    (50/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.022111502 seconds)
    (51/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020605892 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.02412931 seconds)
    (53/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.033108099 seconds)
    (54/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.027611369 seconds)
    (55/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.019931752 seconds)
    (56/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.030420468 seconds)
    (57/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.02324069 seconds)
    (58/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.030672072 seconds)
    (59/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.022783112 seconds)
    (60/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.021751612 seconds)
    (61/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.021408861 seconds)
    (62/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.022586296 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.022368066 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.022526847 seconds)
    (65/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.025249778 seconds)
    (66/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.029960368 seconds)
    (67/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.033756297 seconds)
    (68/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.023499357 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.023875561 seconds)
    (70/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.025701901 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.021638043 seconds)
    (72/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.032429356 seconds)
    (73/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.021272172 seconds)
    (74/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.024839857 seconds)
    (75/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.021724739 seconds)
    (76/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.023780803 seconds)
    (77/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.034771097 seconds)
    (78/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.021678027 seconds)
    (79/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.024885153 seconds)
    (80/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.022377966 seconds)
    (81/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.03396823 seconds)
    (82/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.041806647 seconds)
    (83/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.022002712 seconds)
    (84/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.024275531 seconds)
    (85/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.029020454 seconds)
    (86/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.019556878 seconds)
    (87/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.028351332 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.035293722 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.022109847 seconds)
    (90/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.025197501 seconds)
    (91/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.021421106 seconds)
    (92/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.020357992 seconds)
    (93/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.022496481 seconds)
    (94/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.049295152 seconds)
    (95/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.034566151 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.033863014 seconds)
    (97/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.030458493 seconds)
  done (took 3.730109739 seconds)
  (4/5) benchmarking "sequences"...
    (1/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.052244276 seconds)
    (2/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.035341731 seconds)
    (3/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.034721204 seconds)
    (4/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.032345482 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.020278119 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.021412611 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.021442204 seconds)
  done (took 1.262127455 seconds)
  (5/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.039760369 seconds)
    (2/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.054304456 seconds)
    (3/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.036065592 seconds)
    (4/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.052085258 seconds)
    (5/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.048180184 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.046241732 seconds)
    (7/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.050744943 seconds)
    (8/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.052387269 seconds)
    (9/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.037605988 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 3.0875e-5 seconds)
    (11/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.0414067 seconds)
    (12/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.039926734 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.037676626 seconds)
    (14/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.026031093 seconds)
    (15/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.002508697 seconds)
    (16/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.049451137 seconds)
    (17/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.035645674 seconds)
    (18/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.03987786 seconds)
    (19/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.7386e-5 seconds)
    (20/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.041764306 seconds)
    (21/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.043216018 seconds)
    (22/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.048908578 seconds)
    (23/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.025421097 seconds)
    (24/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.047665293 seconds)
    (25/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.02642018 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.040650352 seconds)
    (27/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.0614e-5 seconds)
    (28/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.031495526 seconds)
    (29/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.023040589 seconds)
    (30/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 4.0169e-5 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.00106151 seconds)
    (32/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.029044949 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.7433e-5 seconds)
    (34/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.736e-5 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.026089867 seconds)
    (36/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.035079336 seconds)
    (37/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.025851416 seconds)
    (38/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.7181e-5 seconds)
    (39/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.029976336 seconds)
    (40/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.025649107 seconds)
    (41/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.023370246 seconds)
    (42/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.035026377 seconds)
    (43/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 3.9053e-5 seconds)
    (44/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.1008e-5 seconds)
    (45/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 6.8823e-5 seconds)
    (46/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.036283971 seconds)
    (47/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.6016e-5 seconds)
    (48/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 7.9583e-5 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.005498008 seconds)
    (50/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 8.736e-6 seconds)
    (51/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.0119e-5 seconds)
    (52/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.0010568 seconds)
    (53/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 5.24e-5 seconds)
    (54/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 7.211e-6 seconds)
    (55/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.5644e-5 seconds)
    (56/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 7.574e-6 seconds)
    (57/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.4196e-5 seconds)
    (58/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.023900256 seconds)
    (59/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.9231e-5 seconds)
    (60/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.001052157 seconds)
    (61/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.2074e-5 seconds)
    (62/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 1.0591e-5 seconds)
    (63/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 1.2146e-5 seconds)
    (64/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.026027269 seconds)
    (65/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 8.0079e-5 seconds)
    (66/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 1.2934e-5 seconds)
  done (took 2.38827063 seconds)
done (took 11.469935098 seconds)
(16/23) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.038192359 seconds)
  (2/8) benchmarking "mandel"...
  done (took 0.10231798 seconds)
  (3/8) benchmarking "pisum"...
  done (took 0.059322229 seconds)
  (4/8) benchmarking "randmatmul"...
  done (took 0.125252261 seconds)
  (5/8) benchmarking "printfd"...
  done (took 0.142390673 seconds)
  (6/8) benchmarking "randmatstat"...
  done (took 0.366410494 seconds)
  (7/8) benchmarking "fib"...
  done (took 0.024185878 seconds)
  (8/8) benchmarking "parseint"...
  done (took 0.038979266 seconds)
done (took 1.956181046 seconds)
(17/23) benchmarking "broadcast"...
  (1/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "scal_tup")...
    done (took 0.046500404 seconds)
    (2/9) benchmarking (5, "scal_tup")...
    done (took 0.027253243 seconds)
    (3/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.033741977 seconds)
    (4/9) benchmarking (10, "tup_tup")...
    done (took 0.026038936 seconds)
    (5/9) benchmarking (5, "tup_tup")...
    done (took 0.021299722 seconds)
    (6/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.029910229 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.102751682 seconds)
    (8/9) benchmarking (3, "scal_tup")...
    done (took 0.024032439 seconds)
    (9/9) benchmarking (3, "tup_tup")...
    done (took 0.020969945 seconds)
  done (took 1.42503022 seconds)
  (2/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.197113627 seconds)
    (2/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.335964564 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.270210814 seconds)
  done (took 1.857791774 seconds)
  (3/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 5)...
    done (took 0.039087895 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 0.063120892 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 0.033095165 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 1.8279e-5 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 8.521e-6 seconds)
    (6/6) benchmarking ("tuple", 10)...
    done (took 0.04784872 seconds)
  done (took 1.254836669 seconds)
  (4/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.237440632 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.071371278 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.112495944 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.093277277 seconds)
  done (took 1.579780839 seconds)
  (5/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 2)...
    done (took 0.173464406 seconds)
    (2/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.149587727 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.286870872 seconds)
    (4/4) benchmarking ("(10000000,)", 1)...
    done (took 0.108843517 seconds)
  done (took 1.790056754 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.061080202 seconds)
done (took 9.030779491 seconds)
(18/23) benchmarking "parallel"...
done (took 1.070844312 seconds)
(19/23) benchmarking "linalg"...
  (1/4) benchmarking "blas"...
    (1/36) benchmarking "gemv"...
    done (took 0.026255239 seconds)
    (2/36) benchmarking "nrm2"...
    done (took 0.024175112 seconds)
    (3/36) benchmarking "trsv"...
    done (took 0.040764054 seconds)
    (4/36) benchmarking "gbmv"...
    done (took 0.037104859 seconds)
    (5/36) benchmarking "asum"...
    done (took 0.023262614 seconds)
    (6/36) benchmarking "trsm"...
    done (took 0.108488195 seconds)
    (7/36) benchmarking "symv!"...
    done (took 0.046380093 seconds)
    (8/36) benchmarking "symm!"...
    done (took 0.148221795 seconds)
    (9/36) benchmarking "trmv"...
    done (took 0.041466909 seconds)
    (10/36) benchmarking "dot"...
    done (took 0.023533118 seconds)
    (11/36) benchmarking "herk"...
    done (took 0.243460468 seconds)
    (12/36) benchmarking "dotu"...
    done (took 0.024838296 seconds)
    (13/36) benchmarking "scal"...
    done (took 0.029357572 seconds)
    (14/36) benchmarking "sbmv"...
    done (took 0.036560173 seconds)
    (15/36) benchmarking "dotc"...
    done (took 0.023652317 seconds)
    (16/36) benchmarking "gemm!"...
    done (took 0.122238507 seconds)
    (17/36) benchmarking "gemv!"...
    done (took 0.029366901 seconds)
    (18/36) benchmarking "symm"...
    done (took 0.123133245 seconds)
    (19/36) benchmarking "ger!"...
    done (took 0.043032163 seconds)
    (20/36) benchmarking "trsm!"...
    done (took 0.089889309 seconds)
    (21/36) benchmarking "gemm"...
    done (took 0.123305601 seconds)
    (22/36) benchmarking "trmm!"...
    done (took 0.082680788 seconds)
    (23/36) benchmarking "herk!"...
    done (took 0.228273951 seconds)
    (24/36) benchmarking "scal!"...
    done (took 0.03025435 seconds)
    (25/36) benchmarking "syrk"...
    done (took 0.091071488 seconds)
    (26/36) benchmarking "blascopy!"...
    done (took 0.024428192 seconds)
    (27/36) benchmarking "gbmv!"...
    done (took 0.03173752 seconds)
    (28/36) benchmarking "trmm"...
    done (took 0.087898079 seconds)
    (29/36) benchmarking "syrk!"...
    done (took 0.094009607 seconds)
    (30/36) benchmarking "her!"...
    done (took 0.047278855 seconds)
    (31/36) benchmarking "syr!"...
    done (took 0.044080276 seconds)
    (32/36) benchmarking "sbmv!"...
    done (took 0.029492806 seconds)
    (33/36) benchmarking "trsv!"...
    done (took 0.028660961 seconds)
    (34/36) benchmarking "trmv!"...
    done (took 0.028113265 seconds)
    (35/36) benchmarking "symv"...
    done (took 0.024912816 seconds)
    (36/36) benchmarking "axpy!"...
    done (took 0.037674094 seconds)
  done (took 3.379365856 seconds)
  (2/4) benchmarking "factorization"...
    (1/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 1.065589946 seconds)
    (2/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.258020783 seconds)
    (3/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.086866955 seconds)
    (4/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.155892012 seconds)
    (5/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.056804524 seconds)
    (6/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.038525196 seconds)
    (7/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.185220508 seconds)
    (8/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.157013691 seconds)
    (9/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.248708926 seconds)
    (10/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.004357044 seconds)
    (11/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.000212417 seconds)
    (12/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.163461376 seconds)
    (13/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.00362094 seconds)
    (14/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.125786895 seconds)
    (15/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.140570883 seconds)
    (16/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 1.302285135 seconds)
    (17/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.172750659 seconds)
    (18/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.049586954 seconds)
    (19/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.212279352 seconds)
    (20/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.041057062 seconds)
    (21/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 2.481513209 seconds)
    (22/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.022144359 seconds)
    (23/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 2.64235773 seconds)
    (24/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.0601e-5 seconds)
    (25/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.003655748 seconds)
    (26/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.8013e-5 seconds)
    (27/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.050692968 seconds)
    (28/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.28829097 seconds)
    (29/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.227539679 seconds)
    (30/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.000575295 seconds)
    (31/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 1.257061205 seconds)
    (32/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 1.32194227 seconds)
  done (took 13.839866203 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.554666866 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.184917123 seconds)
    (2/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.093897537 seconds)
    (3/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.021428541 seconds)
    (4/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.114071918 seconds)
    (5/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.147482046 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.021050598 seconds)
    (7/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.093131746 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.085629774 seconds)
    (9/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.043826573 seconds)
    (10/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.203459871 seconds)
    (11/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 3.5134e-5 seconds)
    (12/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.075418031 seconds)
    (13/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.247779962 seconds)
    (14/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.034610575 seconds)
    (15/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.106922346 seconds)
    (16/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.2145582 seconds)
    (17/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.057632578 seconds)
    (18/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 3.107329437 seconds)
    (19/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.051575886 seconds)
    (20/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.086982299 seconds)
    (21/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.126413535 seconds)
    (22/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.05249912 seconds)
    (23/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.078200471 seconds)
    (24/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.067880028 seconds)
    (25/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.061006504 seconds)
    (26/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.033516842 seconds)
    (27/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.063777389 seconds)
    (28/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 9.2524e-5 seconds)
    (29/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.780935094 seconds)
    (30/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.043784283 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.114119226 seconds)
    (32/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.186557329 seconds)
    (33/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.053441596 seconds)
    (34/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.11797862 seconds)
    (35/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.025790377 seconds)
    (36/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.083e-5 seconds)
    (37/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.065884379 seconds)
    (38/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.026121433 seconds)
    (39/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.041596524 seconds)
    (40/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.000640151 seconds)
    (41/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.0619e-5 seconds)
    (42/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.020561041 seconds)
    (43/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.019875084 seconds)
    (44/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 3.4231e-5 seconds)
    (45/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.030303237 seconds)
    (46/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.130923428 seconds)
    (47/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.102535165 seconds)
    (48/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 3.6397e-5 seconds)
    (49/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.093150575 seconds)
    (50/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 0.028533461 seconds)
    (51/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.020733493 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.012537762 seconds)
    (53/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.022864803 seconds)
    (54/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 4.0342e-5 seconds)
    (55/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.069151071 seconds)
    (56/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.79103004 seconds)
    (57/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.090128074 seconds)
    (58/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.027070619 seconds)
    (59/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.05017951 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.20286498 seconds)
    (61/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 3.498210113 seconds)
    (62/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.3853e-5 seconds)
    (63/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.014009514 seconds)
    (64/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 1.19272958 seconds)
    (65/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.061745822 seconds)
    (66/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.047685998 seconds)
    (67/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 4.117e-5 seconds)
    (68/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.0514687 seconds)
    (69/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.2153e-5 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.064662981 seconds)
    (71/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 9.836e-5 seconds)
    (72/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.020891129 seconds)
    (73/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.112484919 seconds)
    (74/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.05497633 seconds)
    (75/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 2.5337e-5 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.001654495 seconds)
    (77/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.107403274 seconds)
    (78/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.027159215 seconds)
    (79/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.001948716 seconds)
    (80/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.4017e-5 seconds)
    (81/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.7218e-5 seconds)
    (82/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.5406e-5 seconds)
    (83/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.116262858 seconds)
    (84/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.514838894 seconds)
    (85/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.001475086 seconds)
    (86/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.3266e-5 seconds)
    (87/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 6.4348e-5 seconds)
    (88/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.001200467 seconds)
    (89/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.053468971 seconds)
    (90/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.000127889 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.9414e-5 seconds)
    (92/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.020845014 seconds)
    (93/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.0614e-5 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.7446e-5 seconds)
    (95/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.107955396 seconds)
    (96/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 2.314e-5 seconds)
    (97/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.9799e-5 seconds)
    (98/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.000159241 seconds)
    (99/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.064e-5 seconds)
    (100/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.013834238 seconds)
    (101/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.000913929 seconds)
    (102/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.000633922 seconds)
    (103/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.176474996 seconds)
    (104/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 3.2613e-5 seconds)
    (105/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 8.211e-5 seconds)
    (106/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 3.391724057 seconds)
    (107/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 4.9388e-5 seconds)
    (108/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.00149017 seconds)
    (109/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.7219e-5 seconds)
    (110/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.5652e-5 seconds)
    (111/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 7.0404e-5 seconds)
    (112/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.005393232 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.001091196 seconds)
    (114/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 3.422874907 seconds)
    (115/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.008254422 seconds)
    (116/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 5.2196e-5 seconds)
    (117/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.007657828 seconds)
    (118/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.7997e-5 seconds)
  done (took 23.887778396 seconds)
done (took 42.723000213 seconds)
(20/23) benchmarking "collection"...
  (1/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.0921063 seconds)
    (2/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.059913937 seconds)
    (3/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.027577049 seconds)
    (4/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.049135036 seconds)
    (5/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.038328395 seconds)
    (6/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.149727955 seconds)
    (7/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.10092687 seconds)
    (8/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.037042844 seconds)
    (9/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.020002268 seconds)
    (10/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.033119861 seconds)
    (11/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.045126349 seconds)
    (12/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.036998849 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.020954194 seconds)
    (14/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.055214585 seconds)
    (15/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.04157341 seconds)
    (16/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.028957173 seconds)
    (17/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.033066078 seconds)
    (18/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.03136976 seconds)
    (19/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.02132035 seconds)
    (20/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.026205217 seconds)
    (21/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.026800172 seconds)
    (22/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.02346929 seconds)
    (23/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.020095974 seconds)
    (24/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.020633806 seconds)
    (25/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.032474988 seconds)
    (26/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.022999984 seconds)
    (27/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.027662356 seconds)
    (28/117) benchmarking ("Set", "Int", "union")...
    done (took 0.020566533 seconds)
    (29/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.026740511 seconds)
    (30/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.027435217 seconds)
    (31/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.030511945 seconds)
    (32/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.031412407 seconds)
    (33/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.019870399 seconds)
    (34/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.04112449 seconds)
    (35/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.052445273 seconds)
    (36/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.020846539 seconds)
    (37/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.02724605 seconds)
    (38/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.0503e-5 seconds)
    (39/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.033582107 seconds)
    (40/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.071338115 seconds)
    (41/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.8094e-5 seconds)
    (42/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.036751917 seconds)
    (43/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.01997122 seconds)
    (44/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.102185532 seconds)
    (45/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.072901821 seconds)
    (46/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.021484469 seconds)
    (47/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.075656695 seconds)
    (48/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.057415084 seconds)
    (49/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.039621147 seconds)
    (50/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.028609166 seconds)
    (51/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.039451123 seconds)
    (52/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.039647624 seconds)
    (53/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.026402002 seconds)
    (54/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.025977339 seconds)
    (55/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.02618504 seconds)
    (56/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.030357297 seconds)
    (57/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.024767166 seconds)
    (58/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.03009353 seconds)
    (59/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.021128527 seconds)
    (60/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.050964238 seconds)
    (61/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.021431 seconds)
    (62/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.058873681 seconds)
    (63/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.037330819 seconds)
    (64/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.026071264 seconds)
    (65/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.8749e-5 seconds)
    (66/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.020566396 seconds)
    (67/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.039528199 seconds)
    (68/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.028912966 seconds)
    (69/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.026187651 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.027749273 seconds)
    (71/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.027572462 seconds)
    (72/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.020224776 seconds)
    (73/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.026823562 seconds)
    (74/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.031600625 seconds)
    (75/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.041671372 seconds)
    (76/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.030407915 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.054129448 seconds)
    (78/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.026184401 seconds)
    (79/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.033228041 seconds)
    (80/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.027068004 seconds)
    (81/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.027066517 seconds)
    (82/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.039679584 seconds)
    (83/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.044291125 seconds)
    (84/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.032841507 seconds)
    (85/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.059238621 seconds)
    (86/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.021320276 seconds)
    (87/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.033466332 seconds)
    (88/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.030047609 seconds)
    (89/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.7873e-5 seconds)
    (90/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.037457933 seconds)
    (91/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.4223e-5 seconds)
    (92/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.058589789 seconds)
    (93/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.034947216 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.02929998 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.03227593 seconds)
    (96/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.029684454 seconds)
    (97/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.029573517 seconds)
    (98/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.038008318 seconds)
    (99/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.019609567 seconds)
    (100/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.03645283 seconds)
    (101/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.020817326 seconds)
    (102/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.031680145 seconds)
    (103/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.027243779 seconds)
    (104/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.035424708 seconds)
    (105/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.8617e-5 seconds)
    (106/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.029691444 seconds)
    (107/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.025059094 seconds)
    (108/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.7786e-5 seconds)
    (109/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 9.686e-6 seconds)
    (110/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.05020938 seconds)
    (111/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.027287095 seconds)
    (112/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.035212931 seconds)
    (113/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.031505543 seconds)
    (114/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.02129602 seconds)
    (115/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.028553842 seconds)
    (116/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.021002314 seconds)
    (117/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.036609694 seconds)
  done (took 5.061099634 seconds)
  (2/6) benchmarking "optimizations"...
    (1/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.033743722 seconds)
    (2/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.060214617 seconds)
    (3/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.133664104 seconds)
    (4/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.024039592 seconds)
    (5/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.093590074 seconds)
    (6/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.067123588 seconds)
    (7/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.045634292 seconds)
    (8/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.106064008 seconds)
    (9/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.040629088 seconds)
    (10/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.164245315 seconds)
    (11/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.041870399 seconds)
    (12/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.142985006 seconds)
    (13/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.14705689 seconds)
    (14/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.042217174 seconds)
    (15/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.026852487 seconds)
    (16/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.042269022 seconds)
    (17/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.021998264 seconds)
    (18/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.09102003 seconds)
    (19/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.027533809 seconds)
    (20/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.023927606 seconds)
    (21/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.028617652 seconds)
    (22/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.041766155 seconds)
    (23/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.022332168 seconds)
    (24/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.023095072 seconds)
    (25/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.021863957 seconds)
    (26/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.022705015 seconds)
    (27/27) benchmarking ("BitSet", "Int8")...
    done (took 0.044157897 seconds)
  done (took 2.702522647 seconds)
  (3/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.035678556 seconds)
    (2/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.034996715 seconds)
    (3/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.027287646 seconds)
    (4/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.040670896 seconds)
    (5/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.024088849 seconds)
    (6/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.034147869 seconds)
    (7/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.026595994 seconds)
    (8/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.031796017 seconds)
    (9/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.037651211 seconds)
    (10/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.024547346 seconds)
    (11/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.037546007 seconds)
    (12/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.022183304 seconds)
    (13/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.019408076 seconds)
    (14/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.063801433 seconds)
    (15/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.02756 seconds)
    (16/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.027429285 seconds)
    (17/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.028285677 seconds)
    (18/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.019619602 seconds)
    (19/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.023189021 seconds)
    (20/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.02199217 seconds)
    (21/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.02881235 seconds)
    (22/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.028904901 seconds)
    (23/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.054913175 seconds)
    (24/105) benchmarking ("Set", "Int", "first")...
    done (took 0.025960713 seconds)
    (25/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.4896e-5 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.021943907 seconds)
    (27/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.037477847 seconds)
    (28/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.033914879 seconds)
    (29/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.021501527 seconds)
    (30/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 3.9256e-5 seconds)
    (31/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.021537206 seconds)
    (32/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.019343089 seconds)
    (33/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.022443785 seconds)
    (34/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.02946863 seconds)
    (35/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.021644307 seconds)
    (36/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.024171379 seconds)
    (37/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.021514357 seconds)
    (38/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.6103e-5 seconds)
    (39/105) benchmarking ("Set", "Int", "length")...
    done (took 0.019269995 seconds)
    (40/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.021151275 seconds)
    (41/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.022737008 seconds)
    (42/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.038551258 seconds)
    (43/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.020970522 seconds)
    (44/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.028643315 seconds)
    (45/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.035774169 seconds)
    (46/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 3.1726e-5 seconds)
    (47/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.035380435 seconds)
    (48/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.033105126 seconds)
    (49/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.02415564 seconds)
    (50/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.041967693 seconds)
    (51/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.030557542 seconds)
    (52/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.02101177 seconds)
    (53/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 5.8192e-5 seconds)
    (54/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.413e-5 seconds)
    (55/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.023519083 seconds)
    (56/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.020969954 seconds)
    (57/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 5.5923e-5 seconds)
    (58/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.033723854 seconds)
    (59/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.024823337 seconds)
    (60/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.020212837 seconds)
    (61/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 5.3086e-5 seconds)
    (62/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.037663729 seconds)
    (63/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.022031647 seconds)
    (64/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.039516684 seconds)
    (65/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.03347398 seconds)
    (66/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.022242698 seconds)
    (67/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 4.7649e-5 seconds)
    (68/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.000136415 seconds)
    (69/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.027747698 seconds)
    (70/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.8184e-5 seconds)
    (71/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.1193e-5 seconds)
    (72/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 3.7435e-5 seconds)
    (73/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.038451828 seconds)
    (74/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.026829436 seconds)
    (75/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.039334087 seconds)
    (76/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.023915224 seconds)
    (77/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.025207075 seconds)
    (78/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.027096728 seconds)
    (79/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.612e-5 seconds)
    (80/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.035797794 seconds)
    (81/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.028911266 seconds)
    (82/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.8888e-5 seconds)
    (83/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.021179685 seconds)
    (84/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.7498e-5 seconds)
    (85/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 3.1656e-5 seconds)
    (86/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.027510734 seconds)
    (87/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.024365209 seconds)
    (88/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.033462064 seconds)
    (89/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.9202e-5 seconds)
    (90/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.6142e-5 seconds)
    (91/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.041224998 seconds)
    (92/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 4.3636e-5 seconds)
    (93/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.025714485 seconds)
    (94/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.3727e-5 seconds)
    (95/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.021828874 seconds)
    (96/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 4.3488e-5 seconds)
    (97/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.4058e-5 seconds)
    (98/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.038080659 seconds)
    (99/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 4.318e-5 seconds)
    (100/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.3706e-5 seconds)
    (101/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 1.1452e-5 seconds)
    (102/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.038813231 seconds)
    (103/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.8065e-5 seconds)
    (104/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.9625e-5 seconds)
    (105/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.1629e-5 seconds)
  done (took 3.345326333 seconds)
  (4/6) benchmarking "deletion"...
    (1/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.035176703 seconds)
    (2/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.033493034 seconds)
    (3/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.057660793 seconds)
    (4/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.037804654 seconds)
    (5/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.048675277 seconds)
    (6/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.037908852 seconds)
    (7/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.021533729 seconds)
    (8/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.032513902 seconds)
    (9/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.021866675 seconds)
    (10/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.025909683 seconds)
    (11/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.02183092 seconds)
    (12/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.021992428 seconds)
    (13/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.044660975 seconds)
    (14/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.039365592 seconds)
    (15/28) benchmarking ("Set", "String", "filter")...
    done (took 0.045122897 seconds)
    (16/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.035199984 seconds)
    (17/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.032424696 seconds)
    (18/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.050606845 seconds)
    (19/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.022100474 seconds)
    (20/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.044682096 seconds)
    (21/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.046781764 seconds)
    (22/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.033618618 seconds)
    (23/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.040240123 seconds)
    (24/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.037007056 seconds)
    (25/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.031580772 seconds)
    (26/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.048759308 seconds)
    (27/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.037848307 seconds)
    (28/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.041243901 seconds)
  done (took 2.156279405 seconds)
  (5/6) benchmarking "iteration"...
    (1/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.028588325 seconds)
    (2/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.028350222 seconds)
    (3/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.024679202 seconds)
    (4/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.028817542 seconds)
    (5/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.030686907 seconds)
    (6/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.03138278 seconds)
    (7/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.03141004 seconds)
    (8/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.021892996 seconds)
    (9/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.026793589 seconds)
    (10/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.022117775 seconds)
    (11/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.02992603 seconds)
    (12/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.028617528 seconds)
    (13/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.026590963 seconds)
    (14/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.023772537 seconds)
    (15/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.032350323 seconds)
    (16/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.026740283 seconds)
    (17/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.029863497 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.02280689 seconds)
    (19/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.026645782 seconds)
    (20/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.028085797 seconds)
    (21/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.023341144 seconds)
    (22/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.0277441 seconds)
    (23/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.030572378 seconds)
    (24/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.030073813 seconds)
    (25/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.029945965 seconds)
    (26/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.026500787 seconds)
  done (took 1.850240171 seconds)
  (6/6) benchmarking "initialization"...
    (1/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.024935075 seconds)
    (2/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.028676229 seconds)
    (3/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.031168911 seconds)
    (4/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.032050728 seconds)
    (5/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.038027959 seconds)
    (6/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.066742797 seconds)
    (7/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.042214877 seconds)
    (8/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.033300306 seconds)
    (9/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.02116538 seconds)
    (10/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.031246701 seconds)
    (11/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.005830235 seconds)
    (12/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.022092002 seconds)
    (13/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.035680526 seconds)
    (14/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.024776681 seconds)
    (15/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.022437498 seconds)
    (16/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.004989631 seconds)
    (17/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.021310961 seconds)
    (18/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.012045012 seconds)
    (19/42) benchmarking ("Set", "String", "loop")...
    done (took 0.02774665 seconds)
    (20/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.021658593 seconds)
    (21/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.022491214 seconds)
    (22/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.011910535 seconds)
    (23/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.005535399 seconds)
    (24/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.013060534 seconds)
    (25/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.012393775 seconds)
    (26/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.6955e-5 seconds)
    (27/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.029353264 seconds)
    (28/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.027186199 seconds)
    (29/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.0271767 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.008981674 seconds)
    (31/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.003345965 seconds)
    (32/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.011868123 seconds)
    (33/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.022068759 seconds)
    (34/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.011675813 seconds)
    (35/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.005500762 seconds)
    (36/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.010131389 seconds)
    (37/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.8022e-5 seconds)
    (38/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.003523902 seconds)
    (39/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.011553192 seconds)
    (40/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.008538433 seconds)
    (41/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.008405702 seconds)
    (42/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.8557e-5 seconds)
  done (took 1.935178577 seconds)
done (took 18.157831707 seconds)
(21/23) benchmarking "simd"...
  (1/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 0.061609324 seconds)
  (2/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 0.172373429 seconds)
  (3/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 0.048065687 seconds)
  (4/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 0.05777713 seconds)
  (5/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 0.07435062 seconds)
  (6/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 0.075629147 seconds)
  (7/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 0.031821196 seconds)
  (8/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 0.059762109 seconds)
  (9/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 0.042194619 seconds)
  (10/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 0.082212716 seconds)
  (11/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 0.048493232 seconds)
  (12/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 0.111487193 seconds)
  (13/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 0.043023913 seconds)
  (14/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 0.070508979 seconds)
  (15/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 4.6525e-5 seconds)
  (16/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 0.056638015 seconds)
  (17/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 7.0909e-5 seconds)
  (18/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.076073695 seconds)
  (19/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 0.028784088 seconds)
  (20/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 0.082172309 seconds)
  (21/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 0.029280059 seconds)
  (22/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 3.9542e-5 seconds)
  (23/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 0.080480737 seconds)
  (24/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 0.096495672 seconds)
  (25/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 0.067544705 seconds)
  (26/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 0.048839053 seconds)
  (27/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 0.03048912 seconds)
  (28/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 0.071184866 seconds)
  (29/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 0.069296674 seconds)
  (30/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 0.089255341 seconds)
  (31/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 0.050307398 seconds)
  (32/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 2.915e-5 seconds)
  (33/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 0.064038374 seconds)
  (34/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 0.069131472 seconds)
  (35/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 0.067145552 seconds)
  (36/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 0.040924061 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 0.07900187 seconds)
  (38/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 2.5959e-5 seconds)
  (39/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 0.071693582 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 0.055227101 seconds)
  (41/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 0.05373456 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 0.075529732 seconds)
  (43/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 0.04498951 seconds)
  (44/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 0.088114827 seconds)
  (45/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 0.078289244 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 0.061028164 seconds)
  (47/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 3.1428e-5 seconds)
  (48/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 0.094715953 seconds)
  (49/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 0.062093431 seconds)
  (50/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 2.9811e-5 seconds)
  (51/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 0.06554581 seconds)
  (52/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 0.049777882 seconds)
  (53/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 0.06663527 seconds)
  (54/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 0.059439762 seconds)
  (55/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 0.058517125 seconds)
  (56/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 0.082244662 seconds)
  (57/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 0.059840252 seconds)
  (58/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 3.1555e-5 seconds)
  (59/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 0.089892725 seconds)
  (60/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 0.033111009 seconds)
  (61/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.075183943 seconds)
  (62/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.032627176 seconds)
  (63/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 4.8863e-5 seconds)
  (64/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 0.049076466 seconds)
  (65/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 0.06117093 seconds)
  (66/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 0.032796527 seconds)
  (67/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 0.047477356 seconds)
  (68/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 3.7757e-5 seconds)
  (69/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 0.077409041 seconds)
  (70/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 3.6953e-5 seconds)
  (71/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 2.2427e-5 seconds)
  (72/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 0.085284086 seconds)
  (73/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 2.6735e-5 seconds)
  (74/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 0.045323375 seconds)
  (75/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 0.06427723 seconds)
  (76/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 0.048098629 seconds)
  (77/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 0.090034343 seconds)
  (78/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 3.2001e-5 seconds)
  (79/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 2.7507e-5 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 0.059233888 seconds)
  (81/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 0.065271834 seconds)
  (82/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 0.068290621 seconds)
  (83/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 0.040922809 seconds)
  (84/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 4.9034e-5 seconds)
  (85/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 2.2789e-5 seconds)
  (86/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 0.07123745 seconds)
  (87/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 3.9571e-5 seconds)
  (88/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 0.05496433 seconds)
  (89/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 2.9425e-5 seconds)
  (90/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 2.5482e-5 seconds)
  (91/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 0.044431524 seconds)
  (92/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 0.05776884 seconds)
  (93/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 0.058123433 seconds)
  (94/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 0.067583301 seconds)
  (95/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 0.062378795 seconds)
  (96/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 0.068030453 seconds)
  (97/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 3.3351e-5 seconds)
  (98/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 0.032708476 seconds)
  (99/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 0.051553842 seconds)
  (100/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 0.067263035 seconds)
  (101/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 0.075830614 seconds)
  (102/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 0.074404695 seconds)
  (103/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 3.7883e-5 seconds)
  (104/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 0.059922559 seconds)
  (105/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 2.4091e-5 seconds)
  (106/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 0.063882283 seconds)
  (107/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 0.068547136 seconds)
  (108/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 4.0826e-5 seconds)
  (109/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 0.069813663 seconds)
  (110/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 5.7031e-5 seconds)
  (111/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 2.7305e-5 seconds)
  (112/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.9634e-5 seconds)
  (113/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 0.032858389 seconds)
  (114/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 3.9867e-5 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 1.8603e-5 seconds)
  (116/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 0.068463315 seconds)
  (117/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 0.065718977 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 0.051633631 seconds)
  (119/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 0.058099414 seconds)
  (120/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.852e-5 seconds)
  (121/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 0.029431257 seconds)
  (122/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 3.1772e-5 seconds)
  (123/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 0.030691083 seconds)
  (124/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 0.059835968 seconds)
  (125/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 3.8984e-5 seconds)
  (126/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 0.072139594 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.033956151 seconds)
  (128/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 3.2732e-5 seconds)
  (129/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 4.947e-5 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 2.914e-5 seconds)
  (131/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 0.067909198 seconds)
  (132/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 3.0685e-5 seconds)
  (133/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 0.07020797 seconds)
  (134/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 0.032848363 seconds)
  (135/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 2.8337e-5 seconds)
  (136/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 0.064043296 seconds)
  (137/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.067915734 seconds)
  (138/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 0.055019226 seconds)
  (139/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 0.063064263 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 2.8689e-5 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 0.079682641 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 0.078443868 seconds)
  (143/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 0.052039311 seconds)
  (144/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 0.071326716 seconds)
  (145/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.1466e-5 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 3.4207e-5 seconds)
  (147/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 0.032983727 seconds)
  (148/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 0.068893395 seconds)
  (149/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 0.057820262 seconds)
  (150/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 3.5079e-5 seconds)
  (151/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 1.8706e-5 seconds)
  (152/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 1.8249e-5 seconds)
  (153/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 2.2661e-5 seconds)
  (154/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 0.063246107 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 3.6621e-5 seconds)
  (156/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 0.053614989 seconds)
  (157/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 3.4064e-5 seconds)
  (158/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 1.7747e-5 seconds)
  (159/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 1.7795e-5 seconds)
  (160/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 0.070337669 seconds)
  (161/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 3.689e-5 seconds)
  (162/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 4.5925e-5 seconds)
  (163/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 2.0678e-5 seconds)
  (164/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 2.5843e-5 seconds)
  (165/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 0.068792913 seconds)
  (166/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 3.6906e-5 seconds)
  (167/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 1.8878e-5 seconds)
  (168/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 0.0523321 seconds)
  (169/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 2.6299e-5 seconds)
  (170/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 0.038049426 seconds)
  (171/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 0.000101282 seconds)
  (172/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 2.9678e-5 seconds)
  (173/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.8557e-5 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 0.059466192 seconds)
  (175/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 0.051659869 seconds)
  (176/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 0.06184603 seconds)
  (177/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 0.075904482 seconds)
  (178/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 4.377e-5 seconds)
  (179/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 0.058642971 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 0.064600527 seconds)
  (181/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 4.977e-5 seconds)
  (182/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 3.064e-5 seconds)
  (183/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 2.1035e-5 seconds)
  (184/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.2035e-5 seconds)
  (185/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 2.4077e-5 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.1506e-5 seconds)
  (187/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 1.7326e-5 seconds)
  (188/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 1.7798e-5 seconds)
  (189/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 2.5703e-5 seconds)
  (190/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 1.7566e-5 seconds)
  (191/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 0.052380125 seconds)
  (192/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 4.3008e-5 seconds)
  (193/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 1.9897e-5 seconds)
  (194/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 2.3224e-5 seconds)
  (195/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 0.052561182 seconds)
  (196/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 0.04184251 seconds)
  (197/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 3.3944e-5 seconds)
  (198/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 3.2658e-5 seconds)
  (199/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 0.030139764 seconds)
  (200/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 0.058534352 seconds)
  (201/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 3.7681e-5 seconds)
  (202/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 3.1486e-5 seconds)
  (203/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 0.038248145 seconds)
  (204/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 3.0134e-5 seconds)
  (205/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 0.065222211 seconds)
  (206/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 3.5324e-5 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 2.4781e-5 seconds)
  (208/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 0.040896309 seconds)
  (209/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 2.8571e-5 seconds)
  (210/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 2.7397e-5 seconds)
  (211/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 0.029603022 seconds)
  (212/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 3.3714e-5 seconds)
  (213/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 2.3355e-5 seconds)
  (214/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 0.036474391 seconds)
  (215/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 4.2951e-5 seconds)
  (216/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 0.033309031 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 0.060244005 seconds)
  (218/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 0.029006217 seconds)
  (219/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 4.4496e-5 seconds)
  (220/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 2.2654e-5 seconds)
  (221/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 1.8739e-5 seconds)
  (222/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 0.039278448 seconds)
  (223/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.1063e-5 seconds)
  (224/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 1.9368e-5 seconds)
  (225/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 0.065250386 seconds)
  (226/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 3.5162e-5 seconds)
  (227/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 2.7551e-5 seconds)
  (228/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 0.069976905 seconds)
  (229/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 2.8744e-5 seconds)
  (230/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 2.0241e-5 seconds)
  (231/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 0.060753524 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 3.6011e-5 seconds)
  (233/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 2.4417e-5 seconds)
  (234/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 2.2246e-5 seconds)
  (235/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.032684592 seconds)
  (236/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 4.1617e-5 seconds)
  (237/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 0.057138727 seconds)
  (238/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 2.4934e-5 seconds)
  (239/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 2.357e-5 seconds)
  (240/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 1.9517e-5 seconds)
  (241/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 2.4766e-5 seconds)
  (242/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 0.036028016 seconds)
  (243/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 4.2177e-5 seconds)
  (244/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 2.0979e-5 seconds)
  (245/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 0.060225315 seconds)
  (246/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 4.3345e-5 seconds)
  (247/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 0.027772936 seconds)
  (248/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 0.07357034 seconds)
  (249/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 3.3612e-5 seconds)
  (250/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 2.2025e-5 seconds)
  (251/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 1.9199e-5 seconds)
  (252/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 2.2304e-5 seconds)
  (253/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 1.8979e-5 seconds)
  (254/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 1.9816e-5 seconds)
  (255/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 0.061631049 seconds)
  (256/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 3.2919e-5 seconds)
  (257/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 2.1175e-5 seconds)
  (258/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 2.6605e-5 seconds)
  (259/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 0.04581563 seconds)
  (260/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 3.7983e-5 seconds)
  (261/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 2.2654e-5 seconds)
  (262/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 6.0457e-5 seconds)
  (263/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 2.6273e-5 seconds)
  (264/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 1.6459e-5 seconds)
  (265/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 2.3038e-5 seconds)
  (266/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 2.2174e-5 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 2.2475e-5 seconds)
  (268/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 1.9235e-5 seconds)
  (269/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.4953e-5 seconds)
  (270/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 2.5724e-5 seconds)
  (271/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 0.028980628 seconds)
  (272/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 0.067096716 seconds)
  (273/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 3.9463e-5 seconds)
  (274/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 3.13e-5 seconds)
  (275/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 0.040733625 seconds)
  (276/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 3.991e-5 seconds)
  (277/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 2.1608e-5 seconds)
  (278/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 1.7644e-5 seconds)
  (279/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.03336814 seconds)
  (280/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 0.024985197 seconds)
  (281/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 4.8959e-5 seconds)
  (282/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 2.5057e-5 seconds)
  (283/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 0.051403073 seconds)
  (284/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 2.466e-5 seconds)
  (285/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.0443e-5 seconds)
  (286/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 2.2928e-5 seconds)
  (287/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 0.036862779 seconds)
  (288/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 4.0818e-5 seconds)
  (289/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 2.3179e-5 seconds)
  (290/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 2.0359e-5 seconds)
  (291/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 2.0204e-5 seconds)
  (292/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 1.872e-5 seconds)
  (293/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 2.1247e-5 seconds)
  (294/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 1.9791e-5 seconds)
  (295/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 0.075388373 seconds)
  (296/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 0.03237789 seconds)
  (297/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 0.037923813 seconds)
  (298/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 0.049047442 seconds)
  (299/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 3.4047e-5 seconds)
  (300/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 2.1717e-5 seconds)
  (301/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 0.072046488 seconds)
  (302/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.6697e-5 seconds)
  (303/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 4.19e-5 seconds)
  (304/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 2.2235e-5 seconds)
  (305/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 2.1043e-5 seconds)
  (306/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.7545e-5 seconds)
  (307/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.7432e-5 seconds)
  (308/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 1.8136e-5 seconds)
  (309/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 0.055426526 seconds)
  (310/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 4.5635e-5 seconds)
  (311/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 3.3766e-5 seconds)
  (312/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 1.7275e-5 seconds)
  (313/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 1.9553e-5 seconds)
  (314/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 2.2989e-5 seconds)
  (315/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 2.5525e-5 seconds)
  (316/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 1.9008e-5 seconds)
  (317/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 0.079704785 seconds)
  (318/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 0.0656948 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 2.2998e-5 seconds)
  (320/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 0.046039527 seconds)
  (321/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 3.0232e-5 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 2.7946e-5 seconds)
  (323/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 3.0353e-5 seconds)
  (324/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 2.031e-5 seconds)
  (325/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 1.9037e-5 seconds)
  (326/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.4475e-5 seconds)
  (327/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 1.9851e-5 seconds)
  (328/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.033288616 seconds)
  (329/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 6.3289e-5 seconds)
  (330/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 3.0699e-5 seconds)
  (331/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 2.1867e-5 seconds)
  (332/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 2.422e-5 seconds)
  (333/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 2.3268e-5 seconds)
  (334/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 2.5879e-5 seconds)
  (335/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 1.6038e-5 seconds)
  (336/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 1.9301e-5 seconds)
  (337/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 0.047969365 seconds)
  (338/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 3.52e-5 seconds)
  (339/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 1.7859e-5 seconds)
  (340/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 0.056685877 seconds)
  (341/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 1.8636e-5 seconds)
  (342/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 0.063901914 seconds)
  (343/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 3.0361e-5 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 2.3361e-5 seconds)
  (345/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 2.0999e-5 seconds)
  (346/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 2.2143e-5 seconds)
  (347/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 0.05981461 seconds)
  (348/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 3.0174e-5 seconds)
  (349/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 3.124e-5 seconds)
  (350/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 2.3191e-5 seconds)
  (351/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 1.3082e-5 seconds)
  (352/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 1.6698e-5 seconds)
  (353/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 1.2215e-5 seconds)
  (354/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 1.9516e-5 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 2.3107e-5 seconds)
  (356/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 2.2689e-5 seconds)
  (357/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 2.1553e-5 seconds)
  (358/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 1.9123e-5 seconds)
  (359/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.011248662 seconds)
  (360/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 3.0964e-5 seconds)
  (361/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 2.7854e-5 seconds)
  (362/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 4.1884e-5 seconds)
  (363/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 1.9468e-5 seconds)
  (364/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 2.2648e-5 seconds)
  (365/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.2224e-5 seconds)
  (366/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 3.0304e-5 seconds)
  (367/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 2.005e-5 seconds)
  (368/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 2.6717e-5 seconds)
  (369/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 2.4307e-5 seconds)
  (370/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.3641e-5 seconds)
  (371/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 1.8839e-5 seconds)
  (372/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 1.5456e-5 seconds)
  (373/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 1.8235e-5 seconds)
  (374/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 3.962e-5 seconds)
  (375/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 2.3892e-5 seconds)
  (376/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 2.0087e-5 seconds)
  (377/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.6048e-5 seconds)
  (378/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 2.2217e-5 seconds)
  (379/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 1.752e-5 seconds)
  (380/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 1.8529e-5 seconds)
  (381/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.011690891 seconds)
  (382/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 3.8269e-5 seconds)
  (383/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 2.3327e-5 seconds)
  (384/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 2.166e-5 seconds)
  (385/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 7.0419e-5 seconds)
  (386/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 1.7219e-5 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 2.2171e-5 seconds)
  (388/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 4.178e-5 seconds)
  (389/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 1.4493e-5 seconds)
  (390/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 1.9112e-5 seconds)
  (391/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.5489e-5 seconds)
  (392/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 1.5658e-5 seconds)
  (393/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 1.7732e-5 seconds)
  (394/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 1.7078e-5 seconds)
  (395/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 2.0413e-5 seconds)
  (396/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 1.6712e-5 seconds)
  (397/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.3052e-5 seconds)
  (398/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 1.9526e-5 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 1.6877e-5 seconds)
  (400/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 2.1585e-5 seconds)
  (401/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 1.6345e-5 seconds)
  (402/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 1.3765e-5 seconds)
  (403/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 0.086839223 seconds)
  (404/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.3349e-5 seconds)
  (405/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 2.2972e-5 seconds)
  (406/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 2.712e-5 seconds)
  (407/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 1.45e-5 seconds)
  (408/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 3.036e-5 seconds)
  (409/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 1.8443e-5 seconds)
  (410/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 1.3803e-5 seconds)
  (411/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 2.4108e-5 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.032929533 seconds)
  (413/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 3.9414e-5 seconds)
  (414/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 2.361e-5 seconds)
  (415/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.6903e-5 seconds)
  (416/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 2.0737e-5 seconds)
  (417/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 2.6371e-5 seconds)
  (418/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 1.6606e-5 seconds)
  (419/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 1.7131e-5 seconds)
  (420/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 1.7533e-5 seconds)
  (421/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 2.4414e-5 seconds)
  (422/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.6215e-5 seconds)
  (423/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 2.1398e-5 seconds)
  (424/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 0.030694384 seconds)
  (425/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 0.032203428 seconds)
  (426/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 3.3444e-5 seconds)
  (427/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 2.6817e-5 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 0.058813603 seconds)
  (429/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 4.0575e-5 seconds)
  (430/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 1.7563e-5 seconds)
  (431/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 2.2985e-5 seconds)
  (432/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 1.4495e-5 seconds)
  (433/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.197e-5 seconds)
  (434/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 2.4297e-5 seconds)
  (435/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 1.9353e-5 seconds)
  (436/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.4936e-5 seconds)
  (437/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 1.5965e-5 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 1.3945e-5 seconds)
  (439/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 2.0546e-5 seconds)
  (440/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 2.6577e-5 seconds)
  (441/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 1.8306e-5 seconds)
  (442/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 1.1794e-5 seconds)
  (443/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 2.0603e-5 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.3426e-5 seconds)
  (445/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 1.6104e-5 seconds)
  (446/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.7223e-5 seconds)
  (447/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 2.1333e-5 seconds)
  (448/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 1.7316e-5 seconds)
  (449/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 1.5888e-5 seconds)
  (450/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 2.4411e-5 seconds)
  (451/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 1.5362e-5 seconds)
  (452/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.3597e-5 seconds)
  (453/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 2.7004e-5 seconds)
  (454/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 1.9982e-5 seconds)
  (455/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 1.5623e-5 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 9.723e-6 seconds)
  (457/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 1.5595e-5 seconds)
  (458/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 1.7148e-5 seconds)
  (459/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 3.238e-5 seconds)
  (460/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.068528721 seconds)
  (461/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 3.1701e-5 seconds)
  (462/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.8284e-5 seconds)
  (463/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 2.2063e-5 seconds)
  (464/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 2.3536e-5 seconds)
  (465/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 1.9922e-5 seconds)
  (466/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 0.088016247 seconds)
  (467/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 0.076897738 seconds)
  (468/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 3.1072e-5 seconds)
  (469/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 4.3471e-5 seconds)
  (470/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 2.5366e-5 seconds)
  (471/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 1.6451e-5 seconds)
  (472/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 1.8155e-5 seconds)
  (473/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 1.9675e-5 seconds)
  (474/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 2.1679e-5 seconds)
  (475/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 1.7121e-5 seconds)
  (476/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 1.7576e-5 seconds)
  (477/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 2.0839e-5 seconds)
  (478/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 1.4411e-5 seconds)
  (479/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.5457e-5 seconds)
  (480/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 1.9017e-5 seconds)
  (481/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 1.4996e-5 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 2.3117e-5 seconds)
  (483/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 2.2305e-5 seconds)
  (484/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 0.066406695 seconds)
  (485/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 3.2029e-5 seconds)
  (486/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 2.5081e-5 seconds)
  (487/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.8167e-5 seconds)
  (488/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 2.0716e-5 seconds)
  (489/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 1.6303e-5 seconds)
  (490/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 2.126e-5 seconds)
  (491/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 2.3153e-5 seconds)
  (492/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 2.2108e-5 seconds)
  (493/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 1.9298e-5 seconds)
  (494/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 2.0378e-5 seconds)
  (495/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 0.062085075 seconds)
  (496/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.7583e-5 seconds)
  (497/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 0.061492734 seconds)
  (498/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 2.2553e-5 seconds)
  (499/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 3.9839e-5 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 2.011e-5 seconds)
  (501/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 1.9435e-5 seconds)
  (502/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.6308e-5 seconds)
  (503/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 2.1634e-5 seconds)
  (504/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 0.030795348 seconds)
  (505/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 3.9709e-5 seconds)
  (506/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 3.402e-5 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 2.2805e-5 seconds)
  (508/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 1.5829e-5 seconds)
  (509/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 2.2166e-5 seconds)
  (510/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 1.9355e-5 seconds)
  (511/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 5.6623e-5 seconds)
  (512/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 3.863e-5 seconds)
  (513/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 2.077e-5 seconds)
  (514/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.182e-5 seconds)
  (515/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 1.5533e-5 seconds)
  (516/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.3186e-5 seconds)
  (517/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 2.1269e-5 seconds)
  (518/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 2.1053e-5 seconds)
  (519/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 1.918e-5 seconds)
  (520/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 2.0017e-5 seconds)
  (521/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.2505e-5 seconds)
  (522/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.4922e-5 seconds)
  (523/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 1.9775e-5 seconds)
  (524/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 1.1795e-5 seconds)
  (525/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 1.3897e-5 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.4417e-5 seconds)
  (527/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 1.5635e-5 seconds)
  (528/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 3.5134e-5 seconds)
  (529/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 0.059232041 seconds)
  (530/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 2.2367e-5 seconds)
  (531/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 1.6046e-5 seconds)
  (532/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 0.028847776 seconds)
  (533/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 4.2857e-5 seconds)
  (534/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 1.6242e-5 seconds)
  (535/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 2.2502e-5 seconds)
  (536/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 2.2595e-5 seconds)
  (537/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 3.9359e-5 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 1.6191e-5 seconds)
  (539/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 2.0583e-5 seconds)
  (540/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.3348e-5 seconds)
  (541/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 3.2839e-5 seconds)
  (542/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 1.9167e-5 seconds)
  (543/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 1.8446e-5 seconds)
  (544/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 2.5683e-5 seconds)
  (545/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.1364e-5 seconds)
  (546/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 1.4828e-5 seconds)
  (547/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 2.2812e-5 seconds)
  (548/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 1.4624e-5 seconds)
  (549/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 1.655e-5 seconds)
  (550/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 1.4799e-5 seconds)
  (551/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 1.0638e-5 seconds)
  (552/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.011330007 seconds)
  (553/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 0.032407809 seconds)
  (554/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 4.8057e-5 seconds)
  (555/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 2.5025e-5 seconds)
  (556/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 2.8479e-5 seconds)
  (557/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 1.8488e-5 seconds)
  (558/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 3.3433e-5 seconds)
  (559/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 2.0051e-5 seconds)
  (560/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 2.204e-5 seconds)
  (561/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 0.05774038 seconds)
  (562/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 3.3324e-5 seconds)
  (563/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 0.040566195 seconds)
  (564/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.6452e-5 seconds)
  (565/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 2.9606e-5 seconds)
  (566/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 3.1273e-5 seconds)
  (567/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.414e-5 seconds)
  (568/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 2.4379e-5 seconds)
  (569/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 2.766e-5 seconds)
  (570/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.501e-5 seconds)
  (571/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 1.4531e-5 seconds)
  (572/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 2.3412e-5 seconds)
  (573/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 1.2711e-5 seconds)
  (574/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 1.848e-5 seconds)
  (575/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 3.437e-5 seconds)
  (576/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.3398e-5 seconds)
  (577/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.6715e-5 seconds)
  (578/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 2.1406e-5 seconds)
  (579/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 1.9546e-5 seconds)
  (580/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 3.855e-5 seconds)
  (581/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 2.5225e-5 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 1.4582e-5 seconds)
  (583/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 1.612e-5 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 2.1179e-5 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 2.0834e-5 seconds)
  (586/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 2.0262e-5 seconds)
  (587/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.3958e-5 seconds)
  (588/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.2013e-5 seconds)
  (589/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 1.3724e-5 seconds)
  (590/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 1.8724e-5 seconds)
  (591/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 1.7102e-5 seconds)
  (592/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.01138823 seconds)
  (593/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 4.2334e-5 seconds)
  (594/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 2.2306e-5 seconds)
  (595/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.5346e-5 seconds)
  (596/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.3413e-5 seconds)
  (597/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 2.5308e-5 seconds)
  (598/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.0427e-5 seconds)
  (599/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 1.722e-5 seconds)
  (600/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 1.7508e-5 seconds)
  (601/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 1.9655e-5 seconds)
  (602/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.5123e-5 seconds)
  (603/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 2.1044e-5 seconds)
  (604/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 1.9119e-5 seconds)
  (605/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 1.3812e-5 seconds)
  (606/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 2.0521e-5 seconds)
  (607/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 1.5045e-5 seconds)
  (608/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 1.3358e-5 seconds)
  (609/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.8407e-5 seconds)
  (610/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 2.4341e-5 seconds)
  (611/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.5747e-5 seconds)
  (612/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 1.8866e-5 seconds)
  (613/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 1.8821e-5 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 1.4403e-5 seconds)
  (615/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 1.9333e-5 seconds)
  (616/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.6864e-5 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.4227e-5 seconds)
  (618/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.2547e-5 seconds)
  (619/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.1279e-5 seconds)
  (620/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 2.0282e-5 seconds)
  (621/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 1.4163e-5 seconds)
  (622/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 2.3999e-5 seconds)
  (623/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 1.9661e-5 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 9.438e-6 seconds)
  (625/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 1.8333e-5 seconds)
  (626/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 1.9719e-5 seconds)
  (627/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 2.0701e-5 seconds)
  (628/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 2.1532e-5 seconds)
  (629/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.5733e-5 seconds)
  (630/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 1.5275e-5 seconds)
  (631/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 1.383e-5 seconds)
  (632/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 1.7192e-5 seconds)
  (633/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 1.6658e-5 seconds)
  (634/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 1.5215e-5 seconds)
  (635/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 1.9185e-5 seconds)
  (636/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 1.5419e-5 seconds)
  (637/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 2.2173e-5 seconds)
  (638/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 1.6547e-5 seconds)
  (639/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 1.7361e-5 seconds)
  (640/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.3759e-5 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 2.0057e-5 seconds)
  (642/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 1.5255e-5 seconds)
  (643/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 1.0459e-5 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 1.786e-5 seconds)
  (645/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.0882e-5 seconds)
  (646/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 1.3e-5 seconds)
  (647/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 5.8588e-5 seconds)
  (648/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 1.5619e-5 seconds)
  (649/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 2.1374e-5 seconds)
  (650/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 1.7906e-5 seconds)
  (651/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 1.7269e-5 seconds)
  (652/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 1.7825e-5 seconds)
  (653/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.8617e-5 seconds)
  (654/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 1.3473e-5 seconds)
  (655/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 1.7892e-5 seconds)
  (656/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.5278e-5 seconds)
  (657/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.3214e-5 seconds)
  (658/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 1.3699e-5 seconds)
  (659/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.4275e-5 seconds)
  (660/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 1.3725e-5 seconds)
  (661/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 3.2224e-5 seconds)
  (662/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 1.4144e-5 seconds)
  (663/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 1.5665e-5 seconds)
  (664/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.5375e-5 seconds)
  (665/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.2509e-5 seconds)
  (666/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 1.6188e-5 seconds)
  (667/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 4.9654e-5 seconds)
  (668/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 2.3802e-5 seconds)
  (669/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 1.5854e-5 seconds)
  (670/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 1.1677e-5 seconds)
  (671/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 4.2606e-5 seconds)
  (672/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 1.4048e-5 seconds)
  (673/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 2.0786e-5 seconds)
  (674/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 1.2536e-5 seconds)
  (675/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 1.7306e-5 seconds)
  (676/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 1.0882e-5 seconds)
  (677/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 1.4114e-5 seconds)
  (678/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 1.5414e-5 seconds)
  (679/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 1.8867e-5 seconds)
  (680/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.7279e-5 seconds)
done (took 11.913674876 seconds)
(22/23) benchmarking "inference"...
  (1/3) benchmarking "allinference"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 25.143027619 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 0.25166231 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 0.373376083 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 0.171521725 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.280855312 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 1.024302625 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 8.382219905 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 0.401677017 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 1.397787777 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 0.106771397 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 0.594196165 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 0.079356172 seconds)
  done (took 39.351177204 seconds)
  (2/3) benchmarking "optimization"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 9.037095332 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 0.240998223 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 0.366288252 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 0.109224869 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.292857661 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.690549991 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 8.112713521 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 0.401310364 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 1.422934744 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 0.108772533 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 0.604119665 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 0.085642178 seconds)
  done (took 23.161336356 seconds)
  (3/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 1.64567522 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 0.094410751 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 0.142071372 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 2.091809048 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.129610807 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.14179025 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 2.629691226 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 0.057415995 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 0.649096528 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 0.039466492 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 0.388569048 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 0.044072419 seconds)
  done (took 10.190917815 seconds)
done (took 73.876541551 seconds)
(23/23) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.028220112 seconds)
    (2/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.030384074 seconds)
    (3/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.119702041 seconds)
    (4/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.078463788 seconds)
    (5/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.065362346 seconds)
    (6/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.040029695 seconds)
    (7/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 0.041302264 seconds)
    (8/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 0.037530064 seconds)
    (9/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.119253125 seconds)
    (10/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.150034808 seconds)
    (11/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 7.4779e-5 seconds)
    (12/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.048631755 seconds)
    (13/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.032159911 seconds)
    (14/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.123580097 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.032683977 seconds)
    (16/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.031269422 seconds)
    (17/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.026307064 seconds)
    (18/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.034279337 seconds)
    (19/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.062806484 seconds)
    (20/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 0.046114723 seconds)
    (21/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 0.040151734 seconds)
    (22/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.23659194 seconds)
    (23/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.029937384 seconds)
    (24/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.029976651 seconds)
    (25/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.024625781 seconds)
    (26/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 0.037243146 seconds)
    (27/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 0.032541182 seconds)
    (28/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.11117781 seconds)
    (29/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.169807694 seconds)
    (30/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.038084086 seconds)
    (31/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 0.029134464 seconds)
    (32/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 8.4093e-5 seconds)
    (33/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 0.029839602 seconds)
    (34/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.094239339 seconds)
    (35/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.056545288 seconds)
    (36/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.030207069 seconds)
    (37/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 0.03103781 seconds)
    (38/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.216360052 seconds)
    (39/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.182514294 seconds)
    (40/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 0.031700361 seconds)
    (41/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 0.0373993 seconds)
    (42/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.098540746 seconds)
    (43/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.037885421 seconds)
    (44/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.198110763 seconds)
    (45/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 0.030749643 seconds)
    (46/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.165587124 seconds)
    (47/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.124013745 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 0.031332771 seconds)
    (49/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.031295847 seconds)
    (50/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 0.047025932 seconds)
    (51/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.025366962 seconds)
    (52/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 0.031148369 seconds)
    (53/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.115070755 seconds)
    (54/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.116398826 seconds)
    (55/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 3.5507e-5 seconds)
    (56/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.1975e-5 seconds)
    (57/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.196150865 seconds)
    (58/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.000223191 seconds)
    (59/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 7.0732e-5 seconds)
    (60/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 0.035915269 seconds)
    (61/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.066521291 seconds)
    (62/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.030546634 seconds)
    (63/434) benchmarking ("sort", "Int64", 0)...
    done (took 0.021389428 seconds)
    (64/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 0.027889963 seconds)
    (65/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 0.035355308 seconds)
    (66/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.042899052 seconds)
    (67/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.030737365 seconds)
    (68/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 0.029645516 seconds)
    (69/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.182019009 seconds)
    (70/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.093853583 seconds)
    (71/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.116256227 seconds)
    (72/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 0.037411302 seconds)
    (73/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.030730805 seconds)
    (74/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 0.053631522 seconds)
    (75/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.03841941 seconds)
    (76/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.070056254 seconds)
    (77/434) benchmarking ("perf_countequals", "Float32")...
    done (took 0.035355638 seconds)
    (78/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.00013588 seconds)
    (79/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.030336312 seconds)
    (80/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.046157045 seconds)
    (81/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.028124735 seconds)
    (82/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.090481788 seconds)
    (83/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.107557415 seconds)
    (84/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 8.4193e-5 seconds)
    (85/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 0.029453745 seconds)
    (86/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.03474649 seconds)
    (87/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.027773148 seconds)
    (88/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.133526282 seconds)
    (89/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 9.1516e-5 seconds)
    (90/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.028543335 seconds)
    (91/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 4.5252e-5 seconds)
    (92/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.028126189 seconds)
    (93/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.14097228 seconds)
    (94/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 0.029341688 seconds)
    (95/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.028603152 seconds)
    (96/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 0.027464859 seconds)
    (97/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.029088594 seconds)
    (98/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.00024571 seconds)
    (99/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 3.2457e-5 seconds)
    (100/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.143619735 seconds)
    (101/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.194724192 seconds)
    (102/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.09136884 seconds)
    (103/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 0.032699447 seconds)
    (104/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.031160062 seconds)
    (105/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.033444524 seconds)
    (106/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.1627247 seconds)
    (107/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.030666364 seconds)
    (108/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.078576751 seconds)
    (109/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 9.4371e-5 seconds)
    (110/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 0.027474067 seconds)
    (111/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 0.033122474 seconds)
    (112/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.001799338 seconds)
    (113/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.030836421 seconds)
    (114/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 8.9097e-5 seconds)
    (115/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.031664603 seconds)
    (116/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 0.029003616 seconds)
    (117/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.114484151 seconds)
    (118/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 0.029551087 seconds)
    (119/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 0.036882481 seconds)
    (120/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.029747297 seconds)
    (121/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.144781937 seconds)
    (122/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.095488389 seconds)
    (123/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.032365995 seconds)
    (124/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.040179458 seconds)
    (125/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.029669287 seconds)
    (126/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.169919319 seconds)
    (127/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.029068422 seconds)
    (128/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.039185297 seconds)
    (129/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.095226419 seconds)
    (130/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.020287405 seconds)
    (131/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.000119799 seconds)
    (132/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.029228416 seconds)
    (133/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.030115785 seconds)
    (134/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 0.031851602 seconds)
    (135/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.038268244 seconds)
    (136/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 0.029425351 seconds)
    (137/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 0.030015903 seconds)
    (138/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 0.027661218 seconds)
    (139/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.088019137 seconds)
    (140/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.114975015 seconds)
    (141/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.001239791 seconds)
    (142/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.091345879 seconds)
    (143/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.049074672 seconds)
    (144/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 0.030017848 seconds)
    (145/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.109436585 seconds)
    (146/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.033247747 seconds)
    (147/434) benchmarking ("sort", "Bool", 0)...
    done (took 0.055001535 seconds)
    (148/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.028921961 seconds)
    (149/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.090227669 seconds)
    (150/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 5.1918e-5 seconds)
    (151/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.226826093 seconds)
    (152/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.027744725 seconds)
    (153/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 0.029829725 seconds)
    (154/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 5.834e-5 seconds)
    (155/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.170000464 seconds)
    (156/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.178929546 seconds)
    (157/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.037475155 seconds)
    (158/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 9.383e-5 seconds)
    (159/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 7.1963e-5 seconds)
    (160/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.002551669 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.24757862 seconds)
    (162/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.000121995 seconds)
    (163/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 0.031474735 seconds)
    (164/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.044524384 seconds)
    (165/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 0.029223431 seconds)
    (166/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.148311998 seconds)
    (167/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.133366655 seconds)
    (168/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.088667292 seconds)
    (169/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.002200145 seconds)
    (170/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 0.027273753 seconds)
    (171/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 0.033159235 seconds)
    (172/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.000917278 seconds)
    (173/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 4.6341e-5 seconds)
    (174/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 0.048148847 seconds)
    (175/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.231393126 seconds)
    (176/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.001157547 seconds)
    (177/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.029031745 seconds)
    (178/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.142358957 seconds)
    (179/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.03619558 seconds)
    (180/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 6.9845e-5 seconds)
    (181/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.089691497 seconds)
    (182/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 0.029007421 seconds)
    (183/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 0.033828112 seconds)
    (184/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.027402524 seconds)
    (185/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.161949422 seconds)
    (186/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 0.029955251 seconds)
    (187/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.136766553 seconds)
    (188/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.032509579 seconds)
    (189/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 0.032366112 seconds)
    (190/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 0.030266391 seconds)
    (191/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.112642649 seconds)
    (192/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.000116168 seconds)
    (193/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.028489066 seconds)
    (194/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.180691118 seconds)
    (195/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 0.027385059 seconds)
    (196/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.000111066 seconds)
    (197/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 0.024779259 seconds)
    (198/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 0.0308087 seconds)
    (199/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 5.9525e-5 seconds)
    (200/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.088777921 seconds)
    (201/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.029892012 seconds)
    (202/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 0.038040116 seconds)
    (203/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.097130269 seconds)
    (204/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 0.03433471 seconds)
    (205/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.00014937 seconds)
    (206/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.029309075 seconds)
    (207/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.000110765 seconds)
    (208/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 0.024725041 seconds)
    (209/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.02773145 seconds)
    (210/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.019830097 seconds)
    (211/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.036669928 seconds)
    (212/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 7.6029e-5 seconds)
    (213/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.08688336 seconds)
    (214/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.029518093 seconds)
    (215/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.109535621 seconds)
    (216/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.265648994 seconds)
    (217/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.150650086 seconds)
    (218/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 2.9623e-5 seconds)
    (219/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.2441e-5 seconds)
    (220/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.02949555 seconds)
    (221/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.287444118 seconds)
    (222/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 7.2799e-5 seconds)
    (223/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.030363421 seconds)
    (224/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.032070461 seconds)
    (225/434) benchmarking ("perf_countequals", "Int64")...
    done (took 0.034263631 seconds)
    (226/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.000122953 seconds)
    (227/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 8.3858e-5 seconds)
    (228/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.031437462 seconds)
    (229/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.001767919 seconds)
    (230/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 0.035000898 seconds)
    (231/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 8.3477e-5 seconds)
    (232/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 0.030145785 seconds)
    (233/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.000107373 seconds)
    (234/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.110404831 seconds)
    (235/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 6.1362e-5 seconds)
    (236/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 4.237e-5 seconds)
    (237/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 0.036091916 seconds)
    (238/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 0.03397113 seconds)
    (239/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.041525901 seconds)
    (240/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.08707412 seconds)
    (241/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.090275662 seconds)
    (242/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 3.1608e-5 seconds)
    (243/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 0.025287414 seconds)
    (244/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.001119774 seconds)
    (245/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 6.2596e-5 seconds)
    (246/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.033617829 seconds)
    (247/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.02722742 seconds)
    (248/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 4.3955e-5 seconds)
    (249/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 0.034693808 seconds)
    (250/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 0.037295483 seconds)
    (251/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 7.8203e-5 seconds)
    (252/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.139331204 seconds)
    (253/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 7.3215e-5 seconds)
    (254/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 0.030917247 seconds)
    (255/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.04182285 seconds)
    (256/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 5.071e-5 seconds)
    (257/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 3.7704e-5 seconds)
    (258/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.028375021 seconds)
    (259/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 0.024225852 seconds)
    (260/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.064402164 seconds)
    (261/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.044695573 seconds)
    (262/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 6.2656e-5 seconds)
    (263/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 7.5104e-5 seconds)
    (264/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 3.3064e-5 seconds)
    (265/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.03044667 seconds)
    (266/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.029282844 seconds)
    (267/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 2.2761e-5 seconds)
    (268/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 3.6556e-5 seconds)
    (269/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 5.2136e-5 seconds)
    (270/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.03253033 seconds)
    (271/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 9.5988e-5 seconds)
    (272/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.002332932 seconds)
    (273/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.08707961 seconds)
    (274/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 0.0291147 seconds)
    (275/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 0.02873678 seconds)
    (276/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 0.033592046 seconds)
    (277/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.001638392 seconds)
    (278/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.106771885 seconds)
    (279/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 3.559e-5 seconds)
    (280/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.028291849 seconds)
    (281/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.061366337 seconds)
    (282/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 8.0207e-5 seconds)
    (283/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.9669e-5 seconds)
    (284/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 0.033126958 seconds)
    (285/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.026889743 seconds)
    (286/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.025428343 seconds)
    (287/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 0.034848172 seconds)
    (288/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.245571963 seconds)
    (289/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.108985096 seconds)
    (290/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 3.4719e-5 seconds)
    (291/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 5.2798e-5 seconds)
    (292/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 0.028739827 seconds)
    (293/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.032760008 seconds)
    (294/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.027916574 seconds)
    (295/434) benchmarking ("perf_countequals", "Int8")...
    done (took 0.031383987 seconds)
    (296/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 7.5215e-5 seconds)
    (297/434) benchmarking ("sort", "Float32", 0)...
    done (took 0.890648964 seconds)
    (298/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 0.037455668 seconds)
    (299/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.176034221 seconds)
    (300/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.001901322 seconds)
    (301/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.04510581 seconds)
    (302/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.001811457 seconds)
    (303/434) benchmarking ("sort", "BigInt", 0)...
    done (took 0.171416456 seconds)
    (304/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 7.5417e-5 seconds)
    (305/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 0.036497652 seconds)
    (306/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 4.4129e-5 seconds)
    (307/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 0.029785722 seconds)
    (308/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.028735669 seconds)
    (309/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.029144879 seconds)
    (310/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 0.035949795 seconds)
    (311/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.036308246 seconds)
    (312/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 6.6569e-5 seconds)
    (313/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.026761656 seconds)
    (314/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.026504108 seconds)
    (315/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 4.3964e-5 seconds)
    (316/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 9.6643e-5 seconds)
    (317/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.8029e-5 seconds)
    (318/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 0.033381382 seconds)
    (319/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.002379786 seconds)
    (320/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 5.569e-5 seconds)
    (321/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.000139423 seconds)
    (322/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.032946088 seconds)
    (323/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 0.035643697 seconds)
    (324/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.216387643 seconds)
    (325/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 0.033923424 seconds)
    (326/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.057836748 seconds)
    (327/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.044441743 seconds)
    (328/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 9.5559e-5 seconds)
    (329/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.001016822 seconds)
    (330/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 6.9841e-5 seconds)
    (331/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.031842722 seconds)
    (332/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 4.2793e-5 seconds)
    (333/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 7.7252e-5 seconds)
    (334/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 7.2798e-5 seconds)
    (335/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 9.6132e-5 seconds)
    (336/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.094005414 seconds)
    (337/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 5.5871e-5 seconds)
    (338/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.001785799 seconds)
    (339/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 3.2039e-5 seconds)
    (340/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 2.9151e-5 seconds)
    (341/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 2.6966e-5 seconds)
    (342/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 6.1728e-5 seconds)
    (343/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 3.7261e-5 seconds)
    (344/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.000803638 seconds)
    (345/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.033594172 seconds)
    (346/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 9.9415e-5 seconds)
    (347/434) benchmarking ("perf_countequals", "Float64")...
    done (took 0.03409152 seconds)
    (348/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.00014367 seconds)
    (349/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.070225795 seconds)
    (350/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.223481942 seconds)
    (351/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.037772644 seconds)
    (352/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.044177501 seconds)
    (353/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.029689945 seconds)
    (354/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.046115852 seconds)
    (355/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.000109063 seconds)
    (356/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.001079531 seconds)
    (357/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.136087445 seconds)
    (358/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.000102089 seconds)
    (359/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.995122259 seconds)
    (360/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.032878027 seconds)
    (361/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 2.635e-5 seconds)
    (362/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 6.868e-5 seconds)
    (363/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 5.1896e-5 seconds)
    (364/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 3.0786e-5 seconds)
    (365/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 0.029739016 seconds)
    (366/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 2.3588e-5 seconds)
    (367/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 0.028954989 seconds)
    (368/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 2.4439e-5 seconds)
    (369/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.000130528 seconds)
    (370/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.114125078 seconds)
    (371/434) benchmarking ("sort", "Float64", 0)...
    done (took 0.025369307 seconds)
    (372/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 0.033630803 seconds)
    (373/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.001807554 seconds)
    (374/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 0.027519441 seconds)
    (375/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 0.028813146 seconds)
    (376/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 2.3493e-5 seconds)
    (377/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.000773517 seconds)
    (378/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 3.7536e-5 seconds)
    (379/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 0.036974411 seconds)
    (380/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.042937892 seconds)
    (381/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.00192584 seconds)
    (382/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 4.9909e-5 seconds)
    (383/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.002511472 seconds)
    (384/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 0.026720522 seconds)
    (385/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 0.032571494 seconds)
    (386/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.000112932 seconds)
    (387/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 8.9576e-5 seconds)
    (388/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 7.6181e-5 seconds)
    (389/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 6.1299e-5 seconds)
    (390/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 4.7072e-5 seconds)
    (391/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.4165e-5 seconds)
    (392/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 0.030610989 seconds)
    (393/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 2.3002e-5 seconds)
    (394/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.001760118 seconds)
    (395/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.027953576 seconds)
    (396/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 7.4298e-5 seconds)
    (397/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 3.8767e-5 seconds)
    (398/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 5.7106e-5 seconds)
    (399/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 0.030907672 seconds)
    (400/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 3.0554e-5 seconds)
    (401/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.064926345 seconds)
    (402/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 7.2826e-5 seconds)
    (403/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 6.333e-5 seconds)
    (404/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 0.030277718 seconds)
    (405/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.033026243 seconds)
    (406/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.000115476 seconds)
    (407/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 3.1196e-5 seconds)
    (408/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 4.852e-5 seconds)
    (409/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 4.1178e-5 seconds)
    (410/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 0.025326816 seconds)
    (411/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.000957546 seconds)
    (412/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 6.7981e-5 seconds)
    (413/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 2.016e-5 seconds)
    (414/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.000115858 seconds)
    (415/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 6.1417e-5 seconds)
    (416/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.072366565 seconds)
    (417/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 0.031679504 seconds)
    (418/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 7.07e-5 seconds)
    (419/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 0.027894007 seconds)
    (420/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 6.3986e-5 seconds)
    (421/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.477786638 seconds)
    (422/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 2.6567e-5 seconds)
    (423/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 3.7045e-5 seconds)
    (424/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 3.3521e-5 seconds)
    (425/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.001797597 seconds)
    (426/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.4863e-5 seconds)
    (427/434) benchmarking ("perf_countequals", "Bool")...
    done (took 0.031096133 seconds)
    (428/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 6.6988e-5 seconds)
    (429/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.042642579 seconds)
    (430/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 2.3843e-5 seconds)
    (431/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.035828529 seconds)
    (432/434) benchmarking ("sort", "Int8", 0)...
    done (took 0.309893658 seconds)
    (433/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 0.033563038 seconds)
    (434/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 0.035284496 seconds)
  done (took 22.936174093 seconds)
done (took 25.320488728 seconds)
RUNNING BENCHMARKS...
(1/23) benchmarking "problem"...
  (1/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.878214495 seconds)
  done (took 10.245940977 seconds)
  (2/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_devec"...
    done (took 7.389679879 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.454664606 seconds)
    (3/4) benchmarking "laplace_iter_vec"...
    done (took 7.421791166 seconds)
    (4/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.396176306 seconds)
  done (took 32.04156525 seconds)
  (3/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 8.322431022 seconds)
  done (took 10.69942633 seconds)
  (4/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 8.151515034 seconds)
  done (took 10.532274178 seconds)
  (5/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.784501627 seconds)
  done (took 10.15968415 seconds)
  (6/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_devec"...
    done (took 7.44690701 seconds)
    (2/2) benchmarking "euro_option_vec"...
    done (took 7.398636875 seconds)
  done (took 17.222491222 seconds)
  (7/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 9.481843414 seconds)
  done (took 11.856952198 seconds)
  (8/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.715123935 seconds)
  done (took 10.093466234 seconds)
  (9/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 7.386439927 seconds)
  done (took 9.76202999 seconds)
  (10/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float64")...
    done (took 7.37682142 seconds)
    (2/2) benchmarking ("seismic", "Float32")...
    done (took 7.375983921 seconds)
  done (took 17.126796535 seconds)
  (11/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.402321891 seconds)
  done (took 9.77846215 seconds)
  (12/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.376896918 seconds)
  done (took 9.758265584 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.50739444 seconds)
  done (took 9.893140307 seconds)
  (14/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.792868572 seconds)
  done (took 10.167552513 seconds)
done (took 181.783128484 seconds)
(2/23) benchmarking "array"...
  (1/13) benchmarking "index"...
    (1/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.387250503 seconds)
    (2/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.379246967 seconds)
    (3/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.382997743 seconds)
    (4/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 3.888129566 seconds)
    (5/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.775576068 seconds)
    (6/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.382434059 seconds)
    (7/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 7.383693214 seconds)
    (8/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.379116052 seconds)
    (9/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.394044701 seconds)
    (10/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.379374328 seconds)
    (11/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 7.383576387 seconds)
    (12/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.378163683 seconds)
    (13/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.382406982 seconds)
    (14/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.379712529 seconds)
    (15/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.384179503 seconds)
    (16/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.393007186 seconds)
    (17/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.381497527 seconds)
    (18/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.387439982 seconds)
    (19/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.380175016 seconds)
    (20/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.395148019 seconds)
    (21/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.643901035 seconds)
    (22/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.388997039 seconds)
    (23/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.387858178 seconds)
    (24/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.39177338 seconds)
    (25/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.406744567 seconds)
    (26/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.388257581 seconds)
    (27/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.385933231 seconds)
    (28/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.386763412 seconds)
    (29/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.39024005 seconds)
    (30/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.392999075 seconds)
    (31/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.390804986 seconds)
    (32/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.391878886 seconds)
    (33/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.403537936 seconds)
    (34/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.391463209 seconds)
    (35/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.393719627 seconds)
    (36/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.401750556 seconds)
    (37/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.393487322 seconds)
    (38/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.401846277 seconds)
    (39/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.390094622 seconds)
    (40/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.394236716 seconds)
    (41/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.393088431 seconds)
    (42/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.397378566 seconds)
    (43/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 7.106933445 seconds)
    (44/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.655427109 seconds)
    (45/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.399848921 seconds)
    (46/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.396030288 seconds)
    (47/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.400991858 seconds)
    (48/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.396376258 seconds)
    (49/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.416885147 seconds)
    (50/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.409821501 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.406606103 seconds)
    (52/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.399414432 seconds)
    (53/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.397466823 seconds)
    (54/608) benchmarking "ind2sub"...
    done (took 3.13559058 seconds)
    (55/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.401941831 seconds)
    (56/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 7.412256154 seconds)
    (57/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.400145908 seconds)
    (58/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.401063931 seconds)
    (59/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.400941807 seconds)
    (60/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.412297312 seconds)
    (61/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.404173874 seconds)
    (62/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.410081065 seconds)
    (63/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.40938151 seconds)
    (64/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.680020254 seconds)
    (65/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.404855782 seconds)
    (66/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 7.416648256 seconds)
    (67/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.407344197 seconds)
    (68/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.408609559 seconds)
    (69/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.416139291 seconds)
    (70/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.402719328 seconds)
    (71/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.411300553 seconds)
    (72/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.402175287 seconds)
    (73/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 7.40600949 seconds)
    (74/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.404022958 seconds)
    (75/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.246857705 seconds)
    (76/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.452811386 seconds)
    (77/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.406715653 seconds)
    (78/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.413796271 seconds)
    (79/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.412544645 seconds)
    (80/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.40469632 seconds)
    (81/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.404743474 seconds)
    (82/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.415247543 seconds)
    (83/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.414106182 seconds)
    (84/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.417608003 seconds)
    (85/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.40357711 seconds)
    (86/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.402457394 seconds)
    (87/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.406419269 seconds)
    (88/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.401006082 seconds)
    (89/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.443331434 seconds)
    (90/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.406053638 seconds)
    (91/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 7.414849175 seconds)
    (92/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.404940377 seconds)
    (93/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.417836189 seconds)
    (94/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 7.407751552 seconds)
    (95/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.801700557 seconds)
    (96/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.406678545 seconds)
    (97/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.41725889 seconds)
    (98/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.40496924 seconds)
    (99/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.404226919 seconds)
    (100/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.604653709 seconds)
    (101/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.408071105 seconds)
    (102/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.413385951 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.412364752 seconds)
    (104/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 7.404721586 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.4130293 seconds)
    (106/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.749245147 seconds)
    (107/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.413187124 seconds)
    (108/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.405054582 seconds)
    (109/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.438694151 seconds)
    (110/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.421716541 seconds)
    (111/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 5.823054343 seconds)
    (112/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.60711948 seconds)
    (113/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.416285295 seconds)
    (114/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.417078692 seconds)
    (115/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 5.841664617 seconds)
    (116/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.411081608 seconds)
    (117/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.406958673 seconds)
    (118/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.416376566 seconds)
    (119/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.411783669 seconds)
    (120/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.413725517 seconds)
    (121/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.407869791 seconds)
    (122/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.412850967 seconds)
    (123/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.410079525 seconds)
    (124/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 5.916243243 seconds)
    (125/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.41235366 seconds)
    (126/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.408234217 seconds)
    (127/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 7.413705561 seconds)
    (128/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.482220929 seconds)
    (129/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.409813092 seconds)
    (130/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 7.410300854 seconds)
    (131/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.422919072 seconds)
    (132/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.421585213 seconds)
    (133/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 7.032058455 seconds)
    (134/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.411713446 seconds)
    (135/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.413072244 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 7.414705648 seconds)
    (137/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.411580239 seconds)
    (138/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.265292655 seconds)
    (139/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.424807378 seconds)
    (140/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.418839858 seconds)
    (141/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.544669531 seconds)
    (142/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.412492996 seconds)
    (143/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.427022505 seconds)
    (144/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 7.41383113 seconds)
    (145/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.409213424 seconds)
    (146/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.409204221 seconds)
    (147/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.413287382 seconds)
    (148/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.424310963 seconds)
    (149/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.412087504 seconds)
    (150/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.505900188 seconds)
    (151/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 7.417029529 seconds)
    (152/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.546497284 seconds)
    (153/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 6.117952869 seconds)
    (154/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.4208448 seconds)
    (155/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.412307253 seconds)
    (156/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.429002532 seconds)
    (157/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.439748784 seconds)
    (158/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.423217167 seconds)
    (159/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.409608401 seconds)
    (160/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.589821896 seconds)
    (161/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.413551447 seconds)
    (162/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.430960635 seconds)
    (163/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.420839991 seconds)
    (164/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.413992946 seconds)
    (165/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.411992396 seconds)
    (166/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.411251814 seconds)
    (167/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.413446127 seconds)
    (168/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.411992356 seconds)
    (169/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.42061838 seconds)
    (170/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.548034277 seconds)
    (171/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.42338533 seconds)
    (172/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.413319283 seconds)
    (173/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.415791031 seconds)
    (174/608) benchmarking "5d"...
    done (took 5.792420014 seconds)
    (175/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.412277833 seconds)
    (176/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.799696386 seconds)
    (177/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.417508879 seconds)
    (178/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.419835746 seconds)
    (179/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.411835427 seconds)
    (180/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.419383111 seconds)
    (181/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.415157332 seconds)
    (182/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.551324367 seconds)
    (183/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.429294262 seconds)
    (184/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 7.412119729 seconds)
    (185/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.42176606 seconds)
    (186/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.588013236 seconds)
    (187/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.412645649 seconds)
    (188/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.413414329 seconds)
    (189/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.415348818 seconds)
    (190/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.414449231 seconds)
    (191/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.807303151 seconds)
    (192/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 7.416028618 seconds)
    (193/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.413894884 seconds)
    (194/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.4147536 seconds)
    (195/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.414685155 seconds)
    (196/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.414263517 seconds)
    (197/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.416133191 seconds)
    (198/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.673825342 seconds)
    (199/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.415277565 seconds)
    (200/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.413763956 seconds)
    (201/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 4.292243803 seconds)
    (202/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.429140852 seconds)
    (203/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.413193327 seconds)
    (204/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.427484299 seconds)
    (205/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.587379976 seconds)
    (206/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.417327044 seconds)
    (207/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.637905527 seconds)
    (208/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.423706393 seconds)
    (209/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.48030163 seconds)
    (210/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 7.498455678 seconds)
    (211/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.421507459 seconds)
    (212/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.412402695 seconds)
    (213/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.416411377 seconds)
    (214/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 5.939562046 seconds)
    (215/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.429783239 seconds)
    (216/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.414510258 seconds)
    (217/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.416119442 seconds)
    (218/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.531039421 seconds)
    (219/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.524530512 seconds)
    (220/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 7.416228946 seconds)
    (221/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.414447648 seconds)
    (222/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.419411609 seconds)
    (223/608) benchmarking "6d"...
    done (took 7.411952637 seconds)
    (224/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.412425881 seconds)
    (225/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.432356119 seconds)
    (226/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.559528804 seconds)
    (227/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.424834357 seconds)
    (228/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.416937106 seconds)
    (229/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.424835739 seconds)
    (230/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.415986847 seconds)
    (231/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.418089602 seconds)
    (232/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 7.423148289 seconds)
    (233/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.420543421 seconds)
    (234/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.420092564 seconds)
    (235/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.413053576 seconds)
    (236/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.421520322 seconds)
    (237/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.413317358 seconds)
    (238/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.413332223 seconds)
    (239/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.42287397 seconds)
    (240/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.414547788 seconds)
    (241/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.428873686 seconds)
    (242/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.414000627 seconds)
    (243/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.676937221 seconds)
    (244/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.418551072 seconds)
    (245/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.418093714 seconds)
    (246/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.423778868 seconds)
    (247/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.423024277 seconds)
    (248/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.420804352 seconds)
    (249/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.421534764 seconds)
    (250/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 2.858668922 seconds)
    (251/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.898052488 seconds)
    (252/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 7.456648736 seconds)
    (253/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.41775146 seconds)
    (254/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 2.810860133 seconds)
    (255/608) benchmarking "3d"...
    done (took 3.988556793 seconds)
    (256/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.448498278 seconds)
    (257/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.424843057 seconds)
    (258/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.416520168 seconds)
    (259/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.434564929 seconds)
    (260/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 6.387781671 seconds)
    (261/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.426319064 seconds)
    (262/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.416216982 seconds)
    (263/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 6.934278909 seconds)
    (264/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.414769966 seconds)
    (265/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.417744617 seconds)
    (266/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.202749777 seconds)
    (267/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.542913088 seconds)
    (268/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.432201517 seconds)
    (269/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.41228611 seconds)
    (270/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.781603238 seconds)
    (271/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.417698205 seconds)
    (272/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 5.79552452 seconds)
    (273/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.417797588 seconds)
    (274/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.419038562 seconds)
    (275/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 7.434858548 seconds)
    (276/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.424139391 seconds)
    (277/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 7.419639075 seconds)
    (278/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 7.432565774 seconds)
    (279/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.423442007 seconds)
    (280/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 7.427320965 seconds)
    (281/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.965360518 seconds)
    (282/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.431555171 seconds)
    (283/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.433403962 seconds)
    (284/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.432762166 seconds)
    (285/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.415774321 seconds)
    (286/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 7.417930622 seconds)
    (287/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.426306222 seconds)
    (288/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.41920972 seconds)
    (289/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.380754744 seconds)
    (290/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.835305907 seconds)
    (291/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.42893978 seconds)
    (292/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.424431149 seconds)
    (293/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.51552641 seconds)
    (294/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.532517272 seconds)
    (295/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.422785179 seconds)
    (296/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 7.428178733 seconds)
    (297/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 2.812001637 seconds)
    (298/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.423730159 seconds)
    (299/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.423299335 seconds)
    (300/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.425198309 seconds)
    (301/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 4.529675329 seconds)
    (302/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.421364997 seconds)
    (303/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.572648396 seconds)
    (304/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.879164154 seconds)
    (305/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.430710254 seconds)
    (306/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 7.428134003 seconds)
    (307/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.427114271 seconds)
    (308/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.419602576 seconds)
    (309/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.419380333 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.423816737 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.432880647 seconds)
    (312/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.422544422 seconds)
    (313/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.429138803 seconds)
    (314/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.433748272 seconds)
    (315/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.429065893 seconds)
    (316/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.523240423 seconds)
    (317/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.422083345 seconds)
    (318/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 7.167197555 seconds)
    (319/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 7.424454978 seconds)
    (320/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.422836386 seconds)
    (321/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.416126614 seconds)
    (322/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.417382266 seconds)
    (323/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.426697759 seconds)
    (324/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.421241555 seconds)
    (325/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 7.438374853 seconds)
    (326/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.428211247 seconds)
    (327/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.430933371 seconds)
    (328/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.983597175 seconds)
    (329/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.436611149 seconds)
    (330/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.420457214 seconds)
    (331/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.417931276 seconds)
    (332/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.419038868 seconds)
    (333/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.422474498 seconds)
    (334/608) benchmarking "sub2ind"...
    done (took 7.54079997 seconds)
    (335/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.667365334 seconds)
    (336/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.712548938 seconds)
    (337/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.438568709 seconds)
    (338/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.451248941 seconds)
    (339/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 7.423089629 seconds)
    (340/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.26332998 seconds)
    (341/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 2.828011652 seconds)
    (342/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.42165433 seconds)
    (343/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.378659859 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.423155512 seconds)
    (345/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.653057933 seconds)
    (346/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.44717926 seconds)
    (347/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.763917641 seconds)
    (348/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.422992728 seconds)
    (349/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.426333525 seconds)
    (350/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.431576526 seconds)
    (351/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.424137981 seconds)
    (352/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.426536203 seconds)
    (353/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.420622061 seconds)
    (354/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.571250017 seconds)
    (355/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.433291155 seconds)
    (356/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.429237555 seconds)
    (357/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.426184405 seconds)
    (358/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.419862802 seconds)
    (359/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.423359596 seconds)
    (360/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.703084863 seconds)
    (361/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.450049922 seconds)
    (362/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.422066382 seconds)
    (363/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.421470873 seconds)
    (364/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.351591386 seconds)
    (365/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.436014625 seconds)
    (366/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.765612432 seconds)
    (367/608) benchmarking ("sum", "3darray")...
    done (took 3.533934524 seconds)
    (368/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.436736845 seconds)
    (369/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.416534659 seconds)
    (370/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.426433094 seconds)
    (371/608) benchmarking "7d"...
    done (took 5.704261743 seconds)
    (372/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.421675582 seconds)
    (373/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.429059211 seconds)
    (374/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.621532146 seconds)
    (375/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.42584067 seconds)
    (376/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.421583546 seconds)
    (377/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.419178557 seconds)
    (378/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.418975488 seconds)
    (379/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 7.423522232 seconds)
    (380/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.424107961 seconds)
    (381/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.417345287 seconds)
    (382/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.430537462 seconds)
    (383/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.421685449 seconds)
    (384/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.441681268 seconds)
    (385/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.421858884 seconds)
    (386/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.424879973 seconds)
    (387/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.423197904 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.440689821 seconds)
    (389/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.420950984 seconds)
    (390/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 7.425615629 seconds)
    (391/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.421476525 seconds)
    (392/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.419487399 seconds)
    (393/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.425539985 seconds)
    (394/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.421860479 seconds)
    (395/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.428070701 seconds)
    (396/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.422762614 seconds)
    (397/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.423718291 seconds)
    (398/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 5.801565381 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.769766874 seconds)
    (400/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.433779943 seconds)
    (401/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.426854556 seconds)
    (402/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.762467606 seconds)
    (403/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.43222181 seconds)
    (404/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.422997175 seconds)
    (405/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.435389666 seconds)
    (406/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.424159004 seconds)
    (407/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.421052407 seconds)
    (408/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.420507958 seconds)
    (409/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.428084518 seconds)
    (410/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.426864351 seconds)
    (411/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.673112175 seconds)
    (412/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.433306081 seconds)
    (413/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.381906622 seconds)
    (414/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 3.000914828 seconds)
    (415/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.436064673 seconds)
    (416/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.54657499 seconds)
    (417/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.977140309 seconds)
    (418/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.427515567 seconds)
    (419/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.419374741 seconds)
    (420/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 5.795499663 seconds)
    (421/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.751444807 seconds)
    (422/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.424288242 seconds)
    (423/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.425352709 seconds)
    (424/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.42295835 seconds)
    (425/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.423967302 seconds)
    (426/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.426225218 seconds)
    (427/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.451221827 seconds)
    (428/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.426231175 seconds)
    (429/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 5.806706918 seconds)
    (430/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.422412502 seconds)
    (431/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.428274493 seconds)
    (432/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.422737114 seconds)
    (433/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.439873914 seconds)
    (434/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.421905446 seconds)
    (435/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.706883888 seconds)
    (436/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.422933469 seconds)
    (437/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.421833789 seconds)
    (438/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.426030666 seconds)
    (439/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.421894878 seconds)
    (440/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.554131943 seconds)
    (441/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.939756407 seconds)
    (442/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.487349758 seconds)
    (443/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.55555931 seconds)
    (444/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.533554197 seconds)
    (445/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.420217898 seconds)
    (446/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.43187944 seconds)
    (447/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.419485649 seconds)
    (448/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.454318173 seconds)
    (449/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.431643682 seconds)
    (450/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.424318242 seconds)
    (451/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.422152869 seconds)
    (452/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.439686644 seconds)
    (453/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.424781388 seconds)
    (454/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.422467755 seconds)
    (455/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.42546113 seconds)
    (456/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.453605331 seconds)
    (457/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.426343893 seconds)
    (458/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.42222919 seconds)
    (459/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.438885548 seconds)
    (460/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.428350817 seconds)
    (461/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.429163837 seconds)
    (462/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.433898385 seconds)
    (463/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 7.152867003 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.903305375 seconds)
    (465/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.46722928 seconds)
    (466/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.556910529 seconds)
    (467/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.424716133 seconds)
    (468/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.437171507 seconds)
    (469/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.431169447 seconds)
    (470/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.438053892 seconds)
    (471/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.42580412 seconds)
    (472/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.437518308 seconds)
    (473/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.427736073 seconds)
    (474/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 7.428041682 seconds)
    (475/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.443687847 seconds)
    (476/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.428606105 seconds)
    (477/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.439818534 seconds)
    (478/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.425026286 seconds)
    (479/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.428274072 seconds)
    (480/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.434944626 seconds)
    (481/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.527342194 seconds)
    (482/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.623910256 seconds)
    (483/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 7.608040429 seconds)
    (484/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.525770884 seconds)
    (485/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.423959594 seconds)
    (486/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 7.424009731 seconds)
    (487/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.431235004 seconds)
    (488/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.424763659 seconds)
    (489/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.436253875 seconds)
    (490/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.423423203 seconds)
    (491/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.438711972 seconds)
    (492/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.424454494 seconds)
    (493/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.430529242 seconds)
    (494/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.427626695 seconds)
    (495/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 3.051357793 seconds)
    (496/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.428471553 seconds)
    (497/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 5.150278762 seconds)
    (498/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.422352506 seconds)
    (499/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.437915452 seconds)
    (500/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 7.426457995 seconds)
    (501/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.430187915 seconds)
    (502/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.424193237 seconds)
    (503/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.432860958 seconds)
    (504/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.426837902 seconds)
    (505/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.423172752 seconds)
    (506/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.424526687 seconds)
    (507/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.592405851 seconds)
    (508/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.427035813 seconds)
    (509/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.420129704 seconds)
    (510/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.425926625 seconds)
    (511/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.429361224 seconds)
    (512/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.433320779 seconds)
    (513/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.532381181 seconds)
    (514/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.463485848 seconds)
    (515/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.425965721 seconds)
    (516/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.886803831 seconds)
    (517/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.43010659 seconds)
    (518/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.426145525 seconds)
    (519/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.427071309 seconds)
    (520/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.431573461 seconds)
    (521/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.425271562 seconds)
    (522/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.435050762 seconds)
    (523/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.421822939 seconds)
    (524/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.431003976 seconds)
    (525/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.426464649 seconds)
    (526/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.421773805 seconds)
    (527/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.435740695 seconds)
    (528/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.425074324 seconds)
    (529/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.422923497 seconds)
    (530/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 3.060150718 seconds)
    (531/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.478724817 seconds)
    (532/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 6.185528864 seconds)
    (533/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 6.154562593 seconds)
    (534/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.429963817 seconds)
    (535/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.542810701 seconds)
    (536/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 7.42269256 seconds)
    (537/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.97589718 seconds)
    (538/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.432182836 seconds)
    (539/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.422044502 seconds)
    (540/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.422610056 seconds)
    (541/608) benchmarking "2d"...
    done (took 3.76927752 seconds)
    (542/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.428379668 seconds)
    (543/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 3.051123634 seconds)
    (544/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.603150973 seconds)
    (545/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.527448541 seconds)
    (546/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.635520749 seconds)
    (547/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.423343366 seconds)
    (548/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 7.428412461 seconds)
    (549/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.418620512 seconds)
    (550/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.434527954 seconds)
    (551/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.494718338 seconds)
    (552/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.426114088 seconds)
    (553/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 6.688826036 seconds)
    (554/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.421999207 seconds)
    (555/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.425246712 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.422401791 seconds)
    (557/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 7.423437906 seconds)
    (558/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.721321644 seconds)
    (559/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.421839051 seconds)
    (560/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.421949776 seconds)
    (561/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.221123263 seconds)
    (562/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.537045561 seconds)
    (563/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.434293025 seconds)
    (564/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.423837977 seconds)
    (565/608) benchmarking "4d"...
    done (took 4.274137267 seconds)
    (566/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.878417026 seconds)
    (567/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.54046669 seconds)
    (568/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.427804727 seconds)
    (569/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.43475457 seconds)
    (570/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.44462954 seconds)
    (571/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.432069234 seconds)
    (572/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.432882131 seconds)
    (573/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.429457209 seconds)
    (574/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.419996401 seconds)
    (575/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.422528335 seconds)
    (576/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.426135799 seconds)
    (577/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.4338247 seconds)
    (578/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.531193088 seconds)
    (579/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.429246225 seconds)
    (580/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 7.424484052 seconds)
    (581/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.43290073 seconds)
    (582/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.42781306 seconds)
    (583/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.422410482 seconds)
    (584/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.42348055 seconds)
    (585/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.709407809 seconds)
    (586/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.980701492 seconds)
    (587/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.435368973 seconds)
    (588/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.422237628 seconds)
    (589/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.42418309 seconds)
    (590/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.436626979 seconds)
    (591/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.25255424 seconds)
    (592/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.43211289 seconds)
    (593/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.423935065 seconds)
    (594/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.423966815 seconds)
    (595/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.421017142 seconds)
    (596/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.424670588 seconds)
    (597/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.422144832 seconds)
    (598/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 7.422078239 seconds)
    (599/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.428248171 seconds)
    (600/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.436293987 seconds)
    (601/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.423459441 seconds)
    (602/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.074652129 seconds)
    (603/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.424693107 seconds)
    (604/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.430032318 seconds)
    (605/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 6.809454837 seconds)
    (606/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 2.866965271 seconds)
    (607/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.426133675 seconds)
    (608/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.433866982 seconds)
  done (took 4021.903532581 seconds)
  (2/13) benchmarking "reductions"...
    (1/20) benchmarking ("sumabs", "Int64")...
    done (took 3.64718984 seconds)
    (2/20) benchmarking ("norminf", "Float64")...
    done (took 2.504261669 seconds)
    (3/20) benchmarking ("norm", "Float64")...
    done (took 3.330714818 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 3.4006007 seconds)
    (5/20) benchmarking ("maxabs", "Float64")...
    done (took 2.838832857 seconds)
    (6/20) benchmarking ("maxabs", "Int64")...
    done (took 2.988986751 seconds)
    (7/20) benchmarking ("mean", "Float64")...
    done (took 3.355437626 seconds)
    (8/20) benchmarking ("norm1", "Int64")...
    done (took 2.862897183 seconds)
    (9/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 3.244869892 seconds)
    (10/20) benchmarking ("sumabs2", "Int64")...
    done (took 3.290287294 seconds)
    (11/20) benchmarking ("sum", "Float64")...
    done (took 3.304967473 seconds)
    (12/20) benchmarking ("perf_reduce", "Float64")...
    done (took 3.473056426 seconds)
    (13/20) benchmarking ("sum", "Int64")...
    done (took 3.166562961 seconds)
    (14/20) benchmarking ("perf_reduce", "Int64")...
    done (took 3.235450176 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 3.302805009 seconds)
    (16/20) benchmarking ("norm", "Int64")...
    done (took 2.599696871 seconds)
    (17/20) benchmarking ("norm1", "Float64")...
    done (took 3.300813075 seconds)
    (18/20) benchmarking ("sumabs2", "Float64")...
    done (took 3.532949607 seconds)
    (19/20) benchmarking ("norminf", "Int64")...
    done (took 2.529243901 seconds)
    (20/20) benchmarking ("mean", "Int64")...
    done (took 2.954445396 seconds)
  done (took 65.288106525 seconds)
  (3/13) benchmarking "cat"...
    (1/17) benchmarking ("catnd_setind", 5)...
    done (took 2.44041721 seconds)
    (2/17) benchmarking "4467"...
    done (took 2.599900701 seconds)
    (3/17) benchmarking ("hcat", 500)...
    done (took 7.449043278 seconds)
    (4/17) benchmarking ("hcat_setind", 500)...
    done (took 7.431945388 seconds)
    (5/17) benchmarking ("vcat_setind", 500)...
    done (took 7.426174706 seconds)
    (6/17) benchmarking ("catnd", 500)...
    done (took 7.436869508 seconds)
    (7/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.426677736 seconds)
    (8/17) benchmarking ("catnd", 5)...
    done (took 2.47081016 seconds)
    (9/17) benchmarking ("hvcat", 5)...
    done (took 4.903798222 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 4.16610357 seconds)
    (11/17) benchmarking ("hcat_setind", 5)...
    done (took 4.366229642 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 7.423213764 seconds)
    (13/17) benchmarking ("vcat_setind", 5)...
    done (took 4.256862666 seconds)
    (14/17) benchmarking ("catnd_setind", 500)...
    done (took 7.431914766 seconds)
    (15/17) benchmarking ("hcat", 5)...
    done (took 4.896716916 seconds)
    (16/17) benchmarking ("hvcat", 500)...
    done (took 7.42576453 seconds)
    (17/17) benchmarking ("hvcat_setind", 5)...
    done (took 4.391264104 seconds)
  done (took 96.366576753 seconds)
  (4/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.478411148 seconds)
    (2/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.655374134 seconds)
    (3/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.454641107 seconds)
    (4/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.469703429 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.456660856 seconds)
    (6/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.52856537 seconds)
    (7/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.74728352 seconds)
    (8/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.50411211 seconds)
  done (took 62.72279537 seconds)
  (5/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Float64")...
    done (took 2.966952519 seconds)
    (2/4) benchmarking ("Float64", "Int")...
    done (took 3.043606419 seconds)
    (3/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 3.484243819 seconds)
    (4/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 3.18713672 seconds)
  done (took 15.105510082 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "boolarray_bool_load!"...
    done (took 7.42303521 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 3.577164907 seconds)
    (3/6) benchmarking "bitarray_true_load!"...
    done (took 7.422647562 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.822537787 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.436592872 seconds)
    (6/6) benchmarking "boolarray_true_fill!"...
    done (took 3.633166516 seconds)
  done (took 34.733783805 seconds)
  (7/13) benchmarking "accumulate"...
    (1/12) benchmarking ("accumulate!", "Float64")...
    done (took 3.317591362 seconds)
    (2/12) benchmarking ("accumulate", "Float64")...
    done (took 2.560387959 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.437653462 seconds)
    (4/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.426735541 seconds)
    (5/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.4411459 seconds)
    (6/12) benchmarking ("cumsum", "Int")...
    done (took 3.267778299 seconds)
    (7/12) benchmarking ("cumsum", "Float64")...
    done (took 2.585794045 seconds)
    (8/12) benchmarking ("accumulate!", "Int")...
    done (took 3.044321223 seconds)
    (9/12) benchmarking ("cumsum!", "Int")...
    done (took 3.049428566 seconds)
    (10/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.431422842 seconds)
    (11/12) benchmarking ("accumulate", "Int")...
    done (took 3.5525897 seconds)
    (12/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.555508262 seconds)
  done (took 56.091388148 seconds)
  (8/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.781756366 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.912090978 seconds)
    (3/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.65111396 seconds)
    (4/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 2.608833989 seconds)
    (5/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.830134569 seconds)
    (6/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.954612538 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 2.530890263 seconds)
    (8/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 2.701552663 seconds)
    (9/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 7.433544563 seconds)
    (10/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.460844285 seconds)
    (11/24) benchmarking ("==", "BitArray")...
    done (took 2.641490278 seconds)
    (12/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 2.482831777 seconds)
    (13/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.672761799 seconds)
    (14/24) benchmarking ("isequal", "BitArray")...
    done (took 2.491333778 seconds)
    (15/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.674751866 seconds)
    (16/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.806398844 seconds)
    (17/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.837745646 seconds)
    (18/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.463117551 seconds)
    (19/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 2.723817172 seconds)
    (20/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.826522327 seconds)
    (21/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 2.634834127 seconds)
    (22/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.727751861 seconds)
    (23/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.811438293 seconds)
    (24/24) benchmarking ("==", "Vector{Int16}")...
    done (took 3.067244858 seconds)
  done (took 72.150209916 seconds)
  (9/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 5)...
    done (took 2.692361889 seconds)
    (2/5) benchmarking ("setindex!", 2)...
    done (took 2.635526385 seconds)
    (3/5) benchmarking ("setindex!", 1)...
    done (took 2.671705571 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 2.646719453 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 2.688882013 seconds)
  done (took 15.758282659 seconds)
  (10/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.499262295 seconds)
    (2/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.528744341 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.536652534 seconds)
    (4/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.546617963 seconds)
    (5/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.427901156 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.427355686 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.425303771 seconds)
    (8/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.965505262 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 12.879141153 seconds)
    (10/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.903319379 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 13.020217574 seconds)
    (12/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.474581267 seconds)
  done (took 107.056489734 seconds)
  (11/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.433411773 seconds)
    (2/4) benchmarking "rev_load_slow!"...
    done (took 7.427743154 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.432611018 seconds)
    (4/4) benchmarking "rev_load_fast!"...
    done (took 7.425937281 seconds)
  done (took 32.141169509 seconds)
  (12/13) benchmarking "growth"...
    (1/12) benchmarking ("push_single!", 8)...
    done (took 2.488739136 seconds)
    (2/12) benchmarking ("push_single!", 2048)...
    done (took 2.515691541 seconds)
    (3/12) benchmarking ("append!", 2048)...
    done (took 2.832441336 seconds)
    (4/12) benchmarking ("append!", 8)...
    done (took 2.612677026 seconds)
    (5/12) benchmarking ("push_single!", 256)...
    done (took 2.502535322 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 2.70036545 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 2.65737628 seconds)
    (8/12) benchmarking ("append!", 256)...
    done (took 3.680355923 seconds)
    (9/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.507110702 seconds)
    (10/12) benchmarking ("prerend!", 256)...
    done (took 4.52664868 seconds)
    (11/12) benchmarking ("push_multiple!", 256)...
    done (took 2.507777666 seconds)
    (12/12) benchmarking ("prerend!", 2048)...
    done (took 2.966839118 seconds)
  done (took 36.924158936 seconds)
  (13/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.768188756 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.751199742 seconds)
    (3/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.77047826 seconds)
    (4/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.774839189 seconds)
    (5/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.747187375 seconds)
    (6/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.726243249 seconds)
    (7/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.726927003 seconds)
    (8/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.790042685 seconds)
    (9/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.777214257 seconds)
    (10/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.787483946 seconds)
    (11/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.665588874 seconds)
    (12/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.740584207 seconds)
    (13/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.774650051 seconds)
    (14/24) benchmarking ("all", "BitArray")...
    done (took 3.11337966 seconds)
    (15/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.794485699 seconds)
    (16/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.666578155 seconds)
    (17/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.76839966 seconds)
    (18/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.78031706 seconds)
    (19/24) benchmarking ("any", "BitArray")...
    done (took 3.106743497 seconds)
    (20/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.776549201 seconds)
    (21/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.665095982 seconds)
    (22/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.745151892 seconds)
    (23/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.789053036 seconds)
    (24/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.663965048 seconds)
  done (took 69.093646128 seconds)
done (took 4687.71904879 seconds)
(3/23) benchmarking "misc"...
  (1/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 3.039175437 seconds)
    (2/2) benchmarking "Float64"...
    done (took 3.20553624 seconds)
  done (took 8.66977169 seconds)
  (2/15) benchmarking "perf highdim generator"...
  done (took 2.883818667 seconds)
  (3/15) benchmarking "20517"...
  done (took 3.036258719 seconds)
  (4/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "no conditional"...
    done (took 3.270835876 seconds)
    (2/2) benchmarking "conditional"...
    done (took 3.283141378 seconds)
  done (took 8.982254569 seconds)
  (5/15) benchmarking "afoldl"...
    (1/3) benchmarking "Int"...
    done (took 2.490154288 seconds)
    (2/3) benchmarking "Float64"...
    done (took 3.042292912 seconds)
    (3/3) benchmarking "Complex{Float64}"...
    done (took 3.070490448 seconds)
  done (took 11.023371708 seconds)
  (6/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.597127219 seconds)
  done (took 5.023964974 seconds)
  (7/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.944993685 seconds)
    (2/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.764468375 seconds)
    (3/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.61946545 seconds)
  done (took 10.75913163 seconds)
  (8/15) benchmarking "18129"...
  done (took 7.445966517 seconds)
  (9/15) benchmarking "23042"...
    (1/4) benchmarking "Float64"...
    done (took 3.197887553 seconds)
    (2/4) benchmarking "ComplexF32"...
    done (took 3.606362845 seconds)
    (3/4) benchmarking "ComplexF64"...
    done (took 3.674846591 seconds)
    (4/4) benchmarking "Float32"...
    done (took 2.934873122 seconds)
  done (took 15.860161978 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 7.429173274 seconds)
    (2/4) benchmarking ("parse", "nested")...
    done (took 7.538452679 seconds)
    (3/4) benchmarking ("parse", "array")...
    done (took 4.409247773 seconds)
    (4/4) benchmarking ("parse", "function")...
    done (took 2.807218478 seconds)
  done (took 24.613164567 seconds)
  (11/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float64"...
    done (took 7.43944451 seconds)
    (2/3) benchmarking "Float16"...
    done (took 7.431780204 seconds)
    (3/3) benchmarking "Float32"...
    done (took 7.432445506 seconds)
  done (took 24.727769289 seconds)
  (12/15) benchmarking "fastmath many args"...
  done (took 2.664632512 seconds)
  (13/15) benchmarking "bitshift"...
    (1/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.464413106 seconds)
    (2/4) benchmarking ("Int", "UInt")...
    done (took 2.46099289 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.46227837 seconds)
    (4/4) benchmarking ("UInt", "UInt")...
    done (took 2.461980571 seconds)
  done (took 12.27184978 seconds)
  (14/15) benchmarking "iterators"...
    (1/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.928537124 seconds)
    (2/10) benchmarking "zip(1:1)"...
    done (took 2.864802088 seconds)
    (3/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.842446215 seconds)
    (4/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.925729648 seconds)
    (5/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.279482561 seconds)
    (6/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.697988417 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.896849818 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.786788483 seconds)
    (9/10) benchmarking "zip(1:1000)"...
    done (took 2.559632059 seconds)
    (10/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.751431466 seconds)
  done (took 30.955903043 seconds)
  (15/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 2.937450205 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 2.769170028 seconds)
  done (took 8.128122019 seconds)
done (took 179.467027723 seconds)
(4/23) benchmarking "sort"...
  (1/11) benchmarking "length = 30"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.430238312 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.44379025 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.435266413 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.440947251 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.43923751 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.435872308 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.430821682 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.433595925 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.441427287 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.440895951 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.436207103 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.441037134 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.572728578 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.435847929 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.442585694 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.44201998 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.442988522 seconds)
  done (took 44.010390236 seconds)
  (2/11) benchmarking "length = 10000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.458217398 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 6.883458759 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 4.223799724 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 6.727060351 seconds)
    (5/17) benchmarking "descending"...
    done (took 5.313171653 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.457499966 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.63229955 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 4.142436273 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 7.332502806 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 4.222378182 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 4.234585059 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 5.095292676 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 7.44954429 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.079894226 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 4.431382788 seconds)
    (16/17) benchmarking "ascending"...
    done (took 5.279774642 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 4.636953085 seconds)
  done (took 85.019879382 seconds)
  (3/11) benchmarking "length = 3"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.509186699 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.469876559 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.524597283 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.515002827 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.545950082 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.512592431 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.486996149 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.431083607 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.429819528 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.43263556 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.432919163 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.436055169 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.456605193 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.43831448 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.437976935 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.431490065 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.438078222 seconds)
  done (took 44.352297354 seconds)
  (4/11) benchmarking "length = 100"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.431926017 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.478870986 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.444203605 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.468511414 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.46338539 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.434366941 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.434773204 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.450683792 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.461093233 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.450773107 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.446396515 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.456029353 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 3.313587748 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.453163911 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.471536794 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.468460989 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.453712891 seconds)
  done (took 45.008194588 seconds)
  (5/11) benchmarking "issues"...
    (1/13) benchmarking "small Float64 view"...
    done (took 2.434245634 seconds)
    (2/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 7.42549953 seconds)
    (3/13) benchmarking "sortslices sorting very short slices"...
    done (took 7.931951074 seconds)
    (4/13) benchmarking "Float16"...
    done (took 7.479332055 seconds)
    (5/13) benchmarking "sort(rand(10^8))"...
    done (took 15.562396549 seconds)
    (6/13) benchmarking "sortperm(rand(10^5))"...
    done (took 7.421441162 seconds)
    (7/13) benchmarking "sortperm on a view (Int)"...
    done (took 6.923200531 seconds)
    (8/13) benchmarking "small Int view"...
    done (took 2.431461389 seconds)
    (9/13) benchmarking "sortperm on a view (Float64)"...
    done (took 2.834411093 seconds)
    (10/13) benchmarking "inplace sorting of a view"...
    done (took 2.599947062 seconds)
    (11/13) benchmarking "sortperm(rand(10^7))"...
    done (took 13.692757797 seconds)
    (12/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 2.988766984 seconds)
    (13/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 2.844422093 seconds)
  done (took 84.992473642 seconds)
  (6/11) benchmarking "mergesort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 7.433023165 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 7.438821636 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 7.43004908 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 7.440463983 seconds)
  done (took 32.168781423 seconds)
  (7/11) benchmarking "quicksort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 7.427566308 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 7.432725454 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 7.427150121 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 7.431775228 seconds)
  done (took 32.150545485 seconds)
  (8/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 2.457399319 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 2.452376565 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 2.463760488 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 2.451328262 seconds)
  done (took 12.265030781 seconds)
  (9/11) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ones")...
    done (took 3.652187959 seconds)
    (2/8) benchmarking ("reverse", "ascending")...
    done (took 3.198485679 seconds)
    (3/8) benchmarking ("forwards", "random")...
    done (took 3.197875252 seconds)
    (4/8) benchmarking ("forwards", "ascending")...
    done (took 3.146264682 seconds)
    (5/8) benchmarking ("forwards", "descending")...
    done (took 2.972294597 seconds)
    (6/8) benchmarking ("reverse", "random")...
    done (took 3.381244699 seconds)
    (7/8) benchmarking ("reverse", "descending")...
    done (took 3.139609574 seconds)
    (8/8) benchmarking ("reverse", "ones")...
    done (took 3.581715756 seconds)
  done (took 28.692205301 seconds)
  (10/11) benchmarking "length = 1000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.434831064 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.776014919 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.608817397 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.762702241 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.636398742 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.445015881 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.454529714 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.657963094 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.814131587 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.666365236 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.649395954 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.66155245 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 7.429825755 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.589574794 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.628239789 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.623167087 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.682147751 seconds)
  done (took 51.94963426 seconds)
  (11/11) benchmarking "length = 10"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.433911627 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.441533326 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.435077615 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.438819391 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.436595771 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.431095149 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.431083788 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.438513051 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.437221744 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.440143811 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.436776747 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.441800925 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.519556224 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.434160466 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.443144244 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.434279244 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.446730561 seconds)
  done (took 43.945790557 seconds)
done (took 506.987849854 seconds)
(5/23) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 7.428380685 seconds)
done (took 9.850817381 seconds)
(6/23) benchmarking "shootout"...
  (1/12) benchmarking "binary_trees"...
  done (took 7.43834337 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.540189843 seconds)
  (3/12) benchmarking "regex_dna"...
  done (took 7.426536954 seconds)
  (4/12) benchmarking "fannkuch"...
  done (took 3.815693462 seconds)
  (5/12) benchmarking "mandelbrot"...
  done (took 7.42823663 seconds)
  (6/12) benchmarking "pidigits"...
  done (took 7.466402528 seconds)
  (7/12) benchmarking "spectralnorm"...
  done (took 7.430873653 seconds)
  (8/12) benchmarking "k_nucleotide"...
  done (took 7.445128946 seconds)
  (9/12) benchmarking "nbody"...
  done (took 3.453646354 seconds)
  (10/12) benchmarking "revcomp"...
  done (took 3.466741316 seconds)
  (11/12) benchmarking "nbody_vec"...
  done (took 6.238982499 seconds)
  (12/12) benchmarking "meteor_contest"...
  done (took 9.088462708 seconds)
done (took 75.66162375 seconds)
(7/23) benchmarking "sparse"...
  (1/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.677210337 seconds)
    (2/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.434747974 seconds)
    (3/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.527001078 seconds)
    (4/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 3.369020361 seconds)
    (5/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 3.08112171 seconds)
    (6/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.597446757 seconds)
    (7/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 6.30742544 seconds)
    (8/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 6.487504093 seconds)
    (9/54) benchmarking ("spmat", "range", 100)...
    done (took 2.883311058 seconds)
    (10/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.378752374 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 7.537543539 seconds)
    (12/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 6.368777427 seconds)
    (13/54) benchmarking ("spmat", "range", 10)...
    done (took 4.134725627 seconds)
    (14/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.621801864 seconds)
    (15/54) benchmarking ("spmat", "logical", 10)...
    done (took 3.182115589 seconds)
    (16/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.606867603 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 6.237920533 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.877750276 seconds)
    (19/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.74793631 seconds)
    (20/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.787842695 seconds)
    (21/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 4.095951748 seconds)
    (22/54) benchmarking ("spmat", "integer", 1000)...
    done (took 6.200167894 seconds)
    (23/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 7.428573577 seconds)
    (24/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.612483374 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.42437779 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 6.551116194 seconds)
    (27/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.25256347 seconds)
    (28/54) benchmarking ("spmat", "range", 1000)...
    done (took 7.280550488 seconds)
    (29/54) benchmarking ("spvec", "range", 1000)...
    done (took 4.667320907 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.49249585 seconds)
    (31/54) benchmarking ("spmat", "array", 100)...
    done (took 2.935801436 seconds)
    (32/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.175983546 seconds)
    (33/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.642151825 seconds)
    (34/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.687817263 seconds)
    (35/54) benchmarking ("spmat", "array", 10)...
    done (took 2.522857817 seconds)
    (36/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.438888827 seconds)
    (37/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.766176051 seconds)
    (38/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 3.082484227 seconds)
    (39/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.716683464 seconds)
    (40/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 7.209150311 seconds)
    (41/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.430328684 seconds)
    (42/54) benchmarking ("spvec", "range", 10000)...
    done (took 3.807607342 seconds)
    (43/54) benchmarking ("spmat", "logical", 1000)...
    done (took 7.422139629 seconds)
    (44/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.176086746 seconds)
    (45/54) benchmarking ("spvec", "logical", 10000)...
    done (took 3.090296086 seconds)
    (46/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.425785753 seconds)
    (47/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 3.32847446 seconds)
    (48/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.567684956 seconds)
    (49/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.595374124 seconds)
    (50/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 6.245319368 seconds)
    (51/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 3.578056984 seconds)
    (52/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 3.361423199 seconds)
    (53/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.666455985 seconds)
    (54/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 3.036590492 seconds)
  done (took 237.18927719 seconds)
  (2/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "adjoint"...
    done (took 7.689627806 seconds)
    (2/2) benchmarking "non-adjoint"...
    done (took 7.762903391 seconds)
  done (took 17.941229096 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("IJV", 1000)...
    done (took 2.694283882 seconds)
    (2/18) benchmarking ("SymTridiagonal", 10)...
    done (took 4.523443892 seconds)
    (3/18) benchmarking ("Diagonal", 100)...
    done (took 4.797808524 seconds)
    (4/18) benchmarking ("Tridiagonal", 10)...
    done (took 4.418455771 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 4.622311561 seconds)
    (6/18) benchmarking ("Diagonal", 1000)...
    done (took 2.880303418 seconds)
    (7/18) benchmarking ("Diagonal", 10)...
    done (took 3.862045044 seconds)
    (8/18) benchmarking ("IJV", 10)...
    done (took 3.03685295 seconds)
    (9/18) benchmarking ("IV", 100)...
    done (took 2.873148758 seconds)
    (10/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.589274368 seconds)
    (11/18) benchmarking ("IJV", 100)...
    done (took 2.965709176 seconds)
    (12/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.663437253 seconds)
    (13/18) benchmarking ("Bidiagonal", 10)...
    done (took 4.083284366 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.965585304 seconds)
    (15/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.990419422 seconds)
    (16/18) benchmarking ("IV", 10)...
    done (took 3.006465871 seconds)
    (17/18) benchmarking ("IV", 1000)...
    done (took 2.694638683 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 3.075762388 seconds)
  done (took 63.177396353 seconds)
  (4/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.888262001 seconds)
    (2/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 3.033000763 seconds)
    (3/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.433819695 seconds)
    (4/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.874342508 seconds)
    (5/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.434165172 seconds)
    (6/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 4.436665857 seconds)
    (7/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 7.436182222 seconds)
    (8/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.1405422 seconds)
    (9/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 5.693578066 seconds)
    (10/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.842834135 seconds)
    (11/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.923570232 seconds)
    (12/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.432577294 seconds)
    (13/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.428868042 seconds)
    (14/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.961029079 seconds)
    (15/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.945076268 seconds)
    (16/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 3.217429806 seconds)
    (17/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 7.457440191 seconds)
    (18/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.426222155 seconds)
    (19/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.437118878 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.424428075 seconds)
    (21/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.850939106 seconds)
    (22/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.436446779 seconds)
    (23/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.728939852 seconds)
    (24/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.450393504 seconds)
    (25/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.625920583 seconds)
    (26/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.436871406 seconds)
    (27/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 3.008770888 seconds)
    (28/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.866995275 seconds)
    (29/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.434913787 seconds)
    (30/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.68199335 seconds)
    (31/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.435844148 seconds)
    (32/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.424151495 seconds)
    (33/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 4.563050231 seconds)
    (34/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.432162457 seconds)
    (35/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.416857954 seconds)
    (36/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.945866532 seconds)
    (37/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.427805217 seconds)
    (38/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.68084976 seconds)
    (39/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.43593457 seconds)
    (40/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 7.207642785 seconds)
    (41/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.424945894 seconds)
    (42/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.423986816 seconds)
    (43/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.793287672 seconds)
    (44/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 7.434105214 seconds)
    (45/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.866587408 seconds)
    (46/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.433386431 seconds)
    (47/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 3.264630615 seconds)
    (48/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.959128211 seconds)
    (49/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.437312032 seconds)
    (50/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 3.196953802 seconds)
    (51/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.777852087 seconds)
    (52/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.44583212 seconds)
    (53/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.96799992 seconds)
    (54/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 3.011216205 seconds)
    (55/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.601000921 seconds)
    (56/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.660293962 seconds)
    (57/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.985087604 seconds)
    (58/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.443014277 seconds)
    (59/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.982182782 seconds)
    (60/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.895447435 seconds)
    (61/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.434628753 seconds)
    (62/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.425884928 seconds)
    (63/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.933042213 seconds)
    (64/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.438649844 seconds)
    (65/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.887481733 seconds)
    (66/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.868599127 seconds)
    (67/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.388696104 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.436830335 seconds)
    (69/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.945126572 seconds)
    (70/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.440873253 seconds)
    (71/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.815640508 seconds)
    (72/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.437962179 seconds)
    (73/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 7.433248006 seconds)
    (74/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 3.01500641 seconds)
    (75/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.442053293 seconds)
    (76/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 4.373460256 seconds)
    (77/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.422690629 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.380683077 seconds)
    (79/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 3.084890369 seconds)
    (80/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.432242127 seconds)
    (81/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.431496398 seconds)
    (82/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 3.16484391 seconds)
    (83/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.942951411 seconds)
    (84/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.433519863 seconds)
    (85/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.427027122 seconds)
    (86/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.789485383 seconds)
    (87/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.855334337 seconds)
    (88/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.454257141 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.401511249 seconds)
    (90/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.434059874 seconds)
    (91/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.430615421 seconds)
    (92/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 3.284214509 seconds)
    (93/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.429009271 seconds)
    (94/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.427972591 seconds)
    (95/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 3.261708997 seconds)
    (96/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.922076608 seconds)
    (97/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.368913605 seconds)
    (98/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.429673647 seconds)
    (99/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.923567704 seconds)
    (100/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.436560735 seconds)
    (101/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 7.433474058 seconds)
    (102/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.832261246 seconds)
    (103/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 3.229291274 seconds)
    (104/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 7.428871445 seconds)
    (105/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.652140386 seconds)
    (106/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 7.327897385 seconds)
    (107/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 6.755572256 seconds)
    (108/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.916901109 seconds)
    (109/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.435446596 seconds)
    (110/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.912705261 seconds)
    (111/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.965182179 seconds)
    (112/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.427861095 seconds)
    (113/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.702032786 seconds)
    (114/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 3.036597558 seconds)
    (115/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.987885193 seconds)
    (116/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.417805054 seconds)
    (117/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.432534065 seconds)
    (118/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.428742207 seconds)
    (119/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.424074813 seconds)
    (120/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.906735377 seconds)
    (121/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.438536869 seconds)
    (122/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.426582932 seconds)
    (123/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.433003062 seconds)
    (124/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.896542115 seconds)
    (125/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.427263043 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.956175986 seconds)
    (127/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.967724212 seconds)
    (128/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 3.215692699 seconds)
    (129/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.440155851 seconds)
    (130/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.433506084 seconds)
    (131/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.426809563 seconds)
    (132/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.061643189 seconds)
    (133/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.363597409 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.441354629 seconds)
    (135/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.42491312 seconds)
    (136/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 4.928087479 seconds)
    (137/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.432945824 seconds)
    (138/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.919189295 seconds)
    (139/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.443065175 seconds)
    (140/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.429011963 seconds)
    (141/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.44929107 seconds)
    (142/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 7.133535094 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.784564927 seconds)
    (144/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.434626473 seconds)
    (145/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.426819842 seconds)
    (146/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.427575735 seconds)
    (147/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.910484388 seconds)
    (148/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.659994593 seconds)
    (149/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 3.609103462 seconds)
    (150/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.429018535 seconds)
    (151/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.656239986 seconds)
    (152/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.695716548 seconds)
    (153/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.903132062 seconds)
    (154/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.429986712 seconds)
    (155/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.655083186 seconds)
    (156/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.111693815 seconds)
    (157/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 7.427725542 seconds)
    (158/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.802018679 seconds)
    (159/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.87179488 seconds)
    (160/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.710349899 seconds)
    (161/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.442872729 seconds)
    (162/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.808637424 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.43336706 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.714594833 seconds)
    (165/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.940024631 seconds)
    (166/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.431222389 seconds)
    (167/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.426554104 seconds)
    (168/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 5.866780491 seconds)
    (169/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.83055026 seconds)
    (170/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.615638109 seconds)
    (171/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 3.192706871 seconds)
    (172/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.994418329 seconds)
    (173/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 5.242304181 seconds)
    (174/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 3.000111446 seconds)
    (175/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.430995607 seconds)
    (176/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.426118632 seconds)
    (177/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 3.120573943 seconds)
    (178/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.444824891 seconds)
    (179/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.431884014 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.424184674 seconds)
    (181/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 7.181249786 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.911463087 seconds)
    (183/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.429402876 seconds)
    (184/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.858413333 seconds)
    (185/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.401721344 seconds)
    (186/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.908026905 seconds)
    (187/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.436357321 seconds)
    (188/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.952085297 seconds)
    (189/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.757977236 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 7.449995109 seconds)
    (191/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.428945204 seconds)
    (192/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.431212274 seconds)
    (193/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.783938371 seconds)
    (194/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.91064494 seconds)
    (195/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.428162556 seconds)
    (196/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 7.423875623 seconds)
    (197/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.924464469 seconds)
    (198/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 3.147872709 seconds)
    (199/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 3.068585402 seconds)
    (200/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.673079867 seconds)
    (201/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 5.288059525 seconds)
    (202/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.544216664 seconds)
    (203/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 7.551911932 seconds)
    (204/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.937229306 seconds)
    (205/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.429722323 seconds)
    (206/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.433885789 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.602740279 seconds)
    (208/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.96096254 seconds)
    (209/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.425813938 seconds)
    (210/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.438373824 seconds)
    (211/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.978386307 seconds)
    (212/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.118199743 seconds)
    (213/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 3.703216955 seconds)
    (214/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.912388625 seconds)
    (215/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.382260525 seconds)
    (216/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 7.426077481 seconds)
    (217/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.952925435 seconds)
    (218/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.431827092 seconds)
    (219/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.425476255 seconds)
    (220/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.975186017 seconds)
    (221/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.798689062 seconds)
    (222/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.444182809 seconds)
    (223/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.948252829 seconds)
    (224/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.443249072 seconds)
  done (took 1143.065486659 seconds)
  (5/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 2.948086185 seconds)
    (2/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 7.488522028 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 3.790150508 seconds)
    (4/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 3.268267954 seconds)
    (5/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 3.226630186 seconds)
    (6/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 7.521752137 seconds)
    (7/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 2.990478566 seconds)
    (8/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 7.61016704 seconds)
    (9/16) benchmarking ("transpose", "(600, 600)")...
    done (took 2.853722053 seconds)
    (10/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 7.966345378 seconds)
    (11/16) benchmarking ("transpose", "(600, 400)")...
    done (took 2.723321704 seconds)
    (12/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 7.464082421 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 3.329518864 seconds)
    (14/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 7.706164471 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 7.699720672 seconds)
    (16/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 7.593904852 seconds)
  done (took 88.60450236 seconds)
  (6/7) benchmarking "sparse solves"...
    (1/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.467313442 seconds)
    (2/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.489101771 seconds)
    (3/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.516017108 seconds)
    (4/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.467551766 seconds)
    (5/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.497349473 seconds)
    (6/10) benchmarking "square system (default), vector rhs"...
    done (took 7.508134444 seconds)
    (7/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.495611296 seconds)
    (8/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.491873622 seconds)
    (9/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.50693919 seconds)
    (10/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.468372902 seconds)
  done (took 77.329791622 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 2.895833027 seconds)
    (2/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 7.580009695 seconds)
  done (took 12.897908615 seconds)
done (took 1642.646492579 seconds)
(8/23) benchmarking "scalar"...
  (1/25) benchmarking "fastmath"...
    (1/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.46243604 seconds)
    (2/49) benchmarking ("sub", "BigFloat")...
    done (took 2.7937329 seconds)
    (3/49) benchmarking ("div", "Int64")...
    done (took 2.537352797 seconds)
    (4/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 3.480064524 seconds)
    (5/49) benchmarking ("add", "Int64")...
    done (took 4.044376903 seconds)
    (6/49) benchmarking "13786"...
    done (took 2.460565563 seconds)
    (7/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.460280502 seconds)
    (8/49) benchmarking ("sub", "UInt64")...
    done (took 2.463337497 seconds)
    (9/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.920753113 seconds)
    (10/49) benchmarking ("mul", "BigFloat")...
    done (took 3.242512561 seconds)
    (11/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.582421531 seconds)
    (12/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 4.044849632 seconds)
    (13/49) benchmarking ("add", "BigFloat")...
    done (took 2.951169662 seconds)
    (14/49) benchmarking ("sub", "Float32")...
    done (took 2.524731111 seconds)
    (15/49) benchmarking ("div", "Float64")...
    done (took 2.458123897 seconds)
    (16/49) benchmarking ("div", "Float32")...
    done (took 2.457045639 seconds)
    (17/49) benchmarking ("sub", "BigInt")...
    done (took 2.909605767 seconds)
    (18/49) benchmarking ("sub", "Float64")...
    done (took 3.28975614 seconds)
    (19/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 3.445340898 seconds)
    (20/49) benchmarking ("mul", "Float64")...
    done (took 2.474049956 seconds)
    (21/49) benchmarking ("add", "ComplexF64")...
    done (took 2.461751337 seconds)
    (22/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.460872692 seconds)
    (23/49) benchmarking ("add", "ComplexF32")...
    done (took 2.462932454 seconds)
    (24/49) benchmarking ("div", "ComplexF64")...
    done (took 2.471881441 seconds)
    (25/49) benchmarking ("add", "BigInt")...
    done (took 2.942391813 seconds)
    (26/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 4.113717372 seconds)
    (27/49) benchmarking ("div", "BigFloat")...
    done (took 4.83811743 seconds)
    (28/49) benchmarking ("add", "Float64")...
    done (took 2.476542017 seconds)
    (29/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.90036781 seconds)
    (30/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.54066428 seconds)
    (31/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.460313827 seconds)
    (32/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.458098053 seconds)
    (33/49) benchmarking ("mul", "Int64")...
    done (took 2.456974677 seconds)
    (34/49) benchmarking ("sub", "Int64")...
    done (took 2.467890036 seconds)
    (35/49) benchmarking ("mul", "BigInt")...
    done (took 3.177035519 seconds)
    (36/49) benchmarking ("mul", "Float32")...
    done (took 3.278957918 seconds)
    (37/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.500909651 seconds)
    (38/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.459219216 seconds)
    (39/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.465696866 seconds)
    (40/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 3.322777297 seconds)
    (41/49) benchmarking ("div", "UInt64")...
    done (took 2.471049802 seconds)
    (42/49) benchmarking ("div", "ComplexF32")...
    done (took 2.463414171 seconds)
    (43/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.463840781 seconds)
    (44/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.460297936 seconds)
    (45/49) benchmarking ("mul", "UInt64")...
    done (took 2.460733129 seconds)
    (46/49) benchmarking ("add", "Float32")...
    done (took 2.458290758 seconds)
    (47/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.392573711 seconds)
    (48/49) benchmarking ("div", "BigInt")...
    done (took 4.902349269 seconds)
    (49/49) benchmarking ("add", "UInt64")...
    done (took 2.499833703 seconds)
  done (took 144.709064432 seconds)
  (2/25) benchmarking "atan2"...
    (1/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.481763591 seconds)
    (2/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.484743071 seconds)
    (3/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.561435813 seconds)
    (4/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.620905103 seconds)
    (5/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.489703894 seconds)
    (6/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.473972315 seconds)
    (7/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.482891282 seconds)
    (8/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.615770665 seconds)
    (9/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.48395299 seconds)
    (10/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.488027663 seconds)
    (11/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.546084788 seconds)
    (12/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.487964091 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.486687414 seconds)
    (14/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.477949644 seconds)
    (15/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.482151287 seconds)
    (16/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.615598733 seconds)
    (17/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.480304104 seconds)
    (18/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.47071612 seconds)
    (19/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.479994117 seconds)
    (20/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.480156088 seconds)
    (21/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.561314026 seconds)
    (22/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.485453864 seconds)
    (23/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.483139121 seconds)
    (24/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.487625937 seconds)
    (25/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.480332265 seconds)
    (26/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.477593675 seconds)
    (27/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.55428204 seconds)
    (28/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.484568335 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.566088249 seconds)
    (30/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.474563299 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.493260576 seconds)
    (32/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.476770377 seconds)
    (33/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.474831277 seconds)
    (34/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.494552142 seconds)
    (35/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.48954248 seconds)
    (36/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.487459128 seconds)
    (37/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.471802602 seconds)
    (38/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.613772101 seconds)
    (39/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.488774636 seconds)
    (40/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.545812672 seconds)
    (41/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.610368847 seconds)
    (42/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.475422192 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.492492593 seconds)
    (44/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.491684237 seconds)
    (45/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.482077192 seconds)
    (46/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.47698902 seconds)
    (47/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.497571906 seconds)
    (48/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.480396411 seconds)
    (49/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.483824929 seconds)
    (50/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.544146835 seconds)
    (51/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.485966606 seconds)
    (52/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.544397751 seconds)
    (53/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.472833943 seconds)
    (54/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.612917392 seconds)
    (55/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.49011868 seconds)
    (56/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.482980409 seconds)
    (57/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.552602522 seconds)
    (58/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.490345361 seconds)
    (59/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.615195291 seconds)
    (60/68) benchmarking ("x one", "Float64")...
    done (took 2.506618055 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.480268949 seconds)
    (62/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.554911604 seconds)
    (63/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.481968222 seconds)
    (64/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.608339878 seconds)
    (65/68) benchmarking ("x one", "Float32")...
    done (took 2.524399486 seconds)
    (66/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.480803378 seconds)
    (67/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.479160487 seconds)
    (68/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.486887686 seconds)
  done (took 173.099018406 seconds)
  (3/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.511021457 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.508549752 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.509693705 seconds)
    (4/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.507818202 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.719341171 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.513508434 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.707145411 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.568338635 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.506617192 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.507908377 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.713031079 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.50912802 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.562918118 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.507826505 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.50765845 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.560348663 seconds)
    (17/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.718180486 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.51076654 seconds)
    (19/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.562868711 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.505915034 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.509748528 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.500864671 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.510324599 seconds)
    (24/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.710641203 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.510315522 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.507666451 seconds)
    (27/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.491790305 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.508145778 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.508209655 seconds)
    (30/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.487420888 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.563036244 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.506889638 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.509455246 seconds)
    (34/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.50467088 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.509082242 seconds)
    (36/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.707087026 seconds)
    (37/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.709487879 seconds)
    (38/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.479691167 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.505504155 seconds)
    (40/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.4799269 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.566591434 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.508029634 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.50683051 seconds)
    (44/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.485322434 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.564664294 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.56276245 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.509673514 seconds)
    (48/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.562862658 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.513547106 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.506492866 seconds)
    (51/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.562295979 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.504122276 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.529291203 seconds)
    (54/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.505928433 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.507901347 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.701107455 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.564677767 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.511210839 seconds)
    (59/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.487545365 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.563803086 seconds)
    (61/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.505305356 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.560356062 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.569359534 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.510819465 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.509062357 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.527433522 seconds)
  done (took 170.273249958 seconds)
  (4/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "UInt64", "+")...
    done (took 2.433126149 seconds)
    (2/6) benchmarking ("#8", "Int64", "+")...
    done (took 2.443806038 seconds)
    (3/6) benchmarking ("#6", "BigInt", "+")...
    done (took 2.449241454 seconds)
    (4/6) benchmarking ("#6", "UInt64", "+")...
    done (took 2.449757529 seconds)
    (5/6) benchmarking ("#6", "Int64", "+")...
    done (took 2.433542776 seconds)
    (6/6) benchmarking ("#8", "BigInt", "+")...
    done (took 2.449235719 seconds)
  done (took 17.083556156 seconds)
  (5/25) benchmarking "atanh"...
    (1/16) benchmarking ("zero", "Float64")...
    done (took 2.494539486 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.563624584 seconds)
    (3/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.575135111 seconds)
    (4/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.560475764 seconds)
    (5/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.566989016 seconds)
    (6/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 3.277371392 seconds)
    (7/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.565695048 seconds)
    (8/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.279946528 seconds)
    (9/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 3.280159769 seconds)
    (10/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.610762895 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.570267046 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.611131936 seconds)
    (13/16) benchmarking ("one", "Float32")...
    done (took 2.494943829 seconds)
    (14/16) benchmarking ("zero", "Float32")...
    done (took 2.499099116 seconds)
    (15/16) benchmarking ("one", "Float64")...
    done (took 2.491044007 seconds)
    (16/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.29128687 seconds)
  done (took 46.165262501 seconds)
  (6/25) benchmarking "acos"...
    (1/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.511908255 seconds)
    (2/18) benchmarking ("zero", "Float64")...
    done (took 2.62293519 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.486046845 seconds)
    (4/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 3.299186574 seconds)
    (5/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.47792114 seconds)
    (6/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.484078418 seconds)
    (7/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.516787417 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 3.318699025 seconds)
    (9/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.549093599 seconds)
    (10/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.495220903 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.485769939 seconds)
    (12/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.486935191 seconds)
    (13/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.486347845 seconds)
    (14/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.488189539 seconds)
    (15/18) benchmarking ("zero", "Float32")...
    done (took 2.478475829 seconds)
    (16/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.478880855 seconds)
    (17/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.478544492 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.474797262 seconds)
  done (took 49.04219551 seconds)
  (7/25) benchmarking "asinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.567607612 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.48823137 seconds)
    (3/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.612881334 seconds)
    (4/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.664295239 seconds)
    (5/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.506108773 seconds)
    (6/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.569643402 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.485161632 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.65768128 seconds)
    (9/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.661768058 seconds)
    (10/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.663245771 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.606428211 seconds)
    (12/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.612835125 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.485540298 seconds)
    (14/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.604884266 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.548551014 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.488648418 seconds)
    (17/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.546415257 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.551031377 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 2.483659858 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.552690078 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.486034863 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.50673152 seconds)
  done (took 58.774085182 seconds)
  (8/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.487088159 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.5025611 seconds)
    (3/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.7136764 seconds)
    (4/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.503897384 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.714551103 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.502775309 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.707446886 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.561663952 seconds)
    (9/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.50258248 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.504588599 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.713454214 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.504542153 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.508659936 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.503918817 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.508717333 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.505324908 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.510984656 seconds)
    (18/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.71431941 seconds)
    (19/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.506165025 seconds)
    (20/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.564287527 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.500966358 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.565045426 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.506337468 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.505746419 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.716869678 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.507737184 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.527549883 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.702103002 seconds)
    (29/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.480959213 seconds)
    (30/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.480142362 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.508033472 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.502158855 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.502744219 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.506905785 seconds)
    (35/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.509214413 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.502508755 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.515141226 seconds)
    (38/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.563626135 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.509606041 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.501244846 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.501706178 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.501785103 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.531571523 seconds)
    (44/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.504887227 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.567035239 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.568181596 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.512441475 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.48182575 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.507379055 seconds)
    (50/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.486769478 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.507318025 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.507079941 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.717191629 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.50476281 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.507528359 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.503871829 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.566689132 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.507715221 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.505436323 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.508981636 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.504795787 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.562586835 seconds)
    (63/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.485851533 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.513589514 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.503602707 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.515755158 seconds)
  done (took 169.867623813 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("zero", "Float64")...
    done (took 2.519466177 seconds)
    (2/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.501294097 seconds)
    (3/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.50077706 seconds)
    (4/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.502926439 seconds)
    (5/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.503430286 seconds)
    (6/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.485442997 seconds)
    (7/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.501996122 seconds)
    (8/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.484818532 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.968252951 seconds)
    (10/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.505430327 seconds)
    (11/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.481875603 seconds)
    (12/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 7.42484077 seconds)
    (13/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.480586567 seconds)
    (14/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.503751129 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.961120845 seconds)
    (16/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.521563725 seconds)
    (17/30) benchmarking ("one", "Float32")...
    done (took 2.504006406 seconds)
    (18/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.474208779 seconds)
    (19/30) benchmarking ("zero", "Float32")...
    done (took 2.498955536 seconds)
    (20/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.474349318 seconds)
    (21/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.501070818 seconds)
    (22/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.479473022 seconds)
    (23/30) benchmarking ("one", "Float64")...
    done (took 2.507327171 seconds)
    (24/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.499761495 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 7.429703038 seconds)
    (26/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.499983339 seconds)
    (27/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.483663343 seconds)
    (28/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.500130688 seconds)
    (29/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.478956976 seconds)
    (30/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.499975789 seconds)
  done (took 94.103299252 seconds)
  (10/25) benchmarking "cosh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 2.478669182 seconds)
    (2/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.525873964 seconds)
    (3/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.530823638 seconds)
    (4/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.523101597 seconds)
    (5/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.526433215 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.475428465 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.471389097 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.530246605 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.478745104 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.525902586 seconds)
    (11/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.531293728 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.476835318 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.530603094 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.474966695 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.514680027 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.519607389 seconds)
    (17/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.472741003 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.484576137 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.472695173 seconds)
    (20/22) benchmarking ("zero", "Float32")...
    done (took 2.471852156 seconds)
    (21/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.486018129 seconds)
    (22/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.475636238 seconds)
  done (took 57.407056584 seconds)
  (11/25) benchmarking "cbrt"...
    (1/20) benchmarking ("zero", "Float64")...
    done (took 2.479577311 seconds)
    (2/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.580835613 seconds)
    (3/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.576548367 seconds)
    (4/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 3.370554674 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.576830161 seconds)
    (6/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.641307953 seconds)
    (7/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.4798808 seconds)
    (8/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.564508673 seconds)
    (9/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 3.377554027 seconds)
    (10/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.563887043 seconds)
    (11/20) benchmarking ("one", "Float32")...
    done (took 2.54748089 seconds)
    (12/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.483744796 seconds)
    (13/20) benchmarking ("zero", "Float32")...
    done (took 2.481945722 seconds)
    (14/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.543409053 seconds)
    (15/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.544217908 seconds)
    (16/20) benchmarking ("one", "Float64")...
    done (took 2.564911586 seconds)
    (17/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.64793761 seconds)
    (18/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.545645339 seconds)
    (19/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.576135464 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.544455269 seconds)
  done (took 57.116613586 seconds)
  (12/25) benchmarking "sinh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 2.519236459 seconds)
    (2/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.543502752 seconds)
    (3/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.547377365 seconds)
    (4/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.530065936 seconds)
    (5/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.532935687 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.873329869 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.484756569 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.542823048 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.482078506 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.531095183 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.035410152 seconds)
    (12/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.543475643 seconds)
    (13/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.523648989 seconds)
    (14/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.521305081 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.877338434 seconds)
    (16/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.532495977 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.513872754 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.496274861 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 2.486683121 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.496086355 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.036683146 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.514686565 seconds)
  done (took 59.590534114 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.480374685 seconds)
    (2/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.48891536 seconds)
    (3/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.48005031 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.688981264 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.484929781 seconds)
    (6/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.479825793 seconds)
    (7/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.485416551 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.488489867 seconds)
    (9/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.480237006 seconds)
    (10/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.483079552 seconds)
    (11/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.535950501 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.524970918 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.513785863 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.501156989 seconds)
    (15/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.485910577 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.690548565 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.504315651 seconds)
    (18/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.485327916 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.510519157 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.486575295 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.485690679 seconds)
  done (took 55.189734658 seconds)
  (14/25) benchmarking "predicate"...
    (1/72) benchmarking ("isinf", "Float32")...
    done (took 2.476939868 seconds)
    (2/72) benchmarking ("isinteger", "Float64")...
    done (took 2.461634329 seconds)
    (3/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.50840609 seconds)
    (4/72) benchmarking ("iseven", "BigInt")...
    done (took 2.474954559 seconds)
    (5/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.448927525 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.466297668 seconds)
    (7/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.455253682 seconds)
    (8/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.524541153 seconds)
    (9/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.454481799 seconds)
    (10/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.457871291 seconds)
    (11/72) benchmarking ("isnan", "Float64")...
    done (took 2.457040076 seconds)
    (12/72) benchmarking ("isnan", "Float32")...
    done (took 2.461379481 seconds)
    (13/72) benchmarking ("isequal", "Float32")...
    done (took 2.465642305 seconds)
    (14/72) benchmarking ("isless", "BigFloat")...
    done (took 2.550214491 seconds)
    (15/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.44878454 seconds)
    (16/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.461010979 seconds)
    (17/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.46806629 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.511667062 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.465016335 seconds)
    (20/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.465644322 seconds)
    (21/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.467525234 seconds)
    (22/72) benchmarking ("isinf", "Int64")...
    done (took 2.447997328 seconds)
    (23/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.460634053 seconds)
    (24/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.463514719 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.464949157 seconds)
    (26/72) benchmarking ("isequal", "BigInt")...
    done (took 2.491716714 seconds)
    (27/72) benchmarking ("isless", "Float64")...
    done (took 2.464299023 seconds)
    (28/72) benchmarking ("isfinite", "Int64")...
    done (took 2.446831563 seconds)
    (29/72) benchmarking ("isnan", "BigInt")...
    done (took 2.451624331 seconds)
    (30/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.46211297 seconds)
    (31/72) benchmarking ("isodd", "Int64")...
    done (took 2.460646188 seconds)
    (32/72) benchmarking ("isinteger", "Float32")...
    done (took 2.461921323 seconds)
    (33/72) benchmarking ("isless", "Float32")...
    done (took 2.467490931 seconds)
    (34/72) benchmarking ("isequal", "Int64")...
    done (took 2.462031878 seconds)
    (35/72) benchmarking ("isequal", "Float64")...
    done (took 2.463764967 seconds)
    (36/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.621264968 seconds)
    (37/72) benchmarking ("isless", "BigInt")...
    done (took 2.486077199 seconds)
    (38/72) benchmarking ("isnan", "UInt64")...
    done (took 2.446828373 seconds)
    (39/72) benchmarking ("isinf", "BigInt")...
    done (took 2.445969773 seconds)
    (40/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.46954369 seconds)
    (41/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.460380432 seconds)
    (42/72) benchmarking ("isodd", "BigInt")...
    done (took 2.478861733 seconds)
    (43/72) benchmarking ("isfinite", "Float64")...
    done (took 2.461545889 seconds)
    (44/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.449421049 seconds)
    (45/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.46014591 seconds)
    (46/72) benchmarking ("iseven", "UInt64")...
    done (took 2.468189745 seconds)
    (47/72) benchmarking ("isinf", "Float64")...
    done (took 2.458962265 seconds)
    (48/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.449707723 seconds)
    (49/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.44882166 seconds)
    (50/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.465111008 seconds)
    (51/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.448985308 seconds)
    (52/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.457943284 seconds)
    (53/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.44784396 seconds)
    (54/72) benchmarking ("isfinite", "Float32")...
    done (took 2.459729444 seconds)
    (55/72) benchmarking ("isless", "UInt64")...
    done (took 2.460604972 seconds)
    (56/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.451176786 seconds)
    (57/72) benchmarking ("isinf", "UInt64")...
    done (took 2.447764143 seconds)
    (58/72) benchmarking ("iseven", "Int64")...
    done (took 2.460038609 seconds)
    (59/72) benchmarking ("isinteger", "Int64")...
    done (took 2.451015121 seconds)
    (60/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.460413161 seconds)
    (61/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.452600415 seconds)
    (62/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.446417426 seconds)
    (63/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.466073267 seconds)
    (64/72) benchmarking ("isnan", "Int64")...
    done (took 2.44710177 seconds)
    (65/72) benchmarking ("isless", "Int64")...
    done (took 2.462623489 seconds)
    (66/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.446671767 seconds)
    (67/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.463118091 seconds)
    (68/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.464695373 seconds)
    (69/72) benchmarking ("isequal", "UInt64")...
    done (took 2.463158012 seconds)
    (70/72) benchmarking ("isodd", "UInt64")...
    done (took 2.459669236 seconds)
    (71/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.554362844 seconds)
    (72/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.467770221 seconds)
  done (took 180.061418015 seconds)
  (15/25) benchmarking "sincos"...
    (1/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.560650559 seconds)
    (2/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.534528653 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.613934697 seconds)
    (4/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.771547261 seconds)
    (5/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.614886507 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.559755405 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.558335446 seconds)
    (8/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.538673448 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.558924323 seconds)
    (10/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.62611871 seconds)
    (11/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.613599043 seconds)
    (12/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.558815565 seconds)
    (13/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.614646391 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.557191281 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.558693776 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.562679918 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.558253304 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.558065833 seconds)
    (19/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.618149175 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.559685532 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.524678068 seconds)
    (22/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.560390529 seconds)
    (23/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.765801842 seconds)
    (24/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.561030394 seconds)
    (25/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.528680969 seconds)
    (26/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.624904715 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.575909034 seconds)
    (28/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.515274344 seconds)
    (29/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.559188968 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.562202478 seconds)
    (31/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.617741025 seconds)
    (32/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.516438339 seconds)
    (33/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.531663271 seconds)
    (34/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.55822988 seconds)
    (35/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.557726428 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.527765351 seconds)
    (37/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.558104998 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.559156569 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.562529097 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.564645493 seconds)
    (41/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.532556312 seconds)
    (42/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.555096597 seconds)
    (43/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.533140716 seconds)
    (44/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.614926297 seconds)
    (45/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.767314669 seconds)
    (46/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.619672419 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.615469568 seconds)
    (48/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.571062366 seconds)
    (49/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.559217025 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.579388984 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.558024742 seconds)
    (52/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.539330583 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.558253494 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.562256658 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.61669401 seconds)
    (56/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.619650767 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.61555687 seconds)
    (58/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.766161706 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.671987397 seconds)
    (60/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.81716586 seconds)
    (61/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.861517798 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.563763183 seconds)
  done (took 163.154620802 seconds)
  (16/25) benchmarking "tan"...
    (1/18) benchmarking ("zero", "Float64")...
    done (took 2.662682303 seconds)
    (2/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 3.410241855 seconds)
    (3/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 3.44662459 seconds)
    (4/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.555983061 seconds)
    (5/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 3.288113965 seconds)
    (6/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.481289744 seconds)
    (7/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 3.305888017 seconds)
    (8/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.483101974 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.479883978 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.480745914 seconds)
    (11/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 3.384977657 seconds)
    (12/18) benchmarking ("zero", "Float32")...
    done (took 2.475525767 seconds)
    (13/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 3.335098853 seconds)
    (14/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 3.435084326 seconds)
    (15/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.481756219 seconds)
    (16/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.474634372 seconds)
    (17/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 3.331536249 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.483993037 seconds)
  done (took 54.446596075 seconds)
  (17/25) benchmarking "exp2"...
    (1/24) benchmarking ("zero", "Float64")...
    done (took 2.494337614 seconds)
    (2/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.495546385 seconds)
    (3/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.495899601 seconds)
    (4/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.296996247 seconds)
    (5/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.496077883 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.47690953 seconds)
    (7/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 4.811505478 seconds)
    (8/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.512506534 seconds)
    (9/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.302810291 seconds)
    (10/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.490045967 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 2.504628759 seconds)
    (12/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.498868691 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 2.493720931 seconds)
    (14/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 2.435570717 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 2.433583088 seconds)
    (16/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 2.434390719 seconds)
    (17/24) benchmarking ("one", "Float64")...
    done (took 2.495163411 seconds)
    (18/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 2.434491407 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 4.812181106 seconds)
    (20/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.495416723 seconds)
    (21/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.492081919 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.497044829 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.479916638 seconds)
    (24/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.492801784 seconds)
  done (took 72.299285047 seconds)
  (18/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.481300451 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.485537035 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.490851896 seconds)
    (4/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.483122432 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.486907107 seconds)
    (6/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.511815127 seconds)
    (7/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.49214734 seconds)
    (8/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.508751732 seconds)
    (9/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.671830508 seconds)
    (10/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.480408875 seconds)
    (11/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.513109227 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.486985388 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.514381088 seconds)
    (14/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.514180227 seconds)
    (15/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.509757169 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.513885308 seconds)
    (17/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.672446566 seconds)
    (18/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.489927724 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.481078964 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.483536977 seconds)
    (21/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.493000249 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.483849098 seconds)
    (23/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.481831237 seconds)
    (24/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.509669161 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.490155454 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.484055314 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.484318504 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.482283735 seconds)
  done (took 72.609146596 seconds)
  (19/25) benchmarking "atan"...
    (1/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.50343144 seconds)
    (2/30) benchmarking ("zero", "Float64")...
    done (took 2.477477964 seconds)
    (3/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.509476204 seconds)
    (4/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.555985078 seconds)
    (5/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.558949394 seconds)
    (6/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.512106982 seconds)
    (7/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.4866742 seconds)
    (8/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.500902683 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.48970725 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.50193576 seconds)
    (11/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.559834327 seconds)
    (12/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.562815778 seconds)
    (13/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.559958257 seconds)
    (14/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.506982507 seconds)
    (15/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.484561986 seconds)
    (16/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.480232177 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.519037941 seconds)
    (18/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.475980438 seconds)
    (19/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.478755531 seconds)
    (20/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.480356064 seconds)
    (21/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.518762191 seconds)
    (22/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.482685812 seconds)
    (23/30) benchmarking ("zero", "Float32")...
    done (took 2.482874376 seconds)
    (24/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.57979552 seconds)
    (25/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.486793026 seconds)
    (26/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.481283051 seconds)
    (27/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.552636469 seconds)
    (28/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.515850085 seconds)
    (29/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.565023253 seconds)
    (30/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.513486529 seconds)
  done (took 77.811021204 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.467566185 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.504670685 seconds)
    (3/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.476519939 seconds)
    (4/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.479027112 seconds)
    (5/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.503412969 seconds)
    (6/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.486719564 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.473749029 seconds)
    (8/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.494828892 seconds)
    (9/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.474480254 seconds)
    (10/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.476816375 seconds)
    (11/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.8491741 seconds)
    (12/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.474020322 seconds)
    (13/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.498734493 seconds)
    (14/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.509904636 seconds)
    (15/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.474250716 seconds)
    (16/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.471922878 seconds)
    (17/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.498430878 seconds)
    (18/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.472270164 seconds)
    (19/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.469381815 seconds)
    (20/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.957388475 seconds)
    (21/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.479724581 seconds)
    (22/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.502429707 seconds)
    (23/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.497233365 seconds)
    (24/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.468828633 seconds)
    (25/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.483258517 seconds)
    (26/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.46819904 seconds)
    (27/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.500892856 seconds)
    (28/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.498002536 seconds)
    (29/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.498536338 seconds)
    (30/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.841424002 seconds)
    (31/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.50797468 seconds)
    (32/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.480673739 seconds)
    (33/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.476000974 seconds)
    (34/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.46774797 seconds)
    (35/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.481861604 seconds)
    (36/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.506466106 seconds)
    (37/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.841293164 seconds)
    (38/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.956145231 seconds)
    (39/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.499415982 seconds)
    (40/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.479894811 seconds)
    (41/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.46838407 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.506515962 seconds)
    (43/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.466277326 seconds)
    (44/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.49808902 seconds)
    (45/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.467198113 seconds)
    (46/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.468803275 seconds)
    (47/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.467873003 seconds)
    (48/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.467563959 seconds)
    (49/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.50042424 seconds)
    (50/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.497469506 seconds)
    (51/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.467910889 seconds)
    (52/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.502632016 seconds)
    (53/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.508406735 seconds)
    (54/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.476008474 seconds)
    (55/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.840141189 seconds)
  done (took 141.484478934 seconds)
  (21/25) benchmarking "asin"...
    (1/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.507230902 seconds)
    (2/20) benchmarking ("zero", "Float64")...
    done (took 2.482932876 seconds)
    (3/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.48848126 seconds)
    (4/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.485788314 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.485474826 seconds)
    (6/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.506831728 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.506317415 seconds)
    (8/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.549168499 seconds)
    (9/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.539225234 seconds)
    (10/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.488913469 seconds)
    (11/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.490297542 seconds)
    (12/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.535502741 seconds)
    (13/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.489792716 seconds)
    (14/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 3.299019399 seconds)
    (15/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.488794536 seconds)
    (16/20) benchmarking ("zero", "Float32")...
    done (took 2.486751141 seconds)
    (17/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.49034517 seconds)
    (18/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 3.324954962 seconds)
    (19/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.488944329 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.484904549 seconds)
  done (took 54.049958219 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.501665065 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.503545032 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.485821486 seconds)
    (4/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.502236878 seconds)
    (5/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.537939551 seconds)
    (6/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.492522337 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.898636258 seconds)
    (8/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.539980462 seconds)
    (9/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.54109198 seconds)
    (10/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.542779782 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.955714965 seconds)
    (12/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.488115525 seconds)
    (13/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.486653801 seconds)
    (14/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.902604467 seconds)
    (15/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.503043832 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.481614456 seconds)
    (17/22) benchmarking ("zero", "Float32")...
    done (took 2.487914184 seconds)
    (18/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.4910327 seconds)
    (19/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.489252115 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.480432678 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.955000943 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.504361905 seconds)
  done (took 59.208052504 seconds)
  (23/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float32")...
    done (took 2.480225484 seconds)
    (2/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.66204781 seconds)
    (3/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.595345177 seconds)
    (4/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.607059746 seconds)
    (5/8) benchmarking ("one", "Float64")...
    done (took 2.477756701 seconds)
    (6/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.541253539 seconds)
    (7/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.549387877 seconds)
    (8/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.613737567 seconds)
  done (took 22.954253241 seconds)
  (24/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.463519756 seconds)
    (2/2) benchmarking "in"...
    done (took 2.477167402 seconds)
  done (took 7.369556878 seconds)
  (25/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 3.749188641 seconds)
    (2/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.592710802 seconds)
    (3/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.463601564 seconds)
    (4/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 3.561262322 seconds)
    (5/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 5.49942011 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.28171547 seconds)
    (7/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.486174198 seconds)
    (8/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.074270966 seconds)
    (9/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.469435818 seconds)
    (10/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.473530335 seconds)
    (11/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.465436215 seconds)
    (12/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 4.09791121 seconds)
    (13/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.552369843 seconds)
    (14/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 4.0183867 seconds)
    (15/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 3.516762325 seconds)
    (16/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.480349398 seconds)
    (17/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 3.398523313 seconds)
    (18/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.529867861 seconds)
    (19/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.751590069 seconds)
    (20/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.816044827 seconds)
    (21/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.857946779 seconds)
    (22/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.599131313 seconds)
    (23/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.469928038 seconds)
    (24/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.890633027 seconds)
    (25/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 5.072010958 seconds)
    (26/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 3.660950163 seconds)
    (27/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.690514312 seconds)
    (28/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.463819613 seconds)
    (29/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.540492716 seconds)
    (30/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 4.008352171 seconds)
    (31/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 3.321145036 seconds)
    (32/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.35381923 seconds)
    (33/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 3.853911648 seconds)
    (34/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.811030455 seconds)
    (35/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.530943802 seconds)
    (36/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 3.902657405 seconds)
    (37/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.524833006 seconds)
    (38/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.470179944 seconds)
    (39/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.542311402 seconds)
    (40/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.280049416 seconds)
    (41/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 3.762230748 seconds)
    (42/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 3.294876123 seconds)
    (43/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.753026274 seconds)
    (44/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.576524332 seconds)
    (45/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 3.492489875 seconds)
    (46/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 3.347101811 seconds)
    (47/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 4.071281728 seconds)
    (48/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.463454353 seconds)
    (49/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.462262059 seconds)
    (50/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 3.527651658 seconds)
    (51/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.467011682 seconds)
    (52/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 3.042836337 seconds)
    (53/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.732705329 seconds)
    (54/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.517902659 seconds)
    (55/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.928670701 seconds)
    (56/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 3.292374297 seconds)
    (57/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.471390595 seconds)
    (58/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 4.102327247 seconds)
    (59/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 3.714964035 seconds)
    (60/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 3.3186629 seconds)
    (61/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 3.180102668 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 3.350817572 seconds)
    (63/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 3.345414133 seconds)
    (64/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 3.290769592 seconds)
    (65/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 3.971539262 seconds)
    (66/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 4.511986235 seconds)
    (67/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.629590956 seconds)
    (68/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.465414428 seconds)
    (69/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.463549823 seconds)
    (70/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.470982084 seconds)
    (71/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.319072481 seconds)
    (72/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 5.349705667 seconds)
    (73/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 3.379396404 seconds)
    (74/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 5.324001015 seconds)
    (75/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 3.295938801 seconds)
    (76/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 3.667434315 seconds)
    (77/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 5.56233607 seconds)
    (78/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.515582826 seconds)
    (79/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.226170545 seconds)
    (80/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.61365605 seconds)
    (81/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.412152193 seconds)
    (82/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 4.018674187 seconds)
    (83/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.533728022 seconds)
    (84/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.168538608 seconds)
    (85/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 3.384754393 seconds)
    (86/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.803372413 seconds)
    (87/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 3.711906637 seconds)
    (88/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.580015075 seconds)
    (89/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.566243287 seconds)
    (90/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.518271087 seconds)
    (91/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.179193283 seconds)
    (92/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.635924061 seconds)
    (93/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 3.313531617 seconds)
    (94/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 4.264223484 seconds)
    (95/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.878683218 seconds)
    (96/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.885814113 seconds)
    (97/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.644296946 seconds)
    (98/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.465639914 seconds)
    (99/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.463085864 seconds)
    (100/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.88672947 seconds)
    (101/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 3.30106662 seconds)
    (102/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.180591894 seconds)
    (103/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.735468035 seconds)
    (104/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.575462262 seconds)
    (105/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.468922205 seconds)
    (106/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.669871744 seconds)
    (107/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 4.145705069 seconds)
    (108/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 4.658992133 seconds)
    (109/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 3.600400605 seconds)
    (110/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 4.077507512 seconds)
    (111/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.977647417 seconds)
    (112/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.611723968 seconds)
    (113/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.605533692 seconds)
    (114/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.381723791 seconds)
    (115/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 4.987592532 seconds)
    (116/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 5.172334104 seconds)
    (117/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.185104854 seconds)
    (118/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.634554363 seconds)
    (119/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.470065071 seconds)
    (120/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.875014547 seconds)
    (121/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 3.673283058 seconds)
    (122/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.464989237 seconds)
    (123/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.465647791 seconds)
    (124/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.466026742 seconds)
    (125/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 3.372083813 seconds)
    (126/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.58881879 seconds)
    (127/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 3.3266051 seconds)
    (128/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.489701355 seconds)
    (129/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 3.432836181 seconds)
    (130/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 3.789527106 seconds)
    (131/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.669906041 seconds)
    (132/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 3.591080735 seconds)
    (133/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.583225271 seconds)
    (134/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.463848891 seconds)
    (135/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.464054195 seconds)
    (136/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.466303125 seconds)
    (137/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 3.162577852 seconds)
    (138/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 3.385489157 seconds)
    (139/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.512982595 seconds)
    (140/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.465186318 seconds)
    (141/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.9142373 seconds)
    (142/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 4.108363859 seconds)
    (143/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.610479421 seconds)
    (144/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.955481724 seconds)
    (145/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.183696092 seconds)
    (146/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.10051636 seconds)
    (147/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.471802161 seconds)
    (148/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.223670661 seconds)
    (149/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.292409611 seconds)
    (150/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.601496285 seconds)
    (151/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.49202231 seconds)
    (152/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.828603818 seconds)
    (153/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.588727324 seconds)
    (154/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.463857381 seconds)
    (155/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.466680347 seconds)
    (156/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 3.999588028 seconds)
    (157/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 3.607261764 seconds)
    (158/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.529521147 seconds)
    (159/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.462232861 seconds)
    (160/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 3.361432015 seconds)
    (161/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.521266371 seconds)
    (162/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.463397594 seconds)
    (163/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.821132731 seconds)
    (164/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 3.11806633 seconds)
    (165/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.651549754 seconds)
    (166/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 3.283652488 seconds)
    (167/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 3.95076451 seconds)
    (168/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 3.548436594 seconds)
    (169/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 3.484994468 seconds)
    (170/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.463468239 seconds)
    (171/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.748076788 seconds)
    (172/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.602091769 seconds)
    (173/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.463478048 seconds)
    (174/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.463008462 seconds)
    (175/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.461213471 seconds)
    (176/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.497527295 seconds)
    (177/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.724663411 seconds)
    (178/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.612980056 seconds)
    (179/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.466250755 seconds)
    (180/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.270498398 seconds)
    (181/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.607383737 seconds)
    (182/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 3.174915926 seconds)
    (183/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.284061274 seconds)
    (184/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 3.163463009 seconds)
    (185/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 3.291265297 seconds)
    (186/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 3.134785633 seconds)
    (187/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.374793206 seconds)
    (188/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 5.443189422 seconds)
    (189/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 3.621118967 seconds)
    (190/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 3.600509804 seconds)
    (191/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 3.998120088 seconds)
    (192/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.47393949 seconds)
    (193/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.463470778 seconds)
    (194/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 4.066291433 seconds)
    (195/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.599598687 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.791687281 seconds)
    (197/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.527653365 seconds)
    (198/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.348793639 seconds)
    (199/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.436900151 seconds)
    (200/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.481407971 seconds)
    (201/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.740391426 seconds)
    (202/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 3.287821885 seconds)
    (203/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.935705725 seconds)
    (204/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 3.025315773 seconds)
    (205/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.529884836 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 3.335204939 seconds)
    (207/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.504176893 seconds)
    (208/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 3.25028942 seconds)
    (209/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.602635786 seconds)
    (210/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.144992008 seconds)
    (211/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.641683909 seconds)
    (212/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.813445687 seconds)
    (213/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 3.215778983 seconds)
    (214/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 3.297691742 seconds)
    (215/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.462838713 seconds)
    (216/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.465979829 seconds)
    (217/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 3.395054973 seconds)
    (218/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.534207223 seconds)
    (219/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 3.36625408 seconds)
    (220/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.908333339 seconds)
    (221/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 3.566603925 seconds)
    (222/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 3.876492346 seconds)
    (223/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 3.870177886 seconds)
    (224/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.899393407 seconds)
    (225/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.622977087 seconds)
    (226/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.466506146 seconds)
    (227/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.376198552 seconds)
    (228/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 3.858474637 seconds)
    (229/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 3.432033052 seconds)
    (230/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 4.112520204 seconds)
    (231/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 3.921470448 seconds)
    (232/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 3.583190757 seconds)
    (233/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.511865274 seconds)
    (234/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.475139232 seconds)
    (235/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.743327055 seconds)
    (236/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.144046896 seconds)
    (237/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 3.433046249 seconds)
    (238/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.604878953 seconds)
    (239/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.489785234 seconds)
    (240/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.470652063 seconds)
    (241/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 3.340587299 seconds)
    (242/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.517564801 seconds)
    (243/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.460691085 seconds)
    (244/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.370160525 seconds)
    (245/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 4.104805123 seconds)
    (246/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.924222631 seconds)
    (247/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.711485426 seconds)
    (248/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 4.825900509 seconds)
    (249/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.917131344 seconds)
    (250/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.792477393 seconds)
    (251/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.590274921 seconds)
    (252/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 3.55794363 seconds)
    (253/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.034175136 seconds)
    (254/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.601848269 seconds)
    (255/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 3.90920774 seconds)
    (256/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.78866225 seconds)
    (257/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 4.07922997 seconds)
    (258/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.470844576 seconds)
    (259/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 3.318674188 seconds)
    (260/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 3.845912642 seconds)
    (261/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.713027482 seconds)
    (262/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.475659916 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.464761426 seconds)
    (264/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 3.176193225 seconds)
    (265/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 3.305620323 seconds)
    (266/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.288507179 seconds)
    (267/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 3.997582062 seconds)
    (268/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.924414064 seconds)
    (269/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 3.693674412 seconds)
    (270/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 5.461883459 seconds)
    (271/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.908813045 seconds)
    (272/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.451243726 seconds)
    (273/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 4.057020771 seconds)
    (274/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.515389836 seconds)
    (275/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.459084983 seconds)
    (276/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 3.977652453 seconds)
    (277/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 3.301304945 seconds)
    (278/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.461867988 seconds)
    (279/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.466162572 seconds)
    (280/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.789610728 seconds)
    (281/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 3.308995138 seconds)
    (282/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 3.823269912 seconds)
    (283/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.670641976 seconds)
    (284/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 3.358769194 seconds)
    (285/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.525394522 seconds)
    (286/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.741156661 seconds)
    (287/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.906120929 seconds)
    (288/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.945492128 seconds)
    (289/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.425552853 seconds)
    (290/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.194976501 seconds)
    (291/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.731052964 seconds)
    (292/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.648451184 seconds)
    (293/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.601809624 seconds)
    (294/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.473381128 seconds)
    (295/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 3.254922399 seconds)
    (296/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 3.735184682 seconds)
    (297/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 3.999083973 seconds)
    (298/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 3.21511658 seconds)
    (299/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.056169818 seconds)
    (300/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 3.617407039 seconds)
    (301/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.069843987 seconds)
    (302/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.752791204 seconds)
    (303/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.466270679 seconds)
    (304/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.46000791 seconds)
    (305/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.332954404 seconds)
    (306/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 4.063504292 seconds)
    (307/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.786784021 seconds)
    (308/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 3.793695638 seconds)
    (309/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 4.886150075 seconds)
    (310/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 4.053908654 seconds)
    (311/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.985709148 seconds)
    (312/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.408447659 seconds)
    (313/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 3.220677201 seconds)
    (314/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 4.223933672 seconds)
    (315/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.613521276 seconds)
    (316/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.891929781 seconds)
    (317/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 3.299997622 seconds)
    (318/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.465540081 seconds)
    (319/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.462940663 seconds)
    (320/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.463895008 seconds)
    (321/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.536029051 seconds)
    (322/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.811798859 seconds)
    (323/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.541495381 seconds)
    (324/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.633575157 seconds)
    (325/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 3.950302228 seconds)
    (326/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.74087389 seconds)
    (327/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 3.35339852 seconds)
    (328/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 4.060367771 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 3.525801466 seconds)
    (330/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.226266899 seconds)
    (331/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.069171992 seconds)
    (332/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.63613898 seconds)
    (333/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.786212798 seconds)
    (334/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.014947855 seconds)
    (335/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.016570814 seconds)
    (336/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.924037039 seconds)
    (337/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 3.58549386 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.440165401 seconds)
    (339/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.594008442 seconds)
    (340/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 3.299479655 seconds)
    (341/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.29479446 seconds)
    (342/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 3.272681017 seconds)
    (343/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 3.96459526 seconds)
    (344/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.529782319 seconds)
    (345/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 3.171524353 seconds)
    (346/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 3.717171516 seconds)
    (347/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.82576923 seconds)
    (348/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.538884352 seconds)
    (349/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.604782429 seconds)
    (350/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.610907964 seconds)
    (351/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.260230388 seconds)
    (352/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.598791233 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.773453346 seconds)
    (354/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.928635041 seconds)
    (355/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.581937067 seconds)
    (356/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.464732783 seconds)
    (357/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.465587083 seconds)
    (358/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.466763577 seconds)
    (359/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.819372693 seconds)
    (360/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 3.506895195 seconds)
    (361/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.551384366 seconds)
    (362/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 3.582869186 seconds)
    (363/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.698039461 seconds)
    (364/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 3.066296301 seconds)
    (365/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.009095761 seconds)
    (366/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 4.051803718 seconds)
    (367/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.601126396 seconds)
    (368/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.531255209 seconds)
    (369/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 4.005080914 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.573151007 seconds)
    (371/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.844422893 seconds)
    (372/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 4.104737767 seconds)
    (373/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.002797232 seconds)
    (374/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.392129021 seconds)
    (375/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.96915694 seconds)
    (376/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.156863202 seconds)
    (377/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.72439677 seconds)
    (378/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.897157803 seconds)
    (379/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 3.54642331 seconds)
    (380/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.545309762 seconds)
    (381/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.466528295 seconds)
    (382/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.462002641 seconds)
    (383/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 3.174096187 seconds)
    (384/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.612580665 seconds)
    (385/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.469011704 seconds)
    (386/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 3.415830348 seconds)
    (387/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.592992949 seconds)
    (388/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.603166202 seconds)
    (389/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.462047874 seconds)
    (390/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.382896395 seconds)
    (391/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 5.131611319 seconds)
    (392/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 4.017748809 seconds)
    (393/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 3.402795914 seconds)
    (394/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 3.263185412 seconds)
    (395/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.609353807 seconds)
    (396/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.46587964 seconds)
    (397/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.468110276 seconds)
    (398/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 3.369560665 seconds)
    (399/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.470651809 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 5.443869278 seconds)
    (401/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.725530333 seconds)
    (402/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 3.358026334 seconds)
    (403/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.519233677 seconds)
    (404/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 3.165466114 seconds)
    (405/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.290205066 seconds)
    (406/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 3.189949943 seconds)
    (407/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 3.21360114 seconds)
    (408/596) benchmarking ("div", "Int64", "Float32")...
    done (took 3.285819659 seconds)
    (409/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.464039646 seconds)
    (410/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 3.86026392 seconds)
    (411/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.805365109 seconds)
    (412/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.810353045 seconds)
    (413/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.529104501 seconds)
    (414/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.627571685 seconds)
    (415/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.582107665 seconds)
    (416/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.462016446 seconds)
    (417/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 3.1619275 seconds)
    (418/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.129793323 seconds)
    (419/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.739249493 seconds)
    (420/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.466366164 seconds)
    (421/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.463609222 seconds)
    (422/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.868472068 seconds)
    (423/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.59431034 seconds)
    (424/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 3.848518077 seconds)
    (425/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.592936304 seconds)
    (426/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.465861954 seconds)
    (427/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.578308141 seconds)
    (428/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 3.953923272 seconds)
    (429/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.670152027 seconds)
    (430/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.466018044 seconds)
    (431/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.467065266 seconds)
    (432/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.966978123 seconds)
    (433/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.721245855 seconds)
    (434/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 3.373546675 seconds)
    (435/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 3.666606912 seconds)
    (436/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.610420499 seconds)
    (437/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 3.802140407 seconds)
    (438/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.663144571 seconds)
    (439/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 3.164163329 seconds)
    (440/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.166386899 seconds)
    (441/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 3.63860828 seconds)
    (442/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.034999712 seconds)
    (443/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.739948265 seconds)
    (444/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.467258908 seconds)
    (445/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.46271172 seconds)
    (446/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.944200163 seconds)
    (447/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 4.407394772 seconds)
    (448/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 4.084204945 seconds)
    (449/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 3.259118465 seconds)
    (450/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.52590849 seconds)
    (451/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 3.144582408 seconds)
    (452/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 3.672778616 seconds)
    (453/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.788770672 seconds)
    (454/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.635511679 seconds)
    (455/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.350602589 seconds)
    (456/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.594283311 seconds)
    (457/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.001938442 seconds)
    (458/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 4.152909021 seconds)
    (459/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.568043973 seconds)
    (460/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.466572073 seconds)
    (461/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 3.810498634 seconds)
    (462/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.531262115 seconds)
    (463/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 3.832293725 seconds)
    (464/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.619736895 seconds)
    (465/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.627668461 seconds)
    (466/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.609515121 seconds)
    (467/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.477985212 seconds)
    (468/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 3.464476725 seconds)
    (469/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.466513259 seconds)
    (470/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.475023124 seconds)
    (471/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.803710772 seconds)
    (472/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.538275165 seconds)
    (473/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.288912548 seconds)
    (474/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 3.866488796 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.474672918 seconds)
    (476/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.465488492 seconds)
    (477/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.465758635 seconds)
    (478/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.467704753 seconds)
    (479/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 3.440310365 seconds)
    (480/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.472833539 seconds)
    (481/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.612710247 seconds)
    (482/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 5.365807215 seconds)
    (483/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.849507642 seconds)
    (484/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.314476144 seconds)
    (485/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.613127205 seconds)
    (486/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 3.605699243 seconds)
    (487/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 3.780369407 seconds)
    (488/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 3.40799391 seconds)
    (489/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.33790417 seconds)
    (490/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 4.875661238 seconds)
    (491/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.467819338 seconds)
    (492/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 3.697456169 seconds)
    (493/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.905660141 seconds)
    (494/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 3.472737154 seconds)
    (495/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 3.019761516 seconds)
    (496/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 3.032207437 seconds)
    (497/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.543216954 seconds)
    (498/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.465184701 seconds)
    (499/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.461961812 seconds)
    (500/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 3.152330708 seconds)
    (501/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 3.420805912 seconds)
    (502/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.475228629 seconds)
    (503/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.465981295 seconds)
    (504/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 3.845731356 seconds)
    (505/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 4.07701038 seconds)
    (506/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.602008676 seconds)
    (507/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.467989915 seconds)
    (508/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.465672532 seconds)
    (509/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.466016876 seconds)
    (510/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.560599639 seconds)
    (511/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 4.020946909 seconds)
    (512/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.477023036 seconds)
    (513/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.262427297 seconds)
    (514/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.607320048 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.465103801 seconds)
    (516/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.309402519 seconds)
    (517/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 4.862242101 seconds)
    (518/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 4.724701608 seconds)
    (519/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 4.093118553 seconds)
    (520/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.474648292 seconds)
    (521/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.466466556 seconds)
    (522/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 3.934330894 seconds)
    (523/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.726048331 seconds)
    (524/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 3.137692375 seconds)
    (525/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 3.637641681 seconds)
    (526/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 5.328770553 seconds)
    (527/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.664424991 seconds)
    (528/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 3.451819564 seconds)
    (529/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.490130161 seconds)
    (530/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.473130306 seconds)
    (531/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.468650257 seconds)
    (532/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 4.077223275 seconds)
    (533/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.600665914 seconds)
    (534/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.470053168 seconds)
    (535/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.46656821 seconds)
    (536/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 3.960034668 seconds)
    (537/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.752107157 seconds)
    (538/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.542866703 seconds)
    (539/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.496288325 seconds)
    (540/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 3.50024399 seconds)
    (541/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 3.620744871 seconds)
    (542/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 4.345222659 seconds)
    (543/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.537598427 seconds)
    (544/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.771633064 seconds)
    (545/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 3.502683207 seconds)
    (546/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.865872387 seconds)
    (547/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 3.850761023 seconds)
    (548/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.876295343 seconds)
    (549/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.696154485 seconds)
    (550/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.609039447 seconds)
    (551/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.843394849 seconds)
    (552/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.626935386 seconds)
    (553/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.508074123 seconds)
    (554/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 3.853792316 seconds)
    (555/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 3.60055979 seconds)
    (556/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 4.511383089 seconds)
    (557/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.509522395 seconds)
    (558/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.508336643 seconds)
    (559/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.641159857 seconds)
    (560/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.468759163 seconds)
    (561/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 3.547836983 seconds)
    (562/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 4.017596961 seconds)
    (563/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.468917451 seconds)
    (564/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.469255681 seconds)
    (565/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.013918413 seconds)
    (566/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 3.649701237 seconds)
    (567/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.18684167 seconds)
    (568/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.610709709 seconds)
    (569/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.472168902 seconds)
    (570/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.473478816 seconds)
    (571/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.412338269 seconds)
    (572/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.54933184 seconds)
    (573/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.46636504 seconds)
    (574/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.729511541 seconds)
    (575/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.942131319 seconds)
    (576/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.627715789 seconds)
    (577/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.907132702 seconds)
    (578/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.921600775 seconds)
    (579/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.626793791 seconds)
    (580/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.475196827 seconds)
    (581/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.018895487 seconds)
    (582/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.218777133 seconds)
    (583/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.772745045 seconds)
    (584/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.525204937 seconds)
    (585/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.469384677 seconds)
    (586/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.463792238 seconds)
    (587/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 3.446990403 seconds)
    (588/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.774953252 seconds)
    (589/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 3.917392643 seconds)
    (590/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 3.58869479 seconds)
    (591/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 5.017057816 seconds)
    (592/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 3.139167322 seconds)
    (593/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 3.992734181 seconds)
    (594/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.660533462 seconds)
    (595/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.183161746 seconds)
    (596/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 4.17551232 seconds)
  done (took 1972.331333471 seconds)
done (took 4032.631858543 seconds)
(9/23) benchmarking "dates"...
  (1/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.664376074 seconds)
    (2/7) benchmarking "month"...
    done (took 2.569782713 seconds)
    (3/7) benchmarking "year"...
    done (took 2.555394929 seconds)
    (4/7) benchmarking "millisecond"...
    done (took 2.468049027 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.482413816 seconds)
    (6/7) benchmarking "minute"...
    done (took 2.479926536 seconds)
    (7/7) benchmarking "second"...
    done (took 2.481032966 seconds)
  done (took 20.129844699 seconds)
  (2/7) benchmarking "parse"...
    (1/9) benchmarking "DateTime"...
    done (took 3.108312322 seconds)
    (2/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.933784736 seconds)
    (3/9) benchmarking "Date"...
    done (took 2.92443975 seconds)
    (4/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 3.079233634 seconds)
    (5/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.487880956 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 3.281869586 seconds)
    (7/9) benchmarking ("Date", "DateFormat")...
    done (took 2.466861976 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 3.194406049 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 3.283916249 seconds)
  done (took 29.191025552 seconds)
  (3/7) benchmarking "query"...
    (1/18) benchmarking ("isleapyear", "Date")...
    done (took 2.559857537 seconds)
    (2/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.47610586 seconds)
    (3/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.483748544 seconds)
    (4/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.492022404 seconds)
    (5/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.683457329 seconds)
    (6/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.608580085 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.493105566 seconds)
    (8/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.602084473 seconds)
    (9/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.644542839 seconds)
    (10/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.673937063 seconds)
    (11/18) benchmarking ("dayofyear", "Date")...
    done (took 2.626359457 seconds)
    (12/18) benchmarking ("dayofweek", "Date")...
    done (took 2.472373089 seconds)
    (13/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.64937772 seconds)
    (14/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.66794729 seconds)
    (15/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.598164353 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.633119475 seconds)
    (17/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.47803544 seconds)
    (18/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.628976274 seconds)
  done (took 48.901471479 seconds)
  (4/7) benchmarking "construction"...
    (1/2) benchmarking "DateTime"...
    done (took 2.453048088 seconds)
    (2/2) benchmarking "Date"...
    done (took 2.450802185 seconds)
  done (took 7.333434856 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.464417386 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.473407294 seconds)
  done (took 7.369476937 seconds)
  (6/7) benchmarking "string"...
    (1/2) benchmarking "DateTime"...
    done (took 3.574629674 seconds)
    (2/2) benchmarking "Date"...
    done (took 3.664462491 seconds)
  done (took 9.670543943 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("DateTime", "Month")...
    done (took 3.009191238 seconds)
    (2/10) benchmarking ("DateTime", "Hour")...
    done (took 2.468245932 seconds)
    (3/10) benchmarking ("DateTime", "Minute")...
    done (took 2.466050605 seconds)
    (4/10) benchmarking ("DateTime", "Second")...
    done (took 2.468573606 seconds)
    (5/10) benchmarking ("Date", "Year")...
    done (took 2.735554373 seconds)
    (6/10) benchmarking ("DateTime", "Year")...
    done (took 2.89205358 seconds)
    (7/10) benchmarking ("Date", "Month")...
    done (took 2.78565705 seconds)
    (8/10) benchmarking ("Date", "Day")...
    done (took 2.465465286 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.466121301 seconds)
    (10/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.46798966 seconds)
  done (took 28.852645803 seconds)
done (took 154.640401802 seconds)
(10/23) benchmarking "alloc"...
  (1/4) benchmarking "structs"...
  done (took 7.459183755 seconds)
  (2/4) benchmarking "strings"...
  done (took 7.538514699 seconds)
  (3/4) benchmarking "grow_array"...
  done (took 8.015696487 seconds)
  (4/4) benchmarking "arrays"...
  done (took 7.69050519 seconds)
done (took 33.135263673 seconds)
(11/23) benchmarking "find"...
  (1/3) benchmarking "findnext"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.60211991 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.606514185 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.698379265 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.730700483 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.69292768 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 2.993042255 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.708951319 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 2.575543248 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.702597614 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.601933593 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.590030464 seconds)
  done (took 31.936596288 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.602052904 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.603214757 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.695086491 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 4.717687299 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.696580793 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 3.408792549 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.701718501 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 2.648145232 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.702383826 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.606127101 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.719017986 seconds)
  done (took 34.530133049 seconds)
  (3/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.504316783 seconds)
    (2/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.537119742 seconds)
    (3/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.535458862 seconds)
    (4/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.608421774 seconds)
    (5/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.539260174 seconds)
    (6/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.55947952 seconds)
    (7/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.541974574 seconds)
    (8/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.568739991 seconds)
    (9/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.572193421 seconds)
    (10/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.498725893 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.543383151 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.480609736 seconds)
    (13/41) benchmarking ("BitVector", "10-90")...
    done (took 4.761343077 seconds)
    (14/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.556437545 seconds)
    (15/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.500919648 seconds)
    (16/41) benchmarking ("BitVector", "50-50")...
    done (took 4.809871309 seconds)
    (17/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 3.152663308 seconds)
    (18/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.560999046 seconds)
    (19/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.562699889 seconds)
    (20/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.703938979 seconds)
    (21/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.501654775 seconds)
    (22/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.537729938 seconds)
    (23/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.492249418 seconds)
    (24/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.582699594 seconds)
    (25/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.479770048 seconds)
    (26/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.482101741 seconds)
    (27/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.47118233 seconds)
    (28/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.594420941 seconds)
    (29/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.548356778 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.527410339 seconds)
    (31/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.56463416 seconds)
    (32/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.496553307 seconds)
    (33/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.600683632 seconds)
    (34/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.478204149 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.540182655 seconds)
    (36/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.479666063 seconds)
    (37/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.54019762 seconds)
    (38/41) benchmarking ("BitVector", "90-10")...
    done (took 3.023440909 seconds)
    (39/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.519858496 seconds)
    (40/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.496293331 seconds)
    (41/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.582655805 seconds)
  done (took 112.070987803 seconds)
done (took 180.967046316 seconds)
(12/23) benchmarking "io"...
  (1/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.904091586 seconds)
    (2/2) benchmarking "read"...
    done (took 2.953333097 seconds)
  done (took 8.287461597 seconds)
  (2/4) benchmarking "skipchars"...
  done (took 7.55908191 seconds)
  (3/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.866746818 seconds)
    (2/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.654656378 seconds)
    (3/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.631000164 seconds)
  done (took 25.584270751 seconds)
  (4/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.437191109 seconds)
    (2/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.705343988 seconds)
    (3/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 5.614469556 seconds)
    (4/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.550261317 seconds)
  done (took 27.739837501 seconds)
done (took 71.601606703 seconds)
(13/23) benchmarking "tuple"...
  (1/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 2.439901851 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 2.439173844 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 2.438986508 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 2.439945567 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 2.439944735 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 2.439621753 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 2.440466588 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 2.45066765 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 2.43945224 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 2.439878224 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 2.440044143 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 2.440370198 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 2.439209015 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 2.440019405 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 2.439905867 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 2.442766398 seconds)
  done (took 41.480354686 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 2.439364379 seconds)
    (2/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 2.441335402 seconds)
    (3/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.451486849 seconds)
    (4/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 2.442553355 seconds)
    (5/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 2.441499693 seconds)
    (6/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 2.440418239 seconds)
    (7/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 2.441496392 seconds)
    (8/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 2.442559115 seconds)
  done (took 21.970707507 seconds)
  (3/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 2.439445546 seconds)
    (2/24) benchmarking ("minimum", "(4,)")...
    done (took 2.439809387 seconds)
    (3/24) benchmarking ("sum", "(8, 8)")...
    done (took 2.441268437 seconds)
    (4/24) benchmarking ("minimum", "(2,)")...
    done (took 2.439802883 seconds)
    (5/24) benchmarking ("minimum", "(16,)")...
    done (took 2.441563032 seconds)
    (6/24) benchmarking ("sum", "(4, 4)")...
    done (took 2.440541085 seconds)
    (7/24) benchmarking ("sumabs", "(4,)")...
    done (took 2.439434703 seconds)
    (8/24) benchmarking ("sum", "(16,)")...
    done (took 2.438946794 seconds)
    (9/24) benchmarking ("sumabs", "(2,)")...
    done (took 2.441040467 seconds)
    (10/24) benchmarking ("minimum", "(2, 2)")...
    done (took 2.4401524 seconds)
    (11/24) benchmarking ("minimum", "(4, 4)")...
    done (took 2.440612382 seconds)
    (12/24) benchmarking ("minimum", "(8,)")...
    done (took 2.440796976 seconds)
    (13/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 2.441235213 seconds)
    (14/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 2.440042872 seconds)
    (15/24) benchmarking ("sumabs", "(8,)")...
    done (took 2.440293397 seconds)
    (16/24) benchmarking ("minimum", "(8, 8)")...
    done (took 2.441832648 seconds)
    (17/24) benchmarking ("sum", "(2,)")...
    done (took 2.441457925 seconds)
    (18/24) benchmarking ("sumabs", "(16,)")...
    done (took 2.440183923 seconds)
    (19/24) benchmarking ("sum", "(16, 16)")...
    done (took 2.440868396 seconds)
    (20/24) benchmarking ("sum", "(4,)")...
    done (took 2.438677388 seconds)
    (21/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 2.440561837 seconds)
    (22/24) benchmarking ("sum", "(8,)")...
    done (took 2.44445537 seconds)
    (23/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 2.440387201 seconds)
    (24/24) benchmarking ("minimum", "(16, 16)")...
    done (took 2.443038882 seconds)
  done (took 61.007480195 seconds)
  (4/4) benchmarking "misc"...
    (1/2) benchmarking "11899"...
    done (took 2.46848575 seconds)
    (2/2) benchmarking "longtuple"...
    done (took 2.851552031 seconds)
  done (took 7.752490917 seconds)
done (took 134.644582327 seconds)
(14/23) benchmarking "string"...
  (1/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.559428627 seconds)
    (2/2) benchmarking "String"...
    done (took 2.631488677 seconds)
  done (took 7.621878824 seconds)
  (2/7) benchmarking "join"...
  done (took 7.489788044 seconds)
  (3/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "equal"...
    done (took 2.601198036 seconds)
    (2/4) benchmarking "different"...
    done (took 2.534012914 seconds)
    (3/4) benchmarking "identical"...
    done (took 2.737550935 seconds)
    (4/4) benchmarking "different length"...
    done (took 2.601251368 seconds)
  done (took 12.90585318 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.508823386 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "backtracking"...
    done (took 7.203074051 seconds)
    (2/7) benchmarking "target length 50000"...
    done (took 3.428706134 seconds)
    (3/7) benchmarking "target length 2"...
    done (took 3.012008553 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.923471251 seconds)
    (5/7) benchmarking "target length 1000"...
    done (took 2.632318321 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.063532809 seconds)
    (7/7) benchmarking "no backtracking"...
    done (took 5.337928423 seconds)
  done (took 34.032077554 seconds)
  (6/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.748147795 seconds)
    (2/3) benchmarking "different"...
    done (took 2.497339523 seconds)
    (3/3) benchmarking "different length"...
    done (took 2.472802157 seconds)
  done (took 10.156592025 seconds)
  (7/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 4.647834373 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.581362054 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.235899243 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.667907802 seconds)
  done (took 16.563765937 seconds)
done (took 94.724869244 seconds)
(15/23) benchmarking "random"...
  (1/5) benchmarking "ranges"...
    (1/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.488982067 seconds)
    (2/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.465129529 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.483943451 seconds)
    (4/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.966959501 seconds)
    (5/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 3.252807685 seconds)
    (6/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.486016449 seconds)
    (7/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.526593667 seconds)
    (8/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.468155269 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.563124423 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 3.69865834 seconds)
    (11/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 3.658834408 seconds)
    (12/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 3.341804839 seconds)
    (13/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.469635115 seconds)
    (14/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 7.43244511 seconds)
    (15/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 4.744775443 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.499014119 seconds)
    (17/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.473956528 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.536375142 seconds)
    (19/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.46702697 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.611517097 seconds)
    (21/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.48057795 seconds)
    (22/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.469180735 seconds)
    (23/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.488486493 seconds)
    (24/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.483846147 seconds)
    (25/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.549970687 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.499411272 seconds)
    (27/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.468835461 seconds)
    (28/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.487300686 seconds)
    (29/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.464263391 seconds)
    (30/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.470808776 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.544022579 seconds)
    (32/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.476699128 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.970441257 seconds)
    (34/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 3.278364439 seconds)
    (35/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.787948211 seconds)
    (36/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 4.263613615 seconds)
    (37/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 3.239508366 seconds)
    (38/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.490310608 seconds)
    (39/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.495702516 seconds)
    (40/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.495759106 seconds)
    (41/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.4438439 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 3.055727658 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.603620992 seconds)
    (44/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.533438471 seconds)
    (45/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.503710281 seconds)
    (46/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.489677941 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.46907967 seconds)
    (48/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.488041871 seconds)
    (49/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.837319801 seconds)
    (50/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 3.071554053 seconds)
    (51/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.415862646 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.214542497 seconds)
    (53/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 3.458719042 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.700349614 seconds)
    (55/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.48463204 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.492687961 seconds)
    (57/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.549944623 seconds)
    (58/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.970326211 seconds)
    (59/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 3.275857629 seconds)
    (60/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.467010982 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.495025963 seconds)
    (62/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.475735951 seconds)
    (63/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.48950065 seconds)
    (64/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.536312146 seconds)
    (65/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.97340164 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 3.254838999 seconds)
    (67/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 3.778301352 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 3.198246262 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.534200953 seconds)
    (70/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 6.477289912 seconds)
    (71/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 3.180295021 seconds)
    (72/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.969821449 seconds)
  done (took 213.861645606 seconds)
  (2/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.845756487 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.524376491 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 3.094751543 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.868508546 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 3.093113303 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.621480445 seconds)
  done (took 21.265534477 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.485026319 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.477144182 seconds)
    (3/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.470323095 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.770816673 seconds)
    (5/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.562390901 seconds)
    (6/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.506064965 seconds)
    (7/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.477887106 seconds)
    (8/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.481510356 seconds)
    (9/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.527431879 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.510611777 seconds)
    (11/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.49548272 seconds)
    (12/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.478580151 seconds)
    (13/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.477524113 seconds)
    (14/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 7.433775704 seconds)
    (15/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.740459448 seconds)
    (16/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.494051388 seconds)
    (17/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.475180456 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.488013815 seconds)
    (19/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.768529987 seconds)
    (20/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.487914094 seconds)
    (21/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.476231664 seconds)
    (22/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.488475186 seconds)
    (23/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.724935769 seconds)
    (24/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.490839662 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.48917078 seconds)
    (26/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.534976034 seconds)
    (27/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.561091651 seconds)
    (28/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.525244147 seconds)
    (29/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.500263978 seconds)
    (30/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.758326381 seconds)
    (31/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.48488408 seconds)
    (32/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.616081443 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.510149711 seconds)
    (34/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.489314953 seconds)
    (35/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.489981318 seconds)
    (36/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.772960083 seconds)
    (37/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.654922782 seconds)
    (38/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.724547757 seconds)
    (39/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 7.430840319 seconds)
    (40/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.431024083 seconds)
    (41/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 3.667514562 seconds)
    (42/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 3.319646901 seconds)
    (43/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 3.340262723 seconds)
    (44/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 3.898443219 seconds)
    (45/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.727523637 seconds)
    (46/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.546363058 seconds)
    (47/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.493709432 seconds)
    (48/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.65792704 seconds)
    (49/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.436098567 seconds)
    (50/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 3.539253985 seconds)
    (51/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.569030601 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.493545992 seconds)
    (53/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.654109894 seconds)
    (54/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.584261372 seconds)
    (55/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.704863831 seconds)
    (56/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.64182126 seconds)
    (57/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.491597822 seconds)
    (58/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 7.435272031 seconds)
    (59/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.485341393 seconds)
    (60/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.476694637 seconds)
    (61/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.477004407 seconds)
    (62/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.499038815 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.659130025 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.496082715 seconds)
    (65/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.470917399 seconds)
    (66/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.688024397 seconds)
    (67/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.724170412 seconds)
    (68/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 7.431242686 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 3.18661871 seconds)
    (70/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.487816863 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.476248403 seconds)
    (72/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.641408421 seconds)
    (73/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 3.624942005 seconds)
    (74/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.489057696 seconds)
    (75/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.617599259 seconds)
    (76/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.488415089 seconds)
    (77/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.541752815 seconds)
    (78/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 7.434115488 seconds)
    (79/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.603771248 seconds)
    (80/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 3.380484553 seconds)
    (81/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.721175477 seconds)
    (82/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 7.43141976 seconds)
    (83/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.479524357 seconds)
    (84/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.494734941 seconds)
    (85/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.432845119 seconds)
    (86/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.496211382 seconds)
    (87/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.758696132 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.486403132 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 3.348866356 seconds)
    (90/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.503163828 seconds)
    (91/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 7.429994571 seconds)
    (92/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.545993212 seconds)
    (93/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 3.166252868 seconds)
    (94/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.489112281 seconds)
    (95/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.771335999 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.724882632 seconds)
    (97/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.790358523 seconds)
  done (took 313.911957387 seconds)
  (4/5) benchmarking "sequences"...
    (1/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.685198898 seconds)
    (2/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.77282093 seconds)
    (3/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 3.027741096 seconds)
    (4/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.784012268 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.576947957 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.777323564 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 3.084434243 seconds)
  done (took 22.139353722 seconds)
  (5/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.634245158 seconds)
    (2/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.808591306 seconds)
    (3/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 7.430640474 seconds)
    (4/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.43551994 seconds)
    (5/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 7.430528528 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.664869454 seconds)
    (7/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.431561447 seconds)
    (8/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.743758917 seconds)
    (9/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.658560848 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.809877774 seconds)
    (11/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.70390967 seconds)
    (12/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.823048255 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.43277611 seconds)
    (14/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 7.432987756 seconds)
    (15/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.433680249 seconds)
    (16/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.649170133 seconds)
    (17/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.533692259 seconds)
    (18/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.669013588 seconds)
    (19/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 7.435916367 seconds)
    (20/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.436891362 seconds)
    (21/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.639722168 seconds)
    (22/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.616939537 seconds)
    (23/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.662754595 seconds)
    (24/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.432775371 seconds)
    (25/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.498411083 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.431245544 seconds)
    (27/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 7.436024573 seconds)
    (28/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.73897144 seconds)
    (29/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.623153132 seconds)
    (30/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.676599144 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.436923281 seconds)
    (32/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.790778482 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.74417857 seconds)
    (34/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.662840306 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 7.438828952 seconds)
    (36/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.594068337 seconds)
    (37/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.755679852 seconds)
    (38/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.749859455 seconds)
    (39/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.677194696 seconds)
    (40/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.478684351 seconds)
    (41/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.610225614 seconds)
    (42/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.518991914 seconds)
    (43/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.67424072 seconds)
    (44/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.597075917 seconds)
    (45/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.750944178 seconds)
    (46/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.608992399 seconds)
    (47/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.596293549 seconds)
    (48/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.782575478 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.435263474 seconds)
    (50/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.472073125 seconds)
    (51/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.624647121 seconds)
    (52/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.431700561 seconds)
    (53/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.640300298 seconds)
    (54/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.497533494 seconds)
    (55/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.655114719 seconds)
    (56/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.789623522 seconds)
    (57/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.627986086 seconds)
    (58/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 7.432199755 seconds)
    (59/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.607838044 seconds)
    (60/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.43146381 seconds)
    (61/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.723286323 seconds)
    (62/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 7.430293917 seconds)
    (63/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 7.431945605 seconds)
    (64/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 7.43207624 seconds)
    (65/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.703083906 seconds)
    (66/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 7.432508661 seconds)
  done (took 283.091140635 seconds)
done (took 857.139692687 seconds)
(16/23) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.359326984 seconds)
  (2/8) benchmarking "mandel"...
  done (took 3.858782928 seconds)
  (3/8) benchmarking "pisum"...
  done (took 7.462335098 seconds)
  (4/8) benchmarking "randmatmul"...
  done (took 7.499937918 seconds)
  (5/8) benchmarking "printfd"...
  done (took 7.432702997 seconds)
  (6/8) benchmarking "randmatstat"...
  done (took 7.779998899 seconds)
  (7/8) benchmarking "fib"...
  done (took 2.840217245 seconds)
  (8/8) benchmarking "parseint"...
  done (took 3.417186877 seconds)
done (took 48.082213807 seconds)
(17/23) benchmarking "broadcast"...
  (1/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "scal_tup")...
    done (took 2.47420905 seconds)
    (2/9) benchmarking (5, "scal_tup")...
    done (took 2.474779533 seconds)
    (3/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.482433701 seconds)
    (4/9) benchmarking (10, "tup_tup")...
    done (took 2.481666841 seconds)
    (5/9) benchmarking (5, "tup_tup")...
    done (took 2.47607574 seconds)
    (6/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.479001614 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 7.437024234 seconds)
    (8/9) benchmarking (3, "scal_tup")...
    done (took 2.923363646 seconds)
    (9/9) benchmarking (3, "tup_tup")...
    done (took 2.47131534 seconds)
  done (took 30.133795019 seconds)
  (2/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.438320928 seconds)
    (2/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.658144523 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.434971161 seconds)
  done (took 23.965261245 seconds)
  (3/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 5)...
    done (took 2.564762684 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 2.731864106 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 2.578051299 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 2.683081564 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.883211187 seconds)
    (6/6) benchmarking ("tuple", 10)...
    done (took 2.704684435 seconds)
  done (took 18.578600112 seconds)
  (4/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 7.436778352 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.441218679 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 7.436548263 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.433176263 seconds)
  done (took 32.182409207 seconds)
  (5/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 2)...
    done (took 2.829665602 seconds)
    (2/4) benchmarking ("(1000, 1000)", 1)...
    done (took 2.514879635 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 2.557348141 seconds)
    (4/4) benchmarking ("(10000000,)", 1)...
    done (took 2.827544885 seconds)
  done (took 13.16074231 seconds)
  (6/6) benchmarking "26942"...
  done (took 3.558268842 seconds)
done (took 124.022741083 seconds)
(18/23) benchmarking "parallel"...
done (took 2.832064787 seconds)
(19/23) benchmarking "linalg"...
  (1/4) benchmarking "blas"...
    (1/36) benchmarking "gemv"...
    done (took 5.363013612 seconds)
    (2/36) benchmarking "nrm2"...
    done (took 3.302514513 seconds)
    (3/36) benchmarking "trsv"...
    done (took 3.76775547 seconds)
    (4/36) benchmarking "gbmv"...
    done (took 4.91468089 seconds)
    (5/36) benchmarking "asum"...
    done (took 3.197933104 seconds)
    (6/36) benchmarking "trsm"...
    done (took 7.477436246 seconds)
    (7/36) benchmarking "symv!"...
    done (took 3.668406246 seconds)
    (8/36) benchmarking "symm!"...
    done (took 7.494184173 seconds)
    (9/36) benchmarking "trmv"...
    done (took 3.776958962 seconds)
    (10/36) benchmarking "dot"...
    done (took 3.418227941 seconds)
    (11/36) benchmarking "herk"...
    done (took 7.55766776 seconds)
    (12/36) benchmarking "dotu"...
    done (took 3.450230825 seconds)
    (13/36) benchmarking "scal"...
    done (took 2.564331108 seconds)
    (14/36) benchmarking "sbmv"...
    done (took 4.700275511 seconds)
    (15/36) benchmarking "dotc"...
    done (took 3.452730866 seconds)
    (16/36) benchmarking "gemm!"...
    done (took 7.498801638 seconds)
    (17/36) benchmarking "gemv!"...
    done (took 5.321130194 seconds)
    (18/36) benchmarking "symm"...
    done (took 7.52399263 seconds)
    (19/36) benchmarking "ger!"...
    done (took 7.436601834 seconds)
    (20/36) benchmarking "trsm!"...
    done (took 7.480726208 seconds)
    (21/36) benchmarking "gemm"...
    done (took 7.502927247 seconds)
    (22/36) benchmarking "trmm!"...
    done (took 7.487915208 seconds)
    (23/36) benchmarking "herk!"...
    done (took 7.610542364 seconds)
    (24/36) benchmarking "scal!"...
    done (took 3.390131511 seconds)
    (25/36) benchmarking "syrk"...
    done (took 7.495922935 seconds)
    (26/36) benchmarking "blascopy!"...
    done (took 3.657927528 seconds)
    (27/36) benchmarking "gbmv!"...
    done (took 4.829848018 seconds)
    (28/36) benchmarking "trmm"...
    done (took 7.468055229 seconds)
    (29/36) benchmarking "syrk!"...
    done (took 7.489067455 seconds)
    (30/36) benchmarking "her!"...
    done (took 7.438775953 seconds)
    (31/36) benchmarking "syr!"...
    done (took 7.435754611 seconds)
    (32/36) benchmarking "sbmv!"...
    done (took 4.639644153 seconds)
    (33/36) benchmarking "trsv!"...
    done (took 3.743106383 seconds)
    (34/36) benchmarking "trmv!"...
    done (took 3.743296484 seconds)
    (35/36) benchmarking "symv"...
    done (took 3.726279255 seconds)
    (36/36) benchmarking "axpy!"...
    done (took 3.645891149 seconds)
  done (took 197.107268888 seconds)
  (2/4) benchmarking "factorization"...
    (1/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.499478031 seconds)
    (2/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.530432379 seconds)
    (3/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.440040523 seconds)
    (4/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.646317301 seconds)
    (5/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.451723132 seconds)
    (6/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.441705621 seconds)
    (7/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.593636818 seconds)
    (8/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.441596191 seconds)
    (9/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.442508455 seconds)
    (10/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.438211647 seconds)
    (11/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 3.481069453 seconds)
    (12/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.513857484 seconds)
    (13/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.4371799 seconds)
    (14/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.456666188 seconds)
    (15/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.605518265 seconds)
    (16/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 8.46896178 seconds)
    (17/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.534282106 seconds)
    (18/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.464057362 seconds)
    (19/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.52399965 seconds)
    (20/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 2.470308364 seconds)
    (21/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 9.714215152 seconds)
    (22/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.30325364 seconds)
    (23/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 8.974728432 seconds)
    (24/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.455201125 seconds)
    (25/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.440116564 seconds)
    (26/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.492147253 seconds)
    (27/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.464498052 seconds)
    (28/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.439822522 seconds)
    (29/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.559002873 seconds)
    (30/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.14471248 seconds)
    (31/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 8.496181877 seconds)
    (32/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 8.098720366 seconds)
  done (took 220.89809763 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.538821785 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.432634112 seconds)
    (2/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.431746378 seconds)
    (3/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 2.432159377 seconds)
    (4/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.430814139 seconds)
    (5/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.435731307 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.432160643 seconds)
    (7/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.58767329 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.430560382 seconds)
    (9/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 2.431042162 seconds)
    (10/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.950445198 seconds)
    (11/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 2.431933957 seconds)
    (12/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.43011647 seconds)
    (13/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.431792971 seconds)
    (14/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.431198097 seconds)
    (15/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.431921011 seconds)
    (16/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.436514038 seconds)
    (17/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.432869776 seconds)
    (18/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 18.818134243 seconds)
    (19/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.447670109 seconds)
    (20/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.431545084 seconds)
    (21/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.436863033 seconds)
    (22/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.502703765 seconds)
    (23/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.815199561 seconds)
    (24/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.805832451 seconds)
    (25/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.468894411 seconds)
    (26/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.431456515 seconds)
    (27/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.434103581 seconds)
    (28/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.434214594 seconds)
    (29/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 5.044718347 seconds)
    (30/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.499637895 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.434910616 seconds)
    (32/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.43846158 seconds)
    (33/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.447640216 seconds)
    (34/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.448139879 seconds)
    (35/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.434411453 seconds)
    (36/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.435962508 seconds)
    (37/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.432279395 seconds)
    (38/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.509889157 seconds)
    (39/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.489002996 seconds)
    (40/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.451917966 seconds)
    (41/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.432252145 seconds)
    (42/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.43402271 seconds)
    (43/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 2.433073317 seconds)
    (44/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.432962431 seconds)
    (45/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.491846255 seconds)
    (46/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.649359658 seconds)
    (47/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 5.041599942 seconds)
    (48/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.43133636 seconds)
    (49/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.505559341 seconds)
    (50/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.634932659 seconds)
    (51/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.434650653 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 3.031918713 seconds)
    (53/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.551876188 seconds)
    (54/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.432314271 seconds)
    (55/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.432000639 seconds)
    (56/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.847597847 seconds)
    (57/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.431342826 seconds)
    (58/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.440230735 seconds)
    (59/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.42917293 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.469264629 seconds)
    (61/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 24.593280366 seconds)
    (62/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.433462287 seconds)
    (63/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.551129831 seconds)
    (64/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 23.318486411 seconds)
    (65/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 2.430793229 seconds)
    (66/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 23.264306284 seconds)
    (67/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.431118408 seconds)
    (68/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 5.041821999 seconds)
    (69/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.435583931 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.167090079 seconds)
    (71/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.431873253 seconds)
    (72/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.434834444 seconds)
    (73/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.500543997 seconds)
    (74/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.136130563 seconds)
    (75/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 2.430167371 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.50880054 seconds)
    (77/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 7.13237298 seconds)
    (78/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.432752663 seconds)
    (79/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.518036555 seconds)
    (80/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.43119707 seconds)
    (81/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 2.430691745 seconds)
    (82/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.431599739 seconds)
    (83/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.469362384 seconds)
    (84/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.898159097 seconds)
    (85/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.50098867 seconds)
    (86/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.434801291 seconds)
    (87/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.434142287 seconds)
    (88/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.487990034 seconds)
    (89/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.124343961 seconds)
    (90/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.435579982 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.43199211 seconds)
    (92/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.430106083 seconds)
    (93/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.434129998 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.432501629 seconds)
    (95/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.435984174 seconds)
    (96/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 2.430695974 seconds)
    (97/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.432239256 seconds)
    (98/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.435919921 seconds)
    (99/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.429572841 seconds)
    (100/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.493542909 seconds)
    (101/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.46900149 seconds)
    (102/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.446411644 seconds)
    (103/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 11.080352035 seconds)
    (104/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.429997976 seconds)
    (105/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.43624403 seconds)
    (106/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 24.501133257 seconds)
    (107/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.429844243 seconds)
    (108/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.498418812 seconds)
    (109/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.441451864 seconds)
    (110/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.43519965 seconds)
    (111/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.432533225 seconds)
    (112/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.66894282 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.462570136 seconds)
    (114/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 24.523849505 seconds)
    (115/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.491552172 seconds)
    (116/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.430361081 seconds)
    (117/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.8070223 seconds)
    (118/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.440777748 seconds)
  done (took 488.619776082 seconds)
done (took 911.597221315 seconds)
(20/23) benchmarking "collection"...
  (1/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.630223835 seconds)
    (2/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.724899622 seconds)
    (3/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.61207949 seconds)
    (4/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.539078103 seconds)
    (5/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.62380894 seconds)
    (6/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.991981262 seconds)
    (7/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 3.047838429 seconds)
    (8/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.357312876 seconds)
    (9/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.673405923 seconds)
    (10/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.617491333 seconds)
    (11/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.724106365 seconds)
    (12/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.848408198 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.598098774 seconds)
    (14/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.56267676 seconds)
    (15/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.472185548 seconds)
    (16/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.576463636 seconds)
    (17/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.629839257 seconds)
    (18/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.58685179 seconds)
    (19/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 3.540846042 seconds)
    (20/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.547021615 seconds)
    (21/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.082143382 seconds)
    (22/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.712688165 seconds)
    (23/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.271549641 seconds)
    (24/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.840214215 seconds)
    (25/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.522994394 seconds)
    (26/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.533086531 seconds)
    (27/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.60531524 seconds)
    (28/117) benchmarking ("Set", "Int", "union")...
    done (took 2.595196912 seconds)
    (29/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.115900583 seconds)
    (30/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.380346354 seconds)
    (31/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 3.083116135 seconds)
    (32/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.557983434 seconds)
    (33/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.507487036 seconds)
    (34/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.676981097 seconds)
    (35/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 3.515951934 seconds)
    (36/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.577561518 seconds)
    (37/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.620664309 seconds)
    (38/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.498740338 seconds)
    (39/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.543845637 seconds)
    (40/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.547126944 seconds)
    (41/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.477375564 seconds)
    (42/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.963184338 seconds)
    (43/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.652082935 seconds)
    (44/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.367405931 seconds)
    (45/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.430540306 seconds)
    (46/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 3.900579754 seconds)
    (47/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.462400966 seconds)
    (48/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 3.562965263 seconds)
    (49/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 3.396160259 seconds)
    (50/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.542773312 seconds)
    (51/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.491985853 seconds)
    (52/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.940457452 seconds)
    (53/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 3.095009222 seconds)
    (54/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.68808104 seconds)
    (55/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.719996677 seconds)
    (56/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.647541436 seconds)
    (57/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 3.750835777 seconds)
    (58/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.629233483 seconds)
    (59/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.630653335 seconds)
    (60/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.637958928 seconds)
    (61/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 3.584089254 seconds)
    (62/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 3.271971866 seconds)
    (63/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.770946228 seconds)
    (64/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.721387362 seconds)
    (65/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.595649692 seconds)
    (66/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.596045808 seconds)
    (67/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 3.548870196 seconds)
    (68/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.939639652 seconds)
    (69/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.482931299 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.606188242 seconds)
    (71/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.61072349 seconds)
    (72/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.588100047 seconds)
    (73/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.161684227 seconds)
    (74/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.834707874 seconds)
    (75/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.63245434 seconds)
    (76/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.687199644 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.67428889 seconds)
    (78/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.717035086 seconds)
    (79/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 3.29517975 seconds)
    (80/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 3.999148767 seconds)
    (81/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 4.098124071 seconds)
    (82/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 4.15478627 seconds)
    (83/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.730835246 seconds)
    (84/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.673074095 seconds)
    (85/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 3.065639169 seconds)
    (86/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 3.746576284 seconds)
    (87/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.735012159 seconds)
    (88/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.68157216 seconds)
    (89/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.508737197 seconds)
    (90/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.585768612 seconds)
    (91/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.496667043 seconds)
    (92/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 3.018990962 seconds)
    (93/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.770639604 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 3.823652405 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.7594394 seconds)
    (96/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.695562954 seconds)
    (97/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.728773925 seconds)
    (98/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.854141261 seconds)
    (99/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.679256035 seconds)
    (100/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.629347235 seconds)
    (101/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.347340939 seconds)
    (102/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.770580552 seconds)
    (103/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.719843996 seconds)
    (104/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.566997261 seconds)
    (105/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.570036003 seconds)
    (106/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.530022365 seconds)
    (107/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.623214431 seconds)
    (108/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.516776185 seconds)
    (109/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.498660381 seconds)
    (110/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.956557081 seconds)
    (111/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.515254912 seconds)
    (112/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.416145352 seconds)
    (113/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.822488416 seconds)
    (114/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 3.698377285 seconds)
    (115/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.938741986 seconds)
    (116/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.722819056 seconds)
    (117/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 3.382591396 seconds)
  done (took 350.466751327 seconds)
  (2/6) benchmarking "optimizations"...
    (1/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 3.704583722 seconds)
    (2/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.453713317 seconds)
    (3/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.596724215 seconds)
    (4/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.437563573 seconds)
    (5/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.437261099 seconds)
    (6/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.43887906 seconds)
    (7/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.449630992 seconds)
    (8/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 4.469263172 seconds)
    (9/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.528614777 seconds)
    (10/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.437106798 seconds)
    (11/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.439333065 seconds)
    (12/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.438223767 seconds)
    (13/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.438585717 seconds)
    (14/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.435742091 seconds)
    (15/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.673027212 seconds)
    (16/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.446076099 seconds)
    (17/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.436105265 seconds)
    (18/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.43692513 seconds)
    (19/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.436484503 seconds)
    (20/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.438355559 seconds)
    (21/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.441289304 seconds)
    (22/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.439007918 seconds)
    (23/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.131376076 seconds)
    (24/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.531329719 seconds)
    (25/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.439531436 seconds)
    (26/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.43810239 seconds)
    (27/27) benchmarking ("BitSet", "Int8")...
    done (took 4.144583013 seconds)
  done (took 184.716465183 seconds)
  (3/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.519094105 seconds)
    (2/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.934336876 seconds)
    (3/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.701387604 seconds)
    (4/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.790470254 seconds)
    (5/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.88722255 seconds)
    (6/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.773527779 seconds)
    (7/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.504479483 seconds)
    (8/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.505756338 seconds)
    (9/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.569934217 seconds)
    (10/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.708820487 seconds)
    (11/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 7.436189519 seconds)
    (12/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.900320714 seconds)
    (13/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.473561986 seconds)
    (14/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.830097218 seconds)
    (15/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.493938872 seconds)
    (16/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.502462247 seconds)
    (17/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.51913793 seconds)
    (18/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.471327761 seconds)
    (19/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.548728514 seconds)
    (20/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.687778858 seconds)
    (21/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.565739707 seconds)
    (22/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.503951819 seconds)
    (23/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.758985184 seconds)
    (24/105) benchmarking ("Set", "Int", "first")...
    done (took 2.511277008 seconds)
    (25/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.500451759 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.663101051 seconds)
    (27/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.668380895 seconds)
    (28/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.66830247 seconds)
    (29/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.601781544 seconds)
    (30/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.688168387 seconds)
    (31/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.864007663 seconds)
    (32/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.486721757 seconds)
    (33/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.470455189 seconds)
    (34/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.516987219 seconds)
    (35/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.570062127 seconds)
    (36/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.640813988 seconds)
    (37/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.557290545 seconds)
    (38/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.85303862 seconds)
    (39/105) benchmarking ("Set", "Int", "length")...
    done (took 2.483123663 seconds)
    (40/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.674920734 seconds)
    (41/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.480524233 seconds)
    (42/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.852739268 seconds)
    (43/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.478045398 seconds)
    (44/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.520720037 seconds)
    (45/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.648653555 seconds)
    (46/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.5741286 seconds)
    (47/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.8979119 seconds)
    (48/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 3.099322516 seconds)
    (49/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.727336853 seconds)
    (50/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.506444958 seconds)
    (51/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.501793441 seconds)
    (52/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.579342158 seconds)
    (53/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.886225094 seconds)
    (54/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.704951752 seconds)
    (55/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 3.862901946 seconds)
    (56/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.471192293 seconds)
    (57/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.895824134 seconds)
    (58/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.752065504 seconds)
    (59/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.725995537 seconds)
    (60/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.468404511 seconds)
    (61/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.715623969 seconds)
    (62/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.496702935 seconds)
    (63/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.496312813 seconds)
    (64/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 3.601802243 seconds)
    (65/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.961511603 seconds)
    (66/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.662252095 seconds)
    (67/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.866938941 seconds)
    (68/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.769365308 seconds)
    (69/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.504375249 seconds)
    (70/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.953457783 seconds)
    (71/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.512819768 seconds)
    (72/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.746178671 seconds)
    (73/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 3.159883953 seconds)
    (74/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.606960757 seconds)
    (75/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 4.250583488 seconds)
    (76/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.628039588 seconds)
    (77/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.473004502 seconds)
    (78/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.518180184 seconds)
    (79/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.510662637 seconds)
    (80/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.792427753 seconds)
    (81/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.500659609 seconds)
    (82/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.576170792 seconds)
    (83/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.534197264 seconds)
    (84/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.600496317 seconds)
    (85/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.649031762 seconds)
    (86/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.601678886 seconds)
    (87/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.800118129 seconds)
    (88/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.969784123 seconds)
    (89/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.543432649 seconds)
    (90/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.868639767 seconds)
    (91/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 4.369935158 seconds)
    (92/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.788774124 seconds)
    (93/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.487348408 seconds)
    (94/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.564363777 seconds)
    (95/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.473858957 seconds)
    (96/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.571149619 seconds)
    (97/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.647560511 seconds)
    (98/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.813474555 seconds)
    (99/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.923519877 seconds)
    (100/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.766108478 seconds)
    (101/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 3.297430922 seconds)
    (102/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.976248436 seconds)
    (103/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.48336817 seconds)
    (104/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.560918026 seconds)
    (105/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.500220924 seconds)
  done (took 292.173248007 seconds)
  (4/6) benchmarking "deletion"...
    (1/28) benchmarking ("Vector", "Int", "filter")...
    done (took 4.609992966 seconds)
    (2/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.685163109 seconds)
    (3/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 3.042654524 seconds)
    (4/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.791677078 seconds)
    (5/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.858731249 seconds)
    (6/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.604239491 seconds)
    (7/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.5652064 seconds)
    (8/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.509070582 seconds)
    (9/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.628136157 seconds)
    (10/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.688053283 seconds)
    (11/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.590557741 seconds)
    (12/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.545251223 seconds)
    (13/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.741889548 seconds)
    (14/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.952604932 seconds)
    (15/28) benchmarking ("Set", "String", "filter")...
    done (took 2.767671243 seconds)
    (16/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 3.110435152 seconds)
    (17/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.514112337 seconds)
    (18/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.958039163 seconds)
    (19/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.629590158 seconds)
    (20/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.583443931 seconds)
    (21/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 3.067044957 seconds)
    (22/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.505087281 seconds)
    (23/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.745469334 seconds)
    (24/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.686095417 seconds)
    (25/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.499322838 seconds)
    (26/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.74067015 seconds)
    (27/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.775952858 seconds)
    (28/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.645733442 seconds)
  done (took 85.476892317 seconds)
  (5/6) benchmarking "iteration"...
    (1/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.514888535 seconds)
    (2/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.562032255 seconds)
    (3/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.479604158 seconds)
    (4/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.585292279 seconds)
    (5/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.58128222 seconds)
    (6/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.569395183 seconds)
    (7/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.537874188 seconds)
    (8/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.949121013 seconds)
    (9/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.54496071 seconds)
    (10/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.526480065 seconds)
    (11/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.568995813 seconds)
    (12/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.478285774 seconds)
    (13/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.998370913 seconds)
    (14/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.483796354 seconds)
    (15/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.521464206 seconds)
    (16/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.569789521 seconds)
    (17/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.567095313 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.989267398 seconds)
    (19/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.578352229 seconds)
    (20/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.986996997 seconds)
    (21/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.530489747 seconds)
    (22/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.577712162 seconds)
    (23/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.531873098 seconds)
    (24/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.494391151 seconds)
    (25/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.53121356 seconds)
    (26/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.489865683 seconds)
  done (took 70.197923433 seconds)
  (6/6) benchmarking "initialization"...
    (1/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.564439576 seconds)
    (2/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 3.46804657 seconds)
    (3/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.659862395 seconds)
    (4/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.730770485 seconds)
    (5/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.98169422 seconds)
    (6/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.633111912 seconds)
    (7/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.876823924 seconds)
    (8/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.477156137 seconds)
    (9/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.651803171 seconds)
    (10/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.547663494 seconds)
    (11/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 5.536441787 seconds)
    (12/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 3.020497092 seconds)
    (13/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.634187868 seconds)
    (14/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.992714158 seconds)
    (15/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.590678128 seconds)
    (16/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.54561891 seconds)
    (17/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.937145339 seconds)
    (18/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.578444132 seconds)
    (19/42) benchmarking ("Set", "String", "loop")...
    done (took 2.856058014 seconds)
    (20/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.62249472 seconds)
    (21/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.082227636 seconds)
    (22/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.589139151 seconds)
    (23/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.702485706 seconds)
    (24/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.699649177 seconds)
    (25/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.591258684 seconds)
    (26/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.645675148 seconds)
    (27/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.562790465 seconds)
    (28/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.99701268 seconds)
    (29/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.587266294 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.615524735 seconds)
    (31/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.731905005 seconds)
    (32/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.572809237 seconds)
    (33/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.088460582 seconds)
    (34/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.562380216 seconds)
    (35/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.575237995 seconds)
    (36/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.876939892 seconds)
    (37/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.651151159 seconds)
    (38/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.996561756 seconds)
    (39/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.597225047 seconds)
    (40/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.42942091 seconds)
    (41/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.582559258 seconds)
    (42/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.6525691 seconds)
  done (took 124.730788843 seconds)
done (took 1110.194197643 seconds)
(21/23) benchmarking "simd"...
  (1/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 2.744759232 seconds)
  (2/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 2.485045256 seconds)
  (3/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 2.464787719 seconds)
  (4/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 2.469666111 seconds)
  (5/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.502127979 seconds)
  (6/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 2.472842841 seconds)
  (7/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 2.466714352 seconds)
  (8/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 2.667960116 seconds)
  (9/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 2.474940762 seconds)
  (10/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 2.471642651 seconds)
  (11/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 2.477774534 seconds)
  (12/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 2.478854445 seconds)
  (13/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 2.471704601 seconds)
  (14/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 2.472900782 seconds)
  (15/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.494340083 seconds)
  (16/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 2.471111777 seconds)
  (17/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 2.619344286 seconds)
  (18/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.502766589 seconds)
  (19/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 2.454872841 seconds)
  (20/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.467015519 seconds)
  (21/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 2.469282681 seconds)
  (22/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 2.464444845 seconds)
  (23/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 2.472631548 seconds)
  (24/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 2.468359462 seconds)
  (25/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 2.49958246 seconds)
  (26/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 2.465631574 seconds)
  (27/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 2.453219326 seconds)
  (28/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 2.485923402 seconds)
  (29/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 2.468030098 seconds)
  (30/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 2.488537053 seconds)
  (31/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 2.467927376 seconds)
  (32/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 2.478541662 seconds)
  (33/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 2.471600097 seconds)
  (34/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 2.471130096 seconds)
  (35/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 2.480135995 seconds)
  (36/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 2.472442365 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 2.461391797 seconds)
  (38/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 2.470170956 seconds)
  (39/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 2.464655441 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 2.464674228 seconds)
  (41/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.462339673 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 2.477486033 seconds)
  (43/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 2.478763056 seconds)
  (44/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 2.517587621 seconds)
  (45/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.490132757 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 2.473744302 seconds)
  (47/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 2.472175161 seconds)
  (48/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 2.483114374 seconds)
  (49/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 2.586920643 seconds)
  (50/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 2.479398946 seconds)
  (51/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 2.475135883 seconds)
  (52/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 2.468326364 seconds)
  (53/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 2.470130266 seconds)
  (54/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 2.467613138 seconds)
  (55/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 2.464926484 seconds)
  (56/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 2.483513795 seconds)
  (57/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 2.465168104 seconds)
  (58/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 2.465299081 seconds)
  (59/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 2.493676557 seconds)
  (60/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 2.466368567 seconds)
  (61/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.500671056 seconds)
  (62/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.45310744 seconds)
  (63/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 2.49873423 seconds)
  (64/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 2.4609516 seconds)
  (65/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 2.464258026 seconds)
  (66/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 2.462016936 seconds)
  (67/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 2.474253545 seconds)
  (68/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 2.465303427 seconds)
  (69/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 2.463066456 seconds)
  (70/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 2.452693057 seconds)
  (71/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 2.466867254 seconds)
  (72/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.498798409 seconds)
  (73/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 2.467726727 seconds)
  (74/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 2.461149789 seconds)
  (75/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 2.46978376 seconds)
  (76/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 2.465720751 seconds)
  (77/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 2.4901127 seconds)
  (78/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 2.485971045 seconds)
  (79/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 2.45962392 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 2.467227431 seconds)
  (81/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 2.467552949 seconds)
  (82/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 2.482441751 seconds)
  (83/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 2.488533471 seconds)
  (84/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.575296671 seconds)
  (85/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 2.48746049 seconds)
  (86/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.464746211 seconds)
  (87/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.498150386 seconds)
  (88/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 2.46797623 seconds)
  (89/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 2.495478061 seconds)
  (90/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 2.500479475 seconds)
  (91/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 2.474117772 seconds)
  (92/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 2.469965059 seconds)
  (93/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 2.464426832 seconds)
  (94/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 2.469235176 seconds)
  (95/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.459131831 seconds)
  (96/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 2.473266075 seconds)
  (97/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 2.493661751 seconds)
  (98/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 2.490118519 seconds)
  (99/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 2.48229069 seconds)
  (100/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 2.47512127 seconds)
  (101/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.490507292 seconds)
  (102/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 2.477889274 seconds)
  (103/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 2.502785059 seconds)
  (104/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 2.471706028 seconds)
  (105/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 2.45272039 seconds)
  (106/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 2.48944053 seconds)
  (107/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 2.480254197 seconds)
  (108/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 2.485550416 seconds)
  (109/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 2.480578624 seconds)
  (110/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.579590086 seconds)
  (111/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 2.481337484 seconds)
  (112/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.493790407 seconds)
  (113/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 2.465936372 seconds)
  (114/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 2.464233338 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 2.459478899 seconds)
  (116/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 2.461437685 seconds)
  (117/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 2.465835734 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 2.458767522 seconds)
  (119/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 2.661744113 seconds)
  (120/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.465924104 seconds)
  (121/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 2.462525169 seconds)
  (122/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 2.484639548 seconds)
  (123/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 2.459545612 seconds)
  (124/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 2.466926111 seconds)
  (125/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 2.461857671 seconds)
  (126/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.464203046 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.460321033 seconds)
  (128/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 2.471418272 seconds)
  (129/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.528679563 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 2.514226283 seconds)
  (131/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 2.473257869 seconds)
  (132/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 2.476014899 seconds)
  (133/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 2.486292459 seconds)
  (134/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 2.471252983 seconds)
  (135/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 2.471963113 seconds)
  (136/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 2.474828797 seconds)
  (137/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.488770512 seconds)
  (138/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 2.464011989 seconds)
  (139/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 2.470214537 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 2.474820656 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 2.476085442 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 2.466500157 seconds)
  (143/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 2.488734907 seconds)
  (144/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 2.49581226 seconds)
  (145/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.45968976 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 2.473251724 seconds)
  (147/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 2.457190344 seconds)
  (148/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 2.467497318 seconds)
  (149/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 2.485586945 seconds)
  (150/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 2.473306254 seconds)
  (151/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 2.46345804 seconds)
  (152/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 2.475736682 seconds)
  (153/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 2.466624576 seconds)
  (154/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.464105299 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 2.48510068 seconds)
  (156/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.456128723 seconds)
  (157/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 2.468538116 seconds)
  (158/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.46379942 seconds)
  (159/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 2.464735065 seconds)
  (160/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 2.466981156 seconds)
  (161/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 2.491692878 seconds)
  (162/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.497835685 seconds)
  (163/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 2.468548844 seconds)
  (164/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 2.458318692 seconds)
  (165/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 2.460912404 seconds)
  (166/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 2.466819628 seconds)
  (167/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 2.463929384 seconds)
  (168/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 2.470289309 seconds)
  (169/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 2.467412217 seconds)
  (170/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 2.4615714 seconds)
  (171/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 2.492866223 seconds)
  (172/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 2.486426036 seconds)
  (173/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.46236036 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.494460071 seconds)
  (175/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.463316001 seconds)
  (176/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 2.466540324 seconds)
  (177/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 2.494316646 seconds)
  (178/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.489116045 seconds)
  (179/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.496194398 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 2.46835474 seconds)
  (181/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 2.501761245 seconds)
  (182/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.498343209 seconds)
  (183/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 2.465802224 seconds)
  (184/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.493195287 seconds)
  (185/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 2.478646386 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.491905023 seconds)
  (187/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 2.459721679 seconds)
  (188/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 2.463036288 seconds)
  (189/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 2.458025088 seconds)
  (190/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 2.464765253 seconds)
  (191/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.46014988 seconds)
  (192/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.489937015 seconds)
  (193/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 2.467783806 seconds)
  (194/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 2.468783889 seconds)
  (195/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 2.479605937 seconds)
  (196/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 2.472526331 seconds)
  (197/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 2.474162855 seconds)
  (198/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 2.478464236 seconds)
  (199/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 2.467833362 seconds)
  (200/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 2.464928143 seconds)
  (201/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.46979697 seconds)
  (202/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 2.49086141 seconds)
  (203/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 2.459676816 seconds)
  (204/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 2.469100566 seconds)
  (205/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.458678991 seconds)
  (206/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 2.457155822 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 2.479545782 seconds)
  (208/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 2.465108683 seconds)
  (209/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 2.473089096 seconds)
  (210/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 2.482281015 seconds)
  (211/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 2.453429112 seconds)
  (212/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 2.477152218 seconds)
  (213/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 2.479343595 seconds)
  (214/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 2.46334508 seconds)
  (215/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 2.478167092 seconds)
  (216/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 2.469192832 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 2.471571702 seconds)
  (218/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 2.450894253 seconds)
  (219/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 2.49746561 seconds)
  (220/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 2.472059103 seconds)
  (221/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 2.467465314 seconds)
  (222/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 2.464728331 seconds)
  (223/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.460262277 seconds)
  (224/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 2.46567611 seconds)
  (225/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 2.470600829 seconds)
  (226/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 2.464823252 seconds)
  (227/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 2.491274002 seconds)
  (228/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 2.480466432 seconds)
  (229/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 2.478174435 seconds)
  (230/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 2.46705154 seconds)
  (231/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 2.618202018 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 2.468564535 seconds)
  (233/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 2.473997281 seconds)
  (234/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 2.464145699 seconds)
  (235/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.465121881 seconds)
  (236/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 2.468839282 seconds)
  (237/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 2.466245529 seconds)
  (238/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 2.464994817 seconds)
  (239/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 2.476333508 seconds)
  (240/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 2.466281222 seconds)
  (241/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 2.457604972 seconds)
  (242/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 2.456457772 seconds)
  (243/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 2.480379581 seconds)
  (244/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 2.456315645 seconds)
  (245/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 2.486605612 seconds)
  (246/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 2.488159118 seconds)
  (247/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 2.465534175 seconds)
  (248/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 2.46781736 seconds)
  (249/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 2.469586219 seconds)
  (250/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 2.470286971 seconds)
  (251/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 2.470149223 seconds)
  (252/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 2.474680208 seconds)
  (253/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 2.465510547 seconds)
  (254/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 2.464340276 seconds)
  (255/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 2.465047445 seconds)
  (256/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.487552126 seconds)
  (257/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 2.46747214 seconds)
  (258/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 2.460059565 seconds)
  (259/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 2.46216835 seconds)
  (260/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 2.468289528 seconds)
  (261/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 2.472854195 seconds)
  (262/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 2.616143824 seconds)
  (263/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 2.508424905 seconds)
  (264/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 2.453199011 seconds)
  (265/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 2.477756042 seconds)
  (266/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 2.46615442 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 2.474177102 seconds)
  (268/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 2.468466278 seconds)
  (269/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.455394244 seconds)
  (270/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 2.486443984 seconds)
  (271/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 2.454967336 seconds)
  (272/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.459586921 seconds)
  (273/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 2.465340899 seconds)
  (274/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 2.485976632 seconds)
  (275/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 2.458811428 seconds)
  (276/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 2.468959914 seconds)
  (277/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 2.486209614 seconds)
  (278/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.461638807 seconds)
  (279/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.463155924 seconds)
  (280/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 2.451327911 seconds)
  (281/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 2.507035736 seconds)
  (282/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 2.466738718 seconds)
  (283/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 2.484485242 seconds)
  (284/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 2.464915612 seconds)
  (285/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.459580152 seconds)
  (286/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 2.466672928 seconds)
  (287/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 2.457395126 seconds)
  (288/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 2.467182351 seconds)
  (289/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 2.463592154 seconds)
  (290/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 2.472901827 seconds)
  (291/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 2.461507682 seconds)
  (292/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 2.457075422 seconds)
  (293/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 2.463885168 seconds)
  (294/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 2.457000574 seconds)
  (295/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 2.469727521 seconds)
  (296/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 2.464800131 seconds)
  (297/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 2.451093719 seconds)
  (298/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 2.465343532 seconds)
  (299/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 2.465975971 seconds)
  (300/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 2.465898328 seconds)
  (301/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 2.463841486 seconds)
  (302/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.461879352 seconds)
  (303/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.511921673 seconds)
  (304/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 2.467080281 seconds)
  (305/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 2.461587827 seconds)
  (306/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.49330366 seconds)
  (307/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.5096012 seconds)
  (308/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 2.458588881 seconds)
  (309/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 2.459981777 seconds)
  (310/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 2.457750111 seconds)
  (311/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.509558791 seconds)
  (312/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 2.46132105 seconds)
  (313/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 2.457823983 seconds)
  (314/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 2.480867995 seconds)
  (315/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 2.498235575 seconds)
  (316/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 2.469532656 seconds)
  (317/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 2.472391565 seconds)
  (318/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 2.4661464 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 2.481237879 seconds)
  (320/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 2.467058855 seconds)
  (321/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 2.470874244 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 2.471535431 seconds)
  (323/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 2.45065709 seconds)
  (324/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 2.47488656 seconds)
  (325/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 2.476290981 seconds)
  (326/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.488632594 seconds)
  (327/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 2.468365999 seconds)
  (328/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.456682151 seconds)
  (329/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 2.58515797 seconds)
  (330/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 2.475377551 seconds)
  (331/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 2.476689566 seconds)
  (332/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 2.472078563 seconds)
  (333/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 2.4881859 seconds)
  (334/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 2.460909108 seconds)
  (335/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 2.454852191 seconds)
  (336/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 2.453036732 seconds)
  (337/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 2.459039561 seconds)
  (338/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 2.496481503 seconds)
  (339/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 2.461098354 seconds)
  (340/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 2.45867325 seconds)
  (341/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 2.462991084 seconds)
  (342/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.489044323 seconds)
  (343/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 2.478282785 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 2.448036691 seconds)
  (345/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 2.458284001 seconds)
  (346/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 2.464682179 seconds)
  (347/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.458611698 seconds)
  (348/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 2.470913655 seconds)
  (349/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 2.471830244 seconds)
  (350/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 2.451967418 seconds)
  (351/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 2.46389302 seconds)
  (352/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 2.458746811 seconds)
  (353/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 2.448489761 seconds)
  (354/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 2.473437411 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 2.496135235 seconds)
  (356/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 2.462918401 seconds)
  (357/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 2.465455193 seconds)
  (358/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 2.47158485 seconds)
  (359/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.462771328 seconds)
  (360/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 2.467093804 seconds)
  (361/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 2.462338481 seconds)
  (362/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.577745779 seconds)
  (363/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 2.462497762 seconds)
  (364/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 2.474500981 seconds)
  (365/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.482651876 seconds)
  (366/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.512224631 seconds)
  (367/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 2.467612242 seconds)
  (368/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 2.48191464 seconds)
  (369/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 2.473338182 seconds)
  (370/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.456884109 seconds)
  (371/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 2.460527225 seconds)
  (372/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 2.469345536 seconds)
  (373/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 2.461187172 seconds)
  (374/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.572065921 seconds)
  (375/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 2.4813103 seconds)
  (376/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 2.570515371 seconds)
  (377/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.711322542 seconds)
  (378/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 2.740740012 seconds)
  (379/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 2.503317041 seconds)
  (380/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 2.465182132 seconds)
  (381/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.586238592 seconds)
  (382/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 2.567637374 seconds)
  (383/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 2.557752273 seconds)
  (384/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 2.566077552 seconds)
  (385/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 2.772312467 seconds)
  (386/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 2.46911855 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 2.487093397 seconds)
  (388/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.579029425 seconds)
  (389/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 2.459172954 seconds)
  (390/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 2.468384915 seconds)
  (391/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.456874962 seconds)
  (392/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 2.467276452 seconds)
  (393/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 2.470589884 seconds)
  (394/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 2.460073715 seconds)
  (395/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 2.474830691 seconds)
  (396/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 2.46863193 seconds)
  (397/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.491332579 seconds)
  (398/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 2.469435474 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 2.481119866 seconds)
  (400/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 2.497477765 seconds)
  (401/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 2.469287786 seconds)
  (402/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 2.455481789 seconds)
  (403/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 2.503043889 seconds)
  (404/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.465561912 seconds)
  (405/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 2.469006215 seconds)
  (406/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 2.490173513 seconds)
  (407/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 2.457170722 seconds)
  (408/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 2.486877294 seconds)
  (409/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 2.472089489 seconds)
  (410/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 2.463009445 seconds)
  (411/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 2.481758183 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.466239099 seconds)
  (413/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 2.468715174 seconds)
  (414/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 2.457764282 seconds)
  (415/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.46232688 seconds)
  (416/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 2.477721668 seconds)
  (417/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 2.485518566 seconds)
  (418/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 2.470725949 seconds)
  (419/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 2.472098352 seconds)
  (420/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 2.464264703 seconds)
  (421/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 2.488659676 seconds)
  (422/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.462058618 seconds)
  (423/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 2.467630697 seconds)
  (424/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 2.452126098 seconds)
  (425/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 2.462217684 seconds)
  (426/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 2.476271096 seconds)
  (427/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 2.467640693 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 2.468671094 seconds)
  (429/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 2.471237235 seconds)
  (430/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.460761631 seconds)
  (431/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 2.464857529 seconds)
  (432/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 2.46200139 seconds)
  (433/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.460446716 seconds)
  (434/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 2.46301454 seconds)
  (435/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 2.471924872 seconds)
  (436/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.457623902 seconds)
  (437/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 2.467467129 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 2.463926743 seconds)
  (439/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 2.462584435 seconds)
  (440/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 2.457838508 seconds)
  (441/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 2.46208581 seconds)
  (442/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 2.449382531 seconds)
  (443/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 2.477966471 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.459575613 seconds)
  (445/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 2.462081754 seconds)
  (446/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.459847903 seconds)
  (447/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 2.485014279 seconds)
  (448/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 2.462201453 seconds)
  (449/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 2.454943895 seconds)
  (450/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 2.500184616 seconds)
  (451/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 2.459408297 seconds)
  (452/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.480050995 seconds)
  (453/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 2.511364826 seconds)
  (454/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 2.47128519 seconds)
  (455/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 2.45689159 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.450924097 seconds)
  (457/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 2.465317607 seconds)
  (458/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 2.462546178 seconds)
  (459/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.529683607 seconds)
  (460/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.485819052 seconds)
  (461/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 2.477573638 seconds)
  (462/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.48262132 seconds)
  (463/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 2.475786882 seconds)
  (464/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 2.49569408 seconds)
  (465/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 2.483837259 seconds)
  (466/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.498015466 seconds)
  (467/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 2.495335471 seconds)
  (468/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 2.473153347 seconds)
  (469/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 2.486905076 seconds)
  (470/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 2.469020315 seconds)
  (471/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.45913644 seconds)
  (472/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 2.46921603 seconds)
  (473/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 2.473904349 seconds)
  (474/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 2.48132532 seconds)
  (475/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 2.454580007 seconds)
  (476/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 2.461047011 seconds)
  (477/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 2.475202668 seconds)
  (478/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 2.464655594 seconds)
  (479/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.494025805 seconds)
  (480/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 2.493353538 seconds)
  (481/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 2.46973273 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 2.488362324 seconds)
  (483/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 2.491418904 seconds)
  (484/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 2.506732257 seconds)
  (485/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 2.49011854 seconds)
  (486/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 2.483259894 seconds)
  (487/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.489062989 seconds)
  (488/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 2.445731737 seconds)
  (489/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 2.457412084 seconds)
  (490/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 2.468719694 seconds)
  (491/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 2.463593447 seconds)
  (492/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 2.480950711 seconds)
  (493/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 2.453125262 seconds)
  (494/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 2.471769999 seconds)
  (495/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 2.582035488 seconds)
  (496/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.462573292 seconds)
  (497/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 2.619051659 seconds)
  (498/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 2.454994282 seconds)
  (499/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 2.489489955 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 2.473455459 seconds)
  (501/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 2.468791467 seconds)
  (502/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.458153143 seconds)
  (503/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 2.473743565 seconds)
  (504/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 2.447037299 seconds)
  (505/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 2.459341818 seconds)
  (506/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 2.504266872 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 2.476163884 seconds)
  (508/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 2.453730882 seconds)
  (509/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 2.469096335 seconds)
  (510/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 2.456797885 seconds)
  (511/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 2.583451024 seconds)
  (512/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 2.529649976 seconds)
  (513/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 2.470311359 seconds)
  (514/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.454240687 seconds)
  (515/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 2.459362535 seconds)
  (516/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.452765775 seconds)
  (517/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 2.469200142 seconds)
  (518/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 2.472703142 seconds)
  (519/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 2.466022757 seconds)
  (520/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 2.472330767 seconds)
  (521/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.482389514 seconds)
  (522/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.459945997 seconds)
  (523/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 2.473783501 seconds)
  (524/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 2.446793788 seconds)
  (525/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 2.454054525 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.459513605 seconds)
  (527/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 2.4621414 seconds)
  (528/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 2.527937463 seconds)
  (529/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 2.609377491 seconds)
  (530/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 2.45070157 seconds)
  (531/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 2.451404726 seconds)
  (532/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 2.445559355 seconds)
  (533/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 2.460656403 seconds)
  (534/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 2.460755673 seconds)
  (535/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 2.462195152 seconds)
  (536/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 2.467104649 seconds)
  (537/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.540643394 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 2.452277374 seconds)
  (539/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 2.46382332 seconds)
  (540/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.475685364 seconds)
  (541/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.535943708 seconds)
  (542/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 2.455080655 seconds)
  (543/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 2.469509552 seconds)
  (544/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 2.506410156 seconds)
  (545/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.457215707 seconds)
  (546/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 2.458326509 seconds)
  (547/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 2.462006449 seconds)
  (548/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 2.454328692 seconds)
  (549/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.460611781 seconds)
  (550/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 2.451526285 seconds)
  (551/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 2.451244929 seconds)
  (552/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.45255001 seconds)
  (553/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 2.449735239 seconds)
  (554/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.484722521 seconds)
  (555/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 2.464690773 seconds)
  (556/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 2.498390171 seconds)
  (557/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.459609002 seconds)
  (558/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 2.495749044 seconds)
  (559/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 2.459780963 seconds)
  (560/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 2.452946028 seconds)
  (561/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 2.463229012 seconds)
  (562/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 2.471844219 seconds)
  (563/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 2.499626653 seconds)
  (564/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.455247285 seconds)
  (565/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 2.476141534 seconds)
  (566/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 2.475035583 seconds)
  (567/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.472852526 seconds)
  (568/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 2.45361945 seconds)
  (569/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 2.501909908 seconds)
  (570/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.457135172 seconds)
  (571/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 2.459640658 seconds)
  (572/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 2.471632901 seconds)
  (573/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 2.453555161 seconds)
  (574/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 2.464125556 seconds)
  (575/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 2.520558119 seconds)
  (576/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.484423929 seconds)
  (577/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.454998287 seconds)
  (578/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 2.461147223 seconds)
  (579/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 2.462867087 seconds)
  (580/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.572413685 seconds)
  (581/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 2.490655453 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 2.452997748 seconds)
  (583/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 2.469097886 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 2.473134098 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 2.469918686 seconds)
  (586/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 2.477331404 seconds)
  (587/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.49028382 seconds)
  (588/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.454270749 seconds)
  (589/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.455545005 seconds)
  (590/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 2.466560175 seconds)
  (591/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 2.473348862 seconds)
  (592/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.454555027 seconds)
  (593/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 2.46259929 seconds)
  (594/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 2.46862143 seconds)
  (595/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.468538073 seconds)
  (596/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.459968256 seconds)
  (597/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 2.456282134 seconds)
  (598/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.474039588 seconds)
  (599/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.462600641 seconds)
  (600/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 2.466596093 seconds)
  (601/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 2.467077369 seconds)
  (602/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.460505718 seconds)
  (603/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 2.463937826 seconds)
  (604/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 2.460890371 seconds)
  (605/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 2.451066529 seconds)
  (606/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 2.496556851 seconds)
  (607/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 2.459963349 seconds)
  (608/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.460591103 seconds)
  (609/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.484084572 seconds)
  (610/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 2.465871587 seconds)
  (611/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.460479647 seconds)
  (612/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 2.469045299 seconds)
  (613/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 2.461316023 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 2.463499251 seconds)
  (615/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 2.464617227 seconds)
  (616/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.502508377 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.48654808 seconds)
  (618/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.452003585 seconds)
  (619/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.456959978 seconds)
  (620/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 2.46140524 seconds)
  (621/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 2.459648427 seconds)
  (622/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 2.483882184 seconds)
  (623/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 2.467110532 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 2.451818328 seconds)
  (625/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 2.475070898 seconds)
  (626/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 2.466810487 seconds)
  (627/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 2.468140784 seconds)
  (628/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 2.47424877 seconds)
  (629/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.509857062 seconds)
  (630/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 2.467673046 seconds)
  (631/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 2.454944759 seconds)
  (632/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 2.475005876 seconds)
  (633/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 2.463324223 seconds)
  (634/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 2.457324625 seconds)
  (635/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 2.4761686 seconds)
  (636/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 2.466958834 seconds)
  (637/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 2.500068473 seconds)
  (638/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 2.46835613 seconds)
  (639/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 2.467527361 seconds)
  (640/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.499421133 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 2.478467475 seconds)
  (642/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 2.462527115 seconds)
  (643/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 2.45043392 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 2.469281901 seconds)
  (645/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.458039893 seconds)
  (646/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 2.455509615 seconds)
  (647/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 2.65995508 seconds)
  (648/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 2.471952943 seconds)
  (649/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 2.485789831 seconds)
  (650/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 2.47756927 seconds)
  (651/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 2.466302418 seconds)
  (652/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 2.466488103 seconds)
  (653/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.454614894 seconds)
  (654/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 2.462984155 seconds)
  (655/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 2.483687335 seconds)
  (656/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.496691373 seconds)
  (657/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.498261574 seconds)
  (658/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 2.461450755 seconds)
  (659/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.518156715 seconds)
  (660/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 2.460815847 seconds)
  (661/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 2.527689094 seconds)
  (662/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 2.46067384 seconds)
  (663/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 2.468236603 seconds)
  (664/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.514758708 seconds)
  (665/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.454646035 seconds)
  (666/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 2.47187594 seconds)
  (667/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 2.620566239 seconds)
  (668/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 2.491994866 seconds)
  (669/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 2.468584187 seconds)
  (670/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 2.458970846 seconds)
  (671/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 2.611511164 seconds)
  (672/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 2.463884869 seconds)
  (673/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 2.46480178 seconds)
  (674/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 2.455203043 seconds)
  (675/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 2.464843717 seconds)
  (676/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 2.456253785 seconds)
  (677/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 2.463246445 seconds)
  (678/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 2.460969674 seconds)
  (679/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 2.477556467 seconds)
  (680/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.512700613 seconds)
done (took 1687.590052191 seconds)
(22/23) benchmarking "inference"...
  (1/3) benchmarking "allinference"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 40.072394071 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 33.852521023 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 35.059937771 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 33.742534684 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 34.964096558 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 34.552526512 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 39.400308636 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 37.435416216 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 38.25447653 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 36.637524654 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 35.680727349 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 36.416037202 seconds)
  done (took 438.506779954 seconds)
  (2/3) benchmarking "optimization"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 43.966196897 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 37.532499391 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 38.459675791 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 37.236624875 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 38.092650422 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 35.940440899 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 44.289453828 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 38.367139424 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 37.302063948 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 37.692555276 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 39.913096033 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 37.559063279 seconds)
  done (took 469.963312755 seconds)
  (3/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 40.456903849 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 39.74309131 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 35.027730592 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 38.971292119 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 35.303389978 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 35.227038904 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 39.957869717 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 36.99082634 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 38.610405255 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 37.275455432 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 38.814595361 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 37.334879592 seconds)
  done (took 458.378653954 seconds)
done (took 1369.28594416 seconds)
(23/23) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 5.390052683 seconds)
    (2/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 5.503992442 seconds)
    (3/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 5.387250309 seconds)
    (4/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 5.378578227 seconds)
    (5/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 5.719684826 seconds)
    (6/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 5.520116347 seconds)
    (7/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 5.663900302 seconds)
    (8/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 10.658149015 seconds)
    (9/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 5.549059355 seconds)
    (10/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 9.904714233 seconds)
    (11/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 9.437299802 seconds)
    (12/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 5.619714365 seconds)
    (13/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 10.322615815 seconds)
    (14/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 12.433059205 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 5.924912992 seconds)
    (16/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 10.346787533 seconds)
    (17/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 13.448020394 seconds)
    (18/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 5.378607347 seconds)
    (19/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 5.822871272 seconds)
    (20/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 10.318291522 seconds)
    (21/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 5.667802073 seconds)
    (22/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 8.795085174 seconds)
    (23/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 10.314729654 seconds)
    (24/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 10.319586454 seconds)
    (25/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 5.380182477 seconds)
    (26/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 5.676217652 seconds)
    (27/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 10.522667215 seconds)
    (28/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 5.44172831 seconds)
    (29/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 5.818172672 seconds)
    (30/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 5.501440513 seconds)
    (31/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 5.329697481 seconds)
    (32/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 5.456231845 seconds)
    (33/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 5.566292574 seconds)
    (34/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 6.342853238 seconds)
    (35/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 5.733030037 seconds)
    (36/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 5.338540348 seconds)
    (37/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 5.739395442 seconds)
    (38/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 5.567748376 seconds)
    (39/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 5.84051567 seconds)
    (40/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 5.57287212 seconds)
    (41/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 5.673310124 seconds)
    (42/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 5.575801987 seconds)
    (43/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 5.548923599 seconds)
    (44/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 10.312061704 seconds)
    (45/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 5.326205792 seconds)
    (46/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 5.557175369 seconds)
    (47/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 6.317445985 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 5.819212893 seconds)
    (49/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 5.34281888 seconds)
    (50/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 5.993700189 seconds)
    (51/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 5.37779807 seconds)
    (52/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 5.557671575 seconds)
    (53/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 5.530305001 seconds)
    (54/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 5.496182375 seconds)
    (55/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 5.373112335 seconds)
    (56/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 5.332353535 seconds)
    (57/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 5.546956332 seconds)
    (58/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 6.308050326 seconds)
    (59/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 5.550054231 seconds)
    (60/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 5.448386778 seconds)
    (61/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 5.398422269 seconds)
    (62/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 5.567815367 seconds)
    (63/434) benchmarking ("sort", "Int64", 0)...
    done (took 7.849201372 seconds)
    (64/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 5.40213307 seconds)
    (65/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 10.314219885 seconds)
    (66/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 12.886248578 seconds)
    (67/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 5.334144444 seconds)
    (68/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 5.553332025 seconds)
    (69/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 10.317170812 seconds)
    (70/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 5.799693251 seconds)
    (71/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 5.513814831 seconds)
    (72/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 5.667606685 seconds)
    (73/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 5.400427198 seconds)
    (74/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 5.958921387 seconds)
    (75/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 5.529227796 seconds)
    (76/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 5.402724453 seconds)
    (77/434) benchmarking ("perf_countequals", "Float32")...
    done (took 5.37757943 seconds)
    (78/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 5.648152744 seconds)
    (79/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 10.316384589 seconds)
    (80/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 16.962713181 seconds)
    (81/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 12.097443761 seconds)
    (82/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 5.537735103 seconds)
    (83/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 5.409695155 seconds)
    (84/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 5.557239873 seconds)
    (85/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 5.559553677 seconds)
    (86/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 5.534128356 seconds)
    (87/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 5.395495429 seconds)
    (88/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 10.319105579 seconds)
    (89/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 10.022853784 seconds)
    (90/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 5.333154566 seconds)
    (91/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 5.376387266 seconds)
    (92/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 5.495032934 seconds)
    (93/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 10.235365915 seconds)
    (94/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 5.587879865 seconds)
    (95/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 5.327848216 seconds)
    (96/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 5.557984064 seconds)
    (97/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 10.395905443 seconds)
    (98/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 6.346573993 seconds)
    (99/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 5.396122855 seconds)
    (100/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 5.71434613 seconds)
    (101/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 5.670457118 seconds)
    (102/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 5.403831242 seconds)
    (103/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 5.567907469 seconds)
    (104/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 5.410575193 seconds)
    (105/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 6.119441566 seconds)
    (106/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 5.820328352 seconds)
    (107/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 5.342787713 seconds)
    (108/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 10.404940771 seconds)
    (109/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 5.46625768 seconds)
    (110/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 5.376184309 seconds)
    (111/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 5.452277342 seconds)
    (112/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 10.316946864 seconds)
    (113/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 5.77716859 seconds)
    (114/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 5.511164304 seconds)
    (115/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 5.336906761 seconds)
    (116/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 5.554341349 seconds)
    (117/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 5.5008684 seconds)
    (118/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 5.559708662 seconds)
    (119/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 10.320943126 seconds)
    (120/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 5.338381412 seconds)
    (121/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 5.651350082 seconds)
    (122/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 5.347723795 seconds)
    (123/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 10.311780772 seconds)
    (124/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 10.377980936 seconds)
    (125/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 5.96493243 seconds)
    (126/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 5.679706124 seconds)
    (127/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 5.415208571 seconds)
    (128/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 5.601563282 seconds)
    (129/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 9.769562029 seconds)
    (130/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 11.956146127 seconds)
    (131/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 5.607016065 seconds)
    (132/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 10.320084313 seconds)
    (133/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 12.892093588 seconds)
    (134/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 5.798151882 seconds)
    (135/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 10.329037276 seconds)
    (136/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 9.697809894 seconds)
    (137/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 5.568119511 seconds)
    (138/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 5.411736366 seconds)
    (139/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 5.381555693 seconds)
    (140/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 5.470603635 seconds)
    (141/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 10.32552305 seconds)
    (142/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 13.007128604 seconds)
    (143/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 5.367229575 seconds)
    (144/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 5.561281417 seconds)
    (145/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 5.429074296 seconds)
    (146/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 5.489872809 seconds)
    (147/434) benchmarking ("sort", "Bool", 0)...
    done (took 5.345469336 seconds)
    (148/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 5.596228583 seconds)
    (149/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 5.399973495 seconds)
    (150/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 5.377414276 seconds)
    (151/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 10.317275704 seconds)
    (152/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 5.401109516 seconds)
    (153/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 5.5612037 seconds)
    (154/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 5.435218215 seconds)
    (155/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 5.916131838 seconds)
    (156/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 10.344146509 seconds)
    (157/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 10.0308381 seconds)
    (158/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 5.539844875 seconds)
    (159/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 5.506360289 seconds)
    (160/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 10.325411469 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 18.153214614 seconds)
    (162/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 5.798700833 seconds)
    (163/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 5.835904286 seconds)
    (164/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 5.635715716 seconds)
    (165/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 5.578767284 seconds)
    (166/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 5.557335903 seconds)
    (167/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 5.7158565 seconds)
    (168/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 5.390587238 seconds)
    (169/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 10.322777398 seconds)
    (170/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 9.872273826 seconds)
    (171/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 5.955979694 seconds)
    (172/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 10.236116262 seconds)
    (173/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 6.133197156 seconds)
    (174/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 5.918694792 seconds)
    (175/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 10.320299315 seconds)
    (176/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 10.320379683 seconds)
    (177/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 13.157252087 seconds)
    (178/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 5.657824091 seconds)
    (179/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 5.603034255 seconds)
    (180/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 5.548272197 seconds)
    (181/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 5.541933226 seconds)
    (182/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 5.734579966 seconds)
    (183/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 5.458636101 seconds)
    (184/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 5.339466731 seconds)
    (185/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 5.745931138 seconds)
    (186/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 5.578236461 seconds)
    (187/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 5.720960637 seconds)
    (188/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 5.51323422 seconds)
    (189/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 5.867553841 seconds)
    (190/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 5.565961336 seconds)
    (191/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 5.621056163 seconds)
    (192/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 5.685068305 seconds)
    (193/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 5.464107588 seconds)
    (194/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 5.516680177 seconds)
    (195/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 5.330644946 seconds)
    (196/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 5.70021978 seconds)
    (197/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 5.371422352 seconds)
    (198/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 5.564047755 seconds)
    (199/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 5.510227456 seconds)
    (200/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 5.531053107 seconds)
    (201/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 5.351265214 seconds)
    (202/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 6.220316782 seconds)
    (203/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 9.815030632 seconds)
    (204/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 11.435083174 seconds)
    (205/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 7.523563044 seconds)
    (206/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.410405354 seconds)
    (207/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 5.697161746 seconds)
    (208/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 5.837055789 seconds)
    (209/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 5.506745276 seconds)
    (210/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 8.266819981 seconds)
    (211/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 5.688381033 seconds)
    (212/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 5.570330262 seconds)
    (213/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 5.391557262 seconds)
    (214/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 5.455686287 seconds)
    (215/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 5.839289463 seconds)
    (216/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 10.583780333 seconds)
    (217/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 5.812108554 seconds)
    (218/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 5.459918767 seconds)
    (219/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 5.354033545 seconds)
    (220/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 5.50368076 seconds)
    (221/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 10.319448333 seconds)
    (222/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 5.651136776 seconds)
    (223/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 5.336254836 seconds)
    (224/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 5.687350942 seconds)
    (225/434) benchmarking ("perf_countequals", "Int64")...
    done (took 5.38620087 seconds)
    (226/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 5.599617629 seconds)
    (227/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 5.55569414 seconds)
    (228/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 5.446944971 seconds)
    (229/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 10.334223916 seconds)
    (230/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 5.91193732 seconds)
    (231/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 5.554491568 seconds)
    (232/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 5.554204286 seconds)
    (233/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 5.515455591 seconds)
    (234/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 5.497036558 seconds)
    (235/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 5.53112403 seconds)
    (236/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 5.394261739 seconds)
    (237/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 5.662203355 seconds)
    (238/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 5.977994252 seconds)
    (239/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 5.792426351 seconds)
    (240/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 5.382871935 seconds)
    (241/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 5.416520954 seconds)
    (242/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 5.380224222 seconds)
    (243/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 5.36319021 seconds)
    (244/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 9.442547303 seconds)
    (245/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 9.646205126 seconds)
    (246/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 5.60160153 seconds)
    (247/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 5.41037844 seconds)
    (248/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 5.391081367 seconds)
    (249/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 6.243307663 seconds)
    (250/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 10.317131361 seconds)
    (251/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 5.561439355 seconds)
    (252/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 5.657518834 seconds)
    (253/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 5.594090284 seconds)
    (254/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 5.561409819 seconds)
    (255/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 5.675765454 seconds)
    (256/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 5.420837418 seconds)
    (257/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 5.398094812 seconds)
    (258/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 5.335408023 seconds)
    (259/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 5.398786204 seconds)
    (260/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 5.385225 seconds)
    (261/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 5.336226008 seconds)
    (262/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 5.419690027 seconds)
    (263/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 5.53443694 seconds)
    (264/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 5.409910566 seconds)
    (265/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 5.68917923 seconds)
    (266/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 5.572464305 seconds)
    (267/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 5.34010807 seconds)
    (268/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 5.398748613 seconds)
    (269/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 5.489834185 seconds)
    (270/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 5.550737229 seconds)
    (271/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 5.579289808 seconds)
    (272/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 10.316607254 seconds)
    (273/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 9.903329221 seconds)
    (274/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 5.554154518 seconds)
    (275/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 5.560127388 seconds)
    (276/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 6.007767545 seconds)
    (277/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 10.322336226 seconds)
    (278/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 12.731184277 seconds)
    (279/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 5.396240688 seconds)
    (280/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 5.453240331 seconds)
    (281/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 10.312265573 seconds)
    (282/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 12.83505136 seconds)
    (283/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 5.332263565 seconds)
    (284/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 5.468920046 seconds)
    (285/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.55352659 seconds)
    (286/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 5.705237537 seconds)
    (287/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 5.668942887 seconds)
    (288/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 9.999145209 seconds)
    (289/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 5.594904634 seconds)
    (290/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 5.343551917 seconds)
    (291/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 5.44845347 seconds)
    (292/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 5.567895894 seconds)
    (293/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 5.36145562 seconds)
    (294/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 5.317130047 seconds)
    (295/434) benchmarking ("perf_countequals", "Int8")...
    done (took 5.352096742 seconds)
    (296/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 5.484653507 seconds)
    (297/434) benchmarking ("sort", "Float32", 0)...
    done (took 6.016648272 seconds)
    (298/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 5.667201459 seconds)
    (299/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 5.551310323 seconds)
    (300/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 10.314870825 seconds)
    (301/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 14.475904873 seconds)
    (302/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 11.056458752 seconds)
    (303/434) benchmarking ("sort", "BigInt", 0)...
    done (took 14.841585926 seconds)
    (304/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 5.598116156 seconds)
    (305/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 5.67303012 seconds)
    (306/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 5.357003807 seconds)
    (307/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 10.315075296 seconds)
    (308/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 12.582077444 seconds)
    (309/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 5.323033574 seconds)
    (310/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 5.676301005 seconds)
    (311/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 5.77376248 seconds)
    (312/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 5.511516019 seconds)
    (313/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 5.447598704 seconds)
    (314/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 5.429051217 seconds)
    (315/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 5.394405092 seconds)
    (316/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 5.596999024 seconds)
    (317/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 5.337130301 seconds)
    (318/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 5.667538445 seconds)
    (319/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 10.336356717 seconds)
    (320/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 9.46206462 seconds)
    (321/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 5.797535006 seconds)
    (322/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 5.524980878 seconds)
    (323/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 5.673824817 seconds)
    (324/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 8.034750678 seconds)
    (325/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 6.206217595 seconds)
    (326/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 5.371391225 seconds)
    (327/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 5.660138949 seconds)
    (328/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 5.516415482 seconds)
    (329/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 10.019319831 seconds)
    (330/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 6.184951054 seconds)
    (331/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 5.534455431 seconds)
    (332/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 5.415597868 seconds)
    (333/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 5.525170781 seconds)
    (334/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 5.548237332 seconds)
    (335/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 5.654832181 seconds)
    (336/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 5.343534148 seconds)
    (337/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 5.424183599 seconds)
    (338/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 10.310503726 seconds)
    (339/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 6.252253978 seconds)
    (340/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 5.376373898 seconds)
    (341/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 5.37985338 seconds)
    (342/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 5.516682863 seconds)
    (343/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 5.389211669 seconds)
    (344/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 9.08183488 seconds)
    (345/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 7.324057082 seconds)
    (346/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 5.537173347 seconds)
    (347/434) benchmarking ("perf_countequals", "Float64")...
    done (took 5.406922897 seconds)
    (348/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 5.883849416 seconds)
    (349/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.411807871 seconds)
    (350/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 8.074587297 seconds)
    (351/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 6.462403552 seconds)
    (352/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 5.567883505 seconds)
    (353/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 5.34204549 seconds)
    (354/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 5.909803778 seconds)
    (355/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 5.600293094 seconds)
    (356/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 10.318625214 seconds)
    (357/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 11.088997695 seconds)
    (358/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 6.12001865 seconds)
    (359/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.506008701 seconds)
    (360/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 5.424113218 seconds)
    (361/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 5.334958142 seconds)
    (362/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 5.552800223 seconds)
    (363/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 5.514981901 seconds)
    (364/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 5.396795941 seconds)
    (365/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 5.570924543 seconds)
    (366/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 5.333441537 seconds)
    (367/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 5.820134974 seconds)
    (368/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 5.336346908 seconds)
    (369/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 5.802528721 seconds)
    (370/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.531554531 seconds)
    (371/434) benchmarking ("sort", "Float64", 0)...
    done (took 7.488927652 seconds)
    (372/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 5.685847562 seconds)
    (373/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 10.325939015 seconds)
    (374/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 5.978026624 seconds)
    (375/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 5.568251557 seconds)
    (376/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 5.337401364 seconds)
    (377/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 9.044449908 seconds)
    (378/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 6.222141871 seconds)
    (379/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 5.660016522 seconds)
    (380/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 5.339250099 seconds)
    (381/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 10.318136642 seconds)
    (382/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 5.953359364 seconds)
    (383/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 10.319687572 seconds)
    (384/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 10.287283234 seconds)
    (385/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 5.675634813 seconds)
    (386/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 5.777369398 seconds)
    (387/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 5.673922789 seconds)
    (388/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 5.609883235 seconds)
    (389/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 5.702562848 seconds)
    (390/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 5.495636223 seconds)
    (391/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 5.343410793 seconds)
    (392/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 5.451403109 seconds)
    (393/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 5.338018707 seconds)
    (394/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 10.314694598 seconds)
    (395/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 5.789800282 seconds)
    (396/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 5.580759399 seconds)
    (397/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 5.398198197 seconds)
    (398/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 5.520905525 seconds)
    (399/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 5.85879847 seconds)
    (400/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 5.394677439 seconds)
    (401/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 10.315788028 seconds)
    (402/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 6.269430582 seconds)
    (403/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 5.570234725 seconds)
    (404/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 5.571752754 seconds)
    (405/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 5.50571919 seconds)
    (406/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 5.686218367 seconds)
    (407/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 5.404694594 seconds)
    (408/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 5.449540694 seconds)
    (409/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 5.51039299 seconds)
    (410/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 5.408701947 seconds)
    (411/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 9.343944687 seconds)
    (412/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 9.457947992 seconds)
    (413/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 5.329704937 seconds)
    (414/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 5.827261522 seconds)
    (415/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 5.546294912 seconds)
    (416/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 10.32418839 seconds)
    (417/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 17.015287714 seconds)
    (418/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 11.869539399 seconds)
    (419/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 5.56803444 seconds)
    (420/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 5.72209709 seconds)
    (421/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 5.673025303 seconds)
    (422/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 5.368889536 seconds)
    (423/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 5.436901192 seconds)
    (424/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 5.396254807 seconds)
    (425/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 10.314799444 seconds)
    (426/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 5.772161258 seconds)
    (427/434) benchmarking ("perf_countequals", "Bool")...
    done (took 5.360543442 seconds)
    (428/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 5.545070544 seconds)
    (429/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 5.622489735 seconds)
    (430/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 5.342165558 seconds)
    (431/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 5.788762068 seconds)
    (432/434) benchmarking ("sort", "Int8", 0)...
    done (took 5.401306872 seconds)
    (433/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 6.043240354 seconds)
    (434/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 5.683053222 seconds)
  done (took 2907.658319138 seconds)
done (took 2912.975608717 seconds)
SAVING RESULT...
DONE!
