cset: moving following pidspec: 81151
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.938052003 seconds)
loading group "shootout"... done (took 0.874354348 seconds)
loading group "string"... done (took 0.252874434 seconds)
loading group "linalg"... done (took 3.461622595 seconds)
loading group "parallel"... done (took 0.023583454 seconds)
loading group "find"... done (took 1.332257774 seconds)
loading group "tuple"... done (took 0.792617651 seconds)
loading group "union"... done (took 3.373169935 seconds)
loading group "dates"... done (took 0.165121617 seconds)
loading group "micro"... done (took 0.063065676 seconds)
loading group "simd"... done (took 0.379950146 seconds)
loading group "io"... done (took 1.486074388 seconds)
loading group "random"... done (took 2.662300171 seconds)
loading group "problem"... done (took 1.245696589 seconds)
loading group "array"... done (took 5.022372941 seconds)
loading group "misc"... done (took 1.071843696 seconds)
loading group "scalar"... done (took 3.678686818 seconds)
loading group "sort"... done (took 0.328341516 seconds)
loading group "sparse"... done (took 3.791471661 seconds)
loading group "collection"... done (took 6.576341608 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.59274772 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.084059698 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.275139521 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.08737146 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.296708059 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.091969679 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.096382584 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.077398707 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.086417739 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.174947758 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.234527656 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.422193102 seconds)
done (took 5.35190221 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.275431999 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.034717796 seconds)
    (2/2) benchmarking "String"...
    done (took 0.136723882 seconds)
  done (took 0.851372253 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.147541077 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.018419887 seconds)
    (3/3) benchmarking "different"...
    done (took 0.026714561 seconds)
  done (took 0.868953932 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.023721675 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.109225442 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.025372611 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.025428715 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.025159602 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.025570477 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.025460523 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.025316047 seconds)
  done (took 0.947283163 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.030564771 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.025415907 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.024049656 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.026192707 seconds)
  done (took 0.786458782 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.024349551 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.089083802 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.022772156 seconds)
    (4/4) benchmarking "different"...
    done (took 0.022521032 seconds)
  done (took 0.823607408 seconds)
done (took 5.264651624 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.217745624 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.827730145 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 1.074806055 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.198307351 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.382271672 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.321712343 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.0835176 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.254086655 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.161880483 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.038099497 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.197097162 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.045170262 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.573293622 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.492460792 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.032166588 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.163525798 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.613334789 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.041051436 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.075289596 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.289587525 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.042391802 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.04341423 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.049353385 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.02990128 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.18127014 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.142709127 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.616417707 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.068823101 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.029710046 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.143762259 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.03151987 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.035357511 seconds)
  done (took 10.226808074 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.161283036 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.159482468 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.027571533 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.063973458 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.055360872 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.029112495 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.035725866 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.027223922 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.048994319 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.095881967 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.049976681 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.175699276 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.025538544 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.029484339 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.150763577 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.126020737 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.041725365 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.043090311 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.025461118 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.041546218 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.054081064 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.038323513 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.037471647 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.036418051 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.07456316 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.093822429 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.044480804 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.069179548 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.025085088 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.039518889 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.060315065 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.06802507 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.025467862 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.024549639 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.073221972 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.044149849 seconds)
  done (took 2.94051446 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.835670419 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.060968689 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.154587474 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.144081549 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.069970749 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.054023725 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.1961522 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.087050229 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.061981303 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.028076032 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.225193935 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.6984613 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.183824703 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.234768885 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.030506756 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.196666141 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.946218709 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.986080109 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.027308584 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.02754731 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.146229296 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.030344195 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.188294484 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.028286619 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.151238287 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.866909544 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.030058921 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.029048159 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.059622656 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.158661862 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.024871893 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.110111597 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.057309543 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.029538962 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.572683051 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.025280097 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.023553059 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.046823406 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.058727219 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.026149638 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.027283083 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.039387765 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.024975029 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.082066994 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.039030644 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.556733074 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.029626751 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.760390929 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.898915712 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.033742914 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.031470074 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.0633076 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.023342003 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.027691161 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.642876386 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.117353165 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.025823007 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.267766674 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.02689671 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.027630048 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.028644468 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.061760661 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.027704261 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.02930489 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.031209135 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.04620974 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.047577796 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.034541785 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.048913881 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.024479007 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.026715415 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.025405583 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.425949294 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.031382746 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.029275792 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.024614014 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.03137384 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.027343795 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.026755693 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.07188131 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.053685749 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.051051078 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.028913827 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.026398426 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.026080663 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.55068097 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.100096788 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.027022726 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.028527482 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.518218532 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.023920517 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.026190145 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.027939301 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.04737135 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.026223131 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.021991854 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.06185232 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.027133226 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.137804204 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.506772888 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.026980457 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.023311969 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.693714115 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.02762919 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.059027892 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.083979416 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.026649639 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.065484143 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.027213689 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.023514634 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.030475226 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.024230352 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.02854035 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.025160355 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.02598528 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.024571814 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.026734862 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.027895502 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.027033066 seconds)
  done (took 21.461196112 seconds)
done (took 37.14449892 seconds)
(4/20) benchmarking "parallel"...
done (took 0.846343598 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.235828636 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.054258587 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.021975392 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.180326022 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.048460929 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.150238184 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.192604587 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.139720953 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.050151265 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.050046155 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.050328581 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.201426756 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.210790828 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.051976813 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.131564035 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.213478416 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.051619562 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.023427787 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.050908081 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.051825414 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.051579442 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.022787777 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.049971365 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.051364913 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.129688544 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.050937991 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.022208853 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.131676287 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.051942271 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.13436765 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.051881887 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.050977956 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.052657907 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.13215826 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.053467105 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.133553706 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.022783651 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.052604447 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.053002247 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.054044547 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.053758036 seconds)
  done (took 4.374466976 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.050408557 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.045831702 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.046472425 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.020857 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.031759445 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.044985918 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.021619201 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.044281194 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.04887302 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.046369048 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.044641662 seconds)
  done (took 1.292519245 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.044576123 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.047546045 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.048956877 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.02155864 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.034428924 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.046683993 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.021249818 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.044331221 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.047580233 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.045423826 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.045332819 seconds)
  done (took 1.237630729 seconds)
done (took 7.671877462 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.163604898 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.132293265 seconds)
  done (took 1.075274118 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.601651806 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.246912936 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.140431459 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.266702879 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.133661809 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.16631917 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.414282543 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.171279961 seconds)
  done (took 6.970319354 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.088496068 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.156872508 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.028352537 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.026715041 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.027187486 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.027578811 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.029017053 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.027937308 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.027077396 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.02904373 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.029116922 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.027069091 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.027913194 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.02779733 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.025013075 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.026615873 seconds)
  done (took 1.568097556 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.030612138 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.02914933 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.03031345 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.019217114 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.030676524 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.029988977 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.031255231 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.031702536 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.030306427 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.030478093 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.028784652 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.032369926 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.030771379 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.029307321 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.031752139 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.019843236 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.03198075 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.031159004 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.03310214 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.031516257 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.030534346 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.028991864 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.032678686 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.029297977 seconds)
  done (took 1.518915585 seconds)
done (took 11.9118299 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.149635139 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.033071432 seconds)
  done (took 0.971368969 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.135255007 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.136313021 seconds)
  done (took 1.064288675 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.030316603 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.018412607 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.036101924 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.027802406 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.019089982 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.018929575 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.035180261 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.019269991 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.019236335 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.01917017 seconds)
  done (took 1.048540772 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.020178089 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.02565296 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.02356504 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.021850802 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.023651051 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.019666187 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.022583066 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.020583242 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.026426332 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.019352574 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.023239626 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.043044445 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.022195622 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.043155068 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.022245335 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.022569174 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.024451093 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.022097934 seconds)
  done (took 1.242418499 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.018426972 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.01917209 seconds)
  done (took 0.836601953 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.021432961 seconds)
    (2/7) benchmarking "second"...
    done (took 0.019302057 seconds)
    (3/7) benchmarking "month"...
    done (took 0.021280096 seconds)
    (4/7) benchmarking "year"...
    done (took 0.021418076 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.019197113 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.018237795 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.018736833 seconds)
  done (took 0.936729587 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.433529394 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.097083716 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.354821678 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.027670967 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.042305636 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.251081689 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.023419965 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.028554769 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.028438536 seconds)
  done (took 2.07283079 seconds)
done (took 8.969240898 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.044057477 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.154542484 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.161529074 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.492634929 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.03840261 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.026371204 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.055832259 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.248379113 seconds)
done (took 2.036003149 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.5022133 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.396096664 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.220816283 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.028986112 seconds)
  done (took 2.473166341 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.341444145 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.156503372 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.034367096 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.026405517 seconds)
  done (took 1.382393092 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.023366915 seconds)
    (2/2) benchmarking "read"...
    done (took 0.032298998 seconds)
  done (took 0.872892882 seconds)
done (took 6.047113312 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.031919855 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.019773586 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.026687967 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.021448387 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.021133128 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.020782976 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.020584855 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.02138413 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.019522418 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.021345098 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.021425147 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021610869 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.02122766 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.021237452 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.021162076 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021840505 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.019529254 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.021478625 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.02164946 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.021614878 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.019638237 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.021804307 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.021159225 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.021504292 seconds)
  done (took 1.327032516 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.038258773 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.024164717 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.024999983 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.024407577 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.025598035 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.025300464 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.025646515 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.024829127 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.025538857 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.024244605 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.026328067 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.026081851 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.024595524 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.026299621 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.024453852 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.026484336 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.025476682 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.024460236 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.024050613 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.025745684 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.02483392 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.024182784 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.025847119 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.025836868 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.026206332 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.026516077 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.024387717 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.024790062 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.025585671 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.026167527 seconds)
  done (took 1.589698751 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.024399433 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.017424141 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.017931389 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.029721636 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.017081747 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.017709906 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.018548957 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.017489585 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.017588307 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.018781944 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.018146467 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.017544459 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.018225392 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.01719945 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.017065033 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.017481395 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.023192087 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.04205744 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.017981633 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.017901134 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.022719509 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.017778401 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.017610884 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.017582992 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.018126853 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.017573521 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.017195653 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.017649515 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.017015528 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.017900777 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.017281904 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.022698409 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.025049261 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.017871639 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.028748863 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.023572263 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.018158688 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.025403606 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.018488836 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.017520598 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.017369998 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.017483015 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.017469563 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.017283109 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.029971411 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.017398353 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.018035561 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.017064982 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.01737295 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.017211069 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.017399294 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.019339012 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.023811174 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.018703464 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.01728557 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.018869498 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.017733074 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.018806036 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.017776 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.017398465 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.017448724 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.022291207 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.019706386 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.018879911 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.041125991 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.019136806 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.029690784 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.017899663 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.018276997 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.022437962 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.018227212 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.039957011 seconds)
  done (took 2.277036998 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.029501635 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.028923889 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.040276646 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.029866527 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.021894361 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.018932869 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.022349864 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.019084352 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.029947281 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.022959553 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.019162117 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.022588527 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.029928404 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.022977229 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.020187506 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.028942435 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.022208233 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.021407776 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.018301546 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.02206922 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.019708475 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.022028294 seconds)
  done (took 1.352997807 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.111587192 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.025093448 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.07256679 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.028675606 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.027690598 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.028341391 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.024283742 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.024699356 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.025037198 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.025109026 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.025632752 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.024653754 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.026986598 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.024925993 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.02515919 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.024873797 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.024689876 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.025000108 seconds)
  done (took 1.41359253 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.035965462 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.024311454 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.055817527 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.025013086 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.024948509 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.024499422 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.028600243 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.028650364 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.024511854 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.024830334 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.028563757 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.024275716 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.023960553 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.024211281 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.024116644 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.023889744 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.023511471 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.02468166 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.028597918 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.028361722 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.028472908 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.027893362 seconds)
  done (took 1.427309348 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.037686383 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.023676791 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.042058345 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.025036328 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.017979736 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.018136063 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.025693514 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.02413205 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.025001133 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.023538671 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.024022028 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.01821716 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.02630822 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.024016467 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.027263864 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.02460339 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.023720832 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.024179589 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.023616275 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.018066625 seconds)
  done (took 1.322134784 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.139795164 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.020498861 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.020455583 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.024992714 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.020376537 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.020520409 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.025307501 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.020284338 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.02026209 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.046598478 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.020045965 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.019923858 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.024804211 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.02310747 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.020253416 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.025252182 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.025158252 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.025070577 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.020235482 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.020133092 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.046708151 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.020471367 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.025435792 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.020684869 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.020407138 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.020046135 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.019997397 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.023365278 seconds)
  done (took 1.598195691 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.039897818 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.020253585 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.018040187 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.022250916 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.022295061 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.036777012 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.022981079 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.022785639 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.021012123 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.018801586 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.021305788 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.021186844 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.02088922 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.032197257 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.020649545 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.020850865 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.032268551 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.022917787 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.036911357 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.036855097 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.021198808 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.032472 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.020859498 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.018243831 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.036611038 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.020690958 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.022815913 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.023588109 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020779062 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.01853853 seconds)
  done (took 1.577113604 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.031540267 seconds)
    (2/2) benchmarking "in"...
    done (took 0.029940484 seconds)
  done (took 0.876258575 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.01938225 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.037966205 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.017271083 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.032721362 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.027651152 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.022624296 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.027780086 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.027882924 seconds)
  done (took 1.033141307 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.133779099 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.162742706 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.01931234 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.019449591 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.134516846 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.095228404 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.146861891 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.034245519 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.036110383 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.022813466 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.019647666 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.147201908 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.018981967 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.034172107 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020729863 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.030729205 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.027706307 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.041003491 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.035572028 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.018257195 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.03484781 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.02015985 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.019010948 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.020099676 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.020505099 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.027706807 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.037297371 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.033640918 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.029193035 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.017511735 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.041131543 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.018639391 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.01940917 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.029047552 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.135654409 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.018582104 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.062020647 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.019001675 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.023601406 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.018228546 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.032223058 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.042432437 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.035211759 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.038955889 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.019892844 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.020434843 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.018307 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.020016905 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.022963845 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.028299839 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.018505713 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.027279808 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.018084034 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.020062196 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.030097969 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.01842389 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.023559765 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.029300366 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.03418072 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.03071886 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.032737938 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.036092152 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.029309543 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.02751363 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.019422386 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.041860225 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.019986725 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.034470795 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.036755858 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.020130471 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.033467234 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.018555848 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.017825813 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.01862707 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.058013386 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.020119864 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.019515943 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.018470517 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.018652834 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.020171981 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.029741345 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.023720845 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.027582959 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.022127412 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.037499211 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.02974679 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.018706 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.026818669 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.040574732 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.023833277 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.018797705 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.03790003 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.023786148 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.018537264 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.03995022 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.031477192 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.020584522 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.019750145 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.02378497 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.034087717 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.020113622 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.017617637 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.028291485 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.020451267 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.137464466 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.023873883 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.028827516 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.019101983 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.031273916 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.026373809 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.02095882 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.018073406 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.024570863 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.019832196 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.017806513 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.029873156 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.018834649 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.035846021 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.026409998 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.035512328 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.036082743 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.031151353 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.037377661 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.018941756 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.018027102 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.040310032 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.030716151 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.020793705 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.040914264 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.019221908 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.031857573 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.019356776 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.021005014 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.030741111 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.018297551 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020847099 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.018998793 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.025641043 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.020579775 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020673687 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.02608708 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.029082692 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.033167983 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.020108911 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.029381834 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.01982369 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.03861156 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.030708459 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.025244184 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.022906061 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.019985726 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.033186067 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.027095258 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.028942934 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.01864304 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.019562987 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.018616466 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.03134014 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.029380101 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.021053006 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.029290187 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.024932878 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.020172732 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.019415447 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.020645273 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.023456319 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.022830568 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.01996558 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.02827232 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.029423614 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.035160466 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.027286737 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.02952751 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.018395804 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.019106115 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.021232535 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.019087481 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.02500952 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.029950084 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.037499711 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.032582085 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.043171305 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.019002015 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.029542197 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.020778054 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.038389343 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.033947752 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.020384928 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.024399794 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.017816351 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020209954 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.028933614 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.032418925 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.035365791 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.036901025 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.024956118 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.02487107 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.019087332 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.036950691 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.019866005 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.02940067 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.030463857 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.025987158 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.018944238 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.021262861 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.029544232 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.025034082 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.020567664 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.038336008 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.027949775 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.019507637 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.036718241 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.019916703 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.032365011 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.019196988 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.023710534 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.026027175 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.021783467 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.030941118 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.037463164 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.017962196 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.019572153 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.036946859 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.021491708 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021151371 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.028769584 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.037336567 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.025384443 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.027909782 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.031404014 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.031679394 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.175893656 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.030767081 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.019306715 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.029252094 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.021474575 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.032467431 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.018846832 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.039550544 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.017382595 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.035171533 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.019110228 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.031605037 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.018910444 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.02906868 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.019328828 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.039335859 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.02027509 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.01935665 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.032016534 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.017885334 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.029571591 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.018543462 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.025712641 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.02727862 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.029115671 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.020206915 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.029511087 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.020062459 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.029601016 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.024406258 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.028525701 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.028921012 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.023793146 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.017470842 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.027470216 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.03033079 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.026589673 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.019186119 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.019031384 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.017648223 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.028034215 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.019287886 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.018695581 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.027157293 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.024493392 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.025432172 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.01947694 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.019773297 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.019749266 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.028104182 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.029137929 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.038669924 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.027961277 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.026934677 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.029103598 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.017959778 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.035299961 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.017299482 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.025014259 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.016501798 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.023900308 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.027917079 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.018295322 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.039688942 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.019924985 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.027953445 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.032192081 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.028329929 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.023524483 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.038196563 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.021254737 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.027732524 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.027117047 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.024214255 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.026307842 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.019487906 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.027077124 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.028312291 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.029325724 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.018469892 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.026669005 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.028804379 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.019829658 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.026609675 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.019514864 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.02784589 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.020000078 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.017461379 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.023557794 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.031198294 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.024545846 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.02479856 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.018652816 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.017370762 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.018509257 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.026155403 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.024242404 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.028952229 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.03716722 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.017831236 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.019567166 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.01839806 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.02285191 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.038642253 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.029448999 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.028190934 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.025103419 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.018182014 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.020346014 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.020700685 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.01906379 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.021924825 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.018030975 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.018718118 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.031187529 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.020446086 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.024458095 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.018720378 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.019481399 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.029437052 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.022939234 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.018649086 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.026126873 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.017839417 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.024347465 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.017502637 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.020205036 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.02455932 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.018360431 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.023747083 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.030438848 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.03767249 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.026697733 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.028804874 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.019775219 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.028082176 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.036462185 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.027208564 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019470572 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.029515931 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.018408823 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.040817107 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.030029107 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.029318735 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.030435546 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.019853705 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.038776194 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.024555119 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.031381692 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.037923273 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020456062 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.028446058 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.01908485 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.037267862 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.02508228 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.019111728 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.029598499 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.028777687 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.027289687 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.033375625 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.020328107 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.029656124 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.024966762 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.024466127 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.021379127 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.021314689 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.029971384 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.039166526 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.020436996 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.025733237 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.029143105 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.029349271 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.025524292 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.034054609 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.02945139 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020662791 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.021202347 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.02429836 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.02017956 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.033509152 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019415045 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.024653455 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.024847463 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.019034436 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.027528621 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.038331716 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.030488081 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.030762936 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.019166752 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.018519226 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.039728065 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.023329553 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.022745029 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.0279895 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.030063183 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.033319181 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.029823333 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.038008931 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.019468834 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.025783221 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.033281946 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.019898619 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.018501822 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.022927916 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.020783039 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.029836771 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.031291088 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.028226461 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.021171354 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.027821086 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.034891211 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.020855462 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.025778461 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.026262536 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.020251467 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.031285616 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.02820541 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.029133054 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.020882459 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.018796654 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.023046651 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.028826453 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.027831696 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.02905016 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.019749373 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.028542325 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.03520925 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.028221647 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.023159971 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.018945805 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.023150927 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.030238624 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.026328458 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.019005666 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.025405753 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.023898386 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.028647671 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.029689042 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.024055384 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.018382086 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.038312438 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.029138741 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.029768544 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.021192314 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.021420397 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.01947059 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.018967415 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.032281681 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.019232937 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.020941764 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.024979841 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.021374748 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.040806849 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.029453437 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.038728985 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020806568 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.025649904 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.019384739 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.030834253 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.025669211 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.019541283 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.031904172 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.018572752 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.037648363 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.033713378 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.027605037 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.019202994 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.025873215 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.029836969 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.036589951 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.030482484 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.029992637 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.023258821 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.03086119 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.172979018 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.031692361 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.018536907 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.017953242 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.030812877 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.028983158 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.033046409 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.018474974 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.030160425 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.02004329 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.027454854 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.028651001 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.020065772 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.019941489 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.019586463 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.029328561 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.02437764 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.029970994 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.025510236 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.038170145 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.01907367 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.030943623 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.028022006 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.030542504 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.035136018 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.032073079 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.028396901 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.018823188 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.027437096 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.028397581 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.019572372 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.025329791 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.021622772 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.043618677 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.019617978 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.019354768 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.033072862 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.025101552 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.018478311 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.025145092 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.024093555 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.029594277 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.019121118 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.029842869 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.023251095 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.019154883 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.024337711 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.024329248 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.01742131 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.018166654 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.01841497 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.029443763 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.023837351 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.018095405 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.039490196 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.019451967 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.028489987 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.030402084 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.026065146 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.01935611 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.016981068 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.019093607 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.034120297 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.036672846 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.023490274 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.028474286 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.019961847 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.028425444 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.016809446 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.027506205 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.027168506 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.027560985 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.017647808 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.018341119 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.035482314 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.036250677 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.024311086 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.03697414 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.02879773 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.019671509 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.043341504 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.029400129 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.01927218 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.03051131 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020499528 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.017882081 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.017715125 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.020012803 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.0319541 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.018284235 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.020330775 seconds)
  done (took 17.536272829 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.064837329 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.019241398 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.017780053 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.017705148 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.025249766 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.018892943 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.017838383 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.018768093 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.018385949 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.019758673 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.017910078 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.017737985 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.023668961 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.034390293 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.026611702 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.022031839 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.01797982 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.019061217 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.017816955 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.019059629 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.024218436 seconds)
  done (took 1.357577443 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.020804964 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.022547069 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.022294717 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.022593995 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.02181663 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.018348838 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.022095727 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018450157 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.022304769 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018742322 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.022527278 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018443055 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.018869169 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.018730126 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.01881749 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.020047357 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.022754733 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.021847459 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.018345795 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.022497858 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.020106404 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.022214108 seconds)
  done (took 1.329092217 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.018776898 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.017926425 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.026963188 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.017152695 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.017419181 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.020095639 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.017058552 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.023562589 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.023601914 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.023659423 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.027942975 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.018109682 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.0170879 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.024159347 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.017220786 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.017990757 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.067070741 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.018523231 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.018545727 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.017798027 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.020324143 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.028555037 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.018115494 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.018077476 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.023884677 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.020699145 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.017866335 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.020319064 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.018593618 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.023226175 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.018715114 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.017329807 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.027501936 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.027268424 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.023471747 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.023361643 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.018976321 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.018457639 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.017788913 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.017757017 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.027397764 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.019155094 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.018337864 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.019343327 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.028562545 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.018277782 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.017799314 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.028649498 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.017710668 seconds)
  done (took 1.933865737 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.029618367 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.077012601 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.025497354 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.057739701 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.031000471 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.023625417 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.02516836 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.061017742 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.019276979 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.019745476 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.03222407 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.03208519 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.020571041 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.021956119 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.025934066 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.020688961 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.02140071 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.019807961 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.022777756 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.020085361 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.023042943 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.025920549 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.03154441 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.0315924 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.021430877 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.020214737 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.020591297 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.022115744 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.031542154 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.023852136 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.022473714 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.022946906 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.032553528 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.027065298 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.020739036 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.020809176 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.033055715 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.02150321 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.02124897 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.019662604 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.021148013 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.022658048 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.026885613 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.03350795 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.021346899 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.026800163 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.021066292 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.018973816 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.032158071 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.020698318 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.024232684 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.033204356 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.021849161 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.021119354 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.02251202 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.032378546 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.021286704 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.020188108 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.021622477 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.03224718 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.019472109 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.022200358 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.032766998 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.020704397 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.024546133 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.033559387 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.027441977 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.022189064 seconds)
  done (took 2.814535715 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.026427251 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.056833409 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.032377812 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.033235165 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.028190801 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.028393768 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.02782539 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.028795141 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.0284669 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.032168614 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.029321935 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.182273015 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.025858498 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.031126837 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.02904812 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.029327911 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.028968958 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.028667898 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.028772432 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.029470384 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.029603037 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.034431542 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.029731515 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.034035465 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.033680534 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.025614076 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.02831211 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.028335676 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.03372517 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.028109815 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.033009985 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.029435376 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.02936159 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.033948326 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.033799782 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.029152289 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.018661934 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.029272615 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.029759115 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.029585355 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.026408698 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.034964061 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.029990292 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.02632466 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.030200411 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.029963296 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.034205188 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.033355896 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.030986791 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.031720921 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.029567623 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.034235424 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.029602914 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.029977462 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.035258757 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.038129829 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.035187318 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.035322181 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.029328539 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.034140208 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.034511399 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.038341966 seconds)
  done (took 2.963706286 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.031404477 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.023323102 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.037985981 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.01712752 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.01740428 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.027951861 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.017863516 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.017938872 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.024411986 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.024382972 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.026024846 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.028506949 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.030443485 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.026192314 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.029027296 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.030842503 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.028953938 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.029001604 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.024429871 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.028396677 seconds)
  done (took 1.410257861 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.019998624 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.023298636 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.018519876 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.037382658 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.019044331 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.027726215 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.018998199 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018954459 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.019099663 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.0191014 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.023757645 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.023720167 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.019229182 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.027838582 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.022162304 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.026668865 seconds)
  done (took 1.235077547 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.02122093 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.027075019 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.136229081 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.019087707 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.021024039 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.018407949 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.019254551 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.018115876 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.020723793 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.033783234 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.018914236 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.021020666 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.019216949 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.017829904 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.018469074 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.021264926 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.020361027 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.019481084 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.019631802 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.139217274 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.028994145 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.02029026 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.021702933 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.02019436 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.02136988 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.028944848 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.021337815 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.021837329 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.019821333 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.022358338 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.021822252 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.032722003 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.021786765 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.0204281 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.018411936 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.019243911 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.019648635 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.021726961 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.021671534 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.019408129 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.018262323 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.021457636 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.019610437 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.019927072 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.021053948 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.022053765 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.021034191 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.030848619 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.01931708 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.021542569 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.01958547 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.020723076 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.019876067 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.032209937 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.021765242 seconds)
  done (took 2.292939297 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.037492605 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.024101931 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.017735678 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.017830388 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.024080673 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.024485133 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.023972489 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.024664354 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.024689773 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.017708229 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.024870741 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.023382757 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.024591036 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.024401009 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.024710438 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.023951204 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.017136199 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.023716058 seconds)
  done (took 1.305227604 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.02489009 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.022722409 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.02373426 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.019602175 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.019631436 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.023887218 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.017970672 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.018923565 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018598204 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.019294318 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.019658229 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.019272914 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.019591044 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.019627859 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.023681689 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.019834011 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.019460258 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.018350937 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.020063494 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.01808618 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.024594131 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.018662804 seconds)
  done (took 1.317211424 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.207971994 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.161721746 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.045540546 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.03974704 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.031195786 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.059269017 seconds)
  done (took 1.414460104 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.055231818 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.060365849 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.024092226 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.02396061 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027933427 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.027190784 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027212518 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027398756 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.030246619 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.033512406 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027762045 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.030583879 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.030670039 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.031872606 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.028432863 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.029110713 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.027786837 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02750261 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02530546 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.03503368 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027694048 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.030740003 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027764247 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027568974 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.027777451 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.032974031 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.031088099 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.033954339 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028151122 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.030889467 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.029079674 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027586879 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.031210929 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.033983615 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024823704 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.030864295 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028095127 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.035487725 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.029632092 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.032818851 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.02464357 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.029247392 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.031065906 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.030785651 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.031393318 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028325552 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.031398936 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02840543 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.028145179 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.039193507 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.029657865 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.032544982 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.029338289 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.03081503 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.030366878 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.038964664 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.033753049 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.032940545 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.029504511 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.034006742 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.033476403 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.029711753 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.033182391 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.034553709 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.029474174 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.033032577 seconds)
  done (took 2.942554673 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.064654615 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.024663131 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027429976 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.032604152 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.03132381 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026736696 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026984257 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.027422289 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027807473 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025278302 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068009328 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027625052 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.032343283 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.032486894 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027476315 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027205938 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027745207 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.032175289 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024402442 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.038607233 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.027834965 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.032488006 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.032769589 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.032379414 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.033530351 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.029276387 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027643149 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.026957817 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027438505 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.027729194 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.030913268 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.027984975 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.032834226 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.024965579 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.032572615 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02762266 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026973381 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.030756664 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027739747 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.028924442 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.032134289 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.035168166 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027717043 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027808065 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.034198502 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.153872225 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.027818553 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.025139448 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.028014046 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.025632422 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.034285705 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.033932289 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.033758715 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.033020336 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027870854 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027596663 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.027800881 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027755644 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027216914 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.028647235 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.03216383 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027833034 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.03987578 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.028200165 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.028287796 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.033651516 seconds)
  done (took 3.049100254 seconds)
done (took 59.515561414 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.221645798 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.177478419 seconds)
  done (took 1.275000045 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.147507577 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.149922699 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.181742028 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.028248326 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.089824907 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.184916886 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.130180851 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.027746943 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.027662766 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.02892577 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.027002627 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.029071001 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.029315305 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.027008456 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.094582795 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.028041869 seconds)
  done (took 2.117146495 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.078005757 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.268047982 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.066511968 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.026952899 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.119963598 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.033519467 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.028476469 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.033068193 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.033257189 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.027105283 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.078213822 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.040805104 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.031507088 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.032317288 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.027865402 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.03238914 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.033315055 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.033555669 seconds)
  done (took 1.913702727 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.083188801 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.038008777 seconds)
  done (took 1.014982287 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.135047395 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.06700746 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.115350925 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.335251941 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.100699921 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.10307947 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.10697344 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.101603653 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.073523691 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.099348971 seconds)
  done (took 2.106362589 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.066277619 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.065520657 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.317647885 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.063452806 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.040073517 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.034540602 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.034985707 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.035832611 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.035193905 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.03387832 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.084338573 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.032806478 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.028462159 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.081845603 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.0561859 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.070239924 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.028417558 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.035461869 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.0389142 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.028392526 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.033728198 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.036038419 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.147435353 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.035882664 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.058183041 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.033037905 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.034741194 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.036003931 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.033514788 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.035796473 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.03632773 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.059018909 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.035036349 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.041690751 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.032819986 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.055273981 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.02788045 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.056107888 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.03150385 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.028182238 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.032076551 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.035538325 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.028836153 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.035885604 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.035530026 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.035508139 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.036416675 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.028400278 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.035287361 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.032543361 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.028945874 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.0339378 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.033866166 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.034525245 seconds)
  done (took 3.467073442 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.083614958 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.073210763 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.027298092 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.080814698 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.07216447 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.028316077 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.08804423 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.06877626 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.086839849 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.028397832 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.027922836 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.02793996 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.035438472 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.039266153 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.083454146 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.076459405 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.029371119 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.028430574 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.075385657 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.075553273 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.026972072 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.087154094 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.077911726 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.075542732 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.026271565 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.028057484 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.027254427 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.027679327 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.035627826 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.035283267 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.027768344 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.039078064 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.039583489 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.035274323 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.026312181 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.026868224 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.026646191 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.036219144 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.037397639 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.036944867 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.03418733 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.026263126 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.026650195 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.026742753 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.026893404 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.025876827 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.037909398 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.035689292 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.037983895 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.028386984 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.028086237 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.027081643 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.027076969 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.034979397 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.03402969 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.035220311 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.038607417 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.027205765 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.026843182 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.028639092 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.039307487 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.035945214 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.035708582 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.028564106 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.03757568 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.027379762 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.03855213 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.041156491 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.026985085 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.027846887 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.027578961 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.027175853 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.02738679 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.033593057 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.034157396 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.027790727 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.027200732 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.026784019 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.036038031 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.034512588 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.026986344 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.036633191 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.026738137 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.026974101 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.027632271 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.027847625 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.037934022 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.036391042 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.027856289 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.027731915 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.027654049 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.027896743 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.027257924 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.037916885 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.037338612 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.037412689 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.039728269 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.028893307 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.0402522 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.037493922 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.028601973 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.035942873 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.027898637 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.028180009 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.028034299 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.036239517 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.035289916 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.037038333 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.027599312 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.02691568 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.036773936 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.039803081 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.027752779 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.035762811 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.038754835 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.036253172 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.027482415 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.039450572 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.027430608 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.038909683 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.02838243 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.039177016 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.028440033 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.036748332 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.028456076 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.02773004 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.028534359 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.040366434 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.028665056 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.028396356 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.028538022 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.027766668 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.03649595 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.040329551 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.028286856 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.037228254 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.037220084 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.028594732 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.038694254 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.027668801 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.03879153 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.027823183 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.028214925 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.027050122 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.040907035 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.02731355 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.027564 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.026971698 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.038404027 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.027204841 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.038483659 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.035941676 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.027422699 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.040311998 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.038659775 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.035856765 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.039693755 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.029198113 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.028695922 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.028217489 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.028146668 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.039343049 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.040912781 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.028928351 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.028152135 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.035576398 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.039191909 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.026946451 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.035384211 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.035480529 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.035688078 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.027335119 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.175261558 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.036856018 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.038656801 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.033879978 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.037128454 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.034747495 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.027131992 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.033884597 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.03683705 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.027375015 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.040938805 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.027510412 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.037174531 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.037287319 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.034002246 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.037427764 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.038253542 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.036517827 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.035919494 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.037932225 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.02709019 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.026859341 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.033728137 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.026960336 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.027050893 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.033229132 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.027584337 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.027992217 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.039896786 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.027632834 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.037289111 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.026931678 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.034367624 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.026786505 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.02819441 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.03910169 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.027131719 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.027590526 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.033730325 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.027272636 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.034154524 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.03717588 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.034072863 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.027491795 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.028074331 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.037656012 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.036782787 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.0273862 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.027395588 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.027907943 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.036601298 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.035934755 seconds)
  done (took 8.932604099 seconds)
done (took 21.720518877 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.154764768 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.080677083 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.16114382 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.093129515 seconds)
  done (took 1.383192874 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.060183622 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.022015957 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.152138557 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.165042841 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.023102586 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.147308131 seconds)
  done (took 1.474999936 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.223479087 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.146565771 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.153899484 seconds)
  done (took 1.423158363 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.147829103 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.30653655 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.602300038 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.144735755 seconds)
  done (took 2.113922317 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.193620975 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.182499718 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.035301645 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.200154483 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.042434492 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.018941379 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.109441315 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.025741188 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.056407637 seconds)
  done (took 1.851324375 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.107401988 seconds)
done (took 9.255759606 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.201395533 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.157196484 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.038558921 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.031876576 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.147401762 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.145793164 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.160858665 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.034977145 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.149911616 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.321807549 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.180262555 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.054686617 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.173427365 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.048157399 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.285186039 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.035638364 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.033783913 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.028949463 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.162182468 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.147833077 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.257189823 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.033195466 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.112361552 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.035326345 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.119028321 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.087256219 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.183342362 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.321160367 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.295274372 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.034516224 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.141687612 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.046777884 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.134684895 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.146728233 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.146042024 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.05514107 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.0236402 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.265677074 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.122339026 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.335117031 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.166222685 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.031333842 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.153847945 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.02880549 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.022805938 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.157547091 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.038341399 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.030084947 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.050102031 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.03050352 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.045429998 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.030965484 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.155044343 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.027880412 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.103786102 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.152431602 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.179921708 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.106863258 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.029927407 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.043663184 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.033916097 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.17300132 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.043267977 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.029705111 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.036857658 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.023444522 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.149252732 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.04518681 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.023990274 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.035020249 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.033331425 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.123697608 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.166713576 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.071627691 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.036902693 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.115164777 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.105631794 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.05439636 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.05533269 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.035034891 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.022717429 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.189170681 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.02861285 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.043780675 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.031366482 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.058742405 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.023168256 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.040613138 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.16816479 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.159554131 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.096350582 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.023513727 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.257348625 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.025278596 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.211690788 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.024192074 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.023335931 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.17935031 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.023156894 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.023552751 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.034236576 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.032866673 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.025136716 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.163582151 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.117737001 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.031901193 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.031025312 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.023381656 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.029968607 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.024462781 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.024177757 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.023972162 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.10752089 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.032930246 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.022747165 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.119759031 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.141185026 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.035465899 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.042431518 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.09516249 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.026592216 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.033549858 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.031202616 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.13986962 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.032441618 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.149400356 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.024584615 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.048909907 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.121813347 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.107318421 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.11561806 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.021819741 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.172981082 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.033927438 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.021715413 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.030990731 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.055069385 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.034341163 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.03244635 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.032446619 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.174325621 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.034921221 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.030028604 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.122296893 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.022645415 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.11144168 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.10281255 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.142708359 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.02825052 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.03310485 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.103100264 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.049323884 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.05387356 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.047592295 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.027904025 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.023549841 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.023098754 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.032967139 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.022213337 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.023173993 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.039560336 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.030135214 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.022573285 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.250883912 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.034383358 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.028172616 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.2758466 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.03708871 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.108742698 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.047250493 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.023614735 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.122997782 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.026228647 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.046431725 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.095737359 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.023842029 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.104705023 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.023113935 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.023010459 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.032300203 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.024894283 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.032419272 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.037965397 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.023357311 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.038553829 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.031226159 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.022983298 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.117893573 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.025059771 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.185497836 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.119033167 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.123427132 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.023345662 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.042815679 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.022345802 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.150263406 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.023562379 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.078115827 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.129415293 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.041743102 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.04587006 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.024755238 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.105039943 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.040579226 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.022950762 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.10986179 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.141612048 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.108319018 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.030536291 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.250154015 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.033363412 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.024165347 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.032674193 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.032434041 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.023619263 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.105756115 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.028592746 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.022212082 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.022861221 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.025042539 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.021869481 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.050610511 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.021692568 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.030438948 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.022152902 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.026037527 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.024377408 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.021888234 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.03166562 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.108136589 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.142070311 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.028451201 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.044985194 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.038226931 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.035908623 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.076665809 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.031790414 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.161614932 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.02257588 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.03402552 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.047618603 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.022962036 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.028676444 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.0232269 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.045005411 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.027444087 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.024960669 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.032718198 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.023646125 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.024086421 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.023261582 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.022801605 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.03195727 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.024041211 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.022233059 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.022537644 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.023020258 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.028337727 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.028437546 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.035239474 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.045769244 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.488488056 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.02557187 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.025760143 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.023530921 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.023397953 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.023951848 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.0254007 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.023294951 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.024952057 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.023112926 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.022439882 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.054221588 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.028364456 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.024455386 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.047936678 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.023624842 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.033870966 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.142512756 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.041880678 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.028565497 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.022311416 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.285724271 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.119987862 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.049886766 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.047632436 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.199374385 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.037852583 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.024980064 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.024520589 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.022706999 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.055131963 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.028667227 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.024166118 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.023039627 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.023329861 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.078013387 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.032625114 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.02321708 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.033223271 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.023500807 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.024028593 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.056070198 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.025299296 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.02350864 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.044889034 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.037665908 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.115429334 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.035954845 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.026280093 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.079475968 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.022009256 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.022752371 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.023338666 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.109301346 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.037515265 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.02424018 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.022894959 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.031226772 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.031653494 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.08170481 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.029510268 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.026575612 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.031865504 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.021971557 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.023165108 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.050479988 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.053557041 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.024365983 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.02791674 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.023151425 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.023909351 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.111268804 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.032063005 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.028608889 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.12009901 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.024935913 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.031330235 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.02177573 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.490151904 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.028315504 seconds)
  done (took 24.565965624 seconds)
done (took 25.496197456 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.178939713 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.039292202 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.038198891 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.033148362 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.037623489 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.037352406 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.039011158 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.033890182 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.037194936 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.036622245 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.162380053 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.022958968 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.03222192 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.040953439 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.033439932 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.04216964 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.037272476 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.041553055 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.024840601 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.041619833 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.035611772 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.038269907 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.0331706 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.040485043 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.024229143 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.033085199 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.170708398 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.045002024 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.028028463 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.033939101 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.032142414 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.039261277 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.032481101 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.031232971 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.03373744 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.029808111 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.035763975 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.031149574 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.174381881 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.029789031 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.024233737 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.038177536 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.032183054 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.032152603 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.033722707 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.036690694 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.029768132 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.038938323 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.023472832 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.037709649 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.17138892 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.02822143 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.026715284 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.032663037 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.030135358 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.034491855 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.02768945 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.037358389 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.029886823 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.038156948 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.032832282 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.03278046 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.023737857 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.033681544 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.032335536 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.032657619 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.023024145 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.029120591 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.023418148 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.023137174 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.0226395 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.032829444 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.031401072 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.029323891 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.023083005 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.023447503 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.02270779 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.037283763 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.031403248 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.032904413 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.023648997 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.029997252 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.029137883 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.023260049 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.028083318 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.035669561 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.022499904 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.023221316 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.022212578 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.03596142 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.030830159 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.023270133 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.036565455 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.029173612 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.029055424 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.024007595 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.023432273 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.028851111 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.032672242 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.023624341 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.022603418 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.028810111 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.029563255 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.033378433 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.023461804 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.02836297 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.02848744 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.021610755 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.032169196 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.030730528 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.033235153 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.037145542 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.032516924 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.036405139 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.024070839 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.02253392 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.034584209 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.024088755 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.028409284 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.032166868 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.028989987 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.031329362 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.023255093 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.021874144 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.027792491 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.02952251 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.023638811 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.023646465 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.02389521 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.033759215 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.031995445 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.02259575 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.023981505 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.033796553 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.033073502 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.023384565 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.022918915 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.033204197 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.023987344 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.030472674 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.029544331 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.033489956 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.023684683 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.02352263 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.022471896 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.022913996 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.022854199 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.029870457 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.028934424 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.024390955 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.033520407 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.031716186 seconds)
done (took 6.384910305 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.036257627 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.071570592 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.195012282 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.153728482 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.039112667 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.02538128 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.029345886 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.046446989 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.028352151 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.053124638 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.052914715 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.048488029 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.178225804 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.023014589 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.023903071 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.024868246 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.022340537 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.037437686 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.15997548 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.051644154 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.071236778 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.023814145 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.042032262 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.048047696 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.03868881 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.045589518 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.025537882 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.025007093 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.027320224 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.044272592 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.055926728 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.023811443 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.025609682 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.046303487 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.042330662 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.033196166 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.023993291 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.031365976 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.02430022 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.023416296 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.026179158 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.044787511 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.031063513 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.031342109 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.024859419 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.024372702 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.023648306 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.031974963 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.039219191 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.030483527 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.037140827 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.041561731 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.025538504 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.024426438 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.022603695 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.032399135 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.024200466 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.025010597 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.024317763 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.022710743 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.023774904 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.026184105 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.029507886 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.035219925 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.027950978 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.031916315 seconds)
  done (took 3.791054961 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.043320095 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.054970805 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.039903602 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.039664891 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.022290472 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.023836045 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.02399231 seconds)
  done (took 1.284601556 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.072636396 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.15055953 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.160883386 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.159993638 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.172770393 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.158763635 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.038455919 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.056751817 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.022376784 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.171164245 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.169805987 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.164695131 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.028751978 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.039046646 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.0612608 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.168256849 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.039064266 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.031899478 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.155698658 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.164595998 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.030281602 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.060380529 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.038950781 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.025327853 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.161425999 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.152253884 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.027948523 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.025422392 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.028023135 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.024630165 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.024527786 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.048661443 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.151157002 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.041113001 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.025105802 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.022854348 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.149751839 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.025645498 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.154612638 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.032851349 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.154272043 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.026963221 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.027709922 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.024970987 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.026035245 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.153471675 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.025468338 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.024182063 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.024199935 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.155010991 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.023775868 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.155846415 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.0274131 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.030537422 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.032255292 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.031599945 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.031551029 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.024650047 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.156741096 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.03541473 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.026309835 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.166284518 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.162882612 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.151601518 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.165624479 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.035080225 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.154989564 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.154098142 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.024927807 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.034342875 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.02553874 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.168758557 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.02791483 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.027183224 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.030873808 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.033010841 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.169957734 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.173711781 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.172775768 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.040693684 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.027440869 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.024321147 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.168546841 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.173010644 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.030618578 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.024487042 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.025296694 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.042256009 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.05238801 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.027477846 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.03019632 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.024308243 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.036348908 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.028118005 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.028085298 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.167632395 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.025084179 seconds)
  done (took 8.520218762 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.03184844 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.025848473 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.025658366 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.026211553 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.026271747 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.026156055 seconds)
  done (took 1.296210555 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.05352187 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.025568313 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.039228248 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.025377888 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.050246955 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.154344159 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.155947334 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.027007943 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.043687264 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.039037968 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.156375574 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.164676227 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.159338402 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.025892244 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.155630759 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.038768973 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.157417111 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.030815142 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.037441258 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.026254971 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.040520091 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.026876983 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.026462275 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.167294494 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.027444676 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.03769422 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.034295137 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.03747857 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.037529508 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.02644973 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.026230325 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.027462378 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.032611717 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.027200541 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.159200506 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.033614683 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.026296735 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.030229182 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.02736163 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.027254645 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.162747956 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.027223468 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.031224215 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.030988373 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.027594755 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.033841751 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.030273296 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.029252845 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.158183446 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.030283046 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.030222367 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.026158482 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.026991823 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.028882203 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.032264971 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.026575292 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.029942537 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.159198134 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.026624805 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.03320828 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.025615819 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.027664245 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.026840804 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.028149171 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.031976495 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.030696714 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.033633414 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.027595398 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.027224208 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.026114632 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.030792169 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.026481397 seconds)
  done (took 4.823419092 seconds)
done (took 20.752822674 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.520131783 seconds)
  done (took 1.575996523 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.099584652 seconds)
  done (took 2.166330153 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.057627656 seconds)
  done (took 1.147849464 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.299888552 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.40589281 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.79414515 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.096154543 seconds)
  done (took 2.654776994 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.878819021 seconds)
  done (took 1.970158472 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.232705488 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.194620086 seconds)
  done (took 1.532991256 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.518876804 seconds)
  done (took 1.587998447 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.5523532 seconds)
  done (took 2.638981577 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.203503601 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.138341685 seconds)
  done (took 1.420620277 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.662661275 seconds)
  done (took 1.742270112 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.998494336 seconds)
  done (took 6.091391144 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.210623994 seconds)
  done (took 1.360046598 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.204105982 seconds)
  done (took 1.284060997 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.726155627 seconds)
  done (took 1.815568603 seconds)
done (took 30.075837781 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.046583574 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.045046515 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.046055261 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.040241936 seconds)
  done (took 1.262788134 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.032890033 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.028809319 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.031589886 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.03170943 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.029092617 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.031267207 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.03217372 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.027692927 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.02942972 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.029015683 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.026873174 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.02838705 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.031100797 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.027752266 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.030500109 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.032262035 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.02901543 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.030053181 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.030848013 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.028317609 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.031570903 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.028772381 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.028343958 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.030206056 seconds)
  done (took 1.810677126 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.037509761 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.030560191 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.034608104 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.029365004 seconds)
  done (took 1.226578796 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.035725987 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.035242362 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.044894414 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.050612358 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.03667076 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.037227158 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.04334059 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.04339949 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.050618064 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.046339472 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.025826486 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.025593064 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.024817989 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.045534689 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.042333578 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.018861307 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.020674523 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.037215837 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.035853192 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.038687635 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.027747202 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.022461168 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.035898942 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.036467066 seconds)
  done (took 1.952745119 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.041830137 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.02349421 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.041362682 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.053150204 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.053460556 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.023566463 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.038655429 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.053062554 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.094547794 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.023155414 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.030582414 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.023322768 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.067510615 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.023429339 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.040170451 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.072666111 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.075365631 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.027024137 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.056547873 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.022520217 seconds)
  done (took 1.983648535 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.03029314 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.028160251 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.029250995 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.022845494 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.034880262 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.031187092 seconds)
  done (took 1.274523234 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.026385824 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.026538588 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.025445404 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.030873587 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.026325697 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.026259362 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.025147851 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.024481387 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.023449273 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.02394444 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.024267826 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.024711864 seconds)
  done (took 1.398442016 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.179425221 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.029996369 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.028359218 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.023144069 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.025587235 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.023869534 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.04037116 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.026796626 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.045154273 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.024474181 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.024363714 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.026468169 seconds)
  done (took 1.58224192 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.065659303 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072951153 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109456478 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077254154 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077855618 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057081977 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.21445788 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.037978705 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.134145401 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.103848422 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082988025 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052639728 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.045896687 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.027116758 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062276277 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.080073956 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101842267 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.031115361 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.077832998 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.265111165 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099980808 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.103164387 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114656339 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081787858 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.053037671 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112179384 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.057057325 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.065459728 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.090175771 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091007685 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082626004 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.058552617 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.028649608 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.0290628 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117268739 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.070790674 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083019972 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.054551397 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.06870949 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.05093805 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072438533 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.027895041 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.041444484 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.073840574 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.046070819 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.097416657 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.053365632 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.076363085 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.041036954 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.107601197 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.096954559 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.193832972 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.047874521 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070353029 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107542688 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.07794565 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107171159 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073069739 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.044391564 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.243285567 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.068326688 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062487105 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067279121 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037990198 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14363019 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.048381351 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.079802059 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071406227 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.056160631 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.055715144 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.068915094 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101124435 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089667045 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.089732814 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101605259 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.053252837 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.082102878 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.059888358 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.08795471 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064096022 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.030397819 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.085530815 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09302747 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.059441038 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.062220973 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092177909 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.052477909 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.034669753 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.0626681 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.083010514 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.040030027 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.078714579 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.04051755 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.072333363 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102056265 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059746509 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073733498 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081841885 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.037028147 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124402569 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.069999975 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.031473469 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082395604 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07720236 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122019219 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057412007 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.03384687 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.062872016 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06547806 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.122991098 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074182618 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041038549 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07630186 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109078624 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058892379 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.281425664 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.059135814 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113962495 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.080382852 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.048919319 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.035232312 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.052236953 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.234544016 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06896543 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075268461 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05592619 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.045148587 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.047946253 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.077845536 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052723466 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.040180812 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.078101689 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.065206356 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.03330595 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046669688 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.035530135 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112960447 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.037642873 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.099206004 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089076251 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.033284831 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067767867 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.056205905 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.067755448 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.059384493 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080419262 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101198514 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.156271777 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.048801458 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.05378617 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06812874 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.112022636 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.092376403 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.053320777 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.036226717 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.062804956 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.075516595 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.0615547 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.090603819 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.055146463 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071110896 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.064774577 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108453921 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111280696 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059740179 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.063811763 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072863029 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.088683898 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.035097664 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127934224 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066555661 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083579675 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.047543715 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110028961 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.075472557 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051977318 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.04684473 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.061670137 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.068738275 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071269781 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117112476 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.058585323 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.030825982 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056804845 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117866886 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.03841875 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07679879 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.052491501 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.056655886 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086647934 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.059052944 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.043041158 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.02656744 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.258747609 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124914955 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.028853352 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.078243025 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.069095457 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.063883471 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.084596686 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.027697167 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079987773 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100612525 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.079711047 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10397799 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154656424 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077723975 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081426475 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.077196352 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.068561949 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.03802455 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.089068288 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.099067594 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055834738 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051835043 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.096492186 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084538391 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.10329959 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.08187474 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081869254 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.069467222 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.070898262 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067137439 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.069004485 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115235825 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.086168676 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.089544996 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.04284493 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07043425 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082244876 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100967503 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.041319844 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109357999 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.046104499 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.083409679 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.038282996 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.08952749 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.034754892 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.140853544 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.039650406 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.062232717 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.027831415 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.033695125 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112463118 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.08522312 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.072474399 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067109819 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.111361738 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.107501123 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.03736571 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075728473 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.083968145 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.068168528 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.241646806 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.069759996 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.050341608 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.055698172 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.073230588 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.046053413 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.040646254 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079960926 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05349877 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088942166 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.04336591 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.033673716 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101146112 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065528815 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05323142 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033966134 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066655422 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.090121612 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.053141293 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.045834793 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077783464 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066348624 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107084849 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.050619949 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.060108546 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.086730024 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.03885696 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.053259356 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.027864545 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.046070308 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.035867057 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.089760106 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.034566093 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.076986262 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.026014324 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.095237035 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.048330201 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.055859324 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.065773008 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074445029 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.095388083 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.056479033 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107374126 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049821265 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084211941 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070801454 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.056409747 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.046562803 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066336676 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.062967728 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08539151 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.057508084 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087883539 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112174509 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066577528 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.111960359 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051580558 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.085832471 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069043032 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.089261502 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.075775546 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.161128309 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111950925 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079441643 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076358139 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.034456866 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059238695 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07164297 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.078386025 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.316029541 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08612331 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.030613536 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.065796515 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.054281752 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069846869 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065020956 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.042285314 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110906561 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064795058 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.048715436 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.075327078 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.049837805 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.065985376 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034492394 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.060684917 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.062084792 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.055149566 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.05856607 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.075767597 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.091070019 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.075246719 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.108700751 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.063184069 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.051904235 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.082543113 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.075332928 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070637034 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.045138432 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.044710036 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100030361 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081328705 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.089565712 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.059128651 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069870258 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.074634277 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062100379 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.08860255 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069972729 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.092778333 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039172675 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.035922506 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.026643699 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.030016938 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088057476 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07167982 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07402727 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062248829 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.030791668 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.067175465 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.06819333 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.031527831 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047750105 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.057191192 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.061197807 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.054450959 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070208906 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.074779207 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.056500478 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.0665366 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.060283353 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115412734 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.060710771 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051210401 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115523432 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12373236 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05132563 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057701323 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.030972241 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.039636511 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.081017241 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119036317 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.278468314 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.037629144 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.046849066 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.045309176 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045726735 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.029222023 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.047839866 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.05074612 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067690319 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.05833184 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.075896397 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067181024 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034651435 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.06563595 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061454669 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.053200795 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.066877136 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082707418 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.088535341 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.105702388 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075067791 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069016862 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034652963 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.039413024 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.034522404 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.038258832 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.061446237 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.037152886 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03406516 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105948881 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.051870059 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066115262 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069655646 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.047226349 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033815414 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09810444 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.026958741 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098820019 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.028286422 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.041513946 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.040536546 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037313638 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054417173 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106775566 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.073148028 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.076305475 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069632969 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069374112 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153085002 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127775351 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.042058255 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111120738 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03529994 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.036208897 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.035587195 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.075067238 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051036802 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.080163771 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109910605 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047913512 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062656227 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.038168732 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112969922 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.0665759 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.065334396 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.046351298 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.039104773 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113427071 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.040128007 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.043519827 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.052033326 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077198108 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.03145543 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.065721633 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.044706352 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.040201083 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.311977025 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.672022523 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.052114563 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.034385253 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.057440339 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106718288 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092554757 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056477187 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068500965 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.082476779 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.060417875 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.052567871 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069456791 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.165329893 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.03218517 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053593118 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.063373821 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.058064285 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062451381 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.059545567 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.046569308 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.053047562 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.046925716 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.03878541 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070147335 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045441667 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.056913014 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.066789919 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.042529011 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.0470319 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095711403 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.064353526 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.042609716 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048387894 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.064899387 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046055088 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066358949 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.027837102 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.075287146 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.049315107 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081891795 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.061670961 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.07101892 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.090236995 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055521073 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104517166 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.071733648 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087921384 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.048451971 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.038232451 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091693698 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.050100994 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03642196 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112712899 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.058958941 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.066768396 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065086488 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.056294872 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.077653481 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083435331 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.077655821 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.060796367 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039139428 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066755037 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.068325387 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.049038207 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.040094965 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.034231164 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.034072379 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072570317 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.049180851 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.047878167 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.081614222 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.051748895 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.222257488 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.060918641 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084145358 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.049781532 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.062968004 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.073019507 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051908496 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070697409 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.063534168 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.092494868 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140670103 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.085323518 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.093007108 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099307612 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.036579843 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.033942649 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.027047059 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.076799017 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.038115169 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.313664905 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.037590274 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096538474 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.043174231 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.071160641 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.22071167 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.037935319 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.054028819 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055376297 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.027597128 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.041851236 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068716836 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.045800039 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.038695368 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.079914589 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.041309885 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.090747684 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.073883648 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060797912 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.056311 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039419473 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.075641104 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.06260253 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.096835345 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.055882039 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.033872831 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.087310486 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.06727568 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106138716 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.032302845 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040302675 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.096410837 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063697339 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.096704069 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.039410753 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119157812 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110125936 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.062137454 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102608804 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.029678796 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.049665239 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.051673286 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.088897157 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.044966855 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076343964 seconds)
  done (took 45.526949819 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.147335698 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.141255231 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.080662578 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.093830722 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.249324626 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.257488898 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.109628677 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.082930747 seconds)
  done (took 2.42335786 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.026608105 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.043242251 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.040194012 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.30587746 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.059888223 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.024663316 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.029108996 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.040506423 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.024368777 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.023796593 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.062140918 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.024241494 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.025049192 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.472448636 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.023014218 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.028984192 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.024406902 seconds)
  done (took 2.528888554 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.326596281 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.775113105 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.471833102 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.503249091 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.10667931 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.566682304 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.032051328 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.039751185 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.645993371 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.387102783 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.102488758 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.185479468 seconds)
  done (took 18.377018164 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.033403622 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.170621654 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.173114369 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.033245199 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.033080214 seconds)
  done (took 1.741099155 seconds)
done (took 84.234819618 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.044006154 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.145865373 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.024070479 seconds)
  done (took 1.449204165 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.171723867 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.168003171 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.169830649 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.174448463 seconds)
  done (took 1.912172159 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.033093793 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.035026767 seconds)
  done (took 1.311270625 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.21129816 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.27746999 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.050764276 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.041655208 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.037655675 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.039906514 seconds)
  done (took 1.352125471 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.028960723 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.028467618 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.028532855 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.029594929 seconds)
  done (took 1.341669308 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.147978305 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.023314783 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.026068647 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.02800886 seconds)
  done (took 1.446067395 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.043157605 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.044837723 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.077064377 seconds)
  done (took 1.392971219 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.0422923 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.043986431 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.037869786 seconds)
  done (took 1.361116079 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.068062972 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.05551318 seconds)
  done (took 1.356043413 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.039006634 seconds)
  done (took 1.27030133 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.050958128 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.057855738 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.240013953 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.202872864 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.244168785 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.224157385 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.034524464 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.035508338 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.03102081 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.030127871 seconds)
  done (took 2.376653451 seconds)
done (took 18.367543171 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.039487801 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.155669921 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.27358062 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.048742966 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.617934955 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.270177637 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.688729669 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.050112044 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.062405542 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.026174485 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.045246654 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.590372999 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.693388864 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.107293343 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.674042207 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.094656243 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.520581378 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.026707326 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.025529527 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.025874455 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.666946008 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.025583238 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.025832741 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.026360112 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.518072245 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.417243606 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.026880976 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.09449708 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.025876804 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.029618422 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.396809075 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.026818123 seconds)
  done (took 12.546911298 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.027644212 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.086466325 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.030528458 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.043519525 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.028442807 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.028343737 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.030185565 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.026990987 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.075945989 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.026225924 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.046502878 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.025553564 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.030651813 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.026994152 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.048603582 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.025375166 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.02776009 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.026063544 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.025436892 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.02645336 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.047429501 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.025827305 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.026392407 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.026710554 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.025888488 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.041439071 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.02698807 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.025469516 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.025476346 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.029703226 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.031467612 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.027973065 seconds)
  done (took 2.313734321 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.085464129 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.089606268 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.031249549 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.07109095 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.08506589 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.028421896 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.119368671 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.050997703 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.078574507 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.026792344 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.046961352 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.026730267 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.068881105 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.027940693 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.050006589 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.026721081 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.029084391 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.026370216 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.025429552 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.0269767 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.047252768 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.025355057 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.0261472 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.026649552 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.026602534 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.044307411 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.027475884 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.026069402 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.025687495 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.02974116 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.031517341 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.027445518 seconds)
  done (took 2.622961482 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.028081114 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.030533138 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.03902291 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.042532482 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.024333591 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.027217448 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.028028409 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.024020536 seconds)
  done (took 1.494682367 seconds)
done (took 20.237275537 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.03976358 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.026266264 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.03000421 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.047573892 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.034491037 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.161388253 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.022939443 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.034389659 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.030421922 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.031044312 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.031860721 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.024464981 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.029027592 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.022808769 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.031004298 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.024293833 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.163722204 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.029057101 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.160958412 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.163559672 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.026533054 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.02934699 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.032796699 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.158706291 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.160923623 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.16156996 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.034547882 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.031656548 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.024908809 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.027904127 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.155222741 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.158443464 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.026726351 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.155349255 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.024359721 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.024116121 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.028718692 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.026407937 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.165479724 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.033910027 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.026760931 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.033745457 seconds)
  done (took 3.935614811 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.159911905 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.169587138 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.162976473 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.037007213 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.033333307 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.036304414 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.166716094 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.033169652 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.031671456 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.167116893 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.027714121 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.032107643 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.034032098 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.024620443 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.031929911 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.028643186 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.034010776 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.025877854 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.031683281 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.032510595 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.167653552 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.024997903 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.033766028 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.032979368 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.027560103 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.034313221 seconds)
  done (took 2.896007919 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.03244732 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.049447185 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.054360898 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.112431697 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.070643359 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.042435019 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.043275381 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.053457875 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.060927742 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.02569164 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.050074465 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.056270813 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.057605384 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.033113719 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.068228235 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.046593995 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.040302191 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.027277843 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.032854197 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.064071037 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.050286134 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.045053166 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.060005368 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.04772203 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.024252223 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.036214133 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.033345826 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.044544575 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.032822749 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.038823745 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.029452376 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.029269992 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.026440646 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.038270617 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.029876401 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.023153671 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.050657788 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.039582677 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.041785071 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.06699197 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.037174598 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.027177929 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.058165123 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.102430507 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.024445452 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.027655377 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.029782987 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.038342116 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.025585879 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.057258557 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.043082296 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.024971495 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.046667535 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.027204939 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.027269903 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.044065083 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.026790756 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.027162073 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.038489274 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.03195353 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.048861644 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.032315462 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.049182473 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.024481627 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.038169082 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.02653147 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.027188376 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.023761545 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.062996284 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.033561681 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.081558911 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.02564263 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.022530469 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.038844862 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.038045408 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.034490313 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.025482807 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.047548763 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.039578256 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.028875881 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.037269416 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.028631727 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.028424563 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.064647925 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.024183559 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.023468279 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.02295772 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.027790388 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.028881624 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.026238111 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.040438852 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.024849807 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.028493225 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.040744175 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.025253654 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.026247894 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.028305316 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.026861789 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.024469106 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.037215434 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.029281586 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.027098677 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.040128391 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.02651256 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.028193427 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.041058912 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.035904896 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.024499864 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.026149049 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.027659997 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.026790634 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.030653006 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.028928365 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.027791785 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.031358669 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.034745356 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.031821495 seconds)
  done (took 5.721511722 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.262401965 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.259598456 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.026151808 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.25136135 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.035110867 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.175376306 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.251439976 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.253475024 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.026369493 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.02696298 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.024578906 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.193087773 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.186738001 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.196775319 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.178173868 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.027997013 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.055869931 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.202956895 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.262475123 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.251489827 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.052456494 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.033335538 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.027927962 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.02698979 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.026307278 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.035761087 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.044224051 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.034838682 seconds)
  done (took 4.701691315 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.0335633 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.072956807 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.029655052 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.052673603 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.045137313 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.026510224 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.028188361 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.027180311 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.044246866 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.03179721 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.025939881 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.029882491 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.029902657 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.028253534 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.027052029 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.033139475 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.032952018 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.033834119 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.028899448 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.030199936 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.037930967 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.051965833 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.029815781 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.025523518 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.029666607 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.025782255 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.030694017 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.034605361 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.025504759 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.026124073 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.022895569 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.030967292 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.042788782 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.027302725 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.026135331 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.026774032 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.026417813 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.026388931 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.026707984 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.02410521 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.024364999 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.031823706 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.024386225 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.031061535 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.040240481 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.027499126 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.027373597 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.029159498 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.029234609 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.022586482 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.030121011 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.029144412 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.02767555 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.034783566 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.028899658 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.02752636 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.027325078 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.04269063 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.032204295 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.025166247 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.024317894 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.023995821 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.028408233 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.032941261 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.043472382 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.027827977 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.02397132 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.025925886 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.027620035 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.040451884 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.024825068 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.031450623 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.021980318 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.024970926 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.027334008 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.028803351 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.027706235 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.024511555 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.025947029 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.02594627 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.02519677 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.025770494 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.023927075 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.028306779 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.023336238 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.023761664 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.025948113 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.027655485 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.031750409 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.025026692 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.02864442 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.026958467 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.024474775 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.02873511 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.031322613 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.029095291 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.048179913 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.033742921 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.026062702 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.023001037 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.042796418 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.028060955 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.025099879 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.027269105 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.030142222 seconds)
  done (took 4.459492726 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.056794887 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.027974909 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.047166567 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.059314862 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.03554049 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.031301908 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.039069218 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.026089479 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.049667499 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.024592711 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.034762299 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.022879675 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.039840918 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.035710064 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.028262967 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.036429542 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.028514002 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.047836889 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.042627961 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.024468113 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.03605357 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.038892971 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.039643399 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.045475448 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.043846925 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.045208 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.039733463 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.02927341 seconds)
  done (took 2.339517151 seconds)
done (took 25.302010384 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.343035382 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.53591238 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.302296 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.053389297 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.368554491 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.310100945 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.434401689 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.309157458 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 6.930397332 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.391519697 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.141339169 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.990478245 seconds)
done (took 62.458979357 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.331932046 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.440311176 seconds)
    (2/2) benchmarking "String"...
    done (took 1.508100345 seconds)
  done (took 4.225646827 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.711110198 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.283648091 seconds)
    (3/3) benchmarking "different"...
    done (took 1.321703458 seconds)
  done (took 5.580953087 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.657416458 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.255210999 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.555306123 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.280324156 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.270510782 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.764932109 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.474746575 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.928972535 seconds)
  done (took 28.79360996 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.365103927 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.5400887 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.684248927 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.809017052 seconds)
  done (took 18.742864351 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.717979617 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.665559418 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.677959434 seconds)
    (4/4) benchmarking "different"...
    done (took 1.991168774 seconds)
  done (took 8.434197897 seconds)
done (took 76.13299358 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.275648811 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.800150739 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.308293272 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.466286555 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.363259258 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.377312159 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.291108267 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.297698602 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.266220496 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.263317903 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.280685236 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.257112198 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.282353842 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.339572076 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.289086479 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.315341511 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.801277791 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.262363023 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.295410812 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.39035051 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.622207104 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.271522594 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.282598301 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.345750195 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.970011586 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.340798397 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.386051943 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.291519032 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.916749463 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.270936399 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.275010881 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.27005362 seconds)
  done (took 188.727537106 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.272702983 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.137629085 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.169118665 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.283905568 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.704000943 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.66200306 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.137800296 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.7449348 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.268185617 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.307288898 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.409780799 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.277075608 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.470502616 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.823458516 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.312458283 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.315007647 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.224204476 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.130000987 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.306678434 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.21502338 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.283274868 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.880506582 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.773154854 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.184416532 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.273905871 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.292215412 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.263739968 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.300408765 seconds)
    (29/36) benchmarking "asum"...
    done (took 1.773939878 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.197212895 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.287519477 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.313239993 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.469665802 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.504506066 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.297397852 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.282806745 seconds)
  done (took 159.810285998 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.527674786 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.286270047 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.313018485 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.382172987 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.310328116 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 4.170422643 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.273538165 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.267614355 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.259828057 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.265439833 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.275699801 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.331208234 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.279866229 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.35239382 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.304384956 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.268837924 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.277714697 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.334767932 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.276383689 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.264629011 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.272713142 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.381314617 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.609415575 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.388153232 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.24635133 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.285717139 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.394846497 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.282871787 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.279055996 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.279678641 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.397550845 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.274805583 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.41245201 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.391788147 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.281155508 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.332387621 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.283566675 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.674346191 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.273863135 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.270435899 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.270378648 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.301502114 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.261287464 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.550030077 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.367131899 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.274715435 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.285866669 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.765211404 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.853581766 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.266521495 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.281856637 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.274576585 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.271849497 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.259585716 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.845601078 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.276847042 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.307642378 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 11.313599406 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.268414979 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.273187539 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.248947015 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.273979169 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.275536442 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.268550535 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.30690504 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.998884489 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.73946044 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.605584895 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.048574602 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.28581881 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.275638653 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.268377437 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.846310999 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.341481754 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.263448922 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.261275108 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.450093027 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.279638632 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.268586968 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.216707809 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.220149301 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.262598939 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.38994196 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.270346488 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.272843814 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.315779666 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.361290124 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.279209314 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.287755656 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.318654745 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.285349139 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.260239139 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.275280693 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.218184215 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.273048224 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.284042644 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.771664749 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.280552204 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.271194052 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.4170634 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.628577364 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.27196205 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.364707167 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.70101953 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.312497718 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.282584025 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.27284766 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.295206134 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.273680376 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.283431962 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.307448528 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.26331933 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.269210151 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.283617221 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.255090404 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.265090226 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.268407908 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.293073349 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.271907405 seconds)
  done (took 348.38406017 seconds)
done (took 699.835058803 seconds)
(4/20) benchmarking "parallel"...
done (took 1.260598741 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.520151655 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.282170026 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.428257961 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.508296846 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.47145222 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.442220145 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.490521877 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.556015684 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.501141975 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.44011442 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.48592004 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.428399483 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.560988747 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.534565731 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.553605825 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.512799292 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.482533275 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 3.050768085 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.513794093 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.443934198 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.486902398 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.446291616 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.422644401 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.516337655 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.58667117 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.451782664 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.670695377 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.525504295 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.489813234 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.527221704 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.539480982 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.56249168 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.489673644 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.565087718 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.538078192 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.582447623 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.441281685 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.551820219 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.470094417 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.481591857 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.509688808 seconds)
  done (took 70.33374414 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.666992561 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.464376824 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.596548042 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.574543512 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.123935505 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.586091949 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.657617127 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.492553868 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.467871854 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.601005363 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.599153762 seconds)
  done (took 20.117721105 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.536689962 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.472555481 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.602504654 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.603936796 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.701991873 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.582838841 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.633709608 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.471352751 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.476630983 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.598117974 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.615091795 seconds)
  done (took 19.58365683 seconds)
done (took 111.291270018 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.831331865 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.346592662 seconds)
  done (took 4.449348513 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.313769462 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.285650662 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.275010628 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.281747612 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.274510927 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.291233492 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.337722109 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.303110753 seconds)
  done (took 11.613249758 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.288553606 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.282677249 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.291367126 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.268753278 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.279776041 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.285590332 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.279626674 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.27202409 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.279239368 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.279154198 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.278785946 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.278385414 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.287482993 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.282234672 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.27920351 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.280837428 seconds)
  done (took 21.7584684 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.280399916 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.295054322 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.301575327 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.28609813 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.284949687 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.276378413 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.289052129 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.304734276 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.28523544 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.270874958 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.270279708 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.297322287 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.288722805 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.27979987 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.265417723 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.297597387 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.280921918 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.275917701 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.27906027 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.287377528 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.282454543 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.265561967 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.279061277 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.288371155 seconds)
  done (took 32.075120877 seconds)
done (took 71.174166436 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.917883122 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.343220105 seconds)
  done (took 7.530088266 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.281440986 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.287922394 seconds)
  done (took 3.953507271 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.284380798 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.269528161 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.278588537 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.277224403 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.27513643 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.262189485 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.278633894 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.287634398 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.271633512 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.278906309 seconds)
  done (took 14.04337943 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.278085157 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.284062642 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.281429805 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.268593357 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.29594687 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.284697723 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.287173215 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.285439173 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.273628625 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.286739484 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.282303954 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.469273978 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.292213792 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.521693252 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.288775867 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.284774524 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.283939257 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.266529551 seconds)
  done (took 24.777321998 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.292756777 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.270631943 seconds)
  done (took 3.832526261 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.280729366 seconds)
    (2/7) benchmarking "second"...
    done (took 1.276913337 seconds)
    (3/7) benchmarking "month"...
    done (took 1.284744028 seconds)
    (4/7) benchmarking "year"...
    done (took 1.259091569 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.281192973 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.301886117 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.295326807 seconds)
  done (took 10.239127463 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.716084911 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.453710446 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.500186318 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.737919483 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.91776438 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.226857104 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.922723833 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.216753718 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.098542048 seconds)
  done (took 18.04529216 seconds)
done (took 83.698174399 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.922330113 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.296606192 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.043605293 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.498532364 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.284105853 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.663933016 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.310051052 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.901868062 seconds)
done (took 39.19116093 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.553247541 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.268072771 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.316450258 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.294576663 seconds)
  done (took 20.148997382 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.264975287 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.865049431 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.313398464 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.297425325 seconds)
  done (took 20.100898223 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.790473834 seconds)
    (2/2) benchmarking "read"...
    done (took 1.707810037 seconds)
  done (took 4.76820478 seconds)
done (took 52.854796821 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.267267903 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.291296641 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.2857625 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.262515271 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.276836495 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.285318133 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.279528186 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.273753793 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.284072755 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.274760953 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.276245347 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.284904687 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.282942403 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.271853555 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.277458476 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.283002706 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.27107458 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.272524818 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.270346259 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.287965188 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.264309248 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.283233235 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.274786487 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.275721956 seconds)
  done (took 31.922378632 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.376458136 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.366778425 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.372165657 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.370034252 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.394489409 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.361272359 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.351861032 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.349287182 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.356143484 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.327163456 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.321325332 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.390276528 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.315961597 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.37280009 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.329788255 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.395537002 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.358104758 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.306224735 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.318591422 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.379251676 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.339425906 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.327040128 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.371701317 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.303312259 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.383891536 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.326020089 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.335803984 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.331597937 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.316386681 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.373445552 seconds)
  done (took 41.792841856 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.31222853 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.286885406 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.275077165 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.358980325 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.287404036 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.278841895 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.275967949 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.2574947 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.277781788 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.269581696 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.291447219 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.276192075 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.27565645 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.291084411 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.292701471 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.283264219 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.337309646 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.469593294 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.281982687 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.286462206 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.345166319 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.29311239 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.274120591 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.270682287 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.260135958 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.287753024 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.287022353 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.281142078 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.270340187 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.285725433 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.279528582 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.330598815 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.322171471 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.291487118 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.397726479 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.338832399 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.292703205 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.835251279 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 3.356277988 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.281169631 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.265259009 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.275901549 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.285535265 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.282716792 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.334978817 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.279600854 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.264750355 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.280529178 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.283217954 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.274780088 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.279468037 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.274292271 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.307671222 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.277361119 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.269093729 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.267905119 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.283244995 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.281466771 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.29043646 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.291324677 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.281770188 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.344222766 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.288683266 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.27228667 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.664285296 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.273993231 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.359625123 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.27537602 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.285487241 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.499498235 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.291046927 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.490402508 seconds)
  done (took 98.787765131 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.280655572 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.300673812 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.362274674 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.366172753 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.291037232 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.278390464 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.291866602 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.284167387 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.948416778 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.278235702 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.292273068 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.298347474 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.955596769 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.284546836 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.289487396 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.359960372 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.288198244 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.283268672 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.288302684 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.287360619 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.269435487 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.272961352 seconds)
  done (took 31.120502571 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.325447007 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.295700061 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.305033648 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.283274547 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.301263695 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.305507776 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.330349221 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.297543396 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.344441664 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.342759363 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.325517748 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.331902015 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.296934323 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.325574118 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.334118834 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.370331595 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.318026299 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.356919046 seconds)
  done (took 25.045711713 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.466086726 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.455662132 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.364295145 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.321173467 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.541925271 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.517780387 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.385516046 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.461363753 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.317694663 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.453941231 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.469315608 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.339923452 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.524665263 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.332296194 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.316165803 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.54071371 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.351459792 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.333452698 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.388193269 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.3956847 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.478069062 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.393711716 seconds)
  done (took 32.424461748 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.30891438 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.350196168 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.35071733 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.359702429 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.289458067 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.270512032 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.342981444 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.301999216 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.301581738 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.335180416 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.326608566 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.297248508 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.386007314 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.336063892 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.370601947 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.317238116 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.339167398 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.336704121 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.333825392 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.27230073 seconds)
  done (took 27.808562937 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.262660677 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.293500747 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.283380325 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.272578956 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.276040338 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.278883474 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.280732742 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.28134022 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.269709741 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.535497975 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.278063211 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.278738937 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.277988629 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.268530177 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.268555554 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.285577602 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.288373431 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.283120164 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.273851602 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.29422586 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.555345577 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.277835387 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.285832535 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.288862836 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.283605375 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.256908542 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.275108595 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.275882867 seconds)
  done (took 37.59185385 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.321555691 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.278795728 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.292498436 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.276556066 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.283367785 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.361193558 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.292323924 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.297053992 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.280524249 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.294317989 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.291383773 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.283509285 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.265323325 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.343412335 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.292903501 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.283227787 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.396227501 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.286783261 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.350721496 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.274793788 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.292211368 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.33986266 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.285670511 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.293023489 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.268288205 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.291668362 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.281847995 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.283197104 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.280132079 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.27791872 seconds)
  done (took 58.214479437 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.293356038 seconds)
    (2/2) benchmarking "in"...
    done (took 1.291763253 seconds)
  done (took 3.845682486 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.274000162 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.379327002 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.277143554 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.485040092 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.456125891 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.478926681 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.44456182 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.390684943 seconds)
  done (took 12.44480025 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.272964633 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.741529891 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.288722581 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.299595769 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.280913325 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.797830051 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.228942588 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.194435156 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.096256624 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.164467067 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.442242152 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.773861193 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.325370438 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.589347921 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.39351754 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 3.150954702 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.531729621 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.856379109 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.378249453 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.426292805 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 4.061565228 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.398431112 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.279827913 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.291078702 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.28661905 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.199013555 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 4.241083391 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.733407469 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.456831742 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.398983935 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 4.091051628 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.36629791 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.28888714 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.54030306 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.396824307 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.281053037 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.503129563 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.383457943 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.287698283 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.271184296 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 5.084388554 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 5.025529089 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.57559171 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.540783054 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.386728413 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.29097254 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.292038264 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.273805429 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.568447754 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.915576156 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.331995544 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.270515989 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.43335314 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.280676854 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 5.045019773 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.281842796 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.268782991 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.207027309 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.956927788 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.624612848 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.647593882 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.497304694 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.324250242 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.408236942 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.28278522 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.56231567 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 3.178911389 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 4.107088881 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.057523966 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.39694643 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.829085402 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.299321148 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.287803326 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.285465277 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.272883146 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.603553466 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.284657679 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.27964964 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.272478636 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.27635836 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.5802504 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.395838699 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.152042004 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.423683357 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.557227711 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.8203817 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.406984357 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.274448265 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.982310691 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.142635352 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.429952075 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.981090519 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.536602463 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.430251524 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.323222804 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.556305433 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.310138679 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.290550106 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.150069665 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.947279405 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.292985626 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.284620629 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.636384571 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.393762758 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.290286425 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.275614768 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 3.023385202 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.415115335 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.436214349 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.310453763 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.284058633 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.274352539 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.877503046 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.445303076 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.285961444 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.762703814 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.336028736 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.841771128 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.557062444 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.501073422 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.662935184 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.326295511 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.616978092 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 3.183236926 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.292032362 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.824769651 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.125132592 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.962132733 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.546456155 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.403680003 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 5.213991645 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.361319133 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.280370967 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.46955481 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.365360998 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.280197282 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.28437747 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.27351863 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.266735573 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.274158753 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.405750609 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.685914418 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 5.204464805 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.285087126 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.542737586 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.398319467 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 5.195091973 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.587248937 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 3.003182644 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.434123233 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.277772692 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 5.080865798 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.585982275 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 3.035185308 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.435611372 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.276901259 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.2814549 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 3.179714514 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.293669104 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.381395247 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.269923826 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.896300676 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.444182997 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.2707749 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.278820937 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.777287517 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.448948446 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.272878137 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.405424828 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 3.102897271 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 5.199142175 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.297779625 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.600400651 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.396944377 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.282483318 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.297843512 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.278857778 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.077042461 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.934009041 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 6.525966009 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.905568349 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 6.140570972 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.371158903 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.512666616 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.372441708 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.547056517 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.514062261 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.431825235 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.292261786 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.292121039 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.293758218 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.789519728 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 4.203507849 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 5.375563741 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.156999795 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.306845589 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.291967788 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.424941459 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 3.101365664 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.28318208 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.048611855 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.290217355 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.382835157 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.284115457 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.285746852 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.457039644 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.470114664 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.41175786 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.894521526 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.277873218 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.280117622 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.974675813 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.429538791 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 4.017126248 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.401133201 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.153029195 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.392594268 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.417204398 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.452056067 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 5.032704884 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.418358276 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.284788842 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 5.079599705 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.433064478 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.29315349 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.397713114 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 4.009056688 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.099798612 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 3.044794314 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.958549615 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.249584678 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.831917652 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.529070344 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.424082596 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 4.168799075 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.389172362 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.543347449 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.401874819 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.837195959 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.312924913 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 3.062075986 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.300745946 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 5.089995104 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.289437442 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.274812008 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.411785402 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.784465339 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.411263775 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.269170932 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.465346905 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.371294031 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.970465073 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.412633391 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.417883915 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 4.639638722 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.228450603 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.38862171 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.539097695 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.422163403 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.226122479 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.274935928 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.638205425 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.264091868 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.285811043 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.428282505 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 3.075614522 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.494432373 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.572642604 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.418649299 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.280147118 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.291242135 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.528432199 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.383785307 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.281832385 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.718494559 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.294623425 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.322008641 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.417086135 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.289031706 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.277306669 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.53221156 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.470701769 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.635973194 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.792227705 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.869534974 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 3.130721709 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.4097514 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.00701728 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.432674055 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.970598584 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.433677336 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.301552792 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 3.003395151 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.407274586 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.657618494 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.424724982 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.411930971 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.970241388 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.396948591 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.574466846 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.446515117 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.421555561 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 3.080377861 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.855104535 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.560027303 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.732545022 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.313459664 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.806487621 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.465385937 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.839362434 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 3.350855288 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.990092748 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.439246083 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.330435909 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.289417282 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.284236962 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.822736916 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.325389603 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.267962066 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.069850077 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.013392817 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.21734428 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.038359162 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.441403537 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.284475146 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.304312173 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.301402464 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.19026654 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.456823395 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 4.679940851 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.433838044 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.286330615 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.29014058 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.273535279 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.650576654 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.119524338 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.214412865 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.283999092 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.433669516 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.298602647 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.269257326 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.270667686 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.288654157 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.276587034 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.269834449 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.806219556 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.285792917 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.883462328 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.438585546 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.290606208 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.562990099 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.358533154 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.298362239 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 4.527682408 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.38888573 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.413438689 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.35725302 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.294653035 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.705477221 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.437682509 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.258195377 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.631243731 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.617337062 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.530229413 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.870553881 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.338953781 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.714680609 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.661136808 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 3.124440863 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.270282523 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.196573633 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.434645216 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 4.099032069 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.290936828 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.806491042 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.903361529 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.352385193 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.549370814 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.199716444 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.665826468 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.528836433 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.353527114 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.290902076 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.281468961 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.387887276 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.529732986 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.329875919 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 4.588149571 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.494026971 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.262643668 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.649101819 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.382717806 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.53645473 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.313045786 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.306246481 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.295958832 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.288966603 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.791188272 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 4.215486929 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.37779526 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.286496263 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.198795838 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 4.211940493 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.195817252 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.923550209 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 5.271761061 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.426744759 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.285512411 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.501209681 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.337957337 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 5.123160377 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.305738768 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.096943668 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.630134075 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.328852211 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 4.51518509 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.684737383 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 5.091598894 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.711330965 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.404774589 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.294483042 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.681294821 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.288660662 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.432915087 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.217535041 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.695211261 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.826669588 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.805791057 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.633275991 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.401241134 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.185096745 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.897342197 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 3.348257641 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.284457974 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.146386684 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.428611398 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.633491066 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.267743351 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.569937571 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.448382673 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.927964056 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 4.056932414 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.431443186 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.903989393 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.416899108 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.288520298 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 5.157248606 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.205229925 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.543366932 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.418523591 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.279469543 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.305734654 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.985774178 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.898203764 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.559301772 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.362328251 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.299108242 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 5.149797489 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.976751585 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.444488927 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.274988948 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.283014369 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 4.777984069 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.345057761 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.277844794 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.713824292 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.893551673 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.434690697 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.789128062 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.490148794 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.439943881 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.586765218 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.710079358 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.500764308 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.365002315 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.282134302 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.285734484 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.283768592 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.879037989 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.280035148 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.290827281 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.883997409 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.430702387 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 3.05328392 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.232013415 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.564701312 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.357587403 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.706858814 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.43030542 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.793070295 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 4.237176877 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.429152646 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.547605704 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.419169781 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.443892811 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 4.087351288 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.394039068 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.276028523 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.24666411 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.666411394 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.66377537 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.693445536 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.648408832 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.349680179 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.982447275 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.391462458 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 5.133425028 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.29621986 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.307398246 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.774648145 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.541251639 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.801454363 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.444939906 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.777602902 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.401367428 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.603012428 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.611851479 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.388929978 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.291121394 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.287591795 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.30350921 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.321330819 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.891147651 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 5.255083389 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.772667974 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.41664882 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 3.091416947 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.920806943 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 5.234951688 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.557367568 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.666811132 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.614430934 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.318648291 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.280329642 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.699765075 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.360228482 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.465058609 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.374669761 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 4.120540029 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.337038386 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.28303877 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.904189473 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.289520968 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.285291498 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.280523709 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.205387915 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 5.144865588 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.400178075 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.527547443 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.411643942 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.309500299 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.926844613 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.578482582 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.329745062 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.290228215 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.283367488 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.185160903 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.393182309 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.29006028 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.676300072 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.444765502 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.621838404 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.134977149 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.759702724 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.388276586 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.290442253 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.295781183 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 3.013264507 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 4.911839725 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.311421145 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.626693563 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.386292766 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.802999639 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 3.34358011 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.783871359 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.848335281 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.315693908 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.41880545 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.280779253 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.35498102 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 5.269593245 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.215713046 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.030948435 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.785322586 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.386820849 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 4.126545471 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.322181355 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.35097691 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.482298598 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.35027372 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.288467242 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.285385152 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.275796513 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.765640586 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 3.333072087 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.292263433 seconds)
  done (took 1550.301547284 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.581409741 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.287764382 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.302426926 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.294528228 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.296372015 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.302359952 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.277694542 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.291683321 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.280904287 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.288977763 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.302484033 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.285089971 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.284049642 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.577178098 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.298842813 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.284164319 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.303445276 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.29330285 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.279995563 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.293719907 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.284781768 seconds)
  done (took 28.950901591 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.280672747 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.28555222 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.292894576 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.287890198 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.295648973 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.294103288 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.287069262 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.283902327 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.284891803 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.293732988 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.279304361 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.300605716 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.290770734 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.284762067 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.276250116 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.28937587 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.284682819 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.27629279 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.287571199 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.284385806 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.280454303 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.294503828 seconds)
  done (took 29.589304553 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.275525572 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.280089088 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 3.055269289 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.414569627 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.290474626 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.295926118 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.298337861 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.495029008 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.328326325 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.18189383 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.752253517 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.402046301 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.293313348 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.483115513 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.40089726 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.285548499 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.408247858 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.286190441 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.280395124 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.307778648 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.290766686 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.551647129 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.422787481 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.287922901 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.146630054 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.422109291 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.301336726 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.293483052 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.272787105 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.25587346 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.426957199 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.291500897 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 3.16724461 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 4.083523418 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.650057028 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.204972733 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.443703248 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.294641773 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.289589118 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.280912348 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.56843159 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 3.127738794 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.2865781 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.29281279 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.60511373 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.415010824 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.281538769 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.647092712 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.405965667 seconds)
  done (took 98.097221563 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.291479922 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.419754479 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.352281079 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.291665681 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.424358132 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.293829645 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.342649761 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.293097235 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.284727331 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.287862269 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.420046528 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.443410248 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.299440155 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.289041418 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.361273458 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.288995501 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.285203675 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.285526849 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.29259312 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.301760506 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.301329651 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.356074475 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.432173919 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.450200094 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.291268819 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.29755635 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.295075355 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.278683091 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.444884893 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.294156942 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.275762639 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.291466081 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.416675937 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.411000572 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.292255477 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.30106842 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.420755834 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.297136656 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.284983125 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.280892314 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.300711483 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.299390571 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.341551552 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.419733018 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.295332996 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.378366888 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.291958047 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.285974404 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.437953006 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.280135686 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.284389165 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.467558889 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.281989077 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.291969911 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.285864205 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.399382889 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.297254327 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.283029992 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.287257032 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.433858144 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.28493711 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.267631339 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.438141579 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.309200295 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.299901198 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.463379949 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.385485642 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.301773457 seconds)
  done (took 91.929429102 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.288611316 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.451246511 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.463792116 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.465795063 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.420741758 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.425798293 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.449344459 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.435723797 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.411387863 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.420589757 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.419545079 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.37517662 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.401125337 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.378558315 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.425872079 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.406699762 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.4259868 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.414781096 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.421121383 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.433816075 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.413142261 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.468285639 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.431308392 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.455881493 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.659361708 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.396153589 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.422005889 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.42010089 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.471700537 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.416523581 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.646323695 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.42421214 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.419331167 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.468697512 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.635205981 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.416284237 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.295301339 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.441463166 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.432553977 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.43724299 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.397813101 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.47267339 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.4279682 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.397824283 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.410361828 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.421760006 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.470665404 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.654708211 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.374556254 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.425850381 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.434304398 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.459490621 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.431173322 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.427363527 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.473197284 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.393477633 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.456882478 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.458248191 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.441852183 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.459416687 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.448950836 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.40258793 seconds)
  done (took 90.53773838 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.290074388 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.283026117 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.372254606 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.311227522 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.292551966 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.366085971 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.278169221 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.290501225 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.289821857 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.282960251 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.282639112 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.376241354 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.639335732 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.294751415 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.353064928 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.656549986 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.378046646 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.380215769 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.300529529 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.378668986 seconds)
  done (took 30.366190472 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.282624254 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.295111094 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.298151734 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.455570454 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.292191843 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.423081749 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.294950415 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.275837625 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.299379799 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.28642784 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.293149862 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.282068693 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.286459235 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.439914838 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.282350856 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.415648881 seconds)
  done (took 22.479107375 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.30269053 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.288087448 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.292441108 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.290104394 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.300507289 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.283708639 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.278284291 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.295958099 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.289335176 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.74932687 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.278500635 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.304878432 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.27777027 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.283288322 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.284910724 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.271296226 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.29217225 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.276244026 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.280055235 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.276281934 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.872032733 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.300260152 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.295384428 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.291401464 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.304272124 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.882210805 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.298174598 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.305835538 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.292053299 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.27895995 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.295621989 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.776077884 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.28893141 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.285849967 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.293801736 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.298419371 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.284506847 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.287254425 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.286617562 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.291077092 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.286634973 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.293775224 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.293640701 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.276847795 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.29169526 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.292108743 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.291215399 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.734856425 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.291597601 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.29288051 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.275690042 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.287924759 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.277400159 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.759055089 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.278121602 seconds)
  done (took 75.208568565 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.332283099 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.346521888 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.283134584 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.293495218 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.340822436 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.338758458 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.323826652 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.29050285 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.322516291 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.293036897 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.364536063 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.330657921 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.350919871 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.356078933 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.355509027 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.34169809 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.29184976 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.359855572 seconds)
  done (took 25.177118267 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.275837937 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.299907804 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.277248986 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.305150395 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.293937851 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.294332459 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.29240587 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.280967186 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.288052963 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.286151724 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.307252613 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.279532912 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.294006316 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.290763238 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.286075601 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.289704782 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.289316684 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.30143144 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.284460332 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.286700063 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.296315199 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.288121141 seconds)
  done (took 29.656093837 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.331884228 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.332392068 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 1.297367709 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 1.283737696 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 1.291581422 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.311013234 seconds)
  done (took 9.117017732 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.34979128 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.352185532 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.317461371 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.344347601 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.355904617 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.362693288 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.382167252 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.378005129 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.370633604 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.600673148 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.380198721 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.380079393 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.370055737 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.432028128 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.348495664 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.367351002 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.376644921 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.378465118 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.345118582 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.37302558 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.38607963 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.35675964 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.386348302 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.375483038 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.381683925 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.421997686 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.372239171 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.620836398 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.365600794 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.365141498 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.352560971 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.380530558 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.379694269 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.587491776 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.345229814 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.359205686 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.357983601 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.372997939 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.353040835 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.417639616 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.324980214 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.352981488 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.354149145 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.366698804 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.349471444 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.391228514 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.372518054 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.363878333 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.360051725 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.585048621 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.366675132 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.419121659 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.363667532 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.371297184 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.362701881 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.609007772 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.598140774 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.410758765 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.363465545 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.604661062 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.406570481 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.359534969 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.418925638 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.593079011 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.353115689 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.415553421 seconds)
  done (took 93.636528785 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.414933357 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.34393588 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.391495303 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.600964382 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.415017526 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.367169548 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.382602488 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.400845335 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.383512894 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.364125979 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.370747186 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.380672625 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.407479478 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.413404623 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.374880079 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.354398303 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.369536949 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.410960193 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.353081145 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.606772187 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.367425508 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.417802628 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.399469851 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.413353749 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.591940119 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.384368058 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.391161866 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.378394798 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.383761109 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.384594031 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.381184105 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.381445477 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.420696404 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.343745363 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.430379972 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.375093509 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.390540279 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.382214565 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.387496117 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.375771444 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.411161647 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.365457874 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.383310931 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.363812647 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.596634268 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.397965159 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.378933558 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.354342654 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.386637895 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.341181598 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.59834462 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.592132847 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.603936912 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.409494276 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.377365092 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.385817885 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.392424088 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.375551639 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.376870932 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.363062406 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.419114674 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.370694636 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.589112943 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.34774484 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.385731785 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.426958301 seconds)
  done (took 94.353151857 seconds)
done (took 2671.673697052 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.297578633 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.2917484 seconds)
  done (took 13.860956764 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.290851834 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.279911287 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.444083764 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.297743129 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.327893728 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.285813773 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.305695298 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.298025408 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.282959933 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.368426457 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.28814249 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.429370459 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.408002505 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.289867794 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.316195238 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.271691136 seconds)
  done (took 42.461159398 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.451504042 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.878948376 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 3.257166202 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 3.104363453 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.330625285 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.07016395 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.599045327 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 6.05246157 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.598217465 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.759990685 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.551843058 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 5.216821508 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 6.153417921 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.494804427 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.722303192 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.817884941 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.895480692 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.989506257 seconds)
  done (took 64.205954341 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.287343274 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.442326301 seconds)
  done (took 9.032233577 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.271293937 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.343217174 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.296156944 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.300832687 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.311044058 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.315409017 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.338801558 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.297425323 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.292309637 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.291165229 seconds)
  done (took 64.33945988 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 6.284028914 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.97058461 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.617546208 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.767668315 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.934361867 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.780072772 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.455227368 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.715214741 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.384694021 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.275649925 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 5.568289136 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.698244218 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 3.142769632 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.567404772 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.951117246 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.58304915 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 3.057494582 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.74101022 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.610793725 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.76407777 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.591109249 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 5.51289597 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.731039459 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.225712209 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.297295574 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.931859953 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.481204764 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.425995045 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.37266543 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.460691304 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 5.667149612 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.294030917 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 5.674525642 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.292141958 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.541527716 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.852911003 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.957003618 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.483063272 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.837647851 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.626790021 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.673056703 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.990303963 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.362005153 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.980962212 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.45135464 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.709396173 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.404409919 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.535223371 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.384753535 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.401211321 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.861992713 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.470323772 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.405800597 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.388699687 seconds)
  done (took 165.428763174 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.276241122 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.677003107 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.450539254 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.274894525 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.679463497 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.482688266 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 5.04387044 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.8512711 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.311291646 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.500197428 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.458196035 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.40592442 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.269044931 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.275424029 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.282389591 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.266860049 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.48973598 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.887359154 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.293437932 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.270286067 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.49352853 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.524773933 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.418415378 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.28500058 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.45218195 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.533706673 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.709014938 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.42482507 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.665141966 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.278376298 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.727460159 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.302572912 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.263948113 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.236565178 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.701343503 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.623603592 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.718718204 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.274564684 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.032950443 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.290787718 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.9395958 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.492958086 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.611191506 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.443992877 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.53519568 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.510591166 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.89191525 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.282299449 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.02916433 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.453186682 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.513679463 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.497338617 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.549810177 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.279116625 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.861786043 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.274296983 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.279100472 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.567385575 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.442791531 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.411752255 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.28608617 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.283089784 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.280695673 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.534361361 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.280636526 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.382756306 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.277314475 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.285334653 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.410406549 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.432831288 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.447784191 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.537976811 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.545206759 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.519991598 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.287304127 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.525713665 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.707061261 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.546855113 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.280290239 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.280001798 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.676559352 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.702223693 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.421549861 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.511140453 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.579291034 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.558578571 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.813389481 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.248566385 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.478297479 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.42387746 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.471965333 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.506171186 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.635155529 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.149211295 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.243153232 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.233759293 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.447130915 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.378301007 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.250677009 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.734559314 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.539137285 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 2.931850889 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.43309246 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.721573201 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.353151494 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.247302093 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.825447988 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.241730075 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.45421393 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.533086297 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.254750121 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.232018174 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.40454089 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.022229595 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.257393293 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.321975061 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.661494661 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.26489282 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.410793735 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.256096805 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.485954393 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.086193859 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.362902028 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.11567119 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.401776093 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.317309858 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.416973224 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.114617739 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.476535377 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.396577749 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.554156597 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.34295819 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 5.823707126 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.127997968 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.420104999 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.105889518 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.110646845 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.284670479 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 4.913673987 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.288119521 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.106870391 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.367795829 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.270420392 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.486032966 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.105340455 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.34694305 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.358341875 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.4747877 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.10724813 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.265866769 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.122428617 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.057022213 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.273177978 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.104109041 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.105964447 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 4.920858862 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.104420435 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.257323963 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.342987642 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.81456812 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.479611728 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.439334595 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.103050162 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.523997082 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.30758483 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.564224147 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.633462539 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.286220495 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.106154148 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.10364353 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.103574286 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.35206916 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.294999493 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.106444579 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.105679962 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.8322403 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.02583277 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.103400394 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.296367623 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.336415682 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.326853734 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.316878117 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.107981312 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.470601942 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.104324664 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.354031485 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.607723297 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.31541048 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.103358592 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.10316585 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.10466809 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.10598858 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.327166711 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.371125846 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.709976004 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.259222036 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.406000989 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.32274686 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.428453485 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.583200247 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.116575453 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.370014597 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.105582451 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.499317939 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.111878552 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.290520887 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.362174122 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.106413391 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.426147082 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.471331817 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.188659947 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.501597406 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.10711489 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.104419774 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.104286439 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.283802699 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.564857233 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.104905972 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.23695012 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.468805134 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.242664149 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.304644561 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.135957242 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.109022307 seconds)
  done (took 748.49758391 seconds)
done (took 1109.079498624 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.10242627 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.107074194 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.109906752 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.11158601 seconds)
  done (took 25.529761251 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.09709597 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.196829514 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.292683171 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.115919923 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.508540239 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.171736447 seconds)
  done (took 11.488562564 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.103717721 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.1063255 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.109680416 seconds)
  done (took 19.418597392 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.405475869 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.555715112 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.272517349 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.204131212 seconds)
  done (took 6.543275174 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.14083757 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.143298706 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.114588354 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.140100829 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.114391381 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.114573647 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.144015422 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.136034622 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.114990151 seconds)
  done (took 11.266264587 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.879378217 seconds)
done (took 80.226115026 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.461610658 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.405078597 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.270944075 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.308548756 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.253836914 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.43740374 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.231855881 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.128617019 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.458158961 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.595300732 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.645938313 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.247826428 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.570118954 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.527792031 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.354814729 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.142270295 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.125775499 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.177274235 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.88571852 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.326352504 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.734212976 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.248632108 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 5.757187919 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.142507098 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.076890137 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.231576978 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.362757109 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 6.93435782 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 2.217391499 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.139435628 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.190266357 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.660089999 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.317184546 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.458461693 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.211455938 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 2.048022692 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.623517087 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.234225997 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.249507061 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.565793772 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.407038182 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.208559283 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.10277282 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.28122227 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.533690829 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.133699504 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.174281315 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.274125314 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.666424649 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.303066251 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.483391154 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.118119355 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.68747495 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.193153993 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.197745678 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.105496611 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.045839867 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.574454933 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.268614442 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.41652752 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.131677772 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.204909265 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.000731018 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.14575237 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.347564784 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 1.415121687 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.527044061 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.20284611 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.595483038 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.142309822 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.125628584 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.141229764 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.815774916 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.28796404 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.103428269 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.266811366 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.373266016 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.260319322 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.120634292 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.340497891 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 1.339623657 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.105523429 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.254557628 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.465706445 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.279133032 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.567434165 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.629218572 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.455631563 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.49008691 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 6.989094928 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.749277485 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 7.033657745 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 6.214758987 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.11709934 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 7.498957422 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 6.226868245 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 3.365598549 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.582696427 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.248539941 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.695959077 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.144064704 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.125142051 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.567649295 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.505522042 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.969159717 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.148708538 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.269780701 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.102578519 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.414023359 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 6.889518027 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 6.215323055 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.685533429 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.11907548 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.331791141 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.660766366 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.115192935 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.458088763 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.564285984 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.150343935 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.111053557 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.413809256 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.118449806 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.235297406 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.654203698 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.501641056 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.314641404 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.107396744 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 3.41256289 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.116206209 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.288765346 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.118832503 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.693575525 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.648793747 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.151686578 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.365259986 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.238209774 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.103094417 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.444162776 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.287792217 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.249493139 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.41950934 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.440572983 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.270703377 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.104032447 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.436756115 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 6.116425685 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.329409012 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.439152859 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.279212869 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.414572659 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.198983498 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.131062501 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.150190542 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.615536191 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.74883576 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.724522941 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.355796518 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.329655379 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.642830824 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.466359139 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.938172217 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.216429158 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.258412973 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.11649887 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.132963923 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.177588319 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.105465285 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.11401641 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.421830643 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.438482718 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.597107334 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 1.949614375 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 5.712694427 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.372581631 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.267652269 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 1.995343819 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.709760797 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.119618213 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.515880354 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.613940854 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.30981747 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.144272038 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.106878915 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.172021742 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.849825352 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.155293793 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.389970694 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.819972227 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.607531145 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.522427156 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.316344066 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.15331696 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.446236091 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.376913647 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.377539021 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.31487801 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.504400839 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.237513099 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.49799692 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.144203458 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.382366166 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.116395206 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 3.272294412 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.382528039 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.606970372 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.442589034 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.338488306 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.282149054 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.424109651 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.116540734 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.383493221 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 6.214385786 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.530947337 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.140338577 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.351936821 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.210414402 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.570531081 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.013241607 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.23284612 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.545681773 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.23751349 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.230351358 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.636774092 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.128012693 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.445345561 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.277792084 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.249517454 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.379331237 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.145918224 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.243563297 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.286901508 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.253579755 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.342072439 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 1.940299414 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.546470009 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.66595363 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 1.245848408 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.103617011 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.592081041 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.143016384 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.125940361 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.391531389 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.296812712 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.418673274 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.213449684 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.282825499 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.13187887 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.148444305 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.538663289 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 1.947135773 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.703408241 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.082019583 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.148456254 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.10459972 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.602659835 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.543895283 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.274281646 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.249728714 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.703646255 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.152666848 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.310601463 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.120172581 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.119646589 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 3.048216894 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.366552727 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.38661303 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.598396934 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.120172184 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 3.375454824 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.255389374 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.536159915 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.603291143 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.167391 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.237478387 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.404220352 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.195030919 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.491817045 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.143342593 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.258486798 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.438925247 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.235753177 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.220673488 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.106497398 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.1513269 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.664926978 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.424865825 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.687827166 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.146066593 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.450098031 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 7.177307398 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 1.336117805 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.137686195 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.198656981 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.447658303 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.25749694 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.50986007 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.119903317 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.280068563 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.36597715 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.136101397 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.104227005 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.253395289 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 7.677287315 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.562504817 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 1.438391042 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.2428767 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.140931575 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.356524661 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.11534405 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.763441587 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.248029956 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.214725284 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.726254272 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.669194711 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.116450488 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.308545947 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.106666538 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.46624853 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.144328877 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.133003662 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.270008604 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.19947224 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.104838725 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 3.728792609 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.282848115 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.6750547 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.286288132 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 2.063943772 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 7.179424358 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 1.294778889 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.22866896 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.392308098 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 6.118099886 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.132860273 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.253714672 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.742735205 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.274657869 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.148889801 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.380652273 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.118390372 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.722154329 seconds)
  done (took 871.283981257 seconds)
done (took 872.557829071 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.315549459 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.517865697 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.36567159 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 1.990394399 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.926762185 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.768465943 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.382815203 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.358288419 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.201125819 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.379946408 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.04567412 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.923938603 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.223891791 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.242168244 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.213889676 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.250478381 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.309820498 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.365647444 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.241726681 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.069687243 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.491818052 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.074213934 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.547359508 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.420056674 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.516578864 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.229215798 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.329277674 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.479964667 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.479336083 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.31197645 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.348757523 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.3480286 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.964670749 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.371490661 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.213574583 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.208554994 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 1.978318849 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.223873709 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.374175251 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.210143833 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.516168995 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.246090983 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.845021927 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 1.992301783 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.904832271 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.542008463 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.006177948 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.226973464 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.263849933 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.330810421 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.382466373 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.37395132 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.480039666 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.333865736 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.015344131 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.005151567 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.479113742 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 1.991487399 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.868976102 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.330486049 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.498459287 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.22214564 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.330698163 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.356446568 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.249855017 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.430675873 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.548242367 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.373824693 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.347372137 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.387240016 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.370359911 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.349124531 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.243673786 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.258939321 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.256849907 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.380799155 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 1.992782054 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.365477735 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 1.915489844 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.228518023 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.105753677 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.071966528 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.07928225 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.20186896 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.315638628 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.901135565 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 1.944043145 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.095749186 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.242806093 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.348878955 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.053071828 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.363735496 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.582153801 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.329493593 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.316188474 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.365573865 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 1.947878109 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.375420841 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.08454971 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.349489788 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.912276731 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.329309058 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.151084894 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.222300393 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.227754162 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.374327022 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.329343806 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.541706818 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.350000348 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.296415658 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.514598485 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.256641949 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.34976762 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.241616269 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.200341456 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.901432352 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.419731372 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.957316031 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.375718343 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.802297289 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.405803801 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.222478043 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.516965167 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.421950276 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.315655902 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.219730473 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.227694606 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.089652107 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.227592605 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.222204134 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.314382995 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.580053758 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.328808159 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 1.98966242 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.350126288 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.80254063 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.362418183 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.350205444 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.200759142 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 1.996687362 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.219571904 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.074599625 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.4222551 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.517300515 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.366240937 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.422629787 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.242816534 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.419698298 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.375611231 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.242126057 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.349943281 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.245372764 seconds)
done (took 247.453426372 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.441528917 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 5.286855523 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.389366073 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.395521806 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.464172088 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.471887557 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.182676277 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.567327681 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.229249156 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.525757148 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.400486162 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.975906069 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 5.257920721 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.314880722 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.463962303 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.354884886 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.230456578 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.372427894 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.562265274 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.498745301 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.867038103 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.40070425 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.260421224 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.533149585 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.103833915 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.863781795 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.49771586 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.241976466 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.378463607 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.890803767 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.951251497 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.379217839 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.496708081 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 4.903152497 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 3.535991058 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.846878627 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.464375856 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.919418256 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.44151668 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.4412838 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.390687734 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 5.925213663 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.876265063 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.882616592 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.268217325 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.464353503 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.182541737 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 5.006019047 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.105154552 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.844546347 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.372486682 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.914929928 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.974792377 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.463410784 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.314453503 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 4.748176496 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.602454773 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.594558038 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.497729142 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.411433162 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.441747567 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.532331122 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.526946571 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.294599711 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.952869129 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.4098961 seconds)
  done (took 147.904589413 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.541383133 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.406378181 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.54936069 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.559116375 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.700473361 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.547940346 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.647103381 seconds)
  done (took 14.052173934 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.176146988 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.162584386 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.404855294 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.361689608 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.167662376 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.286199161 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.249932328 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.895642753 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.383112942 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.203533273 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.478929202 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.404256668 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.805870597 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.892006515 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.249536323 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.402003159 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.137281665 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.228909044 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.221564003 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.419771768 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.898094747 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.864020154 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.353865689 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.250825799 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.165960151 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.203909836 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.161766291 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.134527952 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.205213496 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.142666684 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.17386061 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.27350412 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.15573958 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.869267923 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.188081456 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.483146533 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.169764374 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.212439085 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.293730031 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.107108569 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.145888494 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.166654871 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.296979788 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.171846 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.141518159 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.35101543 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.148469058 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.172885438 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.142405986 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.157117925 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.352955892 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.161956713 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.187573201 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.808259434 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.369320716 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.869367448 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.228777298 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.160539163 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.158102058 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.219491636 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.163743466 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.422067851 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.382133122 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.142206341 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.379082998 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.446314589 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.16140776 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.141485879 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.142508578 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.40576853 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.156946669 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.406025329 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.163326579 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.21223292 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.212815596 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.294326573 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.350894093 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 1.967446148 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.932002728 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.81580122 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.12858881 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.146605773 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.462268832 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.095469242 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.814648032 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.14616139 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.21299942 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.820150617 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.068941224 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.163101578 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.47147398 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.145378186 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.216313204 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.21019311 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.193156422 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.221266478 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.383504126 seconds)
  done (took 152.737891053 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.302505716 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.688322156 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.388105132 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.188081493 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.289532593 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.417778692 seconds)
  done (took 15.37491888 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.469990711 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.969770819 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.177229773 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.176699811 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.216734021 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.157618447 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.15577095 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.34412721 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.299058717 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.169845845 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.158043227 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.180934909 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.15842992 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.297790958 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.156670603 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.167268464 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.156716186 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.176676138 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.166420248 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.227156417 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.462023679 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.217474202 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.226024634 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.039862853 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.219837414 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.168191835 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.138585988 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.168920777 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.169181261 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.481857608 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.351718996 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.158118072 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.991027314 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.514680294 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.931748645 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.042765809 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.313795614 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.184629692 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.221617225 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.156925428 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.180211085 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.227776486 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.176250602 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.179945038 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.50521533 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.978090675 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.243555653 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.422011527 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.15594914 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.180665924 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.181311388 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.178641102 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.157159739 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.178983772 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.664820822 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.571983461 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.13844399 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.159858669 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.21721205 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.045351752 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.237984598 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.161412207 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.490749602 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.11102214 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.836912772 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.182948401 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.059544072 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.300663647 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.230858595 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.183507567 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.179334252 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.17879698 seconds)
  done (took 118.202748324 seconds)
done (took 449.372674303 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.115659379 seconds)
  done (took 7.216328972 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.269043651 seconds)
  done (took 7.518120285 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.107045183 seconds)
  done (took 7.223699159 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.128558007 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.147733212 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.127404833 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.131348151 seconds)
  done (took 25.678751639 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.234630071 seconds)
  done (took 7.339618554 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.104573607 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.129209641 seconds)
  done (took 13.445318353 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.24093118 seconds)
  done (took 7.367269744 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.414608965 seconds)
  done (took 7.537840138 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.125973806 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.128774683 seconds)
  done (took 13.394499141 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.105053619 seconds)
  done (took 7.206029474 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.523214273 seconds)
  done (took 8.72416868 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.107970542 seconds)
  done (took 7.253331923 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.152518622 seconds)
  done (took 7.254024231 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.225766745 seconds)
  done (took 7.32707723 seconds)
done (took 135.587380576 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.104796976 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.110349624 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.114986344 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.10860724 seconds)
  done (took 25.540213594 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.44064896 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.44228851 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.419730536 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.591994805 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.385071426 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.384918925 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.440966317 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.440816696 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.384389805 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.486755106 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.441429833 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.484544011 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.591533034 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.419017529 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.419743231 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.532105173 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.592069851 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.44166184 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.385414222 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.419117696 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.592007439 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.591928238 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.877038909 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.868627113 seconds)
  done (took 37.179557657 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.326651773 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.562638636 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.271663626 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.434555787 seconds)
  done (took 6.697374291 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.150208845 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.491184962 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.4735242 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.437680043 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.473294175 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.286830693 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.47436783 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.307926097 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.294766151 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.296194206 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.741065102 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.267604962 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.281215365 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.532880839 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.286154906 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.11684437 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.117213932 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.255927861 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.490833544 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.36232355 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.371245889 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.473898652 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.47341953 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.473807571 seconds)
  done (took 34.032324939 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.877111426 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.045464004 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.475208955 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.031467602 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.822166309 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 1.915259005 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.397484561 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.617605824 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.383862463 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.360084679 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.910747701 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 1.844672768 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.260943205 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.010085075 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.876428488 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.294977141 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.294729101 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 1.970444102 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.536031818 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.417164655 seconds)
  done (took 38.444189946 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.105515491 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 6.105797882 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.354186838 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.282692134 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.106240434 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 6.109461076 seconds)
  done (took 28.165034821 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.159613631 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.279164248 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.43787955 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.412941916 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.277808603 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.254049354 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.771017948 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.354181561 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.924403462 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.921713771 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.84990505 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.576015889 seconds)
  done (took 22.325093614 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.105693176 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.151183038 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.113442109 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.344383057 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.432964252 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 3.881345682 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 3.122155603 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.105652339 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.636418568 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.36959575 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 3.265518453 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.373781652 seconds)
  done (took 45.023982556 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.343020869 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.346862985 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.484004102 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.206760137 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.651762433 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.216633271 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.538964452 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 6.105802866 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.931435921 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.000483515 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.647785648 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.181568969 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.649040738 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.078131474 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.105834767 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.446790212 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.942399227 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.154477296 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.55355 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.189865685 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.094042408 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.278051757 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.111226897 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.676195948 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.473168548 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.140114679 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.326468186 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.356282256 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.106483421 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.385190981 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.154207446 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.67113708 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.364674617 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.447292302 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.649116908 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.229479243 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.197416576 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.12187992 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.713887561 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.433073794 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.259912278 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.283211286 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 5.363910202 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.140463667 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.404173162 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.94719996 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.167380761 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.737825986 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.12617458 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.381690255 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.011077621 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.025937833 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.450933548 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.923790803 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.274056419 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.454066983 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.28554011 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.128787961 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.382561956 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.313728422 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.308772335 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.19623796 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.306805504 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.075984036 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.371486427 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.492433955 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.466914771 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.432675322 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.412392467 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.410066087 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.485905522 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.349771434 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.943663353 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.246512728 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.695970262 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.031071879 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.469483624 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.108076368 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.814088706 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.641905952 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.087982352 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.221671692 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.788331719 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.080440126 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.105405831 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.274017032 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.714115025 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.077871068 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.202348598 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.291621328 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.549269287 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.290413617 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.315160701 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.402473038 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.864622243 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.171510253 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.15746304 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.444208271 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.129775436 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.694262961 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.111235249 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.088018443 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.176354699 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.661787546 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.522687752 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.162666501 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.879576159 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.812249918 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.432925314 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.751693459 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.266262797 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.105440314 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.510121304 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.441644737 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.111074164 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.875591487 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.134696616 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.330308036 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.482690575 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.130526549 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.104030765 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.55823126 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.314812894 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.129682462 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.358788713 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.132469354 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.287237397 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.131012926 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.812729649 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.535963519 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.352516187 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.639206772 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.232165108 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.194440358 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.076896935 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.258381635 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.628552907 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.205251472 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.446942319 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.553205734 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.349838923 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.669895273 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.105807334 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.934855152 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.604206451 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.402914516 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.445951068 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.774688401 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.29389119 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.202750083 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.106046313 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.287324266 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.119618531 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.643628432 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.150202712 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.804405168 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.11382701 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.405413956 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.10646427 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.272424915 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.108111696 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.294221304 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.795491778 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.164114746 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.26797398 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.393472608 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.311926052 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.10717902 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.077207277 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.487358441 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.377400044 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.636515179 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.373986746 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.79614658 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.458386214 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.594356542 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.316054707 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.490864814 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.882689974 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.772719631 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.464890769 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.163543619 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.134173732 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.107586075 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.300912225 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.540075362 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.336699252 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.851795684 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.9973247 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.160427366 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.124843324 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.685073609 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.077068787 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.258934341 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.758590319 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.14936098 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.673923881 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.217901714 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.356519159 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.398169977 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.140898377 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.456979973 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.985631087 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.547908916 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.463720311 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.44314072 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.087704765 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.108949529 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.63167907 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.610082347 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.253122723 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.444432715 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.1300517 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.170258896 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.107152483 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.454021983 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.069489057 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.856039383 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.415182613 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.78546344 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.074925804 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.266073826 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.664308518 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.108574759 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.069402708 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.285395406 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.293161255 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.97857472 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.67262998 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.383318896 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.435723333 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.106121018 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.109514178 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.384804236 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.419046377 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.385326073 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.629790154 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.363881457 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.804706355 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.222948896 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.804022006 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.277384593 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.149631924 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.862072674 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.450824693 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.061968553 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.283153414 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.836991753 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.39779847 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.747199472 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.398008827 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.10706222 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.584429289 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.735354472 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.109110069 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.16247094 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.259359693 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.10642788 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.330808685 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.00607337 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.349116413 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.292596261 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.399232908 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.349227148 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.284568813 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.520046254 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.646873471 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.896067019 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.079219872 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.266991179 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.228852342 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.429358248 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.107400615 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.391308941 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.745571609 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.809226065 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 1.935596343 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.655535846 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.489732773 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.775021291 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.581822307 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.36775995 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.421132782 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.115958612 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.798075829 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.099663414 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.24887511 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.077393611 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.949652331 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.437819741 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.487951822 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.597670793 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.182583506 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.642019669 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.524312826 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.29007588 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.269712397 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.370201733 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.106193861 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.348096705 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.106589773 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.898171646 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.535508714 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.111336576 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 6.017078478 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.308032429 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.438243615 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.26687066 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.731708117 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.154049402 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.237723645 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.660089335 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.286333741 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.247919347 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.451887628 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.988850968 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.153581741 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.175599229 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.345315043 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.748092732 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.589458175 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.701116599 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.875580677 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.503428775 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.877757026 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.108373859 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.31579398 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.262867142 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.106994484 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.286118921 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.517445563 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.150122486 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.309263091 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.449089196 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.304664848 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.625294732 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.08877867 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.749338011 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.416965028 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.630010345 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.630526191 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.891135097 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.711100509 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.152813625 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.789371275 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.138446466 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.276858053 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.4663036 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.836954695 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.191113859 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.957594254 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.90230694 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.361931411 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.548215725 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.314434835 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.871762231 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.27185371 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.346965353 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.313217571 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.247666441 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.076500756 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.705999265 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.886813072 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.38497339 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.274170753 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.283122272 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.363585505 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.286861345 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.598778721 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.422407683 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.877819373 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.587546593 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.352395797 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.077872584 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.108074673 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.384069102 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.291188514 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.204408785 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.411863688 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.547511655 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.169914153 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.137443618 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.162489935 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.377744717 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 2.851646567 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.821536384 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.457377613 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.81831148 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.714249022 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.142082901 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.879080141 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.315989637 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.476593282 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.521929866 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.02562878 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.54188233 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.428677214 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.260812596 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.07965568 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.286430635 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.111402388 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.193628008 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.880276007 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.406243857 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.302064451 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.95102352 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.739822906 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.107760973 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.130140546 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.828500953 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.383552788 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.307474643 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.106706329 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.702457805 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.521394307 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.268065486 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.09169265 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.872765012 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.079062064 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.315857668 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.175630092 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.269574055 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.931936278 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.310004735 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.766503688 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.65115068 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.190240303 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.298308411 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.077479727 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.931313195 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.129214635 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.80199646 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 1.931271959 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.358572448 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.609239555 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.284441921 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.113394744 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.437402349 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.238636917 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.44876555 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.385943525 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.590255941 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.550668119 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.486732722 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.410286785 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.863403302 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.259720777 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.35171985 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.0788446 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.1291761 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.118930966 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.485082276 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.470814938 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.106916695 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.645227965 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.35759398 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.357992747 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.297176071 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.25983622 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.641194891 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.319785411 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.372215382 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.280522147 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.349582284 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.470397694 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.175442915 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.291551842 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.107714477 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.173374646 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.317185634 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.353763991 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.493380265 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.41852613 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.006046087 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.266099251 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.864595707 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.969388224 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.643528939 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.109234183 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.999061946 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.471102297 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.10828735 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.592707655 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.740477658 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.285844669 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.384262098 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.155993638 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.123862289 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.304172854 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.603255365 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.117899198 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.739370716 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.51906777 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.108888284 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.596012419 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.191960095 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.270082476 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.875278444 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.60982387 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.108235468 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.931636803 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.207701281 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.656950208 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.381591271 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.169777315 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.120492963 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.822387337 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.086742538 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.109231357 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.165868164 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.644151454 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.112931464 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.649526893 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.381606518 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.276819247 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.114096058 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.250694216 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.113966808 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.313493041 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.30121357 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.354960366 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.384647858 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.283550761 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.107724954 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.676987535 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.805513615 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.220106335 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.318252317 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.107895425 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.48719124 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.99839512 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.110992909 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.685250121 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.315924746 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.302961334 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.550980441 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.370761006 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.150603212 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.307547308 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.099935866 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.436993887 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.271528218 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.671373916 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.378022713 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.542653948 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.204079198 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.130891808 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.646123875 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.583617791 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.995015203 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.107800447 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.420553924 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.107661684 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.929414506 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.923876315 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.30671232 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.368211941 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.109172804 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.702997906 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.41479624 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.244906976 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.109553122 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.322432786 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.598437726 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.079187959 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.937216405 seconds)
    (567/608) benchmarking "2d"...
    done (took 1.999086258 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.332655961 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.438477058 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.077750565 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.285588953 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.126846279 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.0892852 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.609083169 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.108220525 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.497144217 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.07884439 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.667289981 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.1227079 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.33213987 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.277890315 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.475087207 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.108377109 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.827887469 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.28080739 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.107508252 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.107699999 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.492668921 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.19588306 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.360393775 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.584173205 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.461150361 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.452441694 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.012339608 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.942539481 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.125947187 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.419026839 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.10759646 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.667165407 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.323334918 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.636133833 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.928895221 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.125561737 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.648835364 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.356605735 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.834431327 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.255618171 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.592362607 seconds)
  done (took 1972.307904724 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.117196731 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.215733343 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.206091022 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.178279369 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.144017216 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.156735527 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.168920337 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.128123505 seconds)
  done (took 50.418743538 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.107057743 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.066727698 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.56225342 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.297147239 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.13753113 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.331348604 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.271244255 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.63271266 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.316125351 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.174641805 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.17408619 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.177596766 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.121201922 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.149215336 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 6.024040673 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.20341103 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.112704795 seconds)
  done (took 91.020709671 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.124760872 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 11.05387896 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.118236252 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.083741794 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.151892705 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.489608324 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.123234175 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.106911228 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.468712945 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.437323885 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.170962773 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.198997259 seconds)
  done (took 85.672567229 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.147306644 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.147306382 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.146946174 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.147474084 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.14716707 seconds)
  done (took 6.840038529 seconds)
done (took 2444.79994455 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.352235279 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.556102548 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.63946111 seconds)
  done (took 4.299103867 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.177487287 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.253204997 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.325097305 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.258555801 seconds)
  done (took 6.14612468 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.385290566 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.589392235 seconds)
  done (took 4.078068822 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.52826233 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.140973404 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.667406907 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.110039089 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.118525511 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.12087012 seconds)
  done (took 19.470287757 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.145137752 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.144063882 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.144638217 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.137596394 seconds)
  done (took 5.683358519 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.106602793 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.12747504 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.117615171 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.11692803 seconds)
  done (took 18.572084147 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.41327616 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.200139682 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.886511697 seconds)
  done (took 5.617099088 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.931005697 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.491715555 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.914690478 seconds)
  done (took 6.440931731 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.070924795 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.039482498 seconds)
  done (took 5.213794646 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.273078206 seconds)
  done (took 2.375951437 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.598610085 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.599765481 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.978661239 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 1.995966617 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.152404672 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.43173528 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.503356185 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.407379543 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.817587575 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.686635125 seconds)
  done (took 18.276608392 seconds)
done (took 107.965911113 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 2.956015645 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.52037002 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.257603313 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.793259477 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.209648559 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.257477644 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.72113153 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.602992927 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.415208702 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.416805387 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.1906872 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.209785944 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.13053623 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.504542488 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.131764336 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.448816928 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.515371395 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 2.967988401 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 3.642089633 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 3.842118768 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.733949974 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.406822612 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.906954002 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.422684255 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.530383635 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.270753643 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.117694217 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.465342037 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 3.866461156 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.119962339 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.284154608 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.0814545 seconds)
  done (took 152.044894151 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.108103396 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.123928878 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.131903168 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.119434103 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 4.827420469 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.12514565 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.118671371 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.118423508 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 4.788003936 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 4.793480263 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.123508442 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 4.82601863 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.125267932 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.118069444 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.126463607 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.118993842 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 4.914174506 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.123656829 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.124364457 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.123115556 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.122291134 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 4.718898657 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.123837181 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 4.724145499 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 4.924626628 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.124261801 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.118639396 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.123321429 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.123307777 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.12326932 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.124143214 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.119488644 seconds)
  done (took 186.568979705 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.108022233 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.122122613 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.123918476 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.119453553 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.122820072 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.123821116 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.122017619 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.118574475 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.121972566 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.121626588 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.120461138 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.122954218 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.122614891 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.11865943 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.122613081 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.119186789 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.121778834 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.122368168 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.122373917 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.1227481 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.122852967 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.126906876 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.118247117 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.133138292 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.11793337 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.12267608 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.119629966 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.122572482 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.121849371 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.122848745 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.12567575 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.118869318 seconds)
  done (took 197.013990491 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.417337848 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.150255414 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.050580659 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 1.873427975 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.016213497 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.144174816 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 1.85941354 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.418714354 seconds)
  done (took 14.048649568 seconds)
done (took 550.79606383 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.813202365 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.065233826 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.294213311 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.377610806 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.752733686 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.413203175 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.374136244 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.566874379 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.865824499 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.605708056 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.617133285 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.33038929 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 1.995590165 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.386527178 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.299696929 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.541984236 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.518360385 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.817595822 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.311770635 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.028340561 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.335621845 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 2.006333127 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.589657476 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.91256155 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.615174505 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.052735918 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.262324915 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.522442057 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.37502938 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.308700919 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.113769961 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.495622559 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.371519669 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.367632125 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.563540735 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.62956301 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.469369924 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.541885211 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.294631603 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.803428198 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.033774087 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.732943584 seconds)
  done (took 75.479575318 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.141358502 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.155595214 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.315449489 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.218031359 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.77974025 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.21669688 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.372316144 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.358177451 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.235475634 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.349077501 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.390602837 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.814173793 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.389450148 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.764658425 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.378118395 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.401700107 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.218582404 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.7411945 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.376491 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.366356722 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.184847719 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.309269766 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.181848583 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.33445134 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.175535931 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.188877258 seconds)
  done (took 36.491868147 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.191448724 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.324682101 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.417218699 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.514470528 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.390626851 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.131800706 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.478607316 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.282268575 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 3.106592119 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.594489188 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.249356638 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.297903821 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.313949558 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.446343459 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.702841047 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.309844959 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.303436355 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.297144314 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.332183367 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.354258832 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.299508505 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.230406609 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.486528027 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.260456383 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.849458849 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.478014373 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.574660224 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.75061124 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.673688975 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.307797354 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.27552855 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.466958199 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.537486691 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.421653718 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.290763976 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.160751576 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.169478086 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.251822798 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.203846122 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.31687048 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.475856517 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.34133702 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.564428396 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.712042231 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.213997894 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.402345938 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.607783582 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.257191633 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.274402599 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.958334645 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.469387487 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 4.160732721 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.302927324 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.335371106 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.267381923 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.574022986 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.352138255 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.409242803 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.31411201 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.874124813 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.226797758 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.562064477 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.334535387 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.216761288 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.486475862 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.34935066 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.315092438 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.544420377 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.564760655 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.615022035 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.732187919 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.231048916 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.180836503 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.247554948 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.330443704 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.644582132 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.613116885 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.426847077 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.556449244 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.470856178 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.692040066 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.609494904 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.133479763 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.829112963 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.2069696 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.15664812 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.23747157 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.472308623 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.464433281 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.655226809 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.719940355 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.431535099 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.600719982 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.536747882 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.590352564 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.548879729 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.145975161 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.168725949 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.40563262 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.72414412 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.238137861 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.347182666 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.837996177 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.666301485 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.469882282 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.410826077 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.57928275 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.217849956 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.577806455 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.143121905 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.343947144 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.530283067 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.41467171 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.590184072 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.142069115 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.690340277 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.274583005 seconds)
  done (took 230.474895627 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.10955622 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.124186183 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.110269885 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.124638301 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.109229205 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.735490474 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.192525202 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.109821037 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.737776147 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.192796796 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.109486254 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.109739907 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.111381189 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.109275616 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.716220988 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.680083233 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 2.944037985 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.109480344 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.110163492 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.121217671 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 2.946953368 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.111932092 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.109528954 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.121356127 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.109376163 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.111545386 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.118735369 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.165015838 seconds)
  done (took 152.573139525 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.167153642 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.578371963 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.215832822 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.267028724 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.214872324 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.183289968 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.686999779 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.31668023 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.246053627 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.183878188 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.183351344 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.398087601 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.426770722 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.781872535 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.307884899 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.268031154 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.831613055 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.31436129 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.183635397 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.179779166 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.331240805 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.53540069 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.509332389 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.45168257 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.328739719 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.445585992 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.251868908 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.173726715 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.296384679 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.67057021 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.195644311 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.614009844 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.325973579 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.178748659 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.684187868 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.520971329 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.764466254 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.738041339 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.365974727 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.141111816 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.141605277 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.419378035 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.480823405 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.224277873 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.175188638 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.833416488 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.194919636 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.593536731 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.217287011 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.137674445 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.273723025 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.288762889 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.51107044 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.150098344 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.349589256 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.298376976 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.683361485 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.159485649 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.240207045 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.476875099 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.155108451 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.670895087 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.663268643 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.238969662 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.195320109 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.027130913 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.258702228 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.704939583 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.798074966 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.225371821 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.511252605 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.363566948 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.153543344 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.445729434 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.347342177 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.613130896 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.765427261 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.311984029 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.27987728 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.262291061 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.459046589 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.168741782 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.728376457 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.279449304 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.154779204 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.671563313 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.562777598 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.149117553 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.166466936 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.279060249 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.329164106 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.386662063 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.451008857 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.245397771 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.069190081 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.434055933 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.520553929 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.189716663 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.306928927 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.167729947 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.577187856 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.358147235 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.159824469 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.500217378 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.572208938 seconds)
  done (took 157.299768496 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.859027727 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.22543689 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.416113511 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.735670965 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.514884119 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 2.625318021 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.444376113 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.249442107 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.437919153 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.394034753 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.399024312 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.290655794 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.854624393 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.925460922 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.227470075 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.39792591 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.246588551 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.773043875 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.479629487 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.184922364 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.4677209 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 1.893299026 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.476324021 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.568297398 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.551958258 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.695623282 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.837021466 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.319347013 seconds)
  done (took 48.610361353 seconds)
done (took 702.03375662 seconds)
SAVING RESULT...
DONE!
