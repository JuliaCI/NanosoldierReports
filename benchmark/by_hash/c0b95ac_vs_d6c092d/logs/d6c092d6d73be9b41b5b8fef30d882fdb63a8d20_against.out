cset: moving following pidspec: 82658
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.780706501 seconds)
loading group "shootout"... done (took 0.796620249 seconds)
loading group "string"... done (took 0.227412083 seconds)
loading group "linalg"... done (took 3.147454204 seconds)
loading group "parallel"... done (took 0.020868194 seconds)
loading group "find"... done (took 1.16772953 seconds)
loading group "tuple"... done (took 0.703463686 seconds)
loading group "union"... done (took 3.026096845 seconds)
loading group "dates"... done (took 0.151744991 seconds)
loading group "micro"... done (took 0.055959443 seconds)
loading group "simd"... done (took 0.357265895 seconds)
loading group "io"... done (took 1.374459085 seconds)
loading group "random"... done (took 2.343593378 seconds)
loading group "problem"... done (took 1.179904295 seconds)
loading group "array"... done (took 4.542107581 seconds)
loading group "misc"... done (took 0.958762544 seconds)
loading group "scalar"... done (took 3.405473854 seconds)
loading group "sort"... done (took 0.301879193 seconds)
loading group "sparse"... done (took 3.532713538 seconds)
loading group "collection"... done (took 5.916293115 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.540465304 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.071737102 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.252470425 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.076275093 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.278188069 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.080028502 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.087596192 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.069879511 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.018979883 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.159284909 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.209945614 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.389554149 seconds)
done (took 4.973956622 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.277699528 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.032790105 seconds)
    (2/2) benchmarking "String"...
    done (took 0.1229609 seconds)
  done (took 0.76797712 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.136242966 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.015263879 seconds)
    (3/3) benchmarking "different"...
    done (took 0.022053323 seconds)
  done (took 0.778088131 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020177361 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.097661046 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.021080382 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.021790818 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.02160741 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.021044349 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.020909732 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.020851191 seconds)
  done (took 0.831265091 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.028230229 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.022610273 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.020651023 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.022062386 seconds)
  done (took 0.698832287 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.021996707 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.08176688 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.019659581 seconds)
    (4/4) benchmarking "different"...
    done (took 0.019518006 seconds)
  done (took 0.74474407 seconds)
done (took 4.738444052 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.194023331 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.766808187 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.980691196 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.178127644 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.35682887 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.301794675 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.07522316 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.23836165 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.145868573 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.031298864 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.177353398 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.039835101 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.516831051 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.448335048 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.028122039 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.143183596 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.566968307 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.038682642 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.068407147 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.158443358 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.039927477 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.038687286 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.043027063 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.026437783 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.074400241 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.135029537 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.571063807 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.066745815 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.026071327 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.134624822 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.028518369 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.030541665 seconds)
  done (took 9.312608891 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.148122549 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.142159654 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.023405997 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.058264004 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.049288503 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.024422009 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.029889903 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.022673916 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.0424127 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.085639082 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.044970893 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.154517383 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.020935365 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.023821419 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.135909917 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.113599305 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.037219339 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.036723357 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.022061483 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.036072535 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.048560741 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.034119274 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.035326687 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.032456455 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.066723119 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.086880424 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.040795072 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.061865802 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.022074272 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.034650198 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.050252202 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.062610503 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.022421049 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.02087868 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.064244715 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.039398375 seconds)
  done (took 2.611485169 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.699609847 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.050129578 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.136814023 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.127777671 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.06230392 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.049245154 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.178260589 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.077571626 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.054963636 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.023612673 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.205367529 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.626320293 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.167315263 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.030255923 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.028166776 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.18016799 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.868729322 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.917464081 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.023362311 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.023502871 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.133838623 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.025871387 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.178230853 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.021423694 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.136897349 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.819470496 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.025535656 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024066086 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.052592555 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.139410651 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.020656508 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.095846824 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.049832576 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.024888055 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.552924874 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.021467502 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.019523709 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.041724556 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.050011082 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.021889304 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.022944674 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.033526092 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.021073822 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.072216353 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.035102421 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.525385552 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.024960509 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.688516785 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.833919527 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.030450754 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.027419597 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.057996716 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.019687463 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.023244631 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.606693419 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.110222805 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.022625207 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.244459285 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.02530806 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.024244992 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.024382968 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.05740846 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.023243951 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.024328543 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.026589158 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.041024818 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.04352842 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.032081902 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.042673551 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.021482163 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.022633701 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.021003302 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.383290091 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.029359982 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.025068335 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.020527241 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.026818784 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022581139 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022148065 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.066972964 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.048934117 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.046740317 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.025982587 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.023093455 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.022231016 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.509454141 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.028457698 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.02486842 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.02395641 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.482475294 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.020154646 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.021975398 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.02363596 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.042990545 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.022472029 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.019366499 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.056260094 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.024100474 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.1249565 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.537569395 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.023193998 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.019597571 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.51475326 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.023780829 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.054843983 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.075777643 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022110016 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.059651159 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.022500335 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.019826499 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.026233408 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.019665903 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.024007902 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.020807786 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.021663217 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.020724074 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.022483348 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.024349535 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022455863 seconds)
  done (took 19.692866708 seconds)
done (took 33.921793874 seconds)
(4/20) benchmarking "parallel"...
done (took 0.743118561 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.209604685 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.048049854 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.019128165 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.161486522 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.043370485 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.133541026 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.174865335 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.125996031 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.045146244 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.044923481 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.045255282 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.180551856 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.191932118 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.046329433 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.119311296 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.192056416 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.046604225 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.019677894 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.045398355 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.046438742 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.046302527 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.019658144 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.045702093 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.046350503 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.117992796 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.046596155 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.01959592 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.12189602 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.047815902 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.122871147 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.047426108 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.046432628 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.047446266 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.121301434 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.048986809 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.121082514 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.019847378 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.048857584 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.048904509 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.049519991 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.048813465 seconds)
  done (took 3.937970902 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.045094605 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.037117326 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.03961806 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.017654673 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.027102507 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.037140421 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.017606571 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.036586124 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.040832998 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.037165032 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.037064116 seconds)
  done (took 1.127437866 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.040002161 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.038241051 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.039549683 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.017571518 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.028850005 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.037984101 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.017506019 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.037461925 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.040299084 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.037954425 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.037959881 seconds)
  done (took 1.069249296 seconds)
done (took 6.807587322 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.152009168 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.119396142 seconds)
  done (took 0.957346924 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.554028038 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.217985208 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.128577184 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.253620943 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.12222093 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.153943176 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.205490653 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.15918713 seconds)
  done (took 6.53559437 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.073666305 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.140062446 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.023672147 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.022223174 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.022422035 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.02258953 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.024156488 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.022822671 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.022061796 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.024671824 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.024261284 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.022305601 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.022993133 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.024310378 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.022437775 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.022637434 seconds)
  done (took 1.373448947 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.028356397 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.025083853 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.026321098 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.016795362 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.027235151 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.026127346 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.027122985 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.027182124 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.026617601 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.026048041 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.02411498 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.026805469 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.025895191 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.024564241 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.02698088 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.016762925 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.02695729 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.026520635 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.028162289 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.027422748 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.026680018 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.024407803 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.028004178 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.025363159 seconds)
  done (took 1.325866915 seconds)
done (took 10.88862709 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.139850492 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.029200073 seconds)
  done (took 0.864435335 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.125841637 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.123956345 seconds)
  done (took 0.956774832 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.028485525 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.015637129 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.032095145 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.023853917 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.015756699 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.015621588 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.031078987 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.015826623 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.015627621 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.015795458 seconds)
  done (took 0.920226369 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.018964251 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.022676321 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.020788373 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.018921316 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.02055173 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.016557819 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.018879006 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.016943723 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.022499294 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.016019834 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.019832422 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.037266433 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.019204963 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.037669466 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.019073306 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.019787033 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.021223015 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.018993572 seconds)
  done (took 1.094904541 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.017312802 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.016589178 seconds)
  done (took 0.744638482 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.020340045 seconds)
    (2/7) benchmarking "second"...
    done (took 0.016653982 seconds)
    (3/7) benchmarking "month"...
    done (took 0.018374328 seconds)
    (4/7) benchmarking "year"...
    done (took 0.018148514 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.016237942 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.015679596 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.016212396 seconds)
  done (took 0.826864543 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.385146145 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.085877633 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.31069442 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.023754648 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.03733906 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.22389245 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.019123327 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.023571421 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.023506928 seconds)
  done (took 1.840950692 seconds)
done (took 7.957419693 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.040080304 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.141341242 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.145185354 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.447779049 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.033352665 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.021922976 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.050739774 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.226682954 seconds)
done (took 1.827846882 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.491184331 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.253134093 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.19206385 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.023441381 seconds)
  done (took 2.18335152 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.310162072 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.138815723 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.030894907 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.022105247 seconds)
  done (took 1.229335592 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.021626368 seconds)
    (2/2) benchmarking "read"...
    done (took 0.026629376 seconds)
  done (took 0.77234023 seconds)
done (took 5.401928316 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.02990617 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.016549491 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.022862821 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.01803341 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.017669894 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.017075466 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.017140461 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.017955967 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.016132373 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.0181513 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.018172593 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018266376 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.01786282 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.017811919 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.017325024 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018121806 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.016169645 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.01786095 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.017847179 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.017852505 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.016149537 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.018079976 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.017340681 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.017864536 seconds)
  done (took 1.148702114 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.035439782 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.020453627 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.021166179 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.020992369 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.021553868 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.021002546 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.02094841 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.020074877 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.02100121 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.01981674 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.021594655 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.021637316 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.01994094 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.021696087 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020032311 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.021680538 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.021261982 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020359288 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.019997536 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.021718223 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.021116226 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020353356 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.021626315 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.021146737 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.021551337 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.021539903 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.020045968 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.020365563 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.021155484 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.021544739 seconds)
  done (took 1.366243724 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.022499784 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.01476449 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.015054856 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.024839179 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.014670588 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.014873259 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.015266897 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.01449476 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.014851128 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.01568475 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.015181962 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.014591366 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.015330282 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.014553051 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.014610205 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.015153874 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.019598677 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.034980863 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.01495939 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.014686406 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.01922776 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.014897281 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.014699176 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.014742888 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.01515462 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.014954291 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.014495926 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.015088823 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.014688481 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.015316525 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.014714183 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.01912242 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.020710902 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.015152581 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.024778149 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.019684161 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.015154384 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.021230269 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.015645471 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.014596738 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.014552103 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.014562086 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.014729527 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.014712566 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.024986891 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.014918933 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.015825091 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.015183602 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.014867244 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.01449414 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.014688644 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.016220456 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.020360986 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.016052871 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.014747368 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.015975244 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.014707739 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.015461715 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.014867947 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.014705759 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.014685952 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.018723664 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.016141466 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.015518916 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.035784323 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.01614488 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.025114326 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.014850232 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.015280051 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.018843817 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.015370279 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.033857598 seconds)
  done (took 1.957154293 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.0274605 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.025334959 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.033622616 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.024404666 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018253095 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.015546655 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.018566016 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015652056 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.024794165 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.019217869 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015684003 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.018847671 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.024886858 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.019224677 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.016733504 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.024684717 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.019256928 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.018449338 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.015635158 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.019159634 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.016729675 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.018858628 seconds)
  done (took 1.18144288 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.099804437 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.020906368 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.062526128 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.024067363 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.022929502 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.024250869 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.020901264 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.020906654 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.02105883 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.021519008 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.021493593 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021040426 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.022951927 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.021503705 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.02149346 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.021250441 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.021033703 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.021308815 seconds)
  done (took 1.235704577 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.033153964 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.020784694 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.047482343 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.020417882 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.020506416 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.02013812 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.023788353 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.024065521 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.020272415 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.020748684 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.024359644 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020397596 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.020361692 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.02071289 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.02038322 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.020749686 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.020391663 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020697637 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.024311648 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.024224117 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.024217566 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.024302604 seconds)
  done (took 1.242977043 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.034544754 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.01993 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.035899477 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.021340494 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.015176358 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.015177336 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.021371107 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.019964238 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.021154034 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.019453541 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.02000492 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.015242587 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.02215708 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.020211572 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.022282856 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.020168611 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.019787428 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.020150341 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.019777613 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.015289572 seconds)
  done (took 1.145138183 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.129390903 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.017246534 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.017055818 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.02147409 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.016937356 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.016937458 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.021602227 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.017148112 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.017133585 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.0407935 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.017194785 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.017131718 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.021713009 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.01996239 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.017089441 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.021659121 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.021654568 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.021607038 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.017148469 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.01719314 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.04070182 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.017295042 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.022112248 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.017347153 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.017311046 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.017309505 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.017288443 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.020246841 seconds)
  done (took 1.40340312 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.037217638 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.017626613 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.015444562 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.019334374 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.019244733 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.03133922 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.019221266 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.019022548 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.017550725 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.015406868 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.017575798 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.017540181 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.017559659 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.027667927 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.017436282 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.017569696 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.027664296 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.019342942 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.031614157 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.03145246 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.017675179 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.027564112 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.017611147 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.015475671 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.031542008 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.01768375 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.019641556 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.02046067 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.017822238 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.01557646 seconds)
  done (took 1.368979655 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.029120106 seconds)
    (2/2) benchmarking "in"...
    done (took 0.025936549 seconds)
  done (took 0.784409735 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.018184228 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.032852536 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.014601653 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.027558985 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.023299158 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.018799874 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.023455301 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.023243237 seconds)
  done (took 0.905845609 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.124071653 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.147181483 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.016600468 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.016774205 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.121508476 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.082795627 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.132109868 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.028355634 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.030148534 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.019547807 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.016589234 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.132676104 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.01618718 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.029733102 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.01763624 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.026064995 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023712587 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.034847632 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.029533976 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.015349371 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.029104095 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.016970318 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.016185156 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.017171372 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.017428699 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.023316321 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.032422715 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.028806118 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.024770523 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.014627637 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.035257858 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.015457532 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.016190858 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.024856237 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.124353139 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.015766569 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.053135186 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.015658364 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.02007356 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.015351406 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.027635146 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.036484679 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.02983206 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.033613608 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.016979557 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.017416442 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.015375951 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.01723354 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.019684407 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.024881021 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.015685427 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023061018 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.015259278 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.017034843 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.02619774 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.015747577 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.020446907 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.024918169 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.029377065 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.026169199 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.027915746 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.031116775 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.024451389 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.024315597 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.016267486 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.035677548 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.017357771 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.028974187 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.030598029 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.016795573 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.028871309 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.015522387 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.014719668 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.01565485 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.04984468 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.017047577 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.016490346 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.015668241 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.015833411 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.017027391 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.025366837 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020508308 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023046948 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.018752754 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.032379586 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.024950506 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.015480551 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.02314941 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.034169477 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.019814156 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.015703781 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.033004338 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.019763184 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.015528407 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.03385759 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.026228774 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.01721867 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.016397539 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.01971184 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.029421793 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.017046229 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.014785591 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.024270655 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.017246999 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.125359967 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.021092068 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024329772 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.015928891 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.026520514 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.022800723 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.017700559 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.015169788 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.021053554 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.016923192 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.015130749 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.025755428 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.016106141 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.031514446 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.023133331 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.030936182 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.031434381 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.026972489 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.032535162 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.015897294 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.015112506 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.035011243 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.025612245 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.017376582 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.034753616 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.015930852 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.026786251 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.016129049 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.017557831 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.025582233 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.015355299 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.017798204 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.016263686 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.022706704 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.017629403 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.017800756 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.02227451 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.024744547 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.028702356 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.017169031 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.02504999 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.016356468 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.032586932 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.026206161 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.021274224 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.01984895 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.017073665 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.028743047 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.023364108 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.025590584 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.016283331 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.017118705 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.01625029 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.027546408 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.026100639 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.018102412 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.026222507 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.021341153 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.017121718 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.016387074 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.01731627 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.020275188 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019992164 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.01694111 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024158222 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.025261916 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.031043759 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.024427401 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.025464598 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.015687538 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.016166954 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.018219717 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.01615957 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.021200912 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.025751677 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.032322842 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.02842966 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.038137327 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.016520842 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.026218535 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.018088225 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.033985659 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.029871466 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.01739645 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021561654 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.015416315 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.018253548 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.025939944 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028197576 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.031086872 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.031660788 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.021412522 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.021310519 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.01626525 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.031958168 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.016762886 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.025002419 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.025871613 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.023096863 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.016220212 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.018323796 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.025687879 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.021349593 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.017477671 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.032731618 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.024679665 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.016309217 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.031063032 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.016675219 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.027486186 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.016254502 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.020284396 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.021976395 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.018492548 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.026221674 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.032271987 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.015466652 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.016774118 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.032573436 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.018377377 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.018332005 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.024661793 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.032080935 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.021445065 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.02449555 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.027449335 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.027090695 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.168452097 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.02608167 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.016286631 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.0248219 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.018160529 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.027080856 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.015347093 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.033610153 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.014632896 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.030735354 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.015978049 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.026322005 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.015672838 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.024741385 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.015972667 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.03232201 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.016586427 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.015942964 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.026813585 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.014489602 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.024421323 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.015084855 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.020895305 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.022312894 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.024475148 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.016698825 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.024595246 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.016607575 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.024264587 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.020352261 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.023814815 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.024293189 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.020181546 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.014962469 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.023459653 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.025964303 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.023345633 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.016439162 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.016436377 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.015526894 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.024434641 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.016457526 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.016003408 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.023335035 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.020329108 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.021373851 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.016431835 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.016591313 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.016451249 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.02353255 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.02447109 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.032941187 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.02371833 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.022518501 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.024247903 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.014963975 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.030551692 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.014940127 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.022501484 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.014397588 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.02125813 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.024245303 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.015276251 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.03394558 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.016405778 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.022885603 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.026929969 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.023643146 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.019313769 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.03274046 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.017925834 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.023381499 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.022974175 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.020111342 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.022169778 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.016483997 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.023530053 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.024511748 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.025509152 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.015766148 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.022556341 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024100745 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.016562257 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.023059495 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.016451281 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.023608204 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.016805391 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.014646712 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.020322295 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.026560399 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.020676775 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.020955491 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.015658258 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.01461091 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.015626859 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.022597351 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.020528245 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.024164049 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.031012836 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.014662715 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.016180547 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.015288564 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.019611701 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.033838945 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.02517138 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.023546687 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.020717591 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.014965547 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.016915253 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.017095227 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.015568241 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.018549974 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.01498896 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.015480081 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.02631436 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.017135928 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.020565939 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.015800263 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.016714667 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.025588376 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.019934549 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.015988592 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.022785123 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.015430964 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.021219708 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.015061227 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.01712197 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.020615282 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.015316854 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.019787979 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.026060217 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.032356356 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.022737299 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.024662429 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.016493472 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.023644618 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.031285573 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.024159007 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016543067 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.024976527 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.015267742 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.034572116 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.025002554 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.024246076 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.025466018 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.016492797 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.032785184 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.020685719 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.026223806 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.031883938 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.017026776 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.02492515 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.015976708 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.032142669 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.020960901 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.015941762 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.024759075 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023930423 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.022447124 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.028118456 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.016947248 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.024786576 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.021555044 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.020033714 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.017874919 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.017828135 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.025003491 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.032604364 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.016994798 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.022215299 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.024220262 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.024573891 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.021056635 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.028485028 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.024375911 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.017106521 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.018031574 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.020121467 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.016919981 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.028431726 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016433033 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.021029448 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.020993917 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.015910033 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.02317607 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.032889081 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.025546571 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.025932555 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.016186998 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.015564873 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.034900289 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.020298846 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.019857155 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.024466444 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.026228546 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.02891322 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.025732395 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.0336423 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.016725851 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.022534532 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028755743 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.017244573 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.016033864 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.020221286 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.017930582 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.025536814 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.026211372 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.023644645 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.018216238 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.023519273 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.029947326 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.017770427 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.021353948 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.02298832 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.017110227 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.027026308 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.024497698 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.024959383 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.017879392 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.01613306 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.019980771 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.025132975 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.023793717 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.025427631 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.017215252 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.025557384 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.030863116 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.023829903 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.019909192 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.016095611 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.01981705 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.025460345 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.023280942 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.016251954 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.021372204 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.020254285 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.025860459 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.025950063 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.021250882 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.01618498 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.033888612 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.025072127 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.025535234 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.018155161 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.018337734 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.016674079 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.016245856 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.028010693 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.016266433 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.018139335 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.021523747 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.018291112 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.035080336 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.024652462 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.032644845 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.017343489 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.021284608 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.016286404 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.026169068 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.021345974 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.016356723 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.026984101 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.01571957 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.03245232 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.028741858 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.02454975 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.016352804 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.021965492 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.025713587 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.031969849 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.026351851 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.025441132 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.02021397 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.026284167 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.165774565 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.026468552 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.015229064 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.014555391 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.025328003 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.02400087 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.027373606 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.015163963 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.025286333 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.016792805 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.023599454 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.023758592 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.016595977 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.016594298 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.016553017 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.024712799 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.020355126 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.024417219 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.020453199 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.032093374 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.015951782 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.026102469 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.024205042 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.025839403 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.029168473 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.0270433 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.023590006 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.015470913 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.022623056 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.023526191 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.01600852 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.020738507 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.017909218 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.036721429 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.016530638 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.016469698 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.028843716 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.021814674 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.015121232 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.021659071 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.020284749 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.025062965 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.01586104 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.025477968 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.019679847 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.015721436 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.020205468 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.020247448 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.014351614 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.014961836 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.015310375 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.024662286 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.019955225 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.015130717 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.033748559 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.016242579 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.023891193 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.02581496 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.022028285 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.016296126 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.014343454 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.015795339 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.028363241 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.030463906 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.019154093 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.02370811 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.016535852 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.024218348 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.014392008 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.023768239 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.022962476 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.023566321 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.01497745 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.015248139 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.029969695 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.030479634 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.020210216 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.031475474 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.023996297 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.016499461 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.036545883 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.024018061 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.015867756 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.025728153 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016929665 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.014689451 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.014520417 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.016637147 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.026796996 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.015282326 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.017493896 seconds)
  done (took 15.019033321 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.058848463 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.016399115 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.01496242 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.014979862 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.021852025 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.016143259 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.014940948 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.016118764 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.0160969 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.017145411 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.01510774 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.015062523 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.020505283 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.029998219 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.022859859 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.018675944 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.015076572 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.016341863 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.015073988 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.016339572 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.021088121 seconds)
  done (took 1.197130269 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.019476894 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.019384916 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.018812525 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.019022275 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018254165 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.015266542 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.018584733 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015225989 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.018897651 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.015520426 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.019189161 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015346412 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.015704079 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.015711947 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.01571238 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.01673266 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.019259726 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.01840652 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.015328246 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.018753428 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.016787154 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.018799074 seconds)
  done (took 1.151138511 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.017922936 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.01581824 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.023796034 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.014665143 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.014581872 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.017435317 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.014567055 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.019518032 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.019477584 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.019453625 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.023634269 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.015347228 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.014515847 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.02078079 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.014476328 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.015237222 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.058718727 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.015475882 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.015584684 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.014851599 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.017019728 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.02398466 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.01489678 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.015069462 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.019545335 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.017539838 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.014820961 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.017032133 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.015337655 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.019585117 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.015549555 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.014619373 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.023840851 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.023043856 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.019604027 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.019604077 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.01603797 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.015479831 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.014833138 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.014808782 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.023187536 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.015989279 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.015133061 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.015954671 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.023949183 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.015019736 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.014741825 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.023955077 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.014860446 seconds)
  done (took 1.66818855 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.028090236 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.067371461 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.021064281 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.050520075 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.026656381 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.020325872 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.020886981 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.053467539 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.016125813 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.016570559 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.027691718 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.027815138 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.01762682 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.01882414 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.02213282 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.017488403 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.018156864 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.016853761 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.019819597 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.017184563 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.019998371 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.022243456 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.027318232 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.027676843 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.018643333 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.017130219 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.017374677 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.018955891 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.027365126 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.020526988 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.019115869 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.019625162 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.027787194 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.022733673 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.017373232 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.017474649 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.028323284 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.017970983 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.017770981 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.016261091 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.017481249 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.01892641 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.022302658 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.028497986 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.01800467 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.022968177 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.018017763 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.016007614 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.028120191 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.017859657 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.021381552 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.028909955 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.018948229 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.018175869 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.019327905 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.028107312 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.018096989 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.016783481 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.018155043 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.027815631 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.01636245 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.018771773 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.028624732 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.017512451 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.02098474 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.028745876 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.022902456 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.01883722 seconds)
  done (took 2.432549329 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.024774315 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.049993265 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.028787062 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.028765025 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.024366404 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.024352465 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.024525791 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.02459751 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.02449669 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.027288623 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.024661553 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.163222649 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.021802246 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.026321145 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.024786523 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.024829955 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.024837206 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.024737702 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.025009636 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.024875707 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.025080508 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.029590678 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.024986794 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.029642514 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.029381789 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.021942778 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.024851631 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.02494876 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.029808357 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.024970923 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.029411314 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.025037436 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.025054207 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.029771446 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.029445385 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.025090965 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.015713157 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.024922763 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.025133209 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.025012676 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.021770568 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.030012674 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.025126891 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.021865042 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.0254259 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.02515408 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.030183151 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.029823376 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.027024335 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.028281627 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.025296072 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.030211898 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.025107077 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.025416248 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.030445653 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.033450023 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.030314317 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.030388867 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.025506128 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.030359384 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.030482896 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.033865753 seconds)
  done (took 2.586347746 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.030192194 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.020854078 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.033502038 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.014839266 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.014761097 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.02367684 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.014746556 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.014755057 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.020771775 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.020733318 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.022145754 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.023951908 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.025706983 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.022181052 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.023949124 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.025761625 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.023902539 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.023958092 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020763893 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.023940126 seconds)
  done (took 1.232515984 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.018713106 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.020372289 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.015639114 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.030908551 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.01558344 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.022769305 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.015556577 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015565593 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.015519578 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015539939 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.020083392 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.020083165 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.015665948 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.023523422 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.019112078 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.023125137 seconds)
  done (took 1.080256839 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.020059401 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.023935575 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.124662562 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.016119418 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.017888983 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.01544943 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.016278377 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.015274266 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.01755593 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.028894856 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.016270607 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.018385013 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.016415275 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.015032944 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.015674575 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.01839187 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.01753737 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.016442666 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.016380096 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.125752118 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.024561868 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.016895631 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.018435819 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.016988018 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.018258695 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.024518446 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.017829794 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.018268616 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.016495685 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.018611082 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.018366457 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.027100099 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.018234242 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.017021579 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.015187991 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.016070849 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.016508762 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.018624722 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.018631165 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.016594752 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.015390561 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.018311597 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.016592765 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.016948552 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.01771845 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.018648622 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.017755749 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.026304013 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.016386164 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.01831228 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.016524197 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.017658781 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.016974491 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.027608894 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.018628762 seconds)
  done (took 1.997466241 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.034159498 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.020465743 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.014764303 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.014755895 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.020021854 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.020676238 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.020128324 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.020202606 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.020649932 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.014699833 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.020705181 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.019714344 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.020663523 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.020380476 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.020845083 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020422285 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.014753869 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.020567525 seconds)
  done (took 1.141819083 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.023996042 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.020431607 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.020555221 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.016634357 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.016675871 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.020535852 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.015123843 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.016199789 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.016214325 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.016716924 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.016784181 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.016382334 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016362457 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.01634246 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.020272253 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.016753312 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.016323045 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.015344563 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.01676186 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.015188025 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.020815789 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.015359067 seconds)
  done (took 1.159806113 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.186676172 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.146019782 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.038770973 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.034570967 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.026461103 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.050956604 seconds)
  done (took 1.258192682 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.050690079 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.052336475 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.020108125 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.020133246 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024193031 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022463104 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022386205 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022573659 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025586822 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028387589 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022844019 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026018949 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.02581847 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027506163 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024369294 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024410529 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022896922 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022821189 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.020284528 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.030271165 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023027925 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02639171 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023265094 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023000087 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023275168 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.028030208 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.02634217 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.028937653 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022999764 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.026535113 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02483266 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023199863 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026595097 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028931112 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.020502987 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026320498 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023239112 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.030782779 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024772762 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02801916 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.020368439 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.0248844 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026359725 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.026179408 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.026811379 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023529419 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026329217 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023386463 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02350154 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.034871258 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.025226943 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028286821 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02513404 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02695671 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026724978 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.03481305 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029410535 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028429819 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025211932 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029447596 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028609136 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025428535 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028625543 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.029976196 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025512182 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028797064 seconds)
  done (took 2.528595024 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.059140147 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.020512614 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.022769752 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028002774 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026899822 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022545769 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022826991 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022868414 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022846065 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.020541022 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.058449965 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023030166 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027452113 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027467769 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023006462 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022805945 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022925165 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.143324417 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.021344436 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.034032151 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023206913 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.027996053 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027975756 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027774416 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028929318 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024933065 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023303753 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023218154 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023181421 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023110416 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026067154 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023288958 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.0279742 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.020696499 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027868476 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023344636 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023159071 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026053271 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023187062 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024935795 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.028003702 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.030885119 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023411169 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023313758 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.029420142 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023365382 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023399385 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02089033 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023449963 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.020903346 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.029291225 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029247013 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029268046 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028340191 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023539022 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023500533 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023444964 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023361812 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023563059 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.025185146 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.028247444 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02332311 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.035219149 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023663866 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02365404 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02872601 seconds)
  done (took 2.634572848 seconds)
done (took 51.545457448 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.205635629 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.176627517 seconds)
  done (took 1.14751567 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.136211948 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.13357931 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.162050569 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.023505928 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.081199277 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.173664509 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.1253675 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.026095962 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.023850301 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.025351572 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.023488005 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.025023216 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.025261441 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.023321661 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.086420801 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.02602989 seconds)
  done (took 1.907507842 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.074874519 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.239435539 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.058748114 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.022558729 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.105436783 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.028872009 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.024270547 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.028221469 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.028712752 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.022800868 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.071464201 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.035742927 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.027363594 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.028378245 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.024269506 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.027351899 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.028215732 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.028832782 seconds)
  done (took 1.689986108 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.080400926 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.033182355 seconds)
  done (took 0.898191505 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.125008849 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.062213646 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.10360738 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.309087334 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.094717257 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.096641757 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.100339969 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.095196688 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.069277579 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.093226925 seconds)
  done (took 1.927277832 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.06084908 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.057154397 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.285445376 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.054901033 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.034250175 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.029461465 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.029124527 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.030880458 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.029473304 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.028950511 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.07400588 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.027516493 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.024232988 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.071087252 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.050134122 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.059964222 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.023440777 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.030063163 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.032173992 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.023345243 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.028087627 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.031118334 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.132714823 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.030614558 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.052215803 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.027692532 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.029377159 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.028567581 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.02849776 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.030489595 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.031075061 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.0542263 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.030466021 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.038654882 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.028705011 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.050100032 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.024291011 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.051073513 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.027077099 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.024308187 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.027660511 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.031156509 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.024780267 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.030521915 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.029818226 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.030139502 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.031516557 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.023564429 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.029867489 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.027318395 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.024552123 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.028749791 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.02861111 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.029707713 seconds)
  done (took 3.02842499 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.078066283 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.066461933 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023979779 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.073793915 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.064798418 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023922477 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.080128633 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.060165116 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.078725949 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023534223 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023230416 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.023162609 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.030871303 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.034922086 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.076082604 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.069291764 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.025243541 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.023811624 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.068388692 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.068988314 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.022806399 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.080086607 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.071127557 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.068045062 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.022477178 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.024060102 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.022760999 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.023362631 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.031610405 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.03124608 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.023153729 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.033923057 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.03491365 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.030613376 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022471261 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.022841477 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022762381 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.031559136 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.033055981 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.032853156 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.029874236 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.02248451 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.022818999 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.023354405 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023843718 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.022415861 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.032796243 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.030719033 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.032754065 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.02327987 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.023308512 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.022720944 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.02361703 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.030310117 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.029348594 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.030733528 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.033813552 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.023201485 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023186541 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.024614829 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.034802126 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.0316377 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.031538252 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.024152231 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.032755169 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.023092092 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.033945773 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.03686059 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.023024605 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.023581945 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.023170816 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.023148182 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.023541333 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.030016011 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.030005888 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023609824 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.023500666 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022965981 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.031878075 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.030296526 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022982246 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.032285662 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.022661685 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023187873 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023626467 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.023831779 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.033314452 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.031792924 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.023731465 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.02338631 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.023248402 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023305236 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.022518947 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.032913241 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.032266761 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.032623391 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.034621694 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.024267117 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.035305163 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.032901977 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.024304433 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.03176151 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.023775901 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024148907 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.024064577 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.031658663 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.031340017 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.032979285 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023735802 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.023447429 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.032858749 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.03507621 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.023585366 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.03127053 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.034024894 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.031851476 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.023043602 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.034511104 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023677092 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.034625165 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023928563 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.034643858 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.024069967 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.032496502 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.023955044 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.023182054 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.023857041 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.035939232 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024976383 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024182329 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024261132 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.023805238 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.032407461 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.036749894 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.024487303 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.03276926 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.032666286 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.024408058 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.034903784 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024033366 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.03497923 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.02401864 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.02429715 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023176712 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.037022268 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023788954 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.024166961 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.02385709 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.03452853 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023875969 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.03453513 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.031752856 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.02337316 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.035845403 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.034191838 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.031947226 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.034886584 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.024678851 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.024042202 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.023773507 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.023999215 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.035161167 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.036672652 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.025298322 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.024368443 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.03157607 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.035396568 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.023413249 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.031946275 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.031786676 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.032236565 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.024168286 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.166791613 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.032870037 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.033566641 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.029356541 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.031738991 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.030173492 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.022891113 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.028954628 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.03176654 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022910015 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.035940795 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.022793309 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.0325263 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.031888017 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.028301172 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.031665977 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.032772106 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.03150003 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.031253815 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.033211398 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022417523 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.022699278 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.029046915 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.022774574 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.022857178 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.028735932 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.023181321 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.023315334 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.035374094 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022961456 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.032100131 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.022372777 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.02979579 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.022278374 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023176962 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.033747527 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022677045 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023189485 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.029223006 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.022717872 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.028840364 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.031746259 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.028843676 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.022561555 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.023082004 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.03233558 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.031591845 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022609607 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.022523798 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023038994 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.03129366 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.030842219 seconds)
  done (took 7.7994501 seconds)
done (took 19.18964691 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.15266002 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.071434461 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.153970416 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.09036312 seconds)
  done (took 1.247992629 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.056178719 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.01928151 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.139432858 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.151415499 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.019444139 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.133637965 seconds)
  done (took 1.318468656 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.211522173 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.137487416 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.140278517 seconds)
  done (took 1.290497998 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.137758096 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.282267431 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.554812826 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.132265662 seconds)
  done (took 1.916120059 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.171539936 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.164082434 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.030793614 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.180040458 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.037841418 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.015784036 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.102766985 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.022296596 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.052250571 seconds)
  done (took 1.6377615 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.096057574 seconds)
done (took 8.310147831 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.180763856 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.137663936 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.032734112 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.026688773 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.131586185 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.129491147 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.139379415 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.029127368 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.129946268 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.302645502 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.160847462 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.047517099 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.154675976 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.042928449 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.257339659 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.030920221 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.028656579 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.024176226 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.144135963 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.127104538 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.238029308 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.027826751 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.093272802 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.030030304 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.104063985 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.077747028 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.167616824 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.288091799 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.271980083 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.030394087 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.126975553 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.042275151 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.119808313 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.131459387 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.133068157 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.04862015 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.019888921 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.240622369 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.11149768 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.304095963 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.151611174 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.026434369 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.142110889 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.024528657 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.019113321 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.141558007 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.032957404 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.025728776 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.043535098 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.025873025 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.041487083 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.026291327 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.141517225 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.02333109 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.092498588 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.138895023 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.16361856 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.09856028 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.025414184 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.038757499 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.029253511 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.153023952 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.038653654 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.025240563 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.031820114 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.019793967 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.137030473 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.03928576 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.020229134 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.030231276 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.028173057 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.114777938 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.155129296 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.064593254 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.031617561 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.11899391 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.095810289 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.048016912 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.049005133 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.029467386 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.019358861 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.168438571 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.025128107 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.038189029 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.026030672 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.052766181 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.019711268 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.035322702 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.157005259 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.151280267 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.08719383 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.020731029 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.23455952 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.022058135 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.046195038 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.02093315 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.020300548 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.167263807 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.020187997 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.020356712 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.030321885 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.028569447 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.022022439 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.157300757 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.105418481 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.027893799 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.026703675 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.021013066 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.025619633 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.021355692 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.02103664 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.020444309 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.095199739 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.035638807 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.019699028 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.108376707 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.129150838 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.031278883 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.039436745 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.088714752 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.023131885 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.029270742 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.027659792 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.126747563 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.028077994 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.137032625 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.021611695 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.044437303 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.12141562 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.095314101 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.107450926 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.020104146 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.157488543 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.030524021 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.019654403 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.027676871 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.049606177 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.029903865 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.035528189 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.028102951 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.158017589 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.030954504 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.025442484 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.120889361 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.01957552 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.112933893 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.09560586 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.131382933 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.025670949 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.030548596 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.094382156 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.045096609 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.050481376 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.044572932 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.025266928 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.020381149 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.020017775 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.034946098 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.019418284 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.020303643 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.035953751 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.026573832 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.020001811 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.247655184 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.030507706 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.024405951 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.266661237 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.033038848 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.102089654 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.042697591 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.020485315 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.10686317 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.022096619 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.041235897 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.08280189 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.020617272 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.097196989 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.021112359 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.020332388 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.02774895 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.022030315 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.029308234 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.034455043 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.021054792 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.035150954 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.027899523 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.020359269 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.106375733 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.022157673 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.171782943 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.105995364 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.118855923 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.020602498 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.038794648 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.02006502 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.136622295 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.020409312 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.069179704 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.117164803 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.037495116 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.041166828 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.021572144 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.095543705 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.036173437 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.020147646 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.102924506 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.131224353 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.102064966 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.027755281 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.249866113 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.02950888 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.021070801 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.027630316 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.028541656 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.020936004 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.097633737 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.024786691 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.019753852 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.020000035 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.022075784 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.019372967 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.046949876 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.019558671 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.027765935 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.020003478 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.022721783 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.022134886 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.019392156 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.027928274 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.09731384 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.130865355 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.025801367 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.040174722 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.032856451 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.03125278 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.068000071 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.026703081 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.142588828 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.019517658 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.029532617 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.042839923 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.019723499 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.025023779 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.020134321 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.039782486 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.023295756 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.021764 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.028582109 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.020351851 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.020495878 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.020146218 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.020384491 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.028443899 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.021670509 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.019605288 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.01958571 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.020202926 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.024544699 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.025308497 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.030834376 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.040108167 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.476835986 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.022272539 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.022214995 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.020192557 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.020052033 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.020399649 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.021714885 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.020020967 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.022027265 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.020334463 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.019591607 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.049173847 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.025058229 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.020867854 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.042647781 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.020119247 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.02948736 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.128716511 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.036800832 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.024949886 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.019387862 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.26881366 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.111342338 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.043136688 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.041257707 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.353046088 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.032121286 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.020392185 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.020345404 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.019082564 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.047015424 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.024358604 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.020194328 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.018975204 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.019287769 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.067127123 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.027845278 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.019335055 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.027900149 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.019474726 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.01986922 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.047977848 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.020857656 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.01959335 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.038888628 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.032458567 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.097848267 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.031041524 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.022307174 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.06985787 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.018834633 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.019466131 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.019953617 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.112634915 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.032286515 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.020765362 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.019546396 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.026854021 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.028310522 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.072065731 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.025406153 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.022591099 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.027431442 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.018834827 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.019957535 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.044752856 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.047972609 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.020745681 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.0230853 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.019427488 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.019980251 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.093760274 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.027267192 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.023977274 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.103390493 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.021529649 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.027282757 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.018861313 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.475805323 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.024397725 seconds)
  done (took 22.221731434 seconds)
done (took 23.04016716 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.165615826 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.034425039 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.033350507 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.028616831 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.032581963 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.032498411 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.033707328 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.029424386 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.032484228 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.03188935 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.14244923 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.019546731 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.027402337 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.035040249 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.028617137 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.035978564 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.03232346 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.035300271 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.020425888 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.035554522 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.030579496 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.033168571 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.028782433 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.034976045 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.020364292 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.028528 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.162891702 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.038793965 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.023387498 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.029682489 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.029028857 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.033879033 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.02769719 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.027176927 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.029484013 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.025199652 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.030188913 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.026368155 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.157677049 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.025358257 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.020357485 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.032876318 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.027066329 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.027880336 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.028538316 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.032008104 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.025190978 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.033697198 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.019578808 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.032941224 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.157303118 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.02449331 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.023401255 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.02849743 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.025186864 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.029302574 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.02323517 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.031754154 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.024988651 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.03230423 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.027888131 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.027845842 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.019670149 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.028467944 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.027172901 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.027378889 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.018641196 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024513861 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.019665794 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.019645723 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.018985784 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.028410505 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.0265765 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.024724319 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.019021349 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.019694422 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.019072889 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.032173712 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.026824325 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.028675263 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.020012635 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.025088767 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.024784063 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.020163795 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.02444005 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.03171415 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.019093206 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.02013365 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.019042202 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.031434587 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.026207536 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.01963647 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.031669784 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.024325181 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.024069701 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.019676778 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.019076028 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.024181461 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.02777272 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.019640759 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.018661676 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024295448 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.024814825 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.028585699 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.020068032 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.024219959 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.024081722 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.018769012 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.028340021 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.026961489 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.028825074 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.032615194 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.028351613 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.031014225 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.02009774 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.018573826 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.029489277 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.019906534 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024444339 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.027707992 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.024971133 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.027620175 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.02014118 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.019000932 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024244669 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.025627571 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.02001516 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.020078694 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.019967127 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.02862416 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.027005616 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.018714715 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.019559396 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.028533137 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.028367411 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.019138782 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.019026575 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.02842409 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.020119156 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.025692981 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.025081492 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.028772945 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.01944605 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.020103932 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.019018986 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.019450717 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.019158592 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.025070066 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.024506631 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.020290161 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.028663872 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.027065682 seconds)
done (took 5.592493036 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.035250651 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.063370271 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.175570195 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.13850124 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.033044688 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.020830309 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.024644744 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.040201423 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.023424164 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.045467088 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.045386675 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.04179344 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.162549763 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.018876513 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.020001133 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.020799103 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.018405148 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.032267363 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.144481946 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.04409445 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.062776685 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.019745979 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.036797815 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.040294188 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.033224955 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.039159675 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.021280049 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.020848326 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.022855166 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.037698453 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.046343211 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.019784305 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.021113373 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.039829838 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.036442416 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.02921647 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.020875736 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.027071162 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.020907793 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.01997106 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.021976433 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.038661295 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.027240292 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.027482355 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.021154391 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.020620625 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.020501548 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.028179498 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.034534868 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.026539215 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.032981876 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.037295334 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.022039162 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.020430217 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.018720023 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.027890307 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.020408561 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.020601188 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.020918749 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.019774191 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.020850806 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.023010804 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.026082838 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.030967502 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.024232377 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.027848381 seconds)
  done (took 3.358286974 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.039490431 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.04882742 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.033996339 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.034199037 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.019544739 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.020233243 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.020194994 seconds)
  done (took 1.181701528 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.067832253 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.136220397 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.143809612 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.144578495 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.15641146 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.142863339 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.03315887 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.050119198 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.019743283 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.157239766 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.153499275 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.14894508 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.024301046 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.03311134 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.053368411 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.15207126 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.033478879 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.027418455 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.14354774 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.149839318 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.025342486 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.051265882 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.032496008 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.021434213 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.146952234 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.139883815 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.024025088 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.021453049 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.02320303 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.02054084 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020459758 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.043652001 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.139600032 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.035717712 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.02148128 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.01959241 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.136836064 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021747396 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.139630433 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.028129681 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.139507362 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.023088124 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.023037416 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.020732732 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.021898534 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.143376351 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.021782968 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.020616023 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.020228737 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.141836743 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.02015042 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.140083458 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.023458162 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.025902942 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.027676042 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.026961113 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.027385051 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.021009446 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.143737891 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.030631437 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.022400348 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.152184808 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.151385409 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.140854233 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.151451676 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.029633466 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.140883762 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.14019184 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.020626448 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.028661057 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.021105206 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.152098027 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.024117922 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.023044663 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.02572546 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.02764048 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.156154655 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.155656414 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.155864322 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.034802195 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.023286923 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.020737238 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.153071006 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.156503565 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.026519646 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020889412 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.0218831 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.037094857 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.046093626 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.023073904 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.026015129 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.021036101 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.031175653 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.023524222 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.023543938 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.153070199 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.021423171 seconds)
  done (took 7.682735524 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.027899275 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.021333552 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.020741356 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.021155612 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.021331437 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.021168075 seconds)
  done (took 1.180231543 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.047827916 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.021503186 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.033149653 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.021302168 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.043083464 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.140295408 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.140164918 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022685744 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.037074482 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.032922975 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.140801365 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.144907131 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.14354039 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.022430576 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.141393982 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.032900164 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.142696482 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.02627122 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.032159654 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022656674 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.035039759 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.022272119 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022539184 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.151492413 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.023439053 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.032554772 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.030561929 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.03243335 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.032009899 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.022605431 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.02223218 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.023170271 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.028194499 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.022536636 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.14448068 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.028542544 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.02173581 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.02536898 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.023472348 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.023121715 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.147705962 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022885063 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.026322468 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.025438648 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.022686443 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.028299687 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.025444278 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.02541521 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.145165909 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.025687472 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.025399093 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.022132766 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.023286687 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.025274022 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.028325617 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022692198 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.025339534 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.145794646 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.022726632 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.028577403 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.021844805 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.023299626 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.02272952 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.023244621 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.026726678 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.025358162 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.028468865 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.02283606 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022844766 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.021794251 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.025477784 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.021734664 seconds)
  done (took 4.28271925 seconds)
done (took 18.654382716 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.49843897 seconds)
  done (took 1.46639614 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.037020233 seconds)
  done (took 2.033034618 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.051987982 seconds)
  done (took 1.051451838 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.316574943 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.431079305 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.729389528 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.09320149 seconds)
  done (took 2.554409693 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.830944418 seconds)
  done (took 1.83824081 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.219236999 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.181319489 seconds)
  done (took 1.42704817 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.490469825 seconds)
  done (took 1.48726678 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.323226822 seconds)
  done (took 2.328242815 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.188861324 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.129570179 seconds)
  done (took 1.321501532 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.594319763 seconds)
  done (took 1.593283518 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.548397214 seconds)
  done (took 5.551158565 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.19587601 seconds)
  done (took 1.255453109 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.196385331 seconds)
  done (took 1.201904245 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.695297538 seconds)
  done (took 1.696708063 seconds)
done (took 27.81228032 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.043332356 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.038971325 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.038697097 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.034038794 seconds)
  done (took 1.145735742 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.030000042 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.024214106 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.026610538 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.027103802 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.024495149 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.026380068 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.026707451 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.02294903 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.024366219 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.023559844 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.021838304 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.023517179 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.025997614 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.023100949 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.025494931 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.027032974 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.023752155 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.024031127 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.025719899 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.023170848 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.026127543 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.023564105 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.023561219 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.02502651 seconds)
  done (took 1.603355688 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.033596764 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.02551599 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.028548054 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.024286713 seconds)
  done (took 1.121268424 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.032169471 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.030095859 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.038439274 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.043107518 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.029399189 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.030274453 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.036760223 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.03683724 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.043212501 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.039595473 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.021171638 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.020900352 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.020193897 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.038922531 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.036365916 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.015761562 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.017234041 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.030549906 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.029640724 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.032415541 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.02331876 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.018941026 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.029621441 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.030418011 seconds)
  done (took 1.730977525 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.037260251 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.019056076 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.034977823 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.044265852 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.045467112 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.018827598 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.032500011 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.045266603 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.08155213 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.018902281 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.024824109 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.018835088 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.057639443 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.018984367 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.034226143 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.064107072 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.066745113 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.022903798 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.051895193 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.019022827 seconds)
  done (took 1.771392492 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.02814939 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.024039788 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.02371413 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.019065159 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.029976973 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.026336576 seconds)
  done (took 1.166674758 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.023940372 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.022024196 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.020894123 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.02588468 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.021601971 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.021583103 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.020819794 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.020467188 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.019564903 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.020318205 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.020397908 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.02082637 seconds)
  done (took 1.268596742 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.169362836 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.026267761 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.024236823 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.019652433 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.021413069 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.020397415 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.034583744 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.022255941 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.037705585 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.020353778 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.020560806 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.02274031 seconds)
  done (took 1.450281706 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.060674598 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.064892659 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.098990766 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069509473 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.068794887 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049625949 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.196713216 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.032393642 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.119093378 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092275165 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070924499 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.045496286 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040189258 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.02323661 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.055098908 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.074379009 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092950295 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.026667006 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.068700124 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.240052723 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089036665 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.092059812 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104094456 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07200277 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.047571451 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104176735 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050858751 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.058428036 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.078132538 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.084041607 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074953003 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.053137622 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.025224118 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.024711095 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107510369 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.0624029 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075952015 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.0471772 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.060123251 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.043170693 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063933758 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.023382889 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.036234677 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.066342913 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.04079018 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089943683 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.047639593 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07180806 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035391089 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09589873 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084623727 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.172804709 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.040985907 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06042629 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.099284949 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072069657 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096178244 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.063524508 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038917805 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.220166959 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.058218783 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053599707 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061035443 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033477615 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130952516 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.042616753 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.065488023 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064117916 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.049291615 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.049437651 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.060152427 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.089452478 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079313907 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.079405868 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091008204 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.045037641 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073411478 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.053713858 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.081741991 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057323157 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.026205354 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.076702432 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083551322 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.053910263 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.054760362 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085417882 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.046695745 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.029790786 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.05561471 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.074635138 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034198982 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.069837813 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.035311541 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.064794495 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.095186624 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053854496 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066628316 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.073527059 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.032238281 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113988319 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.063934114 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026902505 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.072677826 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069139858 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114931347 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051835006 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.030245362 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055915133 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059874092 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.111713335 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065065831 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034564103 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066261857 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.09997167 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050722637 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.256804461 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.052067194 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102713475 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071099801 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.042461 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.030324128 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.046027248 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.212651012 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061307618 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064887859 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04750212 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.037258415 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.040133235 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067963129 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.046280665 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034199937 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.066882893 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.055826734 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.028184786 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0416299 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.029938598 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094100169 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.031665003 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.088605546 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078543511 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.028630252 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060118068 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.0486116 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059360184 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.050770346 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.070589221 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.092825887 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.137835662 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.043794851 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.04796384 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061323218 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.09879804 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08155486 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.046730476 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.031219603 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.055899059 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066746443 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.052886803 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.080343364 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.048503969 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062675389 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.058074844 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099256912 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102831234 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054486254 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.056215619 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064640477 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.07903497 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.028997236 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115636395 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060439978 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074513236 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.041588737 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100408975 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.066367487 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.045325921 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041777066 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.055317403 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.061845064 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062582055 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102624974 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.050738622 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.026619897 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049281767 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105528054 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.033109437 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068370445 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.046643492 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.048250803 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077534204 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.053220015 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.037600714 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.022800652 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.236123772 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111327571 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.023477889 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.065292352 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.06019207 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.055748013 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.074290415 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.022837491 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.071489656 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089405083 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069512092 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.093754386 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118727854 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070185387 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.07128736 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.067224749 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.058916604 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.032537747 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.07850197 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.087834271 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049387144 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.045104566 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.088837698 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.072653168 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.092142574 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.074277915 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074457276 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.062195258 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.061923947 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059568289 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.060293614 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103603297 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.078274804 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.081894901 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.037751367 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062126257 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.073555496 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.094361671 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.03617479 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100638857 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.040551648 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.077361577 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.032974672 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.081244765 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.030060486 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.124255758 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033624873 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.056416205 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.023626838 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.028500073 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099881983 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.069151654 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.067262677 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059952414 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.099023025 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09676338 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.032017702 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.065090131 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.072432698 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.059169248 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.220268281 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.062559132 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.042413689 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048503644 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.060117653 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.03837556 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.0346536 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.069614031 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04737744 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078767149 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.03764421 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.028319556 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.092343361 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057546986 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048403493 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.029630019 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059842116 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.078925045 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.046185108 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.039932794 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.067786355 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058033539 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094739044 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.044078213 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.050891538 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.078213033 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.033807762 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.045751592 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.022883483 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.03894712 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.029518387 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082897324 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.029174444 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.070892369 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.022425962 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086528031 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.042679045 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.047554013 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.057231065 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066010252 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.083353333 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.049141696 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098509242 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044705649 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.076431753 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063931112 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049477217 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.041830952 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057966182 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055674394 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078340388 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.050809559 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079933214 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.102487601 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05868242 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.099512812 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045777392 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.078430874 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06259476 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.081028808 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.068932486 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126847013 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098633475 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06845267 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.067898526 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029975321 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052543759 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06324459 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071636628 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.28743878 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.07931126 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.025913623 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.057754201 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.047234753 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.061620202 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057014035 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.035730542 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.09761217 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056290717 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.041306978 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.065455124 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.044238896 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.057224647 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02951104 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.053090264 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.056771927 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.047987077 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050517782 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.066968478 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081675202 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065563591 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096444305 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.055657088 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.045487499 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.071645145 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063589811 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062529058 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.039073207 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.039572333 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092054932 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.073028427 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.080686403 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.055251464 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063820438 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.065880638 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055324995 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.082199896 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063255711 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.085165502 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034650213 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.031171231 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.022106122 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.026023466 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080840096 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063512815 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067299018 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053977794 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.026213958 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.059206304 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059179023 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.02619952 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042920722 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050571118 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.053093028 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.047734952 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063822021 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.066096866 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.051392941 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.060130483 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052813803 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107383715 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.056913749 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044479479 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102969167 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111159331 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044997582 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050432081 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.025764931 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033819881 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071549515 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113343579 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.250216083 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.032007268 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.040564931 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.039280004 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040094376 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.025037062 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.041149789 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.042424688 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058741182 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.051415252 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.066886967 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05801947 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028773413 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055699397 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.052121007 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.045723743 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.060186582 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.072607424 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.079022761 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.094978614 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066886343 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060004016 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029605231 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.03381879 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.029197249 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.032811902 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.054661794 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.03206107 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029557299 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096663539 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.044804412 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058776019 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062157694 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.041461693 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029140402 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090127385 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.023164415 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091002372 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.025022123 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.036366568 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.036199141 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033105482 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049383429 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.096172107 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.065099652 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.068111477 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062008298 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059897668 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119029356 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11664743 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.037091321 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099341867 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030139224 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.030955331 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.030078296 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067613765 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045562895 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.069376017 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100637666 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045405375 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057553522 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.032612143 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102837767 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.059026638 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.060700579 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.040970319 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.033523719 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102605771 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033557754 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.037461308 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.045601803 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.068964849 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.026871273 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.058518627 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.038116079 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034681714 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.263270764 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.663565803 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.04401574 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.029104645 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.049158632 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.093936002 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08453044 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049474158 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061291061 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.072309561 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.053532683 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.046901693 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060876862 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.146338869 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027451121 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048197457 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.057072308 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050844993 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05498261 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.051988778 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.039744314 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.04565509 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.040216698 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.032667895 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060841511 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041624215 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.049623666 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.060454309 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.036139299 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.041172257 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084938653 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.057629969 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.036853189 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042604521 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.057245746 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042022535 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057770745 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.023220634 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.066697182 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.043070924 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074896583 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.054670041 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.063605288 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082381902 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048942668 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094774695 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.064243259 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.07873003 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.042022333 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.032750248 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084151222 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.045423942 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032036005 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103986991 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.054073649 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.058355745 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059682341 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.051195673 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069280466 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.075234893 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.068720492 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.052226639 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033188168 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059028148 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.062335701 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.044047937 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.035329795 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.029768199 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.030908407 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066138627 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.292811203 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.041390286 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.070095632 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.04554616 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.201608308 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.0567931 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075361399 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.040891515 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.054771439 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.064451302 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.045043783 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063426845 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.054054046 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.082016186 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127361333 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.077653694 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082549384 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087689507 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.031205976 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.028977751 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.022258168 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.066902928 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.032814847 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.042562303 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.032366584 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087352451 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.037187027 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06493336 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.20145289 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.033960211 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.047781931 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049670266 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.023103982 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.036534133 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061291117 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.040668077 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033758228 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072719241 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.035154444 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084074345 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066617915 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054584279 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.050167281 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035244709 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069769381 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.057647217 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.085230237 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.049621314 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.029358354 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.079816876 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.058834389 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096811939 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.027153743 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035369019 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087397764 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059590558 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.089662664 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034646418 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110274198 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099740032 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.055752001 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09322032 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.024983719 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.042107892 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.045250903 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.082407903 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.040238344 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069011696 seconds)
  done (took 40.524025294 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.138409386 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.129315645 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.076086105 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.088648907 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.244736687 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.253231351 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.105926616 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.077975505 seconds)
  done (took 2.265690528 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.024345989 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.037110886 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.034539946 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.277084232 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.05342213 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.020586737 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.025472466 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.035289808 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.020756067 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.02016121 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.054809648 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.02054316 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.020928327 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.429840314 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.019774202 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.025534365 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.020885113 seconds)
  done (took 2.276968344 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.3015853 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.564768097 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.325968594 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.411864793 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.103486039 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.560995614 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.028467463 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.034109279 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.636766144 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.165432678 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.098116125 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.173738634 seconds)
  done (took 17.525180714 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.030847617 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.154213427 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.152329521 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.02755546 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.027033067 seconds)
  done (took 1.507907669 seconds)
done (took 76.432853199 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.040044883 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.122998773 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.020292619 seconds)
  done (took 1.291520953 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.157875965 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.15191157 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.151818579 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.154861075 seconds)
  done (took 1.732928438 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.030071403 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.029598878 seconds)
  done (took 1.183014585 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.184478978 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.246696262 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.043851239 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.038301192 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.03389465 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.03423247 seconds)
  done (took 1.231998259 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.02667005 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.024437202 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.024499862 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.024771354 seconds)
  done (took 1.215119345 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.134484715 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.019244488 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.021802445 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.02348427 seconds)
  done (took 1.31479376 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.040185782 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.039715121 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.068921802 seconds)
  done (took 1.270814042 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.039132079 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.038357978 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.032638521 seconds)
  done (took 1.232875052 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.065015032 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.04976957 seconds)
  done (took 1.233874884 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.035183712 seconds)
  done (took 1.155749906 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.047523817 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.050963404 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.218277975 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.183910476 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.221626567 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.20640363 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.030160213 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.030801925 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.026413414 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.025384209 seconds)
  done (took 2.156994909 seconds)
done (took 16.654506285 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.035597502 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.142734104 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.272340836 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.03978668 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.608340669 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.271124521 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.677539962 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.043077898 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.052435288 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021313504 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.037818727 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.585987284 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.680886378 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.107812656 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.666312054 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.090139859 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.760339997 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.021718088 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.020700868 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.021362693 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.659864713 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.020982585 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021331527 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.021832196 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.758397293 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.409459252 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022146446 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.088254619 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.020948134 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025085192 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.392357152 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.022204554 seconds)
  done (took 12.732489855 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.025901816 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.075767711 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.02652884 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.037034418 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.023412672 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.023576821 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.025299184 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.021947415 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.063802338 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021533395 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.038523244 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.021019496 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.02590625 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.022595562 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.041629969 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.021470692 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.023607864 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022248062 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021447361 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022124113 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.040172441 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021107205 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021965536 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022040846 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.021675876 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.035760413 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022456791 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.021325539 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.02161055 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025327071 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.026356066 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.022860594 seconds)
  done (took 2.040369971 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.078448443 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.07859292 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.026999907 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.061743814 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.073663907 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.024007245 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.105038324 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.043812286 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.066654223 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021740467 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.038617443 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.021509997 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.057729234 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.022980197 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.041926788 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.021789649 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.023924721 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022146252 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021385654 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.021931244 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.040306121 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021459501 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021998013 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022242259 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.022019139 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.037941233 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022632047 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.021685715 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.021455017 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025542154 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.027504182 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.022728814 seconds)
  done (took 2.315047412 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.024810148 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.025253192 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.030816757 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.033956906 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.019962952 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.022049784 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.023167174 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.019945181 seconds)
  done (took 1.333633524 seconds)
done (took 19.558132233 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.03526957 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.021956057 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.02467789 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.041418616 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.027839227 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.143018427 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.018834463 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.028596236 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.025065252 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.025210169 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.026625164 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.020100517 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.023688672 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.018577278 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.025498338 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.019802126 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.145700003 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.02407044 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.143464138 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.144854966 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.022456351 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.025473043 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.028488083 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.144294633 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.14427326 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.144375551 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.02896392 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.025835839 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.020309972 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.022883058 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.1422149 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.144374463 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.022947923 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.140135887 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.020340357 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.020129392 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.024343496 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.021810294 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.147941439 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.029079199 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.022403615 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.028772733 seconds)
  done (took 3.471325146 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.147634992 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.153172658 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.145469682 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.031979808 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.028492875 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.031917261 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.152005323 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.028888487 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.027413279 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.150999508 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.023242565 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.027544755 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.029952509 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.020605719 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.027378813 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.023723375 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.029110183 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.021673372 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.027314433 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.027461156 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.151645031 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.020891444 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.028142247 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.028854602 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.023043601 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.029049037 seconds)
  done (took 2.58924894 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.030091524 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.043166525 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.045659617 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.099125618 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.063170359 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.035961007 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.036297885 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.046769657 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.05424376 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.021074974 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.042824607 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.048416489 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.049329848 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.027859241 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.060433809 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.039398588 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.033614317 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.022728536 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.027640659 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.055628007 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.043745159 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.039693422 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.053968258 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.041074854 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.02023356 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.030331672 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.028301343 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.037336332 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.02836014 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.03328668 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.02489802 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.024490624 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.021841011 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.032404691 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.024880656 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.019165267 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.043563423 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.033463197 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.035614143 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.060388066 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.030977802 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.022439055 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.048173949 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.086079703 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.02068179 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.023604511 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.025403599 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.033430594 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.022443117 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.051339408 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.036102304 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.020894525 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.040201489 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.022527438 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.022510897 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.03659767 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.022671348 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.02313138 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.032735111 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.027140858 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.042176942 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.0262599 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.041285201 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.020832667 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.032292386 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.022546763 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.022604328 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.01979286 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.055474017 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.028350918 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.070520712 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.022196177 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.019252285 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.033396444 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.032442489 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.028292367 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.020813471 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.03969476 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.03342374 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.024900281 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.031874684 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.023967477 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.024289184 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.057578631 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.020111209 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.019257079 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.019177242 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.023504028 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.024355672 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.021640827 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.033426384 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.020552151 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.024323873 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.035231033 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.021006465 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.021626288 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.023463107 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.022250012 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.020507359 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.030822124 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.02477323 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.022691546 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.033772119 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.022092897 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.024301598 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.035946811 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.030153188 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.020509642 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.022183665 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.026925198 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.022736258 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.025407469 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.024290243 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.022791687 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.025952713 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.02841233 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.027019 seconds)
  done (took 4.956114028 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.238361095 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.22726155 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.021898737 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.223671916 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.029604734 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.157290405 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.226972558 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.227509162 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.021747846 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.022608921 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.020833214 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.171105891 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.166070265 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.17822389 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.158455056 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.023814774 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.048510129 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.177890916 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.23227148 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.227351782 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.047418727 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.028671688 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.023956206 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.02308316 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.022326049 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.03021792 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.037772391 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.030189391 seconds)
  done (took 4.206226994 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.029769714 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.065967199 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.02494911 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.045944903 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.038401632 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.021567805 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.023322036 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.022704851 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.038052931 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.026879979 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.021244139 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.025531488 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.024749753 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.023609588 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.022335628 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.027910737 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.027843946 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.028649677 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.025111956 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.025917145 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.032060199 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.045562378 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.025571788 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.021511375 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.024821767 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.021434993 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.027011326 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.030223496 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.021286944 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.021387631 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.018675814 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.025931516 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.035880377 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.022622043 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.021222137 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.022085272 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.021630924 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.021657214 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.021861757 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.01981671 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.019703514 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.026618017 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.020336464 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.026530651 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.035635174 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.023588366 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.023001976 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.024072183 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.023933914 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.018495454 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.025174748 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.024887287 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.024196505 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.029881826 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.025384808 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.023903424 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.022936455 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.035515985 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.027095321 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.020966267 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.020677157 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.020066753 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.023162345 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.028249449 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.03842562 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.023173421 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.01995831 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.021725593 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.023129823 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.035659913 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.020954149 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.026963599 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.018666133 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.021641579 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.023850706 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.024510548 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.023004046 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.020085114 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.021415127 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.021801111 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.021678135 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.021526104 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.020959305 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.024315149 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.019543381 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.019998478 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.022205352 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.023177009 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.027105627 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.020406799 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.024195045 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.022989992 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.020434159 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.024248067 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.026762394 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.024452723 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.041671356 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.029499507 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.022266647 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.019550022 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.036242021 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.023397742 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.020944935 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.023355252 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.026130569 seconds)
  done (took 3.858229345 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.050970223 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.023667947 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.04128191 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.052603116 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.031625327 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.027245412 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.035289352 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.022849361 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.042526143 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.020865977 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.030655449 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.020036525 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.034308084 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.030110486 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.023438683 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.031306953 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.024326876 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.041889939 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.036000327 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.020418677 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.030264278 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.03370191 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.033947692 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.039245701 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.03882222 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.039754654 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.033648896 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.024478747 seconds)
  done (took 2.08192924 seconds)
done (took 22.290095526 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.167522191 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.365860562 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.142907714 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.787661023 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.20867701 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.155006284 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.352913397 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.12513149 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 6.763438317 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.224225654 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.808251896 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 4.994495294 seconds)
done (took 59.296512997 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.287288002 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.285074972 seconds)
    (2/2) benchmarking "String"...
    done (took 1.371185452 seconds)
  done (took 3.794174064 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.574160719 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.136907392 seconds)
    (3/3) benchmarking "different"...
    done (took 1.174483702 seconds)
  done (took 5.009547559 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.468871731 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.668289751 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.429493638 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.125413947 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.140745624 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.751907838 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.272488137 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.800738698 seconds)
  done (took 27.324129564 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.229621022 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.392392619 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.492478663 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.603223318 seconds)
  done (took 17.930645384 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.580417001 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.530683153 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.530543281 seconds)
    (4/4) benchmarking "different"...
    done (took 1.833126983 seconds)
  done (took 7.728065725 seconds)
done (took 71.676424398 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.124882628 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.304095022 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.140715032 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.320090572 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.190143143 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.218979426 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.13805533 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.175622882 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.136102682 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.141242655 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.076231988 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.136253464 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.140520141 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.178297578 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.139936331 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.168074496 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.297224074 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.143753643 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.13888137 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 6.807337534 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.46166656 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.129859952 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.148268215 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.208479142 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.396806199 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.149597468 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.453292082 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.151068932 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.738729564 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.131570148 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.14183333 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.135375573 seconds)
  done (took 182.488228541 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.124847209 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.940616239 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.951640709 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.152173281 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.45697324 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.483721086 seconds)
    (7/36) benchmarking "scal!"...
    done (took 1.941364557 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.47405727 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.135451221 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.150122939 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.109804301 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.128289618 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.126973287 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.700400029 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.170554354 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.150303146 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.020334533 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.951711038 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.182261333 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.024294547 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.130726356 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.597611191 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.577969 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.926922874 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.138622878 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.176644553 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.143177188 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.178931049 seconds)
    (29/36) benchmarking "asum"...
    done (took 1.615360967 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 2.968374061 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.133684964 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.167695602 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.314433467 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.373378408 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.132480354 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.138295622 seconds)
  done (took 153.225983087 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.363109953 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.133453749 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.169848457 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.244692364 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.9754539 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 3.854246591 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.135733408 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.124440733 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.124649038 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.131338075 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.125674133 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.190847253 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.136004066 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.499500894 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.165057402 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.12597069 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.125073572 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.480485983 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.146217691 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.124409258 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.124367783 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.223073279 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.476779881 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.237804307 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.13520966 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.133285013 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.235076774 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.141767081 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.126469176 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.124288923 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.234897548 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.135314971 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.250934185 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.244284687 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.141358514 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.180182546 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.142335835 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.328626314 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.137097444 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.124161162 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.125499537 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.17013497 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.133107718 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.006056048 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.235807492 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.138022015 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.143229912 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.695526244 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.71837467 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.13762515 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.124991273 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.125174199 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.127532325 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.126153283 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.597596554 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.139081893 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.157789883 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.296164825 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.14237427 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.124468869 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.124752239 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.124321421 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.124420565 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.131013211 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.160931115 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.705404253 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.439219736 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.487963592 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.809857019 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.135788414 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.124400342 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.124193434 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.443366049 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.196787314 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.126586235 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.124316737 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.290501583 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.135147433 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.124226911 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 2.988350525 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 2.988523896 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.135678659 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.234832086 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.135162681 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.124552138 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.53891007 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.50413219 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.145529893 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.143918486 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.179880179 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.128352798 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.124257194 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.13100085 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 2.989663105 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.136356432 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.13666516 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.334863494 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.136043072 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.124602538 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.587476883 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.476422402 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.135080628 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.206308636 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.513513458 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.981304159 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.135836012 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.124204323 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.142694533 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.125351402 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.13645837 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.136253239 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.125562834 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.124575533 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.129253603 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.12468088 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.124137063 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.124386003 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.142974986 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.126098978 seconds)
  done (took 328.528915781 seconds)
done (took 666.864274797 seconds)
(4/20) benchmarking "parallel"...
done (took 1.119598104 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.383160905 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.114436917 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.246088943 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.383392919 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.334440283 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.310453777 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.33721459 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.425711791 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.363261954 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.30156863 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.363899355 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.306240401 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.41129095 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.390344983 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.430108584 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.400766583 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.337917759 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.811115202 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.347213537 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.306189504 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.329155663 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.305117403 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.288768972 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.367478319 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.430069315 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.307735364 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.531411319 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.370572205 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.346227675 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.386924416 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.402615822 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.418774752 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.348592688 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.418087509 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.372893893 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.43485668 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.303707677 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.399584845 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.312396456 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.345858192 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.358713179 seconds)
  done (took 64.209921791 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.479020739 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.314325827 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.44037516 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.43647033 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.047482823 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.43275722 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.523158227 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.318712057 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.319832026 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.438026843 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.47005654 seconds)
  done (took 18.373008443 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.394095002 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.323711224 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.442934173 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.457194231 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.562919296 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.443515394 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.4941428 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.320859278 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.329503533 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.466774023 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.457780869 seconds)
  done (took 17.843539087 seconds)
done (took 101.546174027 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.695083326 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.206923612 seconds)
  done (took 4.025594805 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.157769544 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.145233046 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.136897785 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.141430499 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.138799617 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.137000536 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.188825014 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.148913252 seconds)
  done (took 10.318867644 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.138331072 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.137212813 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.138427311 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.137629747 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.137281479 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.137427885 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.136672821 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.137142931 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.136696729 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.137561805 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.137054308 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.136293096 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.137025554 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.137030918 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.136273333 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.136253623 seconds)
  done (took 19.320579439 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.136679643 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.137757205 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.137394151 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.137234772 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.137607175 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.137484532 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.13759111 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.145919432 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.137753182 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.137879984 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.137321506 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.137920358 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.137452629 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.136651875 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.137593252 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.137045236 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.139581242 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.137294042 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.137612202 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.137606811 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.136991723 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.136974368 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.137877885 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.140519732 seconds)
  done (took 28.436052614 seconds)
done (took 63.246171345 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.713441948 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.170990036 seconds)
  done (took 7.008277952 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.142120966 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.136741365 seconds)
  done (took 3.515125027 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.137232872 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.136785462 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.136146442 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.136822084 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.136513728 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.137211147 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.13640577 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.136309137 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.135874403 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.13647935 seconds)
  done (took 12.4899787 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.13692124 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.136162064 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.137994345 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.136671211 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.136837872 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.137723483 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.136182462 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.137451288 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.136547173 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.13751373 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.136479815 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.325775341 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.137092671 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.364452305 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.136290805 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.139262879 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.137827423 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.138118221 seconds)
  done (took 22.009416285 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.136573788 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.13672959 seconds)
  done (took 3.39826897 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.137825658 seconds)
    (2/7) benchmarking "second"...
    done (took 1.137572302 seconds)
    (3/7) benchmarking "month"...
    done (took 1.137555619 seconds)
    (4/7) benchmarking "year"...
    done (took 1.137754516 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.138034199 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.137848363 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.137738859 seconds)
  done (took 9.08825467 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.598768376 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.30243496 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.357029182 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.622482627 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.732399237 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.092479824 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.739737568 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.087210692 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.948824722 seconds)
  done (took 16.605990172 seconds)
done (took 75.234835297 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.822302168 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.124376461 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.035668074 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.24593459 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.160068458 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.455777759 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.129989204 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.738465175 seconds)
done (took 37.8589387 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.442414904 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.124661104 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.172262538 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.173247516 seconds)
  done (took 19.594425224 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.124560396 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.716361517 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.174506084 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.179574425 seconds)
  done (took 19.419817776 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.645824247 seconds)
    (2/2) benchmarking "read"...
    done (took 1.562759112 seconds)
  done (took 4.351468792 seconds)
done (took 50.929629059 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.136826785 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.136834463 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.137659584 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.136581962 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.137668031 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.137354265 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.137714739 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.136735631 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.136554778 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.137155739 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.136504717 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.136787431 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.137327114 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.137245518 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.137263406 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.136879213 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.136534529 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.13745274 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.137470112 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.137363102 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.137006673 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.136428394 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.137718367 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.137716368 seconds)
  done (took 28.415763947 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.216898542 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.202601297 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.217561726 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.214291997 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.229880475 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.214739008 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.214223138 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.179927346 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.217650098 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.18402709 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.173098504 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.223881489 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.178278073 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.229895709 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.176294641 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.229631622 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.217560291 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.179449746 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.176118838 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.235545446 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.211068986 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.179642871 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.223889061 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.173529721 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.225215464 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.173863591 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.184771994 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.203103035 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.176332587 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.229753401 seconds)
  done (took 37.218032682 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.170422667 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.13682029 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.136947599 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.225885472 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.136426842 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.13680057 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.137059137 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.136503865 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.136917389 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.137033866 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.137021875 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.137065259 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.1366231 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.137043377 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.137056125 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.136753615 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.170624269 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.317350542 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.136656864 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.136956028 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.190332076 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.136501479 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.137040359 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.136747814 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.13740133 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.137548763 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.136854395 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.136684538 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.137325537 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.136842365 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.13738922 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.182296414 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.173574649 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.137367038 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.253931538 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.197967321 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.137466535 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.697453885 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 3.20062043 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.140206383 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.136895712 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.137310862 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.13704733 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.136851137 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.194026479 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.136879238 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.136637537 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.136943209 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.137463935 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.136962248 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.137120296 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.136639437 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.151382162 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.137227082 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.136841187 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.136843622 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.137123676 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.136939598 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.13715317 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.136827974 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.137705395 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.2031374 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.137265695 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.136667886 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.513233478 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.137463303 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.203173998 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.137100582 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.137053789 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.353668741 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.137127407 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.340124412 seconds)
  done (took 88.26669329 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.136989892 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.13796838 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.218041124 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.220529927 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.137603084 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.137423108 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.137897409 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.137081079 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.807425378 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.137055431 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.137368964 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.137176182 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.799048956 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.137226836 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.137285088 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.220689679 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.137123592 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.137574499 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.137143636 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.137558021 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.137095358 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.137714053 seconds)
  done (took 27.725971556 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.173471449 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.152163863 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.174256531 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.152669481 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.152284321 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.152310711 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.173430194 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.15177349 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.173735116 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.182480389 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.174245231 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.173634653 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.152248326 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.174342601 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.179245218 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.220794365 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.173717137 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.220928337 seconds)
  done (took 22.232648622 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.314887614 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.303270184 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.21721753 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.181258242 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.399576809 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.372816554 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.241785328 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.312883856 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.179693956 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.3024846 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.310575495 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.179266334 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.371814401 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.180038791 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.179782992 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.399921209 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.218928962 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.179685706 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.249142811 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.242424189 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.314538796 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.249045136 seconds)
  done (took 29.026272705 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.174081012 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.196761026 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.20970033 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.216105623 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.137840249 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.136954849 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.195054147 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.173612886 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.152585719 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.179814761 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.17406736 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.137437603 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.234975308 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.197201659 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.227235536 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.174047119 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.191457479 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.197551782 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.179209303 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.138045568 seconds)
  done (took 24.748842597 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.137032639 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.137100759 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.137400814 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.136634002 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.137066766 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.137495816 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.137282828 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.137137323 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.137189663 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.375001572 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.13752069 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.137100318 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.137445757 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.137426287 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.137884253 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.13746249 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.137413473 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.137168936 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.137345036 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.137210835 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.374786025 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.137762999 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.13742795 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.137078575 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.137352481 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.137079736 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.137251651 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.136954315 seconds)
  done (took 33.445077045 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.185870652 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.137577281 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.138581727 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.137660814 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.137873377 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.20224803 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.138306962 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.138114593 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.137857675 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.137523636 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.13705455 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.137577959 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.137500487 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.188723582 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.138732244 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.137826918 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.235496447 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.138241462 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.20160365 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.126103704 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.137903361 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.191451624 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.137607257 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.13821653 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.126182029 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.13777033 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.13826119 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.138161786 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.137391102 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.138392065 seconds)
  done (took 53.617463996 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.15994245 seconds)
    (2/2) benchmarking "in"...
    done (took 1.16049038 seconds)
  done (took 3.445174984 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.138426066 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.240076861 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.137669069 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.33722576 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.305247594 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.312887119 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.303852803 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.234756621 seconds)
  done (took 11.135417804 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.137689289 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.534720938 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.159826318 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.138005469 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.137582547 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.603280647 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.087738474 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.01308444 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.913424526 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.995188765 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.17082752 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.604522896 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.165288831 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.439615213 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.255955222 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.993429723 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.361998435 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.65311167 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.186157458 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.265777091 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.849309822 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.242893782 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.140104555 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.138771026 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.137530494 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.036709138 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.951906909 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.561300771 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.275870993 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.267137974 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.879613471 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.222882515 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.138243466 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.382440819 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.259026228 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.138918279 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.277247766 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.248742481 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.138208124 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.138671571 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.873620343 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.803110695 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.411577172 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.347483443 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.227483011 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.138725331 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.138611085 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.13819259 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.401589141 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.744993497 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.167307204 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.108894831 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.281574759 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.139017522 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.804310175 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.153177411 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.138683249 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.035951653 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.618380289 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.377783491 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.472901404 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.292434799 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.13304544 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.270911005 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.13897689 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.31461139 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 3.013589083 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.899875536 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.926761894 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.254973831 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.642096982 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.160682939 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.139820445 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.138318204 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.071003369 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.453392996 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.138804717 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.138358859 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.138155523 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.13894545 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.403067428 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.260509389 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.973964395 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.28212923 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.300003686 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.623684658 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.270855717 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.138655311 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.778391323 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.982530674 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.172011822 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.751740777 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.344738531 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.280105162 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.116223593 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.403941867 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.177671143 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.138370653 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.977129814 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.751380078 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.153507533 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.139989905 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.457963952 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.225827086 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.142515373 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.138602127 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.829252909 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.270474138 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.24856292 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.184505809 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.138776271 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.139490893 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.716065764 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.175949021 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.1398577 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.595349754 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.171525073 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.650794953 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.390165056 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.340986499 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.493127874 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.086529554 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.383210505 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 3.01305211 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.141523271 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.647143595 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.962263146 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.781021239 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.387879547 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.268937929 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.981847407 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.211475555 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.13848205 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.268652837 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.222186886 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.139501615 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.138425235 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.139050091 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.138942437 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.138558931 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.260228491 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.51831852 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 4.96796846 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.154783069 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.380813286 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.263701198 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.974559129 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.346594362 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.834938322 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.282147319 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.139435353 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.871307707 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.412317525 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.843674875 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.273013864 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.139389436 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.138262839 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.98482359 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.124075323 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.242664602 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.139331897 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.741785098 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.176067696 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.139296925 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.13875561 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.600959457 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.282291795 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.139294113 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.236137569 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.920428709 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 5.035119183 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.154103393 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.448862539 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.260631379 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.139717352 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.139147271 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.138984737 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.924561383 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.759190467 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 6.321985803 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.745555271 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.925508607 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.236284011 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.282789186 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.237095203 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.401424981 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.366912591 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.284249336 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.139638475 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.139605543 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.139449858 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.611305957 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 4.020335453 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 5.167371023 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.98938436 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.151231564 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.042602521 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.16623749 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.937552278 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.157698509 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.856607712 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.134084228 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.247550298 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.139757497 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.139091203 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.292165928 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.322934694 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.284612904 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.701903809 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.154787944 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.139739427 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.78329568 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.27400434 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.806962239 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.251392625 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.967388901 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.216754113 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.270813159 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.273302287 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.793868317 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.273854669 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.138819458 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.868874359 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.292934048 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.139598346 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.176852464 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.832297859 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.942740415 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.881657291 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.770992627 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.072603839 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.705636248 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.403045096 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.284577726 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 3.965892922 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.245189325 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.357075707 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.246435316 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.629079792 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.162821374 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.889957093 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.157289887 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 4.875758938 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.154819617 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.134380552 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.26836645 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.622670544 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.262294792 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.139996402 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.305846033 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.240964589 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.800262852 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.273396733 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.262418034 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 4.449918904 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.041916618 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.245785368 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.351402384 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.247776918 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.046182157 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.108145845 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.482521871 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.090355177 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.137059655 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.166941961 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.902609333 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.291472859 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.378239573 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.280693396 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.140108018 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.13948156 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.349192126 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.232473453 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.140214061 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.455570619 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.12840672 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.177229148 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.167239614 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.140334717 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.139716267 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.35931837 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.311192231 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.411183388 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.599496902 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.711499827 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.934569737 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.272795018 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.778660954 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.276288295 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.821894337 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.17644173 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.140720022 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.801045325 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.272175051 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.417852664 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.291199601 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.245219775 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.795798357 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.256143428 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.427830803 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.283130597 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.268289243 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.905627555 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.700475953 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.381277175 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.545956966 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.182577537 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.654371748 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.229549294 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.691145056 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 3.19121228 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.833098143 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.127831249 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.202217949 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.140617926 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.140225213 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.655425796 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.164875147 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.144948758 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.917796019 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.840266607 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.053158629 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.860817201 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.177777642 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.14083419 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.139959108 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.140660149 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.045715517 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.163183438 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 4.46151271 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.281875479 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.141469995 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.140144814 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.108158609 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.442212379 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.979062452 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.011878209 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.106570704 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.282349002 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.140890164 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.140538992 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.140556894 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.140338521 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.141124548 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.140259972 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.634328717 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.156175791 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.729192534 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.177881576 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.140602403 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.339233234 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.210243216 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.140838097 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 4.323430531 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.227924244 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.249656421 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.214564045 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.140957329 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.542853149 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.283863202 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.1065153 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.337098 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.42181126 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.379418526 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.650605496 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.19603577 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.570827419 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.439226954 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.967888086 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.14310892 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.045790052 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.167361682 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.905453129 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.123515192 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.500409821 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.726065419 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.184043678 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.394752207 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.039019406 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.499242785 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.310707163 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.21258322 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.141309365 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.140891569 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.204153186 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.384283243 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.191126557 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 4.387185202 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.349026403 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.117405276 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.349609117 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.242029611 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.358724566 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.175041799 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.156562832 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.140583997 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.140981418 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.607692202 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 4.043105069 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.23487089 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.141871651 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.038331042 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.933069651 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.043994292 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.761120427 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 5.080266427 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.281469823 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.141450022 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.336892767 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.1965968 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 4.905497988 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.166116881 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.921107801 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.468288983 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.192165683 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 4.327937772 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.524205395 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.886287569 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.539375071 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.261338984 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.142186725 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.497181607 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.140095283 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.28600389 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.043136949 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.466452704 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.68507065 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.615553709 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.435619642 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.261440249 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.034130942 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.626938802 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 3.184620075 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.145012406 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.98190948 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.286476816 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.472997135 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.079762575 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.411537875 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.28540852 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.774032342 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.768557038 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.283594471 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.779573001 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.284530855 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.141336155 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.961541144 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.056602264 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.346154504 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.266746843 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.142024646 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.155921431 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.819429031 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.730691461 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.340880806 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.22266656 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.142113881 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.896302368 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.842567621 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.176687407 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.142187116 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.140668524 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 4.53300432 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.195325862 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.141843272 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.550280829 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.745106903 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.284417361 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.623223429 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.296921003 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.286924498 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.411814422 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.5137005 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.354049648 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.207785047 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.141387379 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.141514242 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.141931497 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.699632629 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.158079769 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.141522049 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.729368213 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.284591574 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.889459783 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.061047909 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.373888579 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.217724421 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.557488416 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.284976845 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.614125333 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 4.060958785 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.167316809 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.370076776 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.251812476 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.247465199 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.867106367 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.249951671 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.142487862 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.050290375 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.47870115 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.492902903 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.542439511 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.485067253 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.235494084 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.837609502 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.408202991 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 5.085728523 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.1845202 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.165240178 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.631793656 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.329502552 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.593990359 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.319106505 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.645901041 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.283122846 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.458525094 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.452714841 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.25677806 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.16498701 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.164875128 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.158735813 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.190072605 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.648213663 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 5.109545853 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.643985943 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.287176862 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.934921414 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.710374146 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 4.979662884 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.320170829 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.465654072 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.421710639 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.179387874 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.112719049 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.48614559 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.227788752 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.300277064 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.237985292 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.904030008 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.217169211 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.140891859 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.702324006 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.156830569 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.14121793 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.141278018 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.036436501 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.835139729 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.249657436 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.328502289 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.241591992 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.142679359 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.74158908 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.415136906 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.181802234 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.141224186 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.140944405 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.996229189 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.255185185 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.14122029 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.471293099 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.299447782 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.437188919 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.957903902 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.579041903 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.235256954 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.142194984 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.141067507 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.859180712 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 4.722245196 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.210355596 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.493358633 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.255914728 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.658224329 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 3.202520018 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.654075136 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.69798049 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.15131057 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.296516239 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.174867603 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.177360256 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 5.047056024 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.083256335 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.900644206 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.510335857 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.265465222 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.954389999 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.155043488 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.236189839 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.321388461 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.244823031 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.178776719 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.17178849 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.174386828 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.641403212 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 3.206628069 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.179270618 seconds)
  done (took 1450.595465523 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.43941846 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.173926586 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.178426812 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.179956804 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.172790264 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.174040909 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.174394552 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.175680824 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.17318338 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.176100385 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.175195412 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.17290444 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.166320215 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.42264447 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.14314374 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.142980648 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.143147634 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.143048813 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.142871626 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.143022191 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.14295607 seconds)
  done (took 26.11603482 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.142693612 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.143297049 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.143043487 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.141514071 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.142708575 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.14218306 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.150098615 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.161454701 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.160042477 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.160974181 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.152690881 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.14236572 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.142357664 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.142607528 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.142847164 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.142156505 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.141747756 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.142887713 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.142804725 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.142607757 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.142222959 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.143049661 seconds)
  done (took 26.338327469 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.141988515 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.141887843 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.85943579 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.271255612 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.14301444 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.142328015 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.142557281 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.338153389 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.166217005 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.028106306 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.476190331 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.232331132 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.146239491 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.322935236 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.240065351 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.143138453 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.265131333 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.143665268 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.143368482 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.143231451 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.142742433 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.35660519 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.285200256 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.143271677 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.974561201 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.287928216 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.143223369 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.142827224 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.142083853 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.110069038 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.164496858 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.142896549 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.97737293 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.887991878 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.479437136 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.032943018 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.176788575 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.141944978 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.143670225 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.143048705 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.328575179 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.971756077 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.146869096 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.142642811 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.416842111 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.263954217 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.14272603 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.471384573 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.233335379 seconds)
  done (took 89.899063649 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.142491643 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.279339843 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.20679913 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.142403452 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.270470017 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.142430674 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.201888254 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.142357781 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.142762854 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.143030867 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.286165555 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.297250619 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.142838394 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.142590364 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.232984112 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.142982598 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.142575091 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.142846187 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.142660792 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.143338717 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.142697145 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.194439679 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.266582443 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.295452093 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.142363429 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.142601986 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.142998706 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.142637914 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.286794303 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.142532605 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.142463263 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.142192463 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.276697928 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.251881563 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.143062011 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.142617619 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.277610605 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.14296408 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.142283631 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.143645171 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.142323607 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.142382073 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.196425976 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.286672038 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.143113727 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.247675052 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.143159618 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.142985093 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.28928164 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.141752682 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.142088656 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.29862389 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.142715818 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.143336253 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.142383561 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.274174015 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.14265072 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.143217577 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.142714357 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.287175236 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.142828264 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.142503523 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.301394281 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.142860294 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.143519718 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.309658416 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.252546783 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.142467224 seconds)
  done (took 81.782692473 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.143818789 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.279493888 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.319636418 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.32056342 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.279485462 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.276666336 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.283248383 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.28000393 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.2801476 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.282756458 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.281108851 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.229243857 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.250700482 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.230192025 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.283437557 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.265445153 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.269639041 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.267588505 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.282920424 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.283285796 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.269464088 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.319015696 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.28026593 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.319739839 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.497168856 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.250874973 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.280196452 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.283453384 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.322969076 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.280218985 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.49857087 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.28340239 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.279930504 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.323278882 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.495083695 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.276863984 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.143897167 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.280151695 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.283116918 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.280253647 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.250441152 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.32076009 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.277495917 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.250454145 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.275247855 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.277207649 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.321032224 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.495679444 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.230350995 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.283715883 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.280487234 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.321541061 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.277259109 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.274601774 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.321032765 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.238536411 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.318644679 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.321116674 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.283755952 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.318853735 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.320411764 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.237831554 seconds)
  done (took 81.2658768 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.142649526 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.142906197 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.227093708 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.143308643 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.142195288 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.228643064 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.142550174 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.142302706 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.142104732 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.143009121 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.142813064 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.227945963 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.502210919 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.142789509 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.228237904 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.500706993 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.228301656 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.229125213 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.142870719 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.228618658 seconds)
  done (took 27.300861235 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.143438771 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.14298501 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.143023211 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.298624243 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.142622274 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.278937083 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.142853345 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.142965925 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.143561487 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.142515712 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.142816102 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.143250377 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.144140365 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.299275591 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.143069451 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.279573341 seconds)
  done (took 20.004046303 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.143366427 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.142984117 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.143167304 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.142262269 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.143963124 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.143937027 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.142488109 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.143401539 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.143530652 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.599887137 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.14304906 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.142930183 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.142818557 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.142764018 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.143610607 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.142584236 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.143547138 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.143592731 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.143010688 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.14305708 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.716058901 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.143706362 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.143057372 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.14331407 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.143676191 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.721784061 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.143814498 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.143147797 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.143587919 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.142830315 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.14349774 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.618652643 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.144015498 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.143286082 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.143123277 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.143564776 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.14319323 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.14260756 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.142687271 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.143012584 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.143167186 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.143577475 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.143065599 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.142643748 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.143882898 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.143089913 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.144541069 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.598471974 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.14429535 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.143833226 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.143209071 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.14358808 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.14319618 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.61826328 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.143067441 seconds)
  done (took 67.026367486 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.183337337 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.198265007 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.149636475 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.142390499 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.231617445 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.184852833 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.201469557 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.171172402 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.186477908 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.148863489 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.219443444 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.213554745 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.233969724 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.271953106 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.265754601 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.228421839 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.216376147 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.359827523 seconds)
  done (took 22.938142746 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.147631393 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.147341845 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.146297894 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.14733485 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.153820832 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.17003998 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.166681945 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.161231507 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.166467099 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.169799345 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.157096038 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.166285364 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.169298691 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.144159771 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.143726902 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.14396638 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.143099709 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.14326818 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.143830832 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.143837972 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.143281215 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.143797152 seconds)
  done (took 26.577110878 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.174447112 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.217409722 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 1.216372499 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 1.277568622 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 1.323865802 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.400678532 seconds)
  done (took 8.740431924 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.452128439 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.471769617 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.414858404 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.376119307 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.362036223 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.348288524 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.307473188 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.313793774 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.284739752 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.508741562 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.308654945 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.294971305 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.281134745 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.34223 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.277607923 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.275320697 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.290617075 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.290104366 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.25921394 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.290822106 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.29983458 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.266131656 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.288288249 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.332203731 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.266991167 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.328270386 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.33555156 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.495875446 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.283939612 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.284943996 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.273047096 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.292599164 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.291078137 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.488715007 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.259365649 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.277900479 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.289992414 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.31824837 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.347305551 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.373727755 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.216245007 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.21750138 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.221195352 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.232817116 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.222592744 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.234995057 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.244851032 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.238976105 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.360193859 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.561676515 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.37293748 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.413146514 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.356108073 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.374884288 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.357331851 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.581256838 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.627089038 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.408642922 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.355447319 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.598531018 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.420735985 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.362659055 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.452689981 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.587405057 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.361481618 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.414358917 seconds)
  done (took 90.339661816 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.418797342 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.375832877 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.378760652 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.592808503 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.420424295 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.3785337 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.377578691 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.416703833 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.376588854 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.349703238 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.375420711 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.374906543 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.426145797 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.438676788 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.3981127 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.372044728 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.375772085 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.425959833 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.367885323 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.606583415 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.377257984 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.408198242 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.421195311 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.413138873 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.619578369 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.385602664 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.383917155 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.371233609 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.377610526 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.368917784 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.414013049 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.400581601 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.368351348 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.26135017 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.339813384 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.318657942 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.331361416 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.313931097 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.303137426 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.286934756 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.347186366 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.311578735 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.25415632 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.246360748 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.440986488 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.240538161 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.327107402 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.374500582 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.269319366 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.214521581 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.437404239 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.436570852 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.496370428 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.318603321 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.44408872 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.468506975 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.357430847 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.464729308 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.468280794 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.450029027 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.50060615 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.45485363 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.665841697 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.45544137 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.461749297 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.501329321 seconds)
  done (took 93.398235612 seconds)
done (took 2472.721058735 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.448003027 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.481031174 seconds)
  done (took 14.288455925 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.372373517 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.374501933 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.527832918 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.371435957 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.3913034 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.449565853 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.37773293 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.29552273 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.306079537 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.399503821 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.299475918 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.429464915 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.394963893 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.274724412 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.288967055 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.273811762 seconds)
  done (took 43.192867362 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.411174001 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.79395182 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 3.180220271 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 3.004140498 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.181285597 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 1.841310053 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.484821233 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 5.837940652 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.452037935 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.612193021 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.413142842 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 5.042070433 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 6.066388826 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.296966702 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.628737268 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.624103154 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.688163665 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.746421534 seconds)
  done (took 61.583075211 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.150866929 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.291207236 seconds)
  done (took 8.589161383 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.137575512 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.147490081 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.165243603 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.146935312 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.178273552 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.153630328 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.153969242 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.157107368 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.175447643 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.158028418 seconds)
  done (took 62.725487701 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 6.151318289 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.643028816 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.471976374 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.593314256 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.772407882 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.633590598 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.311425426 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.485751676 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.238488532 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.133508553 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 5.418762004 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.546101124 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 3.003009627 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.424166758 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.772206835 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.40455628 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.89699344 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.511417306 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.474762807 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.549201277 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.422440511 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 5.27455542 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.600884611 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 1.933989213 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.139246925 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.725435657 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.394667636 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.275087693 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.217631575 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.307846051 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 5.522834275 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.160736884 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 5.46426355 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.154048158 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.188004321 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.80717915 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.878711015 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.346426772 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.699793098 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.499737256 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.533147264 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.841517198 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.213799829 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.813744873 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.299852862 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.509991633 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.102370125 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.381065735 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.228936489 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.26187944 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.622931698 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.315057543 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.282138562 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.259492476 seconds)
  done (took 156.25954809 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.132119881 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.519938248 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.287807023 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.134186966 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.537805317 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.350214253 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 4.928817023 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.566339975 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.143583349 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.377148813 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.310173205 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.268822935 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.135386247 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.142094901 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.143299047 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.185100019 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.339912058 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.576630613 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.147912242 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.143185537 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.355503845 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.394254341 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.287463628 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.151300874 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.2998265 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.38209886 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.524294703 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.265278686 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.522292514 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.133538218 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.567598026 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.148334233 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.136014923 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.021030127 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.509314845 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.443948493 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.558951722 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.142671382 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.859645129 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.135194529 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.861904501 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.357136229 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.468134904 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.297007281 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.412220088 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.399555285 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.791004345 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.142954846 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.946261224 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.387514693 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.390101624 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.402979921 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.465183779 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.169165912 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.692789656 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.20392919 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.143725014 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.441040657 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.32472898 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.28158961 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.178599332 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.189135752 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.159878235 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.44284863 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.190748707 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.277090137 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.146486438 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.190016135 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.294600731 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.286671905 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.34418471 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.421002883 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.41204276 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.442211964 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.179262053 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.430511544 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.610709548 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.419848067 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.18854766 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.146185024 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.576581847 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.642100423 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.349563793 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.384136223 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.4765738 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.473756159 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.780814907 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.216815894 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.426598204 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.381902883 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.558797021 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.476807446 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.589434468 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.063790374 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.203301283 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.176954588 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.350711235 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.309378181 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.177253652 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.706048833 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.472599567 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 2.782507586 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.378486235 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.634563751 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.300347758 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.184201516 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.784292664 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.223216537 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.423859571 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.486641059 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.231345518 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.200373037 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.325296043 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.11002971 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.140555968 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.543404134 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.612028386 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.215593931 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.318684001 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.184688907 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.421944957 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.987183857 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.408930816 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.203138005 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.426657143 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.338368768 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.443943587 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.183595309 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.413658859 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.425301499 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.562111897 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.484282252 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.1564368 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.154462636 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.459346269 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.147711461 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.149554208 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.341255556 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.089917167 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.335510569 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.159129066 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.573179564 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.349037109 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.536675923 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.135527755 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.41169636 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.387068241 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.548949659 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.142035345 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.30617832 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.142443902 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.08597774 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.302751995 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.133928004 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.137435174 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 4.959876656 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.13680169 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.309552367 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.369384625 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.826198198 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.505965758 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.492523553 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.132479029 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.564066728 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.336285757 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.559635463 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.65145142 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.307555213 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 5.853580769 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 5.385934444 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.133672122 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.382241305 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.437076596 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.133977654 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.13611984 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.868815346 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.251670003 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.134930798 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.305005097 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.05761303 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.579131328 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.345424925 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.135979465 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.503266918 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.135290187 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.346394077 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.637795899 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.449244119 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.135112595 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.136701055 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.133203147 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.138441994 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.353827459 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.380884258 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.692836974 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.282723436 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.437387323 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.357461343 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.458300237 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.595496217 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.14565073 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.472703594 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.135524532 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.53114539 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.141120986 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.307089999 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.409885808 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.136181352 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.355398271 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.49555521 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.239769211 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.529758012 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.136811364 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.136675874 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 5.859843073 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.312676059 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.573044804 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.134145499 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.266173576 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.500223336 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.264537477 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.333176149 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.387129236 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.132561431 seconds)
  done (took 738.642630989 seconds)
done (took 1086.64698728 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.132765981 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.137585695 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.141907613 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.142147983 seconds)
  done (took 25.686130774 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.107744302 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.211597828 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.323892238 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.146476591 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.49552694 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.203208 seconds)
  done (took 11.630325169 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.134786874 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.139456455 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.143033093 seconds)
  done (took 19.548845072 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.440115618 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.645943845 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.311408879 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.238700884 seconds)
  done (took 6.776405769 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.164416136 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.173970993 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.143327388 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.166060348 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.144188374 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.14415938 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.179002414 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.161982504 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.1443567 seconds)
  done (took 11.556943604 seconds)
  (6/6) benchmarking "26942"...
  done (took 5.664378209 seconds)
done (took 81.992463014 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.432599093 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.431865574 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.147796797 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.462101021 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.270933238 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.463643872 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.262702845 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.164072182 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.446038475 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.543041954 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.648870523 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.2395968 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.445170865 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.561731612 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.393761337 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.172520766 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.158211503 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.206499433 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.731050012 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.320151155 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.578897359 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.279444049 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 5.773788062 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.172809246 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.049889927 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.280618442 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.426972095 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 6.992483044 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 2.146326177 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.1703787 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.228678156 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.621015713 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.407340024 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.49353903 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.284607515 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 2.004308475 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.566681284 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.258386345 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.278959098 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.653377912 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.435375601 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.267694613 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.132407335 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.311255604 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.535389434 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.16338921 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.137174797 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.304446765 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.571512244 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.307896611 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.652177101 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.147657782 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.776299701 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.224163292 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.270069689 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.134478025 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.109552011 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.620926043 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.298064257 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.452511047 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.155421368 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.246669551 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.026195447 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.177001777 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.277006606 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 1.421740173 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.585599985 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.276130713 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.59819882 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.172439726 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.161652825 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.169601404 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.823292554 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.289259354 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.132690681 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.292200593 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.467286836 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.277790556 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.14217937 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.297558836 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 1.373700173 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.160841327 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.282707567 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.454958236 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.309519434 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.48378729 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.633830473 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.547179372 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.581727097 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 7.017481043 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.700601801 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 7.067537605 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 6.245917243 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.173924621 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 7.537615474 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 6.260442604 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 3.404762922 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.600465111 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.281104976 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.668642095 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.174764997 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.159279409 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.467771499 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.447010281 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.908124079 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.179173233 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.298738006 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.132030412 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.439839188 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 6.955852266 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 6.246570704 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.707740213 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.147756565 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.20539862 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.653746755 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.167080595 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.479998326 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.584666351 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.175261615 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.140868115 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.440524381 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.148007775 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.271965622 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.700198449 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.552237261 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.37374622 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.148712898 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 3.450188871 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.174832387 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.389396699 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.171754125 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.77902132 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.692170158 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.178968923 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.395168307 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.269409224 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.134470376 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.494571928 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.196930439 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.368563858 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.476862367 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.470764395 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.301030861 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.133974716 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.471483024 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 6.147145367 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.392116782 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.480440184 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.30992987 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.456003624 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.227436598 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.158273549 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.094383514 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.556204499 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.743389922 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.700949959 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.415434081 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.27941695 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.670318108 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.496430469 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.951846717 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.245765666 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.193557907 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.147420199 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.162923081 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.206949458 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.135005457 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.14439128 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.438933776 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.398601701 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.691996851 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 1.937959822 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 5.850669116 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.4706416 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.297189328 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 2.024889296 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.733473846 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.152499746 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.453617535 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.633408154 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.222396528 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.180589552 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.135262389 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.205865713 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.851449456 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.180314343 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.448865955 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.612736148 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.38966009 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.56362915 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.305651921 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.183684478 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.491872002 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.41570738 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.459539609 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.358699391 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.569528638 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.287051409 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.424949292 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.16832657 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.463924245 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.147654572 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 3.247221862 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.355430616 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.640534841 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.480688405 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.376150682 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.312514907 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.481237052 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.146943792 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.307688513 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 6.244313149 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.523989481 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.174080572 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.277647998 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.245556414 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.608325501 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.063535808 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.263795232 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.375660143 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.294187122 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.26295046 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.642419654 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.157758801 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.47229625 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.308433488 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.309494053 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.388524823 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.176191744 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.272142216 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.419231154 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.313893775 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.397867989 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 1.970782735 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.576507819 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.591589788 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 1.274062942 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.132790481 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.665613163 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.177616111 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.154980076 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.389283988 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.30545998 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.460243095 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.295044773 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.31420731 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.224254305 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.17334335 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.6423431 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 1.982696043 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.735956145 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.058963335 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.172942241 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.133222686 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.53810701 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.54431721 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.209297452 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.281038998 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.72555991 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.181239439 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.301778994 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.149318692 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.150073103 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.884220262 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.279548215 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.38765821 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.70145476 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.149391589 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 3.371416532 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.199247977 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.564735643 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.61878456 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.198635003 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.266449384 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.365642194 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.059915436 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.546583712 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.174389408 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.315792124 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.474114365 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.265973308 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.254556861 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.136364737 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.18126467 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.593524155 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.383840593 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.621349038 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.178744541 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.52886035 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 7.168178766 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 1.379060613 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.160767534 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.227854836 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.535950692 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.30040731 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.539697886 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.150416457 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.308274142 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.395859775 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.167030876 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.140686135 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.282190559 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 7.664923228 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.491094315 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 1.426951497 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.355797902 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.125825491 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.386723821 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.145024407 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.828911779 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.287476724 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.271729688 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.746783329 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.633209012 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.147717087 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.353599113 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.137059503 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.536068999 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.174258543 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.160583819 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.27972397 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.228887276 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.132347619 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 3.794769549 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.338467791 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.64719686 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.200494801 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 2.014911136 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 7.215306225 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 1.322841093 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.256723941 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.462678412 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 6.147809404 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.16246218 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.283242461 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.807171117 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.322796244 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.17847866 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.417306805 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.149787777 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.756812429 seconds)
  done (took 877.774223975 seconds)
done (took 879.078038654 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.327462133 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.514508022 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.377001821 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.039224066 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.941846454 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.780721406 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.39326197 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.36957713 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.213066394 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.392369046 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.070852823 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.941318286 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.232391075 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.254370544 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.233116178 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.274518012 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.332963254 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.379016023 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.253844814 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.079666546 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.528826498 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.080033055 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.569265172 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.43336741 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.513542439 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.24230454 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.340936594 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.56991432 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.570439185 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.324864384 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.358156586 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.409800426 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.972160159 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.376805357 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.234513938 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.22156075 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 1.975533545 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.233590953 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.388029893 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.221872631 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.515492719 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.264762665 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.852212872 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 1.982580019 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.917198516 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.551617181 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.024463341 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.240164566 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.262265022 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.343572512 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.332157327 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.386776196 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.571275154 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.370659171 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 1.996107126 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 1.977279167 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.570289136 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.010465797 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.891001166 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.342594828 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.6620813 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.235061951 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.342115554 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.368828914 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.256288789 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.426088994 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.551830678 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.387727544 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.410788669 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.398741435 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.383031387 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.362457043 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.25604123 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.262869048 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.278793282 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.393853685 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 1.986737443 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.400230178 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 1.946133088 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.242422486 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.050968277 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.07809882 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.09349169 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.214635509 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.329136471 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.91345946 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.084307911 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.043873862 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.254479578 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.410501797 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.069433729 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.376658041 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.595569219 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.342349255 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.328342174 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.375819662 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.093169255 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.327091643 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.122518172 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.410801265 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.919610483 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.342422619 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.178423924 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.227099858 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.240946116 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.38714624 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.342021947 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.555024719 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.36258374 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.30733449 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.514441578 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.278191579 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.362823327 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.254572062 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.213527186 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.917991209 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.414414112 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.976799505 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.326499836 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.811579823 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.435234791 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.226905809 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.515289068 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.433150658 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.328648993 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.232037673 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.240714512 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.030176321 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.240646306 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.234571836 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.317629879 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.593701184 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.34245763 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.019945826 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.363121886 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.927298095 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.376135131 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.362525333 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.213594105 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.054439446 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.232664461 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.095906429 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.434832882 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.51537052 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.378546122 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.434313986 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.254671327 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.411779012 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.327133239 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.25468882 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.363041591 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.26781062 seconds)
done (took 249.98237592 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.475970233 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 5.357323105 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.416575908 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.442875169 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.509738244 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.503860224 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.213822547 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.578669297 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.258016832 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.560211498 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.410242406 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 3.12262565 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 5.342794204 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.360081492 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.495910942 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.384087265 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.25922723 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.405676551 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.597253244 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.499254665 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.924263138 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.401408364 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.288943391 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.565056334 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.133830431 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.912503274 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.499292667 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.272859366 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.409560853 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.925311338 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.939511001 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.41248068 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.50116611 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 4.928079285 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 3.587691215 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.894171604 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.509252117 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.979854978 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.4770404 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.47833612 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.418346758 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 6.036945947 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.920595517 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.941791055 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.313907134 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.494073399 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.211152625 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 5.14785226 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.134361782 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.885096443 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.405574764 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.952285823 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 3.123072604 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.50095539 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.356355884 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 4.824014828 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.632541885 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.632824432 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.499127317 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.448597806 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.47702149 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.565510129 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.560419485 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.323760073 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.92243611 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.441289092 seconds)
  done (took 150.54003968 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.544657 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.446135668 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.546486584 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.5465103 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.717449281 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.542021961 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.656208023 seconds)
  done (took 14.133077705 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.203636233 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.188128188 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.39036087 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.391258836 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.195156118 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.32535198 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.280196533 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.957887533 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.412851044 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.233460749 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.505568724 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.409039496 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.88047174 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.944561649 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.279625997 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.431897433 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.162547972 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.258987262 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.251278565 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.450987361 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.955681704 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.926761788 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.379429773 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.280474036 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.20103837 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.232999919 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.188489357 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.165464077 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.244452353 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.175284697 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.202825007 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.30404443 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.189977099 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.914332887 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.225556466 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.508148559 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.194848143 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.248431739 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.336119302 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.137045301 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.173441777 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.196698373 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.334745137 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.20149103 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.177419636 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.379999977 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.178313854 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.202094957 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.171927074 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.185686531 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.378552693 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.19110585 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.225405012 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.880083849 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.399910678 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.932009106 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.259168808 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.190092211 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.189060644 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.249660441 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.192911708 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.452041524 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.434613324 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.172496464 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.408883583 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.489713618 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.191198124 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.172127963 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.172501544 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.435804824 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.186756364 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.434652863 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.194508766 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.24075887 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.240969017 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.328398155 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.380792555 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 1.978064929 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.949080022 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.862533078 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.15993441 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.175936871 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.487237554 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.141297962 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.878100661 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.176180202 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.247576264 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.851350401 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.105077643 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.189174249 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.502427381 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.172669867 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.249131948 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.24082944 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.229167548 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.250691785 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.413876818 seconds)
  done (took 155.972014021 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.370475323 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.777718293 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.41311637 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.194167278 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.299472606 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.48500301 seconds)
  done (took 15.673949869 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.482681672 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.988652244 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.212206455 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.206773092 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.246226951 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.186143426 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.187462176 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.350502218 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.321244276 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.198425784 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.186225409 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.21525943 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.189448526 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.326780306 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.186877472 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.199405781 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.188922425 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.215511385 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.193234087 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.256152204 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.497116646 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.246378925 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.256098405 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.080612415 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.226890897 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.202583105 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.187567417 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.193501714 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.193372948 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.511448111 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.384994179 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.186878383 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.01548275 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.506081153 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.942188736 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.071142399 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.321052903 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.215091772 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.256766861 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.18688016 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.216602343 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.256479414 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.206259571 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.209749166 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.52972907 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.988603309 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.250580471 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.484488755 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.185989954 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.211309438 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.21687131 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.209448629 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.187268139 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.208248185 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.769577335 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.610614222 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.147204886 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.191535975 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.246584499 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.073543205 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.246402238 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.19109569 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.522050555 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.116366704 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.888500969 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.211219574 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.092034275 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.307134828 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.260433519 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.207074672 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.209597509 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.211786172 seconds)
  done (took 120.282014234 seconds)
done (took 457.7308621 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.536932327 seconds)
  done (took 7.670732546 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.305627259 seconds)
  done (took 7.614919346 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.137155077 seconds)
  done (took 7.286887184 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.150310298 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.191915174 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.160824394 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.173658125 seconds)
  done (took 25.853889579 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.296806983 seconds)
  done (took 7.433373221 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.135085981 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.159006293 seconds)
  done (took 13.535220048 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.183313168 seconds)
  done (took 7.343939792 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.524852818 seconds)
  done (took 7.674168966 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.139494532 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.163389589 seconds)
  done (took 13.476396866 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.135212047 seconds)
  done (took 7.269867046 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.587464721 seconds)
  done (took 8.829074388 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.135183836 seconds)
  done (took 7.313121133 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.206230959 seconds)
  done (took 7.34170209 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.203819433 seconds)
  done (took 7.338228114 seconds)
done (took 137.111984516 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.135453098 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.142340124 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.13938976 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.138969843 seconds)
  done (took 25.690897301 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.47083321 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.471737989 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.448677885 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.522983729 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.415344661 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.414932863 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.470950012 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.471575769 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.415187916 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.561395952 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.471179659 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.621671025 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.521635393 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.448455642 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.448637743 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.517164023 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.621064026 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.470342834 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.415932627 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.448383123 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.622678921 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.622411612 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.905171328 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.893367213 seconds)
  done (took 37.830390066 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.357681285 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.51073757 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.314219187 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.562914401 seconds)
  done (took 6.880242 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.18049557 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.521407546 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.503952165 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.56289737 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.503211347 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.316791963 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.503530823 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.355632062 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.325271692 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.286297119 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.770678153 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.297572716 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.310407179 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.464176034 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.318066831 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.148001468 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.147292404 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.285029335 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.521420184 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.39299111 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.398692462 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.504411222 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.503423675 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.503727573 seconds)
  done (took 34.760039291 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.905924743 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.07761975 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.504273657 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.055086993 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.8714134 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 1.93936245 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.426600086 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.679101218 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.414337871 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.392365967 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.894346459 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 1.837691589 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.290971659 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.032949752 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.909127171 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.324983235 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.324150912 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 1.996348603 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.759159834 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.446613267 seconds)
  done (took 39.217539852 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.135800116 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 6.135544397 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.395057076 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.312741176 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.136047967 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 6.139737858 seconds)
  done (took 28.390086999 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.192716245 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.301772425 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.471086414 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.420574427 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.300431345 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.279960761 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.794688872 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.366281867 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.915844084 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.933164922 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.771065142 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.595345913 seconds)
  done (took 22.482952356 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.135700566 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.18030274 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.143694109 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.312510541 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 1.974090842 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.01308851 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.465089054 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.13571585 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.22562107 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.341342278 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.017129657 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.312124142 seconds)
  done (took 40.411764977 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.33943463 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.378424299 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.469804006 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.996266075 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.674958203 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.236774908 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.570369934 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.654365571 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 4.209282834 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.985547907 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.678699541 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.202380294 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.671076325 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.111037712 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.137044862 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.459504635 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.967167907 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.63496879 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.579725877 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.222629327 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.098128623 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.29336962 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.143587348 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.682014359 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.4708422 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.14065854 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.359001332 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.38549979 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.135314416 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.349079595 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.136971883 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.619876349 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.3241842 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.448507808 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.66786657 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.224031053 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.25626368 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.272709475 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.729306409 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.434046284 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.28294 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.302509907 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.1366646 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.362809354 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.397499266 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.92019478 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.149884698 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.790643228 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.118136462 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.253025496 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.037845285 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.371775453 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.465795264 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.113882983 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.281502711 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.459666415 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.300671928 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.288449118 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.442193153 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.182341996 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.33404274 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.258061457 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.33681723 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.109326465 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.370443952 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.49043797 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.491249627 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.466696803 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.39630511 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.449996235 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.495365501 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.259843712 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.967960749 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.277742315 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.675680211 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.050215264 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.501800482 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.138518996 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.869375889 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.672079648 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.11506292 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.253336782 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.809031802 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.097823539 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.136387514 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.302656141 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.755841464 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.109763199 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.232480206 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.219246044 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.557075247 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.276393832 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.293292185 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.406805741 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.839629548 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.151076451 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.903388878 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.43713838 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.109218068 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.701627619 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.135938042 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.117963422 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.137467716 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.712561099 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.538263545 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.189762619 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.909591487 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.800271187 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.453730737 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.76824599 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.306614223 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.972978256 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.495202861 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.468647962 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.136073127 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.827739457 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.277395787 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.258712519 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.499786976 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.136674486 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.110103075 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.53529081 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.323115589 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.137588046 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.366720413 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.139313657 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.282454422 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.136722919 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.872509529 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.189590783 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.382299401 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.673097285 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.365945053 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.227054307 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.107854508 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.279626696 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.645470511 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.235062361 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.48478879 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.5818812 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.746111762 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.612692823 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.127801634 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.977592375 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.620846455 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.41158126 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.478270137 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.750279757 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.315079393 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.233193304 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.136610939 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.30981711 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.150098524 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.696115365 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.189867667 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.818325889 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.126661395 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.450772439 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.13664771 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.115421985 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.291137993 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.370363795 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.820289939 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.191927455 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.303206113 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.41633973 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.377498417 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.137718401 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.109323822 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.500971731 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.416051018 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.667752998 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.402602032 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.833386346 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.488823992 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.624446543 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.358008602 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.49851914 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.952215 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.388200448 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.479150486 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.783713833 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.166625438 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.137628424 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.204301032 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.569564317 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.367893431 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.840219558 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.445725736 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.192314392 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.154738754 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.718264844 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.110633729 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.289015006 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.60471389 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.172282199 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.700213001 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.350900712 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.339921686 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.427429899 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.173606257 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.487312192 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.970291693 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.55703266 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.512851382 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.453942377 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.117233949 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.921528738 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.649070811 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.649306888 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.287818606 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.544657342 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.406954898 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.203450694 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.137305952 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.485615106 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.087101085 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.967942279 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.454120955 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.809460709 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 3.825071087 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.298409253 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.137269213 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.154911043 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.086963392 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.315767395 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.205132301 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.312792139 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.683811859 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.410998319 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.46756098 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.13624173 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.145337318 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.417069609 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.446135214 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.414917264 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.64623916 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.761040245 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.827451643 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.250637125 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.798641475 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.30689406 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.179543827 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.80581451 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.471744796 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.089727756 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.312748111 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.959491897 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.284070471 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.320125971 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.42091732 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.137797288 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.619823685 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.763985912 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.139761568 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.165132371 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.289740722 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.138029141 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.401382152 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.035973203 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.39440957 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.321065594 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.447158555 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.378460765 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.313714757 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.530412291 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.672293177 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.506456914 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.111136638 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.302710125 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.286391085 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.449635704 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.13712555 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.422441695 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.785647603 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.822697474 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 1.967073995 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.688980962 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.362642207 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.804685175 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.612691629 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.397409676 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.457216826 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.099427497 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.810833419 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.131002382 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.277900383 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.109209457 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.927218943 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.472023812 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.532833869 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.623549574 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.21153463 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.672920517 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.543508199 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.190884888 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.299580246 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.399040738 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.136381454 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.446791442 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.136971149 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.424766754 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.550117006 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.137606164 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.88209989 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.333785039 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.473351261 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.302966453 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.799132565 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.184361156 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.267206718 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.604435066 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.316317406 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.282465665 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.478116649 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.222819366 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.183964542 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.204577277 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.706145364 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.768575728 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.618270365 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.759712556 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.722561777 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.483577238 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.909128491 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.138594301 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.359677433 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.305279143 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.11980587 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.3341097 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.529861879 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.175174473 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.34012713 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.454805485 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.357488534 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.705202804 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.208450439 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.741709243 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.398492681 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.66188145 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.700619224 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.919776847 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.615591772 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.533203721 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.67779082 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.118941581 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.302130575 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.375817646 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.871611402 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.176312062 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.985831272 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.932271986 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.27500633 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.576367221 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.21146548 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.935248469 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.310255412 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.373463769 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.357741218 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.276002143 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.106111477 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.794446038 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.912188126 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.417207456 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.3033754 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.312055847 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.262494898 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.649086668 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.697044628 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.451021668 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.90857011 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.617326134 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.384637192 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.111235866 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.137562729 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.840413483 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.321901356 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.234626948 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.450954619 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.569333458 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.196108514 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.189041157 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.537011398 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.421881645 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 2.880572707 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.864011322 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.471387159 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.660804606 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.741932199 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.903702465 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.909853676 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.360920004 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.498496239 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.539809256 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.050603402 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.523196209 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.451472662 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.299556508 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.110356011 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.316460726 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.140612461 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.247093336 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.908234182 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.437282222 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.206426993 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.30584504 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.755908408 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.484621969 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.186666412 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.744269594 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.427655011 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.336353251 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.137346252 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.781355435 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.560231102 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.305988655 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.121655706 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.902514551 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.109799508 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.360983511 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.478121763 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.348810916 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.970485931 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.215804947 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.81624912 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.682968536 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.562381202 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.355954937 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.109396426 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.206107574 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.164404838 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.820303074 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 1.963225981 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.387516957 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.661058189 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.311846815 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.142191426 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.467339649 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.271554781 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.452508276 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.426585672 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.627601358 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.564135248 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.501582041 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.436815887 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.605370615 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.294987908 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.381792315 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.109135088 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.137788595 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.210335835 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.513091321 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.514083991 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.137340134 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.702915044 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.387447516 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.257306957 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.333047181 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.242742151 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.758292264 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.348387551 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.270750998 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.312555804 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.390716997 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.503071716 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.137964719 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.382043888 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.184653737 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.130632779 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.363450546 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.389005419 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.523051897 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.453499216 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.035505882 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.296056442 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.884414425 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.992523788 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.671138846 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.13905807 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.934688816 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.512833475 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.138039291 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.625745018 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.795577801 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.314437835 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.414665143 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.266432162 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.494897469 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.336349426 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.656879944 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.140814895 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.794984181 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.558764711 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.138254453 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.616309107 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.222876227 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.309019328 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.866609172 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.636248754 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.138698697 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.931093742 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.317355826 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.699276829 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.412911778 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.308964807 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.151381067 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.886162791 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.114903039 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.138920112 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.257307383 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.672238441 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.160232894 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.721619841 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.296030386 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.310842502 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.145239474 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.28054275 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.137828412 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.359390405 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 1.74180797 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.383794544 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.415066836 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.312625943 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.139967298 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.816893129 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.830701518 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.589416514 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.353941267 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.470956548 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.515986752 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.894958393 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.469002445 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.718291389 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.379464007 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.366336292 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.578825492 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.399234977 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.174203287 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.338338276 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.138618176 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.459003098 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.299871446 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.704071922 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.408449285 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.54493491 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.495230241 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.167099443 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.693843118 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.613992486 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.027301349 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.137385888 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.449492068 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.137453336 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.939446824 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.770072872 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.334972561 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.266744966 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.122899925 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.738712151 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.451909884 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.274909994 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.140171849 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.352096778 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.65303526 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.110738513 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.945997701 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.02929735 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.331488784 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.46760179 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.110536271 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.31463022 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.157718932 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.117812327 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.636775986 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.138456134 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.532123837 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.111594778 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.676474128 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.114424917 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.222660171 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.306403968 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.487066133 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.138012632 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.122737973 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.309046747 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.137342811 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.137363105 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.487060322 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.229171795 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.392569639 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.616429853 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.370389 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.485865312 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.018994913 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.20197006 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.157580754 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.448318055 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.972374714 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.69802988 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.221147824 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.668356865 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.21737082 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.16082112 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.692405303 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.386751423 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.859513543 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.285444868 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.640329657 seconds)
  done (took 1969.061248871 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.227565827 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.175987983 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.199869312 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.247646277 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.303258986 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.303024266 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.170848028 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.17240564 seconds)
  done (took 50.937776679 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.137623331 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.112883879 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.601475237 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.324613672 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.167213685 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.361601938 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.300377548 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.638200936 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.345518092 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.172503517 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.205076706 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.19281201 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.153996371 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.183204405 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 6.045855778 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.227807314 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.144590802 seconds)
  done (took 91.473478128 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.149667654 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.359539522 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.151442271 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.047249544 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.172821348 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.534381797 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.153994308 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.138225024 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.481970855 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.426536109 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.192110559 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.289374159 seconds)
  done (took 81.276410306 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.178087726 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.178178692 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.191846293 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.186975995 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.225737344 seconds)
  done (took 7.128229242 seconds)
done (took 2436.703532319 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.386860594 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.611990818 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.692190114 seconds)
  done (took 4.463463024 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.246610013 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.296318955 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.363398766 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.342641488 seconds)
  done (took 6.433371085 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.581502725 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.766492081 seconds)
  done (took 4.564334773 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.756306226 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.288252925 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.726451581 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.167172368 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.173864704 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.171834385 seconds)
  done (took 19.690044587 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.215876898 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.202547589 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.202724495 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.194080322 seconds)
  done (took 5.989907706 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.165148994 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.197183194 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.174522654 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.161075209 seconds)
  done (took 18.862648629 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.535152214 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.441173857 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.904464331 seconds)
  done (took 6.074854975 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.98003802 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.56363493 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.979269382 seconds)
  done (took 6.704645241 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.106880472 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.112678871 seconds)
  done (took 5.410477689 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.36576362 seconds)
  done (took 2.565695794 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.651854168 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.6552722 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.040728544 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.03377486 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.189527736 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.489134626 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.496902748 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.491325094 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.851003833 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.709977546 seconds)
  done (took 18.776981673 seconds)
done (took 111.848041351 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.050427974 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.575950408 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.395499688 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.853900089 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.25135606 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.417494849 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.775074244 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.644207305 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.45171575 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.448836195 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.379076555 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.259225443 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.190882003 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.550698369 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.251376809 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.579542389 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.376853384 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.08848811 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 3.4087868 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 3.788509994 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.769092762 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.738432287 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.043016076 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.736011164 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.312469106 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.302026827 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.086525383 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.492323308 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 3.653077768 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.098685855 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.315645392 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 3.976537913 seconds)
  done (took 153.417521931 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.137346969 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.154061703 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.154690629 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.14891723 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.122915749 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.155204933 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.157454512 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.154238446 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 4.820506662 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 4.826542659 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.154268086 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.137687487 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.155555584 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.149618998 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.156678851 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.149308842 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 4.956886741 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.154443095 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.156099106 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.154629898 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.15502835 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.016074501 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.154040038 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.019288534 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 4.962489441 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.154608421 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.149507069 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.153504717 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.153473691 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.154533894 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.153829532 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.149104357 seconds)
  done (took 188.68676118 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.137744192 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.153807201 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.154142681 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.150174516 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.153347258 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.155319377 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.151514238 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.149420394 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.152828785 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.153649558 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.15389878 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.153143161 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.15444704 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.150025417 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.152514588 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.150145605 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.152574288 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.153906542 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.153115364 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.153930761 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.153564734 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.150135554 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.153456071 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.153047691 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.153579195 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.157279481 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.150005688 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.154968163 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.153643067 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.153405085 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.15687378 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.149866194 seconds)
  done (took 198.033556322 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.447449889 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.180346721 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.076679354 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 1.712008197 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.055651641 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.17105752 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 1.710521538 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.448215106 seconds)
  done (took 13.955433333 seconds)
done (took 555.260740023 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.814932832 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.081069895 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.330525511 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.366503889 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.751359434 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.451024705 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.364279822 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.623218764 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.882481534 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.608112265 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.632002581 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.373486184 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 1.970998616 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.373080192 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.333535521 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.613223818 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.574889551 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.868175486 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.351810218 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.019660335 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.365419347 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 2.007042875 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.651276187 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.933855328 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.626956983 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.058586071 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.235943312 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.57853397 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.361006218 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.355810959 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.124230135 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.515579494 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.378428175 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.373383738 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.642564326 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.639278128 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.472409319 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.57375411 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.320761023 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.811883991 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.015092808 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.748922882 seconds)
  done (took 76.313138212 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.170228989 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.187965801 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.33757493 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.240349125 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.809889758 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.248318231 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.408971898 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.378815353 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.270538515 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.385787703 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.424750854 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.848342643 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.416917662 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.790924856 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.402212441 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.426202237 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.247718919 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.770940586 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.401141219 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.377183616 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.213639898 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.332493854 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.217652647 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.363848433 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.206886961 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.220530988 seconds)
  done (took 37.266594554 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.218879122 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.356854581 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.442273849 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.54717103 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.404122102 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.193050759 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.509487953 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.296728944 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 3.120955146 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.496191705 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.279960016 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.291086922 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.345844799 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.469829943 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.766139647 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.383211982 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.392289148 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.355904792 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.365821006 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.4014661 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.314126453 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.262274243 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.513895001 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.313442409 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.856848053 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.540948776 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.561812779 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.743269152 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.720485579 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.355224387 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.326962716 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.513231676 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.576981893 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.444897292 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.317325667 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.200938373 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.199168118 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.28132253 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.09054775 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.344665895 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.505938175 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.372728638 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.584275733 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.742935044 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.253495263 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.426918251 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.602683088 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.287165213 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.312237179 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.980068541 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.493123445 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 4.150288845 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.339455899 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.38132541 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.311598728 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.573860691 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.382914905 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.447765317 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.371237445 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.864132315 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.257555089 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.566156325 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.369926473 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.260348943 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.511397647 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.394398677 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.361542425 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.611714611 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.584459148 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.712900243 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.763544948 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.268316622 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.210433132 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.276365869 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.362245107 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.632681928 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.639981317 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.458230527 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.580203938 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.496191507 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.731150083 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.605171281 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.163685782 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.887378992 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.244491712 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.186279514 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.270040922 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.533493845 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.493728754 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.683106505 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.750432513 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.469170847 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.586797051 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.599570768 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.615244079 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.580895942 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.175903183 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.198715181 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.429904027 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.755756545 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.2621815 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.408923473 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.868287205 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.591478342 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.515686808 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.478426626 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.594445995 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.263760994 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.638745617 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.168900406 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.374490297 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.45785748 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.445081422 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.537334618 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.171451409 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.718901588 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.302003057 seconds)
  done (took 233.718567959 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.140051281 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.154684718 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.13916854 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.155116712 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.139057157 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.764638963 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.219080148 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.139339977 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.763243264 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.220148046 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.139076183 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.138624444 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.141019977 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.144618632 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.754675675 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.718946819 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 2.971106161 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.140196083 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.139941829 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.151016206 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 2.975285877 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.141502536 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.1386316 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.15120001 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.141084021 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.14057399 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.141461728 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.195798158 seconds)
  done (took 153.443456567 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.199453263 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.584582814 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.246113442 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.290320024 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.243621869 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.220391349 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.712692037 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.345756289 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.275875632 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.225426045 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.211382239 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.426506778 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.450929633 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.812904014 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.331932195 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.328027016 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.865570024 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.344796464 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.211899641 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.204540423 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.36439842 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.564334702 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.490284849 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.469271674 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.366786151 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.473337205 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.281830369 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.209026798 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.330034248 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.697070296 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.224929872 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.579448038 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.348077012 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.214863709 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.714017325 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.55120221 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.789623463 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.768082896 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.395000007 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.16963745 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.166966939 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.440842087 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.510761358 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.256934833 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.203817946 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.859574969 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.227122918 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.610754788 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.241291891 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.166662693 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.29934342 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.309734791 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.472097202 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.229174371 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.374912288 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.353996022 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.706357323 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.18896988 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.275207266 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.503365346 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.185099381 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.694897121 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.69382498 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.268952492 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.220933702 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.061904586 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.289005666 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.736749257 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.97663716 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.255910605 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.59811062 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.396421242 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.183277038 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.471121484 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.379324039 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.645357502 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.788326644 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.339108243 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.305201153 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.281381598 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.482920572 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.194158186 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.745311004 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.305567078 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.181654249 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.697736162 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.592105627 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.18167942 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.196150959 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.309977509 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.358467562 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.400136408 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.484121726 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.273968792 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.102328596 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.462924773 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.515911219 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.22349074 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.331341199 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.197452636 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.60309236 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.385960558 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.188548444 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.517959725 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.595140326 seconds)
  done (took 160.375198725 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.897139374 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.25977031 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.389052958 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.800602419 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.519057528 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 2.641240493 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.473387022 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.283871276 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.501407141 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.418764411 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.463561578 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.292295228 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.884131676 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.956200166 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.258875085 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.428153779 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.272938724 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.789896596 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.507067021 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.204215546 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.509692056 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.010640233 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.516726386 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.655533937 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.64254266 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.697589471 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.854564565 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.350017918 seconds)
  done (took 49.631291853 seconds)
done (took 711.881030963 seconds)
SAVING RESULT...
DONE!
