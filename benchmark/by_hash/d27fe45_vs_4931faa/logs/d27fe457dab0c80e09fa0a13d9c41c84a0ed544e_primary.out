cset: moving following pidspec: 941191
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.425348998 seconds)
loading group "shootout"... done (took 0.894638166 seconds)
loading group "string"... done (took 0.240864933 seconds)
loading group "linalg"... done (took 3.439427978 seconds)
loading group "parallel"... done (took 0.024095637 seconds)
loading group "find"... done (took 1.280461009 seconds)
loading group "tuple"... done (took 0.787784323 seconds)
loading group "union"... done (took 3.335276109 seconds)
loading group "dates"... done (took 0.167163412 seconds)
loading group "micro"... done (took 0.062391001 seconds)
loading group "simd"... done (took 0.385295727 seconds)
loading group "io"... done (took 1.483473042 seconds)
loading group "random"... done (took 2.549022338 seconds)
loading group "problem"... done (took 1.220176771 seconds)
loading group "array"... done (took 4.780744265 seconds)
loading group "misc"... done (took 1.203343599 seconds)
loading group "scalar"... done (took 3.72203606 seconds)
loading group "sort"... done (took 0.331980983 seconds)
loading group "sparse"... done (took 3.718716332 seconds)
loading group "collection"... done (took 6.436762397 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.581694842 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.082903771 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.27165701 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.079796784 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.289589375 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.091110374 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.094937213 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.080064038 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.242681333 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.172372934 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.228113129 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.409042322 seconds)
done (took 5.396296199 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.341875122 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.03543604 seconds)
    (2/2) benchmarking "String"...
    done (took 0.132484808 seconds)
  done (took 0.795236376 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.145168549 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.018059734 seconds)
    (3/3) benchmarking "different"...
    done (took 0.025635249 seconds)
  done (took 0.81269118 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.022986587 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.103511301 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.023717111 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.024185726 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.02427973 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.023811379 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.023682195 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.023687007 seconds)
  done (took 0.869958475 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.031182296 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.025390981 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.023436256 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.024835611 seconds)
  done (took 0.72950198 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.024593818 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.099411699 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.030507234 seconds)
    (4/4) benchmarking "different"...
    done (took 0.030425795 seconds)
  done (took 0.805151558 seconds)
done (took 5.015437207 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.212119516 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.807815181 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.94113234 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.190043202 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.366741074 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.302155079 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.082020122 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.251023151 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.161979433 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.033542108 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.194780685 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.039818619 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.53046085 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.492276462 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.02875254 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.15228802 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.590224276 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.039865586 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.073009863 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.245811644 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.037701586 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.041436526 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.04646689 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.030131744 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.193730969 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.141353645 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.602704225 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.068811575 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.026884891 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.051156232 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.029688429 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.037777841 seconds)
  done (took 9.714956598 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.159758969 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.155468874 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.026760739 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.063353945 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.054727135 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.02785279 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.03362699 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.025465127 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.047364684 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.094348004 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.049924406 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.163857022 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.023952787 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.027606595 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.146242246 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.121960217 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.040494782 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.040636771 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.02499243 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.040268921 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.05305988 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.038081435 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.035761828 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.035603869 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.073097762 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.092758572 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.04391496 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.067847937 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.024856438 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.037292574 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.054764224 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.066711093 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.025335922 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.023727818 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.069670791 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.043307347 seconds)
  done (took 2.849566428 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.795070155 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.056428384 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.152653716 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.138895856 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.072438235 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.054748084 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.190474508 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.084693959 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.059718354 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.026342674 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.218645204 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.689733609 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.17900092 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.13034499 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.029700105 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.190786112 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.95788189 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.950288152 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.025857296 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.026918892 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.138760917 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.028906339 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.179725559 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.023797315 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.140991474 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.727751453 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.140276803 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.032589076 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.059108718 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.153609414 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.02408025 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.104496486 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.05192277 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.028107064 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.579916283 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.023795203 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.022259305 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.044912048 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.055808699 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.024770704 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.025666304 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.03451404 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.023871754 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074907306 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.036350709 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.532710182 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.027830519 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.733542762 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 5.029458965 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.032330603 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.029043809 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.064355706 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.022553258 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.026232584 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.536689552 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.100859 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.025128855 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.310052851 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.027175715 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.026392943 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.027010379 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.059865084 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.026277247 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.027508583 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.029291621 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.044695398 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.029674207 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.03530746 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.04528754 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.024270531 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.025055363 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.023794403 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.424512648 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.031174564 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.027733685 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.023265316 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.029576674 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.025728449 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.025205738 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.066703137 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.052353371 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.050664705 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.029142953 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.026206366 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.02513967 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.528177856 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.955878022 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.02696063 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.026844604 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.539030079 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.023183075 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.02563405 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.027517031 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.047808969 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.026337174 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.02286812 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.062301947 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.027967051 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.139054061 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.323768101 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.028238156 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.023512612 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.465521041 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.02702157 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.062313183 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.083611662 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.025562146 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.071163925 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.025962395 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.0231077 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.029475188 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.022838974 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.027169706 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.023818227 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.025052547 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.023999882 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.025909718 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.026807357 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.026713683 seconds)
  done (took 24.492974515 seconds)
done (took 39.478294564 seconds)
(4/20) benchmarking "parallel"...
done (took 0.860797846 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.229528601 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.056390222 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.022741459 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.173514475 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.050184818 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.144352606 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.187437224 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.135715737 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.050641338 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.05009871 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.050023674 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.191086027 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.199991425 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.051492405 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.124669074 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.200398308 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.05171998 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.022644286 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.050942439 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.050846167 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.050817661 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.022093183 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.050565594 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.051880719 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.124483104 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.050537816 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.022099264 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.124742922 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.051262299 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.126299697 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.053444916 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.052425369 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.053148334 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.126528414 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.053514481 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.12621475 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.022870147 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.053063917 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.053892281 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.054833128 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.053711563 seconds)
  done (took 4.228957363 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.050537706 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.043530543 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.061113692 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.02108914 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.032194561 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.04433952 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.020857607 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.044099733 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.06470504 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.044307022 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.044093504 seconds)
  done (took 1.25326379 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.045404759 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.044767106 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.05367394 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.020687529 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.034146845 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.044745386 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.020773591 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.044417348 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.062051498 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.04418459 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.044681748 seconds)
  done (took 1.184739352 seconds)
done (took 7.375715298 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.159365864 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.130298789 seconds)
  done (took 0.99802714 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.613666301 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.222533498 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.137838148 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.258837781 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.13076897 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.163978045 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.925100965 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.165125303 seconds)
  done (took 7.39428198 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.083324579 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.150352331 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.028102828 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.025881862 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.026074491 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.025800739 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.027480125 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.02610188 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.025392558 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.028213058 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.027943761 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.026023276 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.026825183 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.027999101 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.025918003 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.026170142 seconds)
  done (took 1.472852755 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.030178484 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.028193892 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.029328497 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.018959997 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.030240344 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.028762502 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.03052503 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.031356113 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.029646901 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.029947722 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.028026622 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.031392832 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.029510609 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.028070941 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.030551685 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.018991413 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.03059472 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.030035637 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.032417198 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.030681621 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.029650296 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.027665909 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.031009351 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.028877358 seconds)
  done (took 1.434423171 seconds)
done (took 12.021684302 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.150457303 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.032883202 seconds)
  done (took 0.913419399 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.133454142 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.135483127 seconds)
  done (took 1.001938933 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.030075739 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.017570572 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.034953668 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.027136774 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.018105072 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.017628265 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.033721675 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.017946608 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.017709681 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.017763468 seconds)
  done (took 0.971353644 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.020674294 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.025117794 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.023339049 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.021478143 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.023343339 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.019204718 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.02187322 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.019677885 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.02543757 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.018432408 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.022265285 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.042523697 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.022107987 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.043246786 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.022127184 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.022388803 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.023870167 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.021534321 seconds)
  done (took 1.175332104 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.019059554 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.018744944 seconds)
  done (took 0.780398386 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.021725393 seconds)
    (2/7) benchmarking "second"...
    done (took 0.018676883 seconds)
    (3/7) benchmarking "month"...
    done (took 0.020653195 seconds)
    (4/7) benchmarking "year"...
    done (took 0.020642197 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.018450325 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.018025466 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.018574266 seconds)
  done (took 0.87035035 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.430048264 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.100205413 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.348452519 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.027758391 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.041713002 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.251760884 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.022402663 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.0271095 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.026867102 seconds)
  done (took 2.015159178 seconds)
done (took 8.462140076 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.048127608 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.150661648 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.155596186 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.46917546 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.037869149 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.025491376 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.06036913 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.23433524 seconds)
done (took 1.930826505 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.517332986 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.361591073 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.208190848 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.026942669 seconds)
  done (took 2.324588049 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.332707484 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.150434299 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.03470264 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.026014932 seconds)
  done (took 1.304421402 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.023795517 seconds)
    (2/2) benchmarking "read"...
    done (took 0.030480559 seconds)
  done (took 0.805619473 seconds)
done (took 5.683357488 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.031301797 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.018549383 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.025446173 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.020825594 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.020221592 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.019846236 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.019685797 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.020667986 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.01870222 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.020518285 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.020298466 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020343573 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.020091556 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.019912177 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.019083022 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.019886981 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.017835583 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.019498174 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.019425791 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.019460954 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.017775964 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.019771937 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.018977115 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.019363194 seconds)
  done (took 1.234673753 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.039995834 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.024241564 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.024259803 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.024234638 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.025902624 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.024386661 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.024197169 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.024110134 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.024515796 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.023216227 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.025393896 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.025493774 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.023004729 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.025463203 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.023187221 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.025615805 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.02454769 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.024257068 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.023133823 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.025455545 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.024319811 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.024241676 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.025332366 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.024364835 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.025442456 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.025567658 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.02332047 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.024404406 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.024431424 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.025410393 seconds)
  done (took 1.479257118 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.024618623 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.016106119 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.016558612 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.027645469 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.01614945 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.01629691 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.016798276 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.015907894 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.016314595 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.017138235 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.016621341 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.016033014 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.016929705 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.015977748 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.01608507 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.016846496 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.021943788 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.038974774 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.016787893 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.016540957 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.021996168 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.016903146 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.016675672 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.016698793 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.017325941 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.016725517 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.016477692 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.017187843 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.016734189 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.017296904 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.016818376 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.021994164 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.023632097 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.017188657 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.028401126 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.022708719 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.017612833 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.022408462 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.018060822 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.016828893 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.016690885 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.016676985 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.016837835 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.017025833 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.029013625 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.017359199 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.018144633 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.01747082 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.017143806 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.016703235 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.016871002 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.018730659 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.023473978 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.018238492 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.016803256 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.018202896 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.016816612 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.017506505 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.016885111 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.016795083 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.016827976 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.021785081 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.018479113 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.017673697 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.041747938 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.018389223 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.029091793 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.018090862 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.017553462 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.021732277 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.0174843 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.039755876 seconds)
  done (took 2.128011823 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.028918683 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.027758812 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.038849146 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.028194288 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.020871173 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.017920942 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.021335918 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.017929481 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.028451273 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.021845897 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.017955663 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.021360642 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.028344838 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.021843352 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.019086923 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.028372636 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.021916756 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.021315925 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.018286872 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.021912131 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.019140335 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.021360196 seconds)
  done (took 1.274752989 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.113079469 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.025643131 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.075594031 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.02513322 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.023562051 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.024746498 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.025667478 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.027065003 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.026183119 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.027075294 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.026957492 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.025621216 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.023257033 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.026483287 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.026845056 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.026519619 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.025629808 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.026614693 seconds)
  done (took 1.358788539 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.037144015 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.023794022 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.054732348 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.023803623 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.02400203 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.02369067 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.028173028 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.027735451 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.023458425 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.023896072 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.028071948 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.023644725 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.023638287 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.024120073 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.023709157 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.024042721 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.023453129 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.023759431 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.027681815 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.028061375 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.028094519 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.027545732 seconds)
  done (took 1.354129051 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.039389204 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.023100332 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.043657022 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.026039883 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.017128432 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.017084407 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.025882987 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.024400994 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.025709809 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.023404563 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.024594592 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.017207549 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.026665472 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.024571607 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.02689381 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.024844015 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.023565767 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.024464744 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.023524839 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.017180993 seconds)
  done (took 1.232905599 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.13599575 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.019856293 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.019307776 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.024154037 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.019279784 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.019307079 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.02428727 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.019303081 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.019307998 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.045832177 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.01952261 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.019340547 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.024241817 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.022299255 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.019331439 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.024183035 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.024102291 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.024024534 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.019394382 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.019335986 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.045612968 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.01977362 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.02422909 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.019271556 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.019277422 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.019894183 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.019296158 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.022362701 seconds)
  done (took 1.509306634 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.041999982 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.016475778 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.016683101 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.021014282 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.021093083 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.027652274 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.021287916 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.021167966 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.01657039 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.017560039 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.019258398 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.01661902 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.016745108 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.027345999 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.016592276 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.019057133 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.027347487 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.021469653 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.028325427 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.030628518 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.019405622 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.027384715 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.019234605 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.017059489 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.028314684 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.019358529 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.021373003 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.022210909 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.019339014 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.017075145 seconds)
  done (took 1.413178826 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.031918885 seconds)
    (2/2) benchmarking "in"...
    done (took 0.029501731 seconds)
  done (took 0.823856607 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.019493445 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.036989492 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.016907373 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.032209385 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.02759744 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.022136039 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.027056131 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.027380922 seconds)
  done (took 0.968683687 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.130445251 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.160296541 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.019400741 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.019452786 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.130133117 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.091597837 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.141810855 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.031831749 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.033458869 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.022312789 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.019265048 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.141755945 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.018877974 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.033510156 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020278889 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.029646414 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.02649945 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.038667292 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.032878799 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.017497975 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.032401665 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.019422078 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.018309186 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.019308523 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.019795013 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.026067749 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.035620999 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.032389305 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.027507609 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.016767524 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.038621643 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.017626332 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.018413517 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.027442508 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.130317279 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.018168056 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.05854369 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.018065168 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.022285594 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.01757232 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.030526049 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.040367929 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.033522887 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.037139049 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.01921609 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.019736895 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.017528247 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.019357993 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.022137372 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.027332153 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.017805518 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.025888471 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.017429132 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.019134893 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.029093724 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.018011022 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.022669827 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.027785521 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.032387862 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.028870072 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.031176607 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.034565919 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.027232279 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.026701996 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.018516794 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.03931196 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.019636903 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.032197308 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.033806356 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.019067086 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.031469396 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.017669059 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.016899978 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.017778163 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.05439113 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.019513873 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.019711253 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.017879024 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.017902455 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.019441115 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.027981687 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.022846973 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.025753941 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020926979 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.034807127 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.027547553 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.017688952 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.02532586 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.0376346 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.022320384 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.017862691 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.036112024 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.022352458 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.017667671 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.037388532 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.029519906 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.01942843 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.018428625 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.022301408 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.032879959 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.019701743 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.017130529 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.027167766 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.020103293 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.132403812 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.023395596 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.026944975 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.018073057 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.029043236 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.025047825 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.019759816 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.017148297 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.023459262 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.019039462 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.017089583 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.028186825 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.018204234 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.034198018 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.025678612 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.034185932 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.034407734 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.02959029 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.035463216 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.018189282 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.017163746 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.03836999 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.028302996 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.019715556 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.038096697 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.018208476 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.029720387 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.018274022 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.019784027 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.028052118 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.017566014 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.019945372 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.018333871 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.024857139 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.019832662 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.02022443 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.02489163 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.027578633 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.031679949 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.019690807 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.027867134 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.018785024 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.035736781 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.028924999 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.023873347 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.022007383 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.019119318 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.031382171 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.025876164 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.02814576 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.018273516 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.019274504 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.018531396 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.030833522 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.028842846 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.020354916 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.028149524 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.023686929 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.019175098 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.018327285 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.019430662 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.022644032 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.021952794 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.018902141 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.026723355 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.027635013 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.033993415 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.027133004 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.028935912 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.017875705 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.018213115 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.020275172 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.018151695 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.023673642 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.02819868 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.035427852 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.031170866 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.041936893 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.018654923 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.02830582 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.020142316 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.036715416 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.03302181 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.019339568 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.023090759 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.017141108 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.019961969 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.027777324 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.030143147 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.033580299 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.034718597 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.024018774 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.02373378 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.018183523 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.034639309 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.019007411 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.027479535 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.028228443 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.02500469 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.018181417 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.020275172 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.02796827 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.024081787 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.0196358 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.035797899 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.026878633 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.01833919 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.034307179 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.018877409 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.029950452 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.018373639 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.022811357 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.024389655 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.020583434 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.02885416 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.035473917 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.017522374 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.018868958 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.035490096 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.020648613 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.020391865 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.027084555 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.034952236 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.024046204 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.027077589 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.029838761 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.030195266 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.023775713 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.0299129 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.019727236 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.028462041 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.022133839 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.031284196 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.01855247 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.038842694 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.017556816 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.035027273 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.019276137 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.030497872 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.018972929 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.02847058 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.019435802 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.037658934 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.020411129 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.019372601 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.03129479 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.017511869 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.02826888 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.018267781 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.024158237 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.026007165 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.028306345 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.020456048 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.028679385 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.020390259 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.027965758 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.024139583 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.181234082 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.028066366 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.023868415 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.018019781 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.028749775 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.029392761 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.027165607 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.019530924 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.019468031 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.018472618 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.02822845 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.019544014 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.0188586 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.026882766 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.023916847 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.025289045 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.019455635 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.01950117 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.019174359 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.027114601 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.02821409 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.037709512 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.027242186 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.026182208 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.027804443 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.017804873 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.034786387 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.017756546 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.026172587 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.017150016 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.024161753 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.027580158 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.017932982 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.038215354 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.019157403 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.026373044 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.030215045 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.026861258 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.022430141 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.037267847 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.02068723 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.026497493 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.026251453 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.023125107 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.025286159 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.019233602 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.026754472 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.027909266 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.028967091 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.018203657 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.025596808 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.026996841 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.019134404 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.025484886 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.01878274 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.026390238 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.019205045 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.01678199 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.023083526 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.029315688 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.023378223 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.023620964 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.017827216 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.016554007 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.017590924 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.024331919 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.023119257 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.026673104 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.034075969 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.016790029 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.018095709 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.017153747 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.021898768 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.036553223 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.027630318 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.025904405 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.023164474 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.016810771 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.018628479 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.018762538 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.017277381 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.020295705 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.016867462 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.017258206 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.028324377 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.019072896 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.022800246 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.017687836 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.01851914 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.028196626 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.021966897 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.017842547 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.02508372 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.017471368 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.02350411 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.016882073 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.019038027 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.023186146 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.017299376 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.022140695 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.028588223 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.035333469 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.025124658 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.027082813 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.018680121 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.02628475 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.034275294 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.026738721 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019648629 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.027499746 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.017310851 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.037719474 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.027888486 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.026746211 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.027941573 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.018614868 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.036066903 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.023296318 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.028293065 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.034345862 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.018929579 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.025831704 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.017712033 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.034705586 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.023331823 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.017678831 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.02695309 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.026267242 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.024814413 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.030185586 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.018592738 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.027052549 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.022756494 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.022654664 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.019994832 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.020025744 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.02780779 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.03608068 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.019166092 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.024288558 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.026713885 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.027026995 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.023631145 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.0313385 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.026949579 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019168461 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.019949565 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.022624219 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.019051485 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.031026311 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.018661848 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.023614891 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.02356682 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.018000326 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.02569197 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.036452303 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.028202544 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.02836695 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.018165722 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.017610641 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.038024795 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.022650093 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.021834333 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.026834121 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.028551153 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.031436595 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.028270128 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.036821243 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.018642068 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.025073996 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.031358534 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.019067311 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.017845536 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.022443512 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.019735963 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.027600737 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.028501476 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.02600347 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020036984 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.025602943 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.032503415 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.019510899 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.023446022 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.024364466 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.018963728 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.029281645 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.026663634 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.027072956 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.019713763 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.017955104 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.022141652 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.027214634 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.026237119 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.027664604 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.01913901 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.027150197 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.033080745 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.026089668 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.02168188 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.017856448 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021560126 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.027597589 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.02494642 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.017884016 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.023537346 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.022432801 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.027608699 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.028103405 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.023628921 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.018016019 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.036773942 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.028400834 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.028486617 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.019731161 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.020100358 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.018863607 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.018156691 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.029999909 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.018251691 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.020103987 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.024050442 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.020140221 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.037692671 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.027393847 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.03532266 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.019277416 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.023508523 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.018186567 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.028366165 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.023759964 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.018301907 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.02956687 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.017768147 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.034966728 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.031216497 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.026269007 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.018062592 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.024046408 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.027852182 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.03478076 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.028700319 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.027921132 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.022252213 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.02862937 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.020445829 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.030141443 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.018362728 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.017368424 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.029101832 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.027441942 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.031851614 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.01829577 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.029071092 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.020445886 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.02733013 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.027739308 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.020285623 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020338677 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.020158306 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.02852207 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.023949059 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.028140972 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.024176481 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.036999759 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.019533067 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.030442279 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.027788138 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.030303953 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.033411271 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.031840582 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.027777562 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.018820559 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.026465126 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.027945064 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.019591941 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.023932635 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.02225345 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.04312481 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.020323686 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.0201654 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.034384768 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.027775727 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.018569747 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.027158375 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.02413082 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.029409476 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.019634251 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.029824036 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.024780456 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.019393177 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.023945854 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.024024197 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.017486392 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.018205126 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.018601175 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.028810536 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.024291439 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.018681295 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.039672691 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.17398597 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.027500478 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.029384576 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.026013627 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.02035305 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.017302137 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.018725932 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.032996061 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.035226066 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.023237782 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.027453943 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.019386415 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.027772262 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.017075908 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.027307271 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.026838317 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.027087059 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.01785189 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.018053446 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.034477784 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.034725648 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.023597651 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.037565404 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.027450907 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.019224745 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.04127315 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.027586743 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.018548979 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.02927962 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019547393 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.017180018 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.016961989 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.01909528 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.029840644 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.017546195 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.019496592 seconds)
  done (took 16.777864473 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.064791775 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.018597009 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.017018367 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.017141369 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.024564012 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.018436695 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.017048439 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.018558399 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.018658808 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.019877251 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.01743893 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.017270113 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.023072764 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.033571124 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.025690985 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.021282218 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.017239164 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.018519054 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.01722996 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.018653395 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.023728683 seconds)
  done (took 1.276959663 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.021028696 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.021574099 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.022366501 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.022385499 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.020643209 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.017723849 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.021412546 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.017701536 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.022011248 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018082833 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.021839503 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.017724786 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.018045485 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.017988944 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018023616 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.019147096 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.022072649 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.021143442 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.017756256 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.021457776 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.019282472 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.021382253 seconds)
  done (took 1.237446684 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.019324599 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.017827063 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.026497164 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.017081799 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.016836105 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.019904084 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.016899577 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.022303646 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.022396428 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.022406984 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.026593301 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.018026958 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.016962174 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.023552591 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.016901215 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.017717926 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.067721353 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.017909313 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.017897532 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.017029893 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.019413786 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.026702231 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.017412233 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.017490244 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.022702099 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.020145944 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.017238871 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.019532025 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.017703464 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.022353064 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.017899234 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.016807602 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.026519575 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.025803215 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.022466904 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.022251477 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.018186786 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.017676142 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.016970052 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.016928118 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.025747666 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.018252954 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.017107788 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.017894407 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.026151264 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.017131586 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.016736437 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.026697936 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.017143062 seconds)
  done (took 1.829670229 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.029452916 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.075366826 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.026056782 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.055085029 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.031440314 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.022681739 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.024960476 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.057951569 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.018321506 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.018824676 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.032184621 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.032841494 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.020322642 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.021329342 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.026219284 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.019831128 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.020417096 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.019260149 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.02198102 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.019096579 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.02189915 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.025843849 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.030920352 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.031913927 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.02039545 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.018824179 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.019055307 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.020676211 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.031663284 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.022327016 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.020888887 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.021410663 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.031202065 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.026749146 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.018981633 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.018988836 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.03154472 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.019356608 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.019098913 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.017669688 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.018777436 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.020303091 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.025253997 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.03090547 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.01879601 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.025664818 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.01850325 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.016717384 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.030336355 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.018512452 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.021717075 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.03155033 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.019673375 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.01895961 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.019909473 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.030093544 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.01874512 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.017549283 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.018819811 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.030397505 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.017038847 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.019300212 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.031160138 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.018069223 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.021389835 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.031331295 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.147676727 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.021023199 seconds)
  done (took 2.763086294 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.0282123 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.024144387 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.028709495 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.028883312 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.024435666 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.024658468 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.024634756 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.02450556 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.024353002 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.02747037 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.024684762 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.142816164 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.02202382 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.025389786 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.024648984 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.024587722 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.024561909 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.02454843 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.024523075 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.024463583 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.024816308 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.029125875 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.024525981 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.029157352 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.059864827 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.02158315 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.024491884 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.024458684 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.029369463 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.024424661 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.03180974 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.024629656 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.024688387 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.029510659 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.031817785 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.024489621 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.017318522 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.024393948 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.024657358 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.02482022 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.021494075 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.029765192 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.024628724 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.021334177 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.024821366 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.024658545 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.029689167 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.032935039 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.02615467 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.028296473 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.025339949 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.030944425 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.026694684 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.026828195 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.03244878 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.068453333 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.032436498 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.033123126 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.027441373 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.032160426 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.032266954 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.040041521 seconds)
  done (took 2.630129252 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.032146665 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.02316934 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.02902097 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.017025296 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.01693238 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.023307632 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.016954348 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.01695937 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.023168413 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.023422553 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.024883241 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.023449708 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.025380125 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.024720224 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.023370616 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.025404189 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.023608091 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.023428361 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.023331412 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.023559758 seconds)
  done (took 1.290594541 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.01997837 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.022307008 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.017587629 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.02206354 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.017863192 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.021545562 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.017780013 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.017828763 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.017766305 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.017786011 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.022619366 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.022662994 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.017859447 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.022144057 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.021682346 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.021634091 seconds)
  done (took 1.130887366 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.02132219 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.028174204 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.132575998 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.018979689 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.020645005 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.017835018 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.018712497 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.017551416 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.020107651 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.033009712 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.018666121 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.020844909 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.018716917 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.017301661 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.017969138 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.020806811 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.020199999 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.018633021 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.018601378 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.132896485 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.028520432 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.01936508 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.020841668 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.019443063 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.020597219 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.027793086 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.020112099 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.020437759 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.018471755 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.020821198 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.020593643 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.030785028 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.020415751 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.018921941 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.017043547 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.017978409 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.018536287 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.020597527 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.020529303 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.018452141 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.017203573 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.020372358 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.018437777 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.018665107 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.019574891 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.020517312 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.019561186 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.029636064 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.018285689 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.020224759 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.018412234 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.019436279 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.018913923 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.030631777 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.020579322 seconds)
  done (took 2.174936095 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.038670517 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.024493888 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.016835525 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.016773517 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.024114821 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.025476219 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.024329454 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.025239959 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.025790124 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.016823101 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.025672567 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.023918907 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.025796559 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.024515024 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.025726097 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.024815474 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.017018279 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.025498128 seconds)
  done (took 1.244563148 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.02524494 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.022574804 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.022860263 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.019008305 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.01889013 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.023110339 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.0172245 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.018721697 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018767103 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.019273027 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.019026384 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.018606665 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018716112 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.018577742 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.022769942 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018962765 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.018607432 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.017440777 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.018998337 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.017237489 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.023099065 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.017408683 seconds)
  done (took 1.241607622 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.19788767 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.156580047 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.042895064 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.037678308 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.028623915 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.057117974 seconds)
  done (took 1.334173638 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.057823397 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027619989 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.024417161 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.052227688 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023744869 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022184509 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022116361 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022480095 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025755703 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.031973194 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022661729 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025431284 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025720804 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027328335 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024281206 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023570796 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022476689 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022536288 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.024698242 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.03495234 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022616734 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025277872 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022653504 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022388872 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022447947 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027325297 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025957717 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.031953155 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022331143 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.025087356 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023389937 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022439626 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025169661 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.032041938 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02463927 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025847682 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023654217 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.035317726 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023892477 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027350649 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.024210231 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024442572 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025598995 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.025060838 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02507212 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022497483 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.025507995 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022548978 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022592482 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.03746903 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024132399 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027659699 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024395377 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025541463 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025929232 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.037549695 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.03243152 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028885929 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025795022 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.034052339 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.029784043 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025313752 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029549712 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.034129403 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026131703 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029530391 seconds)
  done (took 2.611054651 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.032297339 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.054155557 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.022607674 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.031723954 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.027173576 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022410358 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022447414 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022500619 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022253198 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024813235 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.064967354 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022538188 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027016665 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026940379 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022216946 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02217621 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022050467 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02671837 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024741474 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.03667979 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022167693 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02674244 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026843529 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027006317 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.031521932 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023227979 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022001062 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.021977775 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.021960602 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.021986607 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024821686 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022152803 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02686456 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.024493751 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026911408 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022212983 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.021932938 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024897273 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.021951259 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023153412 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02685557 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.033900082 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02219763 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02207062 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.033495798 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022059927 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022302649 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024507791 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.021901738 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024374592 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.031220421 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.031509563 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.031955721 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027388167 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.022522648 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022439347 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022164326 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022752913 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023594571 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024810657 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.02897091 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023576191 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.039695615 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023665319 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.0234919 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029378206 seconds)
  done (took 2.578302528 seconds)
done (took 55.643354614 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.210003522 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.180414909 seconds)
  done (took 1.18166714 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.142461294 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.143325199 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.173919278 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.026691131 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.085003978 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.178520916 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.127869635 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.027763566 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.026117302 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.027635018 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.026051094 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.027387577 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.027632007 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.025973375 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.090225501 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.027646221 seconds)
  done (took 2.005899649 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.076613413 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.293562712 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.075332718 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.02535497 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.110888334 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.031715648 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.02676369 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.031511865 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.031557812 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.025208571 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.07527144 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.048468535 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.030171286 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.031243031 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.026203239 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.029837432 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.031146107 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.03142264 seconds)
  done (took 1.855072488 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.086110302 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.035622918 seconds)
  done (took 0.944391754 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.14654207 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.065704356 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.109546577 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.325986752 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.100933321 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.307489432 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.105176539 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.100945406 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.071515043 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.097524491 seconds)
  done (took 2.2481773 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.062554122 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.059153813 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.295631805 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.058528167 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.037118933 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.031525293 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.032948683 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.032223677 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.033430114 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.032363092 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.077214436 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.029932323 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.026018217 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.071817346 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.051223931 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.062077909 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.025419801 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.031404596 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.035274445 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.025314959 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.030435164 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.031896232 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.140400143 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.032030572 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.05309498 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.029213282 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.031241714 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.032291081 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.032074683 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.032463996 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.032516657 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.056308327 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.03198451 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.039418615 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.031075815 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.053254081 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.026905702 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.052318036 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.029915982 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.027362037 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.031079979 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.033450225 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.027370497 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.033055064 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.033937137 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.032247788 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.033073161 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.025872771 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.033929881 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.029992079 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.026847467 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.030861615 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.031175494 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.031853895 seconds)
  done (took 3.193948122 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.080346674 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.071739068 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.02664476 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.079921945 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070764779 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.027037235 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.084546763 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.065491313 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.082589295 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.026528938 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.025795558 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.026056791 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.034287221 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.038392641 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.081667067 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.074486277 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.028051473 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.026714779 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.07360935 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.074262429 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.025341379 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.085434896 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.076431502 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.072829164 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.025197927 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.026478727 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.0250838 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.025758108 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.03356931 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.033780337 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.02571746 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.036133237 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.03775205 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.033633999 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.024690884 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.024948894 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.025091221 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.034188386 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.034930108 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.03476519 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.032808404 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.02482236 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.02509696 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.025727319 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.026202488 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.024671759 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.03519111 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.033530454 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.034820875 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.025598229 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.025729048 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.025066908 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.025789893 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.033403721 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.032250895 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.03364575 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.036079024 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.025505387 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.025454277 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.026826468 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.036654844 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.034399031 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.034301563 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.026429309 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.034622061 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.025547517 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.035550048 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.039479768 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.025493012 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.026160402 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.025626442 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.02554921 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.025936942 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.03245512 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.032533285 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.026084484 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.025998732 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.025248901 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.034195866 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.032654711 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.025299506 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.033935787 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.024935014 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.025521721 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.02595359 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.026150697 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.035141398 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.034486742 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.026669323 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.026103217 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.026218471 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.025972503 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.025210414 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.035269721 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.034908318 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.035204949 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.03650062 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.026599289 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.038017252 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.035599551 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.026692754 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.034436737 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.026248431 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.026504502 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.026326819 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.034220755 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.034080733 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.03567499 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.026147675 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.025902971 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.035670238 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.038410664 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.026108576 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.03406924 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.035963321 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.034770981 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.025396499 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.037175279 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.025873878 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.036248715 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.025868123 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.035640591 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.026005457 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.034296893 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.025999049 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.025110735 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.025764117 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.03691126 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.026193211 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.025742976 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.026068294 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.025724724 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.034537763 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.037769669 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.026377992 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.035044546 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.034817372 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.025969456 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.035541674 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.025621761 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.035485808 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.025597634 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.025800666 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.024578428 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.037656576 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.025477092 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.025920184 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.025521917 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.035819442 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.025447477 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.03584926 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.033282534 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.024843074 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.036383614 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.034983012 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.032353074 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.035303355 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.025418035 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.024787552 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.024425525 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.024706847 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.034369403 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.035907002 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.025884233 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.025023486 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.032030025 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.034941981 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.024208201 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.032433583 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.032311516 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.032840356 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.025474857 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.025416315 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.036646115 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.037993037 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.034232064 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.036410244 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.035255781 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.025961926 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.034064908 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.036464973 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.025722903 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.04120094 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.025918293 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.037726519 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.036860832 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.033333588 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.036735217 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.037830161 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.036073375 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.036436516 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.185543988 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.025276172 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.02540429 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.032661733 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.025370555 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.025691403 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.031894534 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.026007183 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.025989754 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.038564547 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.025791347 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.033913156 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.0249563 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.032614035 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.024648597 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.025618996 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.036963046 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.025272803 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.025691326 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.032292192 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.025230861 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.031488665 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.034268864 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.032123436 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.025074958 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.025645235 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.034425647 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.033405679 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.025100199 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.024714944 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.0254187 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.033123068 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.032458192 seconds)
  done (took 8.408071796 seconds)
done (took 20.653136144 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.150989951 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.078638869 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.154628962 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.091042361 seconds)
  done (took 1.288846996 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.061169992 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.022119536 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.149621212 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.161608061 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.022701151 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.144264423 seconds)
  done (took 1.397641186 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.271139114 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.161757982 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.170895165 seconds)
  done (took 1.446953521 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.162118341 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.297329608 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.57334544 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.15378803 seconds)
  done (took 2.036678814 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.179947395 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.172764303 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.035218814 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.189773687 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.041601893 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.018144505 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.110225125 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.01889975 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.054639232 seconds)
  done (took 1.728304503 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.101639456 seconds)
done (took 8.82275606 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.211401051 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.14638803 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.038115748 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.031296361 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.133837897 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.13911162 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.154917828 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.033951766 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.145521507 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.330904681 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.192384642 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.052417801 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.16113007 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.046475402 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.273741149 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.03419341 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.0325222 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.026886075 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.150126592 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.142446864 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.257073331 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.031894265 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.107705255 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.034424951 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.11154573 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.087512916 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.201541087 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.330364846 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.288841414 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.034872698 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.128241777 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.047092209 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.124641206 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.132959369 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.140828935 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.053184997 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.022729803 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.25646794 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.115049359 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.338133868 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.176058526 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.030224684 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.149214121 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.028510058 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.021930924 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.152223005 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.036905591 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.030305617 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.047311993 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.030630417 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.04623703 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.031515965 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.140515874 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.026831467 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.100295703 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.146402035 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.196292916 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.110613279 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.029302532 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.042476806 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.033406514 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.168628144 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.042205234 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.028570365 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.035179106 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.022156298 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.142877703 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.043634398 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.0232442 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.03412521 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.031710487 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.103688266 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.159785308 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.069719663 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.035017352 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.128020779 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.104860819 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.050491732 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.0538204 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.033290547 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.022421455 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.203779629 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.028010632 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.041782458 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.030227639 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.057683756 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.022366916 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.03916508 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.177782924 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.156010517 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.093291829 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.023244901 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.253084301 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.024292326 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.049987601 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.023676851 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.022840013 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.197752893 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.022471753 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.022850492 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.034027155 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.032539215 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.024357646 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.176896677 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.109841436 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.031878632 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.030326757 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.023235172 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.029260558 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.023729949 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.023607436 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.022812456 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.103033499 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.041113845 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.022416523 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.279896975 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.13104736 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.035594017 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.041074013 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.094730631 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.027677242 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.035105969 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.031329794 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.148757709 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.030552817 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.145076054 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.025031187 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.047214445 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.131250227 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.105570736 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.111912885 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.021944573 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.148533943 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.033430568 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.021400137 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.02982132 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.050718903 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.032824876 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.039952877 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.030844446 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.146113157 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.033214388 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.028089294 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.128110581 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.021369885 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.126224028 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.105191648 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.138006368 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.027476576 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.032846994 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.098813176 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.046546354 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.053089384 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.045410794 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.026150492 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.021787664 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.021274042 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.035585692 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.021108126 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.021699859 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.035332915 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.029208305 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.038796763 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.25283241 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.032751302 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.026388456 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.26241305 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.035229148 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.09579755 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.042512336 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.021790865 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.106864195 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.023509864 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.042777314 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.088780872 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.021980391 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.101811183 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.022231579 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.021531088 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.027866597 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.023087586 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.032322875 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.03682928 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.022278842 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.036172973 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.030672987 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.02219727 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.109080586 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.024064429 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.200779154 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.106952296 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.101664041 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.022759166 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.04194317 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.021957102 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.141394011 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.0227365 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.075728415 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.119526697 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.038004464 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.043808788 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.023654534 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.105918449 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.03749561 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.027734413 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.106897418 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.139552856 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.098704913 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.02892571 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.260040707 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.032721675 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.022806306 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.028889509 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.032294948 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.023016596 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.107259119 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.027956211 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.021773059 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.021984677 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.023970396 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.021664349 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.048065729 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.021567463 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.031156522 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.028448401 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.025711082 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.023942109 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.021494169 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.031401089 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.107551154 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.128016251 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.029363658 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.043324381 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.037931086 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.034025068 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.07347055 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.031369233 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.169099723 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.021959902 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.033369067 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.045857141 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.021964362 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.027122445 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.028343374 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.041018721 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.02660395 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.023869117 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.032259997 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.022421809 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.022644953 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.021995232 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.022471086 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.031984828 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.02349743 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.021633642 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.021711464 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.039470647 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.027963902 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.02759223 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.034484692 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.04319841 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.503444335 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.024315172 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.024484886 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.036084565 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.028566851 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.022968272 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.024638175 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.022444596 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.02431275 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.022627094 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.022048574 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.052686455 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.02750571 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.023309925 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.04489933 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.029024491 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.033893457 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.128106759 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.040499345 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.028080043 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.022049308 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.272673008 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.100866252 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.046205274 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.043961976 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.022850683 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.034605819 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.022989257 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.023109736 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.021778821 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.051706349 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.027805867 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.022866643 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.021681202 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.021990837 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.074086907 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.03172881 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.021955033 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.031582843 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.022974204 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.022299218 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.050808056 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.023191786 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.022082702 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.041034578 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.035329104 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.113214032 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.03548027 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.025954119 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.076502089 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.021806441 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.022135342 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.022610425 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.127258187 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.036616238 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.023889758 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.022174528 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.031318475 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.033195283 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.080245003 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.029635022 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.02648814 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.031458388 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.021923391 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.023038606 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.051167699 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.053093846 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.023830493 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.026834296 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.022362451 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.023028238 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.107290349 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.031159945 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.212920223 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.126499603 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.024941211 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.032616676 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.022403825 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.529306686 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.027928812 seconds)
  done (took 24.113822614 seconds)
done (took 24.973440634 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.162195541 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.038028866 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.04478177 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.032202594 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.036539567 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.035793835 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.047472387 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.033350363 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.037957237 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.044756757 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.152286032 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.023218292 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.031211596 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.039336626 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.032065542 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.036735337 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.035453655 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.036164863 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.023283693 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.036392247 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.034535283 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.035023218 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.033539854 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.035849824 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.023277797 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.031872536 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.158794539 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.038869921 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.033719176 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.032934632 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.030950759 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.052315161 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.031312099 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.03045059 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.032556078 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.028629229 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.0337861 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.029607747 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.158230122 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.029065227 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.022878594 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.035417979 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.030620515 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.031153082 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.032614182 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.035074236 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.028476922 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.037339999 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.031502291 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.04392358 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.157760238 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.032267066 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.033282683 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.03166186 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.028525528 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.032438516 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.032948717 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.034210198 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.028251058 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.043042935 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.031561811 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.031196532 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.0224079 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.031787102 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.030325837 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.03075663 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.021607218 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.031668932 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.022267629 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.022034316 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.031459019 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.031481968 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.030182544 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.027965402 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.031194035 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.021949412 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.030492149 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.042707107 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.029857757 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.031373116 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.022276647 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.028109787 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.027552986 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.022588317 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.03124111 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.034424481 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.031926175 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.022395138 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.031002385 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.043072165 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.029234852 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.021832753 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.034212947 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.031281031 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.031862512 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.022307522 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.031598041 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.031492464 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.030632979 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.022126675 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.021521177 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.031633157 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.028083807 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.031783791 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.022606207 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.031777581 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.031822312 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.021766502 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.031470087 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.029950157 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.032034548 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.033991415 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.031442729 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.03553661 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.022628834 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.021384096 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.032905717 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.022635904 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.031636846 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.031133634 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.028247278 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.030535641 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.023396959 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.030881399 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.031215247 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.028861447 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.022468571 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.022378125 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.022088809 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.031157614 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.029875591 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.021291571 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.02169071 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.031064203 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.030877188 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.03041908 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.031037332 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.031174228 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.022459768 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.028574178 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.028052651 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.031197453 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.030793218 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.02238227 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.030928856 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.03060775 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.031612504 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.027988911 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.031224644 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.022402268 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.031004049 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.029598077 seconds)
done (took 6.256546997 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.082401027 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.071691453 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.189938672 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.152291694 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.037725757 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.038378304 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.028328615 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.045115266 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.030361506 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.050410857 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.051157716 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.048358022 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.172154057 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.045636369 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.022392782 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.035426605 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.022946594 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.051399163 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.152394417 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.049126897 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.068625187 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.021538069 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.040362306 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.042966332 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.036253396 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.043069317 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.048842417 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.023561588 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.042351598 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.042052903 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.052223252 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.025196196 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.02297888 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.044360466 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.040736036 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.032672529 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.022434346 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.030517614 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.035930063 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.02251253 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.070838628 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.043631629 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.030244088 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.030524684 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.023362729 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.039343451 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.023319223 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.031462072 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.037757881 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.02992177 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.035991095 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.041149146 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.024953755 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.042437985 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.021556364 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.030927569 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.030722855 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.022321655 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.022928521 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.022329725 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.022067268 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.02522516 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.036111583 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.043108633 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.027891908 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.031736956 seconds)
  done (took 3.886310096 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.049941677 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.073062032 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.038437082 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.038953696 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.022270295 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.022740837 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.022626938 seconds)
  done (took 1.216688242 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.099159042 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.144826883 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.153958353 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.156099693 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.167511089 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.154387937 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.037534635 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.055855868 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.06192667 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.167518822 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.164626497 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.157989331 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.027582148 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.036631879 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.058083256 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.158744835 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.036583698 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.030800437 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.14874661 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.156747497 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.028178559 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.056091519 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.036178611 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.025403894 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.152780475 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.146318733 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.027043322 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.067349579 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.025034327 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.022872437 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.022978908 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.047873945 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.14681606 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.040269862 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.023349605 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.022216696 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.143066494 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.024023631 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.146905818 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.031261626 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.146704315 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.02662996 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.026424276 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.023964761 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.025037647 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.149182206 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.02529246 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.023615038 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.023361102 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.149729867 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.036147804 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.148055679 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.025553019 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.029056265 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.031515048 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.031095531 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.031740471 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.024277353 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.150115309 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.035423597 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.025553781 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.15893046 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.159094678 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.1482273 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.160177221 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.034280918 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.148861519 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.148127684 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.024202024 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.032846003 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.024768577 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.161513072 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.028175861 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.026194643 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.022055551 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.031632887 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.165346507 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.16684202 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.166612084 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.039460245 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.026298413 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.025175481 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.164159072 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.167242603 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.029978786 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.023980083 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.024014351 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.041277948 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.051313261 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.026934834 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.029579246 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.02430911 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.035833669 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.026643371 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.025852396 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.159756633 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.023339941 seconds)
  done (took 8.286749257 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.042417644 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.024103197 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.023626197 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.024192463 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.024340479 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.0242375 seconds)
  done (took 1.203014919 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.065931427 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.024860249 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.024837241 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.024642176 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.050013015 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.142593724 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.144361099 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.026244591 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.042937222 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.038159365 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.143123889 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.147263641 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.146733097 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.026234721 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.143331187 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.037930608 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.144042302 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.029898337 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.036756993 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.026044533 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.036109738 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.025518129 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.02548252 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.16125828 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.019113444 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.036553566 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.034122008 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.036305245 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.035887311 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.024808907 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.024718171 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.018235312 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.034417154 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.025129102 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.141757106 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.035234783 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.024248414 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.019548485 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.029852436 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.019334016 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.145087621 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.026418043 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.029692128 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.02005982 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.025386398 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.035345436 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.019928346 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.035373453 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.14421027 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.020562579 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.0199218 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.024948006 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.018764308 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.019720744 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.035457308 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.025616268 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.019913666 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.144360374 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.026172025 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.035673071 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.024982355 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.01884883 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.025315036 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.018697263 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.029974921 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.020077911 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.035569419 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.025953129 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.026097362 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.024644567 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.01998514 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.024686835 seconds)
  done (took 4.41268817 seconds)
done (took 19.959725672 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.479531135 seconds)
  done (took 1.449162588 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.062682596 seconds)
  done (took 2.042203754 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.054337712 seconds)
  done (took 1.047575514 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.31917202 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.510840108 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.764631081 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.096946239 seconds)
  done (took 2.672790515 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.860865886 seconds)
  done (took 1.866274751 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.227728084 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.192765435 seconds)
  done (took 1.443768376 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.519912586 seconds)
  done (took 1.508579975 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.404151311 seconds)
  done (took 2.401752672 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.213567118 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.141967613 seconds)
  done (took 1.354581583 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.655315423 seconds)
  done (took 1.650334827 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.762112311 seconds)
  done (took 5.75953692 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.199113974 seconds)
  done (took 1.257416766 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.200208683 seconds)
  done (took 1.198292825 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.745958111 seconds)
  done (took 1.744004342 seconds)
done (took 28.400224727 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.046700939 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.041052973 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.041475328 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.03845976 seconds)
  done (took 1.154607358 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.033008695 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.028033988 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.030553776 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.031032391 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.028358807 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.030540056 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.031052964 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.027000504 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.028193526 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.027543619 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.025922154 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.027386512 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.030160708 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.027195515 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.029863439 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.031404917 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.027374887 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.028083849 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.029348413 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.026859366 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.030101628 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.0273193 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.02739849 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.028709463 seconds)
  done (took 1.689556311 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.036786296 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.028671629 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.030452313 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.027630687 seconds)
  done (took 1.125281383 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.035811873 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.034231941 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.043479077 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.043695344 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.034468648 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.035102001 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.042369668 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.042326315 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.049452888 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.045255595 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.024413613 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.024185479 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.023330077 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.039206142 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.041444659 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.018080535 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.019188786 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.03513122 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.034136595 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.037436917 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.026490949 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.021820871 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.034408152 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.034908658 seconds)
  done (took 1.812418287 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.040484012 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.022182325 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.040544837 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.049507562 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.049546206 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.022156905 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.037797964 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.050622416 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.091765112 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.022398312 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.028732799 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.022149145 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.063330649 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.021921364 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.038424046 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.071174268 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.07479064 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.02706213 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.055737506 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.021960099 seconds)
  done (took 1.860499132 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.030234662 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.025694852 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.026929834 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.020925768 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.032268283 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.028971824 seconds)
  done (took 1.142366781 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.025511956 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.022985598 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.022903004 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.027829445 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.022814791 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.022739731 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.022853092 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.023841432 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.02258835 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.02273567 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.022560784 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.02286819 seconds)
  done (took 1.248240288 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.170481794 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.028742062 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.028269428 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.021871013 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.02353534 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.022797161 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.039042886 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.024972552 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.042162162 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.02242149 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.023102344 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.025218543 seconds)
  done (took 1.43946366 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.064570262 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071559389 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105839692 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080865348 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086940659 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055508407 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.209896442 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.037179197 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.125628827 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.098204615 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08412603 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.051210026 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.044349679 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.0264948 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060533882 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.07827713 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.098420467 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.030169572 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080858969 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.254008886 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092619863 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.091835865 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109538547 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085070484 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.051072402 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109136661 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.05628275 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.062564947 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082922929 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087836091 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082703758 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.063328669 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.02858785 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.028138058 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123297829 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.062626771 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080712726 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.052231223 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.065591355 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.049128164 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090157661 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.027213171 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.042489761 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.071302902 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.046580571 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.097840573 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.053107044 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.078113659 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040098479 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103947506 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092500811 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.184099857 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.046532382 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065885253 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107695317 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.075850942 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095724346 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069200753 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.039822166 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.08156503 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.069663565 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062798233 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070235806 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03856244 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.297770813 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.0463283 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.083145719 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072326312 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.048489648 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.052173547 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.06873597 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094897617 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084394318 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.076028654 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088414729 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.049630242 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08701725 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.058620624 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.083987803 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061279637 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.028954355 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080552856 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087533189 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.056130837 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.058128528 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08678788 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.051157303 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033199182 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.047816602 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.078303408 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.037467488 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.069765143 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.043988027 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.091059613 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.096421 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057873831 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.076022925 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.080595196 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.036516396 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127414375 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.069565672 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.030397494 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07930909 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073501297 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116307503 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056553811 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.033079805 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.060119118 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063450287 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.123219732 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064164813 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.039261079 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.078782914 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107334146 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055739003 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.270124828 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.056270047 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106559409 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.077085252 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.045572717 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.033571456 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.055060463 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075120809 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073246453 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088754153 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056444346 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.042717129 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.046659006 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.083169558 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.054922441 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.03853073 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.082120299 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.065408009 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.033690508 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050727078 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.036042076 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.280017764 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.045246297 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.098618727 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09427413 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.033294099 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066243873 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.056532174 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.065590422 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.060646449 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079570238 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100329876 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.149022707 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.048660612 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.041071493 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067318774 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.104168561 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085877656 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.049192697 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.042082668 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.057715596 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069630794 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.058743778 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082635449 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.051884062 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069619973 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.061895231 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100383984 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104138099 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061895382 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.064323888 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064659665 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.08305244 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.032569869 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119534045 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063163662 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082898143 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.045849718 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103132862 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.075304663 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067179089 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.045108953 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.063838101 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.06207002 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065407437 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105391081 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.052098192 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.029096756 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052499637 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109503811 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.034653088 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080109193 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.049166953 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.050776555 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077485573 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.053463733 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.0406229 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.025233966 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08754591 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124470754 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.027361298 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.07871657 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.075453628 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.065228023 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.086398719 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.026743821 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091478837 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102061138 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090053464 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113984275 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.163913458 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.237894031 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.076170291 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.080985401 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.072105936 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.036927818 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.084703119 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09446514 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050957163 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050626768 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.095739321 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.079611356 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.098344379 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.072959841 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081650444 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.064563855 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.06593445 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062771831 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.058063675 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104803827 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.082881169 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.086762336 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.042774935 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072572056 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.079584621 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.099689854 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.039655464 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103232646 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.043860689 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105312671 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.036331801 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088163621 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.033924992 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.13520627 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.038006517 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.059763671 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.026963717 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.030296147 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105417849 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.083961352 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.065922129 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059783896 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.097665191 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100609392 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.035565027 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073661092 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.076450686 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.065373001 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077225265 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.071504711 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.04887138 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.057243645 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.069574899 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.045148524 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.041344229 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.090830374 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057043076 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100966326 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.043088077 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.033245535 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.102773359 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074636498 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055827841 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.035559204 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071573238 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.090306145 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.054013345 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.046796959 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085267269 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067218244 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109667054 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.051367903 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.064002445 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.244828921 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.045811727 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.056146228 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.027254971 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.048733128 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.034833653 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088809097 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.033966524 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.076581935 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.025999749 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089730332 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.044960506 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.055470566 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.062407436 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067200253 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.093965506 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.051971192 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098925024 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046478245 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.075842664 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06665211 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.07176924 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.043976951 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.060749961 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.062367803 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079987014 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.050852885 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078972781 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103801811 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06170798 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.103294129 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048891393 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.081819063 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062938993 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.079731386 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.069961903 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153990862 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097047711 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071348874 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.069516068 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.030876932 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.051982518 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068459084 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.067274631 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13571063 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083085697 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.027720148 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.061228936 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.050293031 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.063849836 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065329574 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.035670254 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100725441 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059445298 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.046119415 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.070102779 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.049942512 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.064439546 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033706806 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.062847289 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.056862933 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.054935278 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.057003037 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.076312532 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092721921 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072630656 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.110963604 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.063744704 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.051513424 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.081689367 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.081785165 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.078362125 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.04271977 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.04335674 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.266615444 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.078010245 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.087399637 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.057252833 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068342385 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.071456288 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058577678 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.090422902 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066022993 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.084844837 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03745074 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.034134268 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.025487788 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.029014198 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083084306 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070405233 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069136502 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064101229 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.029276963 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.064429251 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066619796 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.029236222 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04365987 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.052837479 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.058128848 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.040533866 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064540103 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.075276669 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.053655904 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.061466634 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.063846715 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105141283 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.058461896 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048445028 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10782618 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113323948 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047546513 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053380933 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.028994284 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.037513341 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084751721 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106715816 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111689198 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.037255404 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.045302458 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.043110704 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046527527 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.028899015 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.046128995 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.048028644 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06517954 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.058171556 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.074601575 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064830753 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033993876 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.069670101 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060251463 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.05285022 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.067505015 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079870331 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09087913 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.104339282 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075951401 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079247096 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034676775 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.038978511 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.034923712 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.038403156 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.068128803 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.038425314 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034850751 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113524114 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.05241259 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075101094 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.076872826 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.048808685 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034697359 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10053764 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.027644996 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101363149 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.028978622 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.040038079 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.041638943 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.196933688 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053675646 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.099789815 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.06619842 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.067261515 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.346383885 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069726669 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151148544 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119084942 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.043632925 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.102592025 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032811743 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.033745468 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.033624617 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06759875 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047796643 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.078027299 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103307587 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04664571 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0593493 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.035276283 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103312509 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.054128444 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.061059274 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.04411423 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.037777083 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106569672 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.03828224 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.045350644 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.048447888 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.072920731 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.029760893 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.061890742 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.042941763 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.037983156 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155490215 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.6732333 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.056845629 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.032239954 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.0558309 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105247259 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095432035 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055810584 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071117769 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.079760429 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.065237652 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.05414011 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.075412551 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.163688196 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.031497368 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054895103 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.057594402 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.062647153 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069619896 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.056648936 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.049863661 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.056850883 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.045810348 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.038343241 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.076915291 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046833654 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.058330107 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.06802529 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.043288771 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.048902565 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094085872 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.063517599 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.043472137 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049506103 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.071110953 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046675308 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068666484 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.027442343 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.073766394 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.049843729 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084501597 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.059390516 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.073884875 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.246466281 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053803659 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096439232 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.066554132 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.082108103 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.045864646 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.035390254 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082817187 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.047415674 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034551858 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102334634 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.052302563 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.062713385 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06542502 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.054448465 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06791141 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.07280693 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070638051 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.059208373 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03552842 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057263184 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.064631005 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.04423584 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.036642612 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.030270946 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.032999342 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068373346 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.044105855 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.045506056 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.077084592 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.047828586 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.062170975 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.057780813 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084277655 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.049021792 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.065550456 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.071503103 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053575539 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095034906 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.060923365 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.090562641 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140629233 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.094517725 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.091796444 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096158129 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.036295266 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.037733953 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.026114454 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.075839236 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.03836289 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.045896585 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.037610112 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096136129 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.042884703 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072536993 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.226058417 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.038768179 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.053268764 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057046624 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.027034372 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.042573848 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070624008 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.04560659 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.038419019 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.073184431 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.041332494 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.09147246 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.071475891 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060849468 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.05712395 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040384549 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072216775 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.065472401 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.095760134 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.060675702 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.034118248 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.089858007 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.06923533 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109287793 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.032984385 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040617046 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.094152231 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.222863476 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.092667022 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.038894363 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11682136 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.10425382 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.062973035 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093696172 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.028226107 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.048091119 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.047534686 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.083138982 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.042227039 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064390594 seconds)
  done (took 44.435520925 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.148923445 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.13384677 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.079808115 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.093396771 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.25021195 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.259179507 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.114094069 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.082171074 seconds)
  done (took 2.295863684 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.026213255 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.059487706 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.038701945 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.310512826 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.060035252 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.023796275 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.031497323 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.039930564 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.027227038 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.023503248 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.063496824 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.023682578 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.027383001 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.490816663 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.022564451 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.028280685 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.027464704 seconds)
  done (took 2.469502 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.325103212 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.645829338 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.331668106 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.479783389 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.105715829 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.565263484 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.03227341 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.037429556 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.642571808 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.360913262 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.101101058 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.185313401 seconds)
  done (took 17.947396986 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.033542693 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.164819119 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.164801413 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.031880342 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.030875479 seconds)
  done (took 1.608468827 seconds)
done (took 81.303737094 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.043709297 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.137941946 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.024112003 seconds)
  done (took 1.318449983 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.167000259 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.164359229 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.164329399 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.166937008 seconds)
  done (took 1.791210024 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.033147974 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.03352061 seconds)
  done (took 1.201379522 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.192373282 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.276011826 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.049516377 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.042488712 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.03851812 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.038917037 seconds)
  done (took 1.25753394 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.02927338 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.02956957 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.027824185 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.028296407 seconds)
  done (took 1.23556465 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.142608782 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.022608078 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.025128461 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.026740507 seconds)
  done (took 1.344715677 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.044034009 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.044346955 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.078645296 seconds)
  done (took 1.294899057 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.042745411 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.043314769 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.037750413 seconds)
  done (took 1.255800839 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.067569081 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.055246363 seconds)
  done (took 1.251846773 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.039715812 seconds)
  done (took 1.169687299 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.052003195 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.058021904 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.227195111 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.193656778 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.231564401 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.213637349 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.037209524 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.034464354 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.036117855 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.039398486 seconds)
  done (took 2.253847928 seconds)
done (took 17.057645701 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.038991289 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.151088772 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.274033143 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.047812408 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.615803648 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.270709624 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.689377868 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.050283389 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.060438896 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.024833929 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.043614971 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.589566708 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.694625607 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.108730116 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.67610993 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.100866698 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.52020728 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.026572656 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.024612864 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.025080716 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.677393146 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.026105262 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.024957034 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.024991254 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.516894715 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.417996902 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.027421767 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.095781821 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.026224581 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.029272156 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.396652295 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.027477086 seconds)
  done (took 12.430938081 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.028015658 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.08482328 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.029676097 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.0424838 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.026805377 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.026789796 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.029025899 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.025582422 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.07342786 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.02513555 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.044225865 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.024570645 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.029603433 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.026409919 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.047263948 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.024864814 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.027011397 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.026127733 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.024979349 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.025229643 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.045923979 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.024705267 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.025260497 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.025323519 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.025416877 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.041419547 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.026541125 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.024961968 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.02531387 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.029366112 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.03069963 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.026555534 seconds)
  done (took 2.18645573 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.084381048 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.086153323 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.030312068 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.069500228 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.082112589 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.027459363 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.116569512 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.049228233 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.075011933 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.025472516 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.044513917 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.025077157 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.065484009 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.026856427 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.048026517 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.025204492 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.027508737 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.025555254 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.024932217 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.025653083 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.04683094 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.025742045 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.02519007 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.025487945 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.025877923 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.042965416 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.026522273 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.024950152 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.025136336 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.029292689 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.030819015 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.026756201 seconds)
  done (took 2.481645148 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.027844101 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.029286539 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.036367725 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.039618369 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.023221502 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.026028105 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.027334333 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.023645329 seconds)
  done (took 1.379818621 seconds)
done (took 19.626167445 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.03943175 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.024967519 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.028416704 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.051072974 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.032279267 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.151388796 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.028462766 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.031013735 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.029080799 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.028809241 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.030904255 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.022335687 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.027525809 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.027533861 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.029544994 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.023010315 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.154594584 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.028251391 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.151380508 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.152109708 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.02550063 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.028027641 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.031475259 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.15039864 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.151889562 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.154169672 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.033190153 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.028994725 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.028501578 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.025822174 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.150374843 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.15184659 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.025412663 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.148291578 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.023438932 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.022791159 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.027460079 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.024008718 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.154968146 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.0328128 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.025192708 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.032384106 seconds)
  done (took 3.702155468 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.153267684 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.161514678 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.154835335 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.036637257 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.031990777 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.035456762 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.161728461 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.032799352 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.031395659 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.161275796 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.026879023 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.030916688 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.033311953 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.023659316 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.030625187 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.027144508 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.033061135 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.024835607 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.030509955 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.03095614 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.161383491 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.024222459 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.032034716 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.032176721 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.026590357 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.032943907 seconds)
  done (took 2.688048664 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.032656084 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.047631649 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.051527213 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.120587293 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.068912835 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.048811552 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.041434254 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.05284038 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.058010608 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.024223483 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.048362396 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.055323252 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.054805414 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.031892785 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.065486097 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.044803876 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.038470622 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.025522342 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.030804797 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.061610829 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.049720932 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.045227053 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.058709005 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.045180098 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.023014561 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.033719715 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.028706986 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.04241925 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.036538993 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.037722052 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.027877397 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.027466338 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.024721403 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.036126503 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.027833795 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.022731424 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.049702415 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.037606197 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.040047578 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.065332865 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.034945871 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.024971815 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.053506278 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.089378537 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.022555104 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.026877233 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.028330725 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.037577022 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.025009923 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.069394639 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.040828925 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.022857993 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.045353253 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.024928162 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.024939132 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.04749908 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.025146456 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.025727588 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.045762428 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.030755103 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.047682236 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.030377262 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.046843224 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.022982448 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.03649325 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.025314363 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.025652397 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.02256946 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.061498157 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.032034889 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.075096796 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.025001951 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.022572725 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.037394889 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.036593267 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.031828356 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.022663798 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.04445218 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.037462301 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.027491893 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.044189095 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.026469076 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.027154228 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.07056731 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.023389085 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.022113867 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.022080324 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.026527321 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.026668294 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.02444654 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.037203733 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.022819504 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.027055588 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.053733385 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.023191317 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.024110344 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.027252596 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.02577341 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.023090006 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.03478296 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.027452159 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.025629627 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.037888614 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.024496951 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.027726695 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.04094995 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.034775645 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.022708797 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.025990114 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.026909264 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.025725359 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.025933313 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.027882324 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.026241419 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.030138864 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.033278762 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.030321629 seconds)
  done (took 5.495299391 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.255833996 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.245096604 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.025346667 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.243368106 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.034207202 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.168601895 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.245679078 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.246683118 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.024994097 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.025678157 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.023892871 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.183796762 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.179561178 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.192203242 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.169611091 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.026924306 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.06084083 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.190429813 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.249670343 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.24471033 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.059770068 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.032641123 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.027146763 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.026104007 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.025815126 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.034162782 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.042826263 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.034871925 seconds)
  done (took 4.48291501 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.032677252 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.072139748 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.028351093 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.051558456 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.043550542 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.02502043 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.026149769 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.025293451 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.044070701 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.030818566 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.025297297 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.028881126 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.028358082 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.026881193 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.024960121 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.031302446 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.031843316 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.028069071 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.028571515 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.029677166 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.036906414 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.051137673 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.028838335 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.024596049 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.028211139 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.024430908 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.030168296 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.034134209 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.024222299 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.024253753 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.021690775 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.034164249 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.040937438 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.026413807 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.024399632 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.02521135 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.024887864 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.024961325 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.025215641 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.02326516 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.02319343 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.030519389 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.023488874 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.030453903 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.039033068 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.026995933 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.026862884 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.028088458 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.027640685 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.022076531 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.028050863 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.028147065 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.027778404 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.03447563 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.027450563 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.027744972 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.026051019 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.041302153 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.031440437 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.024662404 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.024004754 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.023405029 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.02722005 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.031710392 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.042228719 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.027542893 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.023297379 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.02498112 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.026336177 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.039058802 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.024289625 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.031905227 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.021959687 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.025532764 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.027646085 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.028168219 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.026241998 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.023273565 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.024358022 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.024603353 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.024694538 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.024536433 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.024165687 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.027318846 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.023263625 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.023627647 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.025331802 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.026688364 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.030450654 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.023650908 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.028567717 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.026345783 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.023292816 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.027463441 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.030180655 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.027635971 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.045894882 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.033444599 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.025688369 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.022729879 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.042947528 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.027661347 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.024105076 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.026813085 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.034066161 seconds)
  done (took 4.239689042 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.056681662 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.027584145 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.045928189 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.064280998 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.036308849 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.031780304 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.039738103 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.027062889 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.048843818 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.023967932 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.035456173 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.023288232 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.039428207 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.034835552 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.027611927 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.035846162 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.028216039 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.047210411 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.041533941 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.023694918 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.034530707 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.038683513 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.038696647 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.043733914 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.04302055 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.044248854 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.038323701 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.028305398 seconds)
  done (took 2.226514127 seconds)
done (took 23.973043077 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.217354665 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.347897783 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.124857338 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.933388671 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.212126783 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.241481185 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.368718534 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.141082167 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.415116105 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.238974259 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.84724976 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.476570365 seconds)
done (took 60.811489168 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.167103596 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.339939205 seconds)
    (2/2) benchmarking "String"...
    done (took 1.453813552 seconds)
  done (took 3.950676306 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.57316039 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.16726357 seconds)
    (3/3) benchmarking "different"...
    done (took 1.209612522 seconds)
  done (took 5.085414518 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.634976983 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.903798491 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.503495783 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.159620306 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.150166445 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.946175017 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.326479882 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.881677824 seconds)
  done (took 28.027950724 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.252418195 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.418363265 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.581462518 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.657692186 seconds)
  done (took 18.156766686 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.613557653 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.681218363 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.647905987 seconds)
    (4/4) benchmarking "different"...
    done (took 1.781690445 seconds)
  done (took 8.00507249 seconds)
done (took 73.274429641 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.155453761 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.55856664 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.194338787 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.338740381 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.183660671 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.262503669 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.161538043 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.184625449 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.155291556 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.141321929 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.159568381 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.160319233 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.168194416 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.22737469 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.169349167 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.14310231 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.54441169 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.16132624 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.164109936 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.170656652 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.509964746 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.166109684 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.142705883 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.234109573 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.705796938 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.218360994 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.710882542 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.130469119 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.780944147 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.136858773 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.157232922 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.117065126 seconds)
  done (took 184.553079016 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.153232117 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.036078656 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.033882874 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.167717342 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.560493027 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.536139274 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.031454758 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.586957066 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.159009879 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.1361336 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.213729168 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.156334755 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.217941511 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.730486049 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.191998297 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.19417745 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.066388102 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.986747801 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.200637233 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.112840382 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.154861244 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.738173946 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.673048796 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.005461045 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.16931895 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.202276783 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.161419781 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.159210494 seconds)
    (29/36) benchmarking "asum"...
    done (took 1.675218246 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.053526823 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.173002187 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.128876059 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.348303671 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.401406564 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.092481036 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.157489099 seconds)
  done (took 154.925435664 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.390193863 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.157879672 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.196396641 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.264371015 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.06768398 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 4.045229667 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.118755454 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.077150203 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.098711826 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.132772756 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.146906034 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.227133837 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.159375448 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.642851339 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.159059811 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.126869014 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.134260802 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.544667611 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.168341729 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.156241996 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.155782284 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.255355464 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.50210137 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.270553131 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.158327897 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.162890183 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.263352288 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.1480174 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.15643689 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.156914836 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.266917488 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.160308384 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.292045283 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.234525037 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.116074089 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.163408147 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.139425151 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.434783387 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.158297538 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.151230059 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.117947148 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.155325872 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.134179085 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.230214312 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.262428632 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.162900411 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.176812474 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.651863993 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.766940479 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.164304433 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.157024555 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.155863569 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.160922122 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.152649145 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.469148809 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.163100291 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.18826133 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.944822279 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.169966996 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.157652919 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.15644944 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.157353702 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.160096759 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.162784644 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.194807582 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.853313726 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.12932971 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.514118245 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.877325149 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.148775055 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.147772844 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.146649757 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.553976647 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.204527962 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.151122541 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.15929894 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.331181529 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.161792535 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.158236238 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.093418351 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.086948221 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.142453143 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.269043192 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.16247897 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.156700826 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.402856105 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.576465872 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.170500592 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.177453184 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.212276524 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.165218061 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.148596994 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.153506304 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.094778641 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.159773877 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.168141963 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.601265076 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.158264897 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.155477852 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.191239284 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.518963749 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.152600612 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.238141469 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.566565481 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.156529344 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.125532063 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.130547815 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.176394752 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.156683731 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.171366287 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.167118934 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.157612938 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.157877258 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.157522686 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.15776402 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.155554165 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.155971704 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.17569719 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.154921723 seconds)
  done (took 334.326490574 seconds)
done (took 676.435168162 seconds)
(4/20) benchmarking "parallel"...
done (took 1.157236126 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.416582299 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.157066442 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.314474544 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.40819072 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.363605033 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.322586397 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.365356573 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.453979559 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.391594733 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.327995647 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.363561266 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.293404556 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.431907443 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.41718448 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.457553692 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.424198665 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.359968262 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.86652797 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.366333474 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.334799846 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.365815174 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.325694804 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.321600563 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.374719635 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.460501561 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.335836467 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.562840085 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.406059292 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.370881479 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.413384535 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.430452814 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.44290512 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.3642528 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.423319536 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.390321958 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.471791511 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.322640419 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.432127105 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.34803989 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.360256512 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.386559764 seconds)
  done (took 65.304698733 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.625145033 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.354199546 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.485667813 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.473453185 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.064852972 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.472721509 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.563901962 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.354099365 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.35633841 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.478701248 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.496884954 seconds)
  done (took 18.908484254 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.42335808 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.356896989 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.485739411 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.485442508 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.656601853 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.474238176 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.521543612 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.352760845 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.363909491 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.484980012 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.502850886 seconds)
  done (took 18.283573844 seconds)
done (took 103.653938066 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.755963401 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.23124768 seconds)
  done (took 4.139385189 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.181553713 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.171221265 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.178195236 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.170355586 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.170619507 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.166837809 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.199283704 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.180533141 seconds)
  done (took 10.572977983 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.148806441 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.144820993 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.15669435 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.166689321 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.168770608 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.16397838 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.168695046 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.159987162 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.141113823 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.131019268 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.129147523 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.142239845 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.16834095 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.168520851 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.167912033 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.16753534 seconds)
  done (took 19.647716952 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.15129372 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.1435071 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.150734272 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.167589199 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.167293239 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.169100655 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.16820273 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.164462771 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.136126246 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.136989808 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.142518126 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.160927983 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.165744631 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.171461474 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.169906976 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.169917752 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.167966786 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.147879666 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.152816552 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.16922065 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.167048124 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.167955717 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.169431204 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.168775602 seconds)
  done (took 29.00312811 seconds)
done (took 64.537511283 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.843912617 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.026809105 seconds)
  done (took 6.995241238 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.153006984 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.094113263 seconds)
  done (took 3.46576396 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.122637894 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.158800482 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.16992202 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.170528404 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.168757815 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.169823073 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.165969384 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.135922065 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.124652714 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.153509218 seconds)
  done (took 12.61811591 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.169583925 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.163568806 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.167738317 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.167074162 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.147540811 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.13850679 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.15942829 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.171068625 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.16896764 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.163338067 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.16955249 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.358262347 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.16795717 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.394170439 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.155721794 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.142046292 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.143777382 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.124565856 seconds)
  done (took 22.430863273 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.154437016 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.170162037 seconds)
  done (took 3.458167654 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.167245572 seconds)
    (2/7) benchmarking "second"...
    done (took 1.169848061 seconds)
    (3/7) benchmarking "month"...
    done (took 1.170715754 seconds)
    (4/7) benchmarking "year"...
    done (took 1.130842728 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.126154265 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.119740493 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.138206261 seconds)
  done (took 9.18263267 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.653646382 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.338215295 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.383996849 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.657403597 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.841683573 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.151089504 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.862179521 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.146548087 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.995189049 seconds)
  done (took 17.188523192 seconds)
done (took 76.467313054 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.884550593 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.161426443 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.693764694 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.246884869 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.250962684 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.55722397 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.162009224 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.791490625 seconds)
done (took 37.905154133 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.225927567 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.154830891 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.187951678 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.177041804 seconds)
  done (took 19.67859142 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.149744049 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.770253806 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.194080654 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.191378197 seconds)
  done (took 19.530007952 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.595275357 seconds)
    (2/2) benchmarking "read"...
    done (took 1.564885741 seconds)
  done (took 4.330546399 seconds)
done (took 50.918859757 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.168137343 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.169515942 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.145617694 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.168101764 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.166008524 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.168194961 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.166137922 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.170177281 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.166073664 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.166755955 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.158981075 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.138007847 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.138238206 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.15563339 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.166056526 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.168882055 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.171208088 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.169060794 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.168484869 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.168831215 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.167870541 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.169227869 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.170477246 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.169440789 seconds)
  done (took 29.093568125 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.255621372 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.249235093 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.261636831 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.251316019 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.277724566 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.243342879 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.255386513 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.221537337 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.255612628 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.229990205 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.211848229 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.281207191 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.217313421 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.265508486 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.212067978 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.285493394 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.260789838 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.216299333 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.213907079 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.28820381 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.249888365 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.213343252 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.282076236 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.207071108 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.278021163 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.208309201 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.226193009 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.240883134 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.211501695 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.277564971 seconds)
  done (took 38.509709915 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.205688648 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.168053621 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.169920707 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.262388554 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.172836639 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.172875475 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.169306557 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.171158067 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.166402022 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.168791353 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.167880772 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.171517522 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.169821589 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.168776258 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.163669576 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.164554354 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.205323003 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.359119546 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.169877866 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.169826224 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.218949943 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.16957277 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.169710531 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.16973613 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.171932099 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.168821502 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.171055722 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.167085134 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.172257132 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.170096168 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.163748971 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.189745282 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.177444811 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.12752399 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.287910443 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.232366012 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.172595962 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.20523163 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.170495722 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.115540991 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.128118988 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.126133924 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.151194236 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.169241693 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.234326208 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.172291944 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.171759419 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.168998404 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.150921618 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.146978967 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.153228296 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.172119761 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.186322899 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.168907433 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.171678136 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.169637617 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.15920153 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.166736938 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.171182077 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.169004192 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.167315081 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.240422147 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.177958122 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.168652185 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.557316938 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.171487093 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.245044935 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.171042535 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.170041571 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.396143091 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.172754345 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.376815838 seconds)
  done (took 86.816605712 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.147077485 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.14056404 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.262980947 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.26091184 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.172370658 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.170496837 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.165935973 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.168071769 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.850586215 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.171004376 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.171182962 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.167829903 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.853078482 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.174252593 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.168007781 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.264250678 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.169476366 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.168553856 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.172184955 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.165425657 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.170781581 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.169241066 seconds)
  done (took 28.455936589 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.208211009 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.178983684 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.210695081 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.170181373 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.158826041 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.1491347 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.192282537 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.189568998 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.209595204 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.207779204 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.206548133 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.207038869 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.148687456 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.167330944 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.182147114 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.181226461 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.209045054 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.186183923 seconds)
  done (took 22.519273938 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.345261172 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.323444745 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.252698948 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.221191062 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.433942699 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.368250926 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.258623642 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.300795792 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.211642289 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.328896725 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.341490738 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.210496003 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.403645918 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.22028109 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.21025401 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.432431723 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.246477747 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.216667147 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.289371956 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.290545739 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.348122233 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.291226224 seconds)
  done (took 29.703725446 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.215776919 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.227168708 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.262115936 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.261727034 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.169606716 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.154071573 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.237515385 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.211335544 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.186196088 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.214280739 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.210875072 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.169160067 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.184626288 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.238963386 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.27062811 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.204493078 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.199103049 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.222692905 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.213926762 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.158983104 seconds)
  done (took 25.370063234 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.166904376 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.149122575 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.160608713 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.166786651 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.169539228 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.164163203 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.168719444 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.162529452 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.171094456 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.429716151 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.171423247 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.167910421 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.169266971 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.168913839 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.169656071 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.167108574 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.16375201 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.169769066 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.168745686 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.168472038 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.433253427 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.168376437 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.16958439 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.16933842 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.168623576 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.165122752 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.146636475 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.151256945 seconds)
  done (took 34.323025877 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.244095199 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.172108772 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.167048395 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.156748165 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.152867243 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.262733021 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.172390925 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.170520922 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.16493365 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.166762285 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.168466281 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.16993817 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.17177008 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.245175217 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.171738522 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.171438704 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.331604502 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.171529154 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.260893389 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.158574225 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.171816907 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.339722886 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.13997253 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.137127381 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.157280286 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.170973069 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.167452223 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.168490587 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.172899154 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.169025671 seconds)
  done (took 54.797686428 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.173411655 seconds)
    (2/2) benchmarking "in"...
    done (took 1.19531541 seconds)
  done (took 3.520117589 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.170360809 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.280689593 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.164048003 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.313274381 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.261636524 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.33974658 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.336564864 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.282314644 seconds)
  done (took 11.305095763 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.16692987 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.346025384 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.304603795 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.168990019 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.16891796 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.48147895 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.214270878 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.991363914 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.873376152 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.147947441 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.273794469 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.745992316 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.157363378 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.464643127 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.280407231 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 3.016679428 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.318435826 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.628682928 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.143826878 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.277544677 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.89164886 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.24249461 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.153530926 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.136879972 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.142469498 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.080869394 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 4.071249306 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.638911955 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.275065683 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.253685118 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.846928941 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.219517152 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.170280901 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.399542693 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.271112065 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.169416775 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.297146031 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.260890929 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.157171265 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.14552368 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.938576974 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.774139064 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.393110526 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.3644364 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.225974307 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.170041156 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.170381223 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.16834213 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.430911574 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.786352525 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.159207622 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.129134634 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.300884097 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.165425075 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.712642068 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.29809808 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.171571759 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.085667643 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.672054094 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.303221213 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.555190665 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.275275398 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.129401391 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.284687129 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.165939816 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.385945461 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.979034283 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.91906071 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.857232611 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.267206655 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.597268104 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.32792342 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.164663946 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.170978072 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.122542134 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.454172962 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.158915491 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.17151895 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.168580344 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.164302834 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.384685965 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.233667411 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.944242097 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.306757026 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.386326099 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.579066472 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.240247235 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.169112183 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.804835384 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.01900689 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.276564096 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.82814404 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.336953643 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.305335932 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.118671441 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.404548271 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.204577714 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.165781698 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.98464136 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.62864937 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.306879593 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.128984998 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.505526912 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.224354898 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.178151458 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.174763078 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.822144904 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.267368995 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.261522231 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.196585234 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.170009083 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.143251465 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.754146338 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.278886265 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.181084 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.675009928 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.167982232 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.558742608 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.574885452 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.337204422 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.493119989 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.069808581 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.427938985 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 3.005660066 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.185151453 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.509532335 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.213648538 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.790506462 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.40041229 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.26285461 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.956235475 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.195869486 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.172814124 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.237278359 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.217725573 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.17524394 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.170395108 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.174220117 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.172363972 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.174499151 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.286397062 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.519212633 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 4.813466987 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.293462647 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.394757748 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.291920748 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.965299559 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.28225538 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.839889555 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.29727096 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.145789867 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.708266946 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.536575795 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.798195237 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.285548407 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.173160909 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.17378009 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.999005453 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.081201494 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.255581395 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.174165752 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.816692968 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.28644979 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.183279908 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.172043144 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.681322908 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.263051465 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.135621065 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.25359748 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.90291707 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 4.82009175 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.303956451 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.46796496 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.283237371 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.152476158 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.174477542 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.168678659 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.949451775 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.817945931 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 6.28835091 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.811052961 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.88998498 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.236109538 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.303075032 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.231208911 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.373306578 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.370080206 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.308668154 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.173979008 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.17142219 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.173457294 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.700464442 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 4.013802033 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 5.025291864 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.112094968 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.120706238 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.167301655 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.251795772 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.925177684 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.1638781 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.866968612 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.059480735 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.259469046 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.173283378 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.173357139 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.301550436 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.313692035 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.310165977 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.560793155 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.294786922 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.169583646 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.802283771 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.288259416 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.814174626 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.263262615 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.992955331 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.206006545 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.284504046 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.316110586 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.740296205 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.251718017 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.17122744 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.809237478 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.279719955 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.156070482 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.158765953 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.650155419 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.102399034 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.887454082 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.659306195 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.209578992 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.744366318 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.422733903 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.309921732 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 3.972481876 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.251418483 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.42814655 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.248126914 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.520299153 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.32225659 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.938197219 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.182553363 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 4.743519817 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.302705033 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.127776838 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.284571415 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.611748757 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.276981724 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.179139671 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.31762059 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.239387958 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.776281447 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.287840035 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.282892707 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 4.529033109 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 3.979325006 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.26135548 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.457857618 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.251462308 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.07465321 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.165455972 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.497383144 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.02877881 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.177021218 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.274301774 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.913797044 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.32775422 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.450157907 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.304615635 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.177689522 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.173376535 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.278919726 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.243158107 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.175506763 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.470047864 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.104817737 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.230840698 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.275063958 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.174380735 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.176062863 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.365996117 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.286198527 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.396931834 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.583345538 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.776048526 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.949535416 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.282925146 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.773323165 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.263756977 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.883976382 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.286714892 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.185323735 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.828379109 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.28636545 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.419926623 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.307662212 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.269466549 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.682528829 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.377854392 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.398356659 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.286145194 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.283955453 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.880181066 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.745799074 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.387679463 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.580779382 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.187207469 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.732748405 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.227597167 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.73535041 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 3.188455513 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.893612754 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.228264697 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.213126313 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.171644449 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.175378245 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.713921301 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.1639539 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.184437285 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.95262266 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.707766507 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.261790112 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.928846074 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.271337594 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.183101238 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.170397239 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.142854608 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.099835847 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.258369168 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 4.447298243 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.283012049 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.17572794 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.177585629 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.128528199 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.455238329 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.919071455 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.995928256 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.11625191 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.304026465 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.1757192 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.163782739 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.177617392 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.174868121 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.167253304 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.177363674 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.514985134 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.326748926 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.808544683 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.287475987 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.173562154 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.351238487 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.222239745 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.175395371 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 4.355570826 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.228001035 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.275710954 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.235895653 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.168765149 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.637280354 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.308605263 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.169361483 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.437333309 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.404158798 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.338925785 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.668291014 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.186098366 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.636190025 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.498983413 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.965915905 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.186316598 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.103333024 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.276785867 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.917913076 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.1480583 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.614612733 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.795493808 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.16329837 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.35408616 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.032407854 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.579449622 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.298457449 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.224237623 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.17537967 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.177315198 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.198031371 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.388983326 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.214417048 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 4.495736537 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.335707119 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.16116944 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.415758935 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.256568372 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.406403818 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.182920571 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.191209608 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.175335842 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.172979536 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.584549559 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.993564902 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.233438569 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.174795714 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.096565242 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 4.010127923 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.048805801 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.839932573 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 5.103089772 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.30590688 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.177966663 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.368313536 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.22199731 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 4.828782599 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.329591577 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.954720721 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.489478944 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.216025605 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 4.324750483 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.573917898 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.880280846 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.517610247 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.276705756 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.172036343 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.50736799 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.135599451 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.268783038 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.070819282 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.468910824 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.732441851 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.648776594 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.419619199 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.271607637 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.086423515 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.751973001 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 3.187208554 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.183312525 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.002945433 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.310911416 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.423471741 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.085581432 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.403067018 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.305207464 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.842494173 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.886128234 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.309977894 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.762036491 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.310492047 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.174634094 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.780432767 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.224722799 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.313392464 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.242144836 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.171988395 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.192874932 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.828345208 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.792268715 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.341556061 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.212939462 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.156143154 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.810939189 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.038793219 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.285702896 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.182312271 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.17376671 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 4.588311665 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.186295646 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.175078375 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.630973569 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.817457214 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.304047554 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.663877142 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.294541068 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.311124369 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.394720295 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.571002947 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.335841528 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.228357622 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.176334028 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.174519935 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.17262293 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.560838676 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.318435134 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.177968882 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.751147313 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.307655981 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.952242924 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.122754039 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.380364117 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.216090731 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.594451913 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.308278871 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.683605951 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 4.089001981 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.277092798 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.461555992 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.244763466 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.254085596 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.839725633 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.259736133 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.17691652 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.083713704 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.453748608 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.456089816 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.514341216 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.417024067 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.240797112 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.814016887 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.24202372 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.785501048 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.326339021 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.169582376 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.653674064 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.285176875 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.567746312 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.30530924 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.624109778 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.20075508 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.510885124 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.427698064 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.246727837 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.155922583 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.171237335 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.136841134 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.208843557 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.75833637 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 5.130890694 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.591747303 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.289111657 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 3.051406997 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.639551501 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 4.816626637 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.494079191 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.329448842 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.617954301 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.182131158 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.12432406 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.495945623 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.224592796 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.328704713 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.25837701 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.90923266 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.215374027 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.178046723 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.55973287 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.317066944 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.175984494 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.171925034 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.092139313 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.931286607 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.259900285 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.345800852 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.252539185 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.175096191 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.762640371 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.416186882 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.199149884 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.15583202 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.172580491 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.997405526 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.262707944 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.169700344 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.476981078 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.308447549 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.454141776 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.993634785 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.590244502 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.258181424 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.171803341 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.175097821 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.89185873 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 4.565571593 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.333334057 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.506813763 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.230211689 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.688325529 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 3.127779982 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.580540963 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.730834044 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.116458377 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.279319694 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.173856146 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.186189357 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 4.920703301 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.2600563 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.945486029 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.58749665 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.24865845 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.906503016 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.109080923 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.215948518 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.294470233 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.205402244 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.173965626 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.174577241 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.171692705 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.705246598 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 3.182281659 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.182143354 seconds)
  done (took 1461.402979865 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.459871804 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.176960434 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.168461274 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.174101484 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.174260954 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.16702346 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.136732282 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.141028707 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.168496876 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.174750637 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.172866807 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.169658507 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.173071855 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.470155861 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.172153555 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.174157413 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.173229782 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.175513257 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.172260298 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.174798514 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.163383406 seconds)
  done (took 26.295030041 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.170285468 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.171633235 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.17356877 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.161528973 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.145308139 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.133160657 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.151612612 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.172600178 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.175615523 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.172119572 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.16299023 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.165788672 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.173465682 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.171983378 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.16939726 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.174254527 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.170955748 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.173400373 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.172525078 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.174334531 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.171809009 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.173172627 seconds)
  done (took 26.846695484 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.175011745 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.172807002 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.872398111 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.282888354 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.143113174 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.125406905 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.136610821 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.368774374 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.177207536 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.071600298 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.606909113 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.227431458 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.185426633 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.345466137 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.26280599 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.177526684 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.305623503 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.096910213 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.129694383 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.144901335 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.178072937 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.361774616 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.295317859 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.175667886 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.998707279 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.311709892 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.178001636 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.174483013 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.174431848 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.17153419 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.251889549 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.183625527 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.994419965 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.900242121 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.487770666 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.083028187 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.286121259 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.167651304 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.175563828 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.174265856 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.39585115 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.962366465 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.187103425 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.175113479 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.443528133 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.275616363 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.169187641 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.553681754 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.235408786 seconds)
  done (took 91.286672932 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.187622096 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.30823829 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.250343139 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.175241431 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.310558387 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.179595879 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.235159618 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.180623291 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.176216216 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.177697773 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.327108783 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.354351239 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.176832123 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.176154086 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.258018731 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.154928331 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.17795541 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.178728547 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.179903885 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.177988744 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.178475693 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.231323711 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.299122022 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.329229767 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.136366926 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.122395363 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.151602387 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.179283636 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.347166101 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.180599001 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.179611846 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.181761887 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.316553628 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.330037093 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.179549918 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.179518166 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.307467419 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.180529668 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.175058668 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.179829187 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.179108476 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.18038775 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.232637125 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.324237026 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.182424626 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.315276276 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.183157252 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.1761726 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.340416378 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.164293606 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.158434818 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.362005661 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.180076938 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.17951157 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.179629001 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.310984403 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.167072009 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.148558415 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.111360504 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.316555197 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.181059706 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.175735158 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.347480619 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.180277735 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.155710006 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.359227135 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.31258149 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.181873446 seconds)
  done (took 84.158559001 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.174990285 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.178518244 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.178129003 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.180211225 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.176680618 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.175440981 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.178654455 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.171434125 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.174790669 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.177482023 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.177138027 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.178358611 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.176145496 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.17793693 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.173918503 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.176710896 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.17678464 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.177005279 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.173437457 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.178141876 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.175649207 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.176274657 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.176072142 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.175825267 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.547572189 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.182533884 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.175071663 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.177978089 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.175666515 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.179067686 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.547601757 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.179493843 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.174099899 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.17591103 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.533692478 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.178887078 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.176338408 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.176895994 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.173487958 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.176357463 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.171234998 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.172128985 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.177066301 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.175444279 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.16092569 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.13832808 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.152429944 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.537077541 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.175923609 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.175922835 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.174682768 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.175382933 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.16005268 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.171780222 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.174141163 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.288372759 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.175974762 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.173832138 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.163032932 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.173472099 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.174900788 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.290057506 seconds)
  done (took 75.666240798 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.174304399 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.174094821 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.16657515 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.1730479 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.174722702 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.175259889 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.169222056 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.175517318 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.175520027 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.174643692 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.17273357 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.173402048 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.174595829 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.175829927 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.176472681 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.173233491 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.174396431 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.174281066 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.172559197 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.173061823 seconds)
  done (took 24.638744969 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.173803495 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.174027388 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.174716446 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.171805782 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.173243553 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.174022404 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.174995114 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.174315359 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.173647362 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.175244542 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.167845498 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.167840314 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.174750561 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.169230586 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.175301033 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.172953364 seconds)
  done (took 19.931272703 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.171388835 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.152643076 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.169847879 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.177293873 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.17612364 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.174480953 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.175372564 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.174434717 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.173996639 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.659896027 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.177617689 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.176117226 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.175209042 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.172862271 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.168416686 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.162698844 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.172320034 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.171114618 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.175044939 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.174726691 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.75491322 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.172214406 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.176400451 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.173471022 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.165926317 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.738079912 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.115375454 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.129633591 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.175141094 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.175079669 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.172916861 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.672500298 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.175693919 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.166406467 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.173150801 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.174588324 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.17204188 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.170229648 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.176099572 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.169040545 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.173198817 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.173097755 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.166906056 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.171549897 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.175285079 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.174228071 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.171527245 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.663676191 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.177542519 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.177173295 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.168357034 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.135567811 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.147856039 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.677980523 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.176515197 seconds)
  done (took 68.621307853 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.205377847 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.206861445 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.144613322 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.120510008 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.226091849 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.223843485 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.227030518 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.191348375 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.218534362 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.180240688 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.263183448 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.19467419 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.191901958 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.171809027 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.238894135 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.225745412 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.178588979 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.262910517 seconds)
  done (took 22.838621695 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.171316947 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.178316103 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.179405306 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.178270711 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.169161414 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.177999847 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.177447556 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.176349219 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.172690241 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.170067411 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.167504 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.182331532 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.177417332 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.17716229 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.179974378 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.180411775 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.178274109 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.17983211 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.176327697 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.178117784 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.159075298 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.168392115 seconds)
  done (took 27.014164792 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.209795117 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.221664208 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 1.180875123 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 1.179171601 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 1.177275472 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.198312904 seconds)
  done (took 8.333895557 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.238520073 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.176854076 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.19647404 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.211153546 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.154334978 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.173776675 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.177716715 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.17573979 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.176368877 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.497699893 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.156712669 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.161816276 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.154275255 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.154936341 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.177928517 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.177709273 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.17321986 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.151605565 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.167641251 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.20487084 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.15046948 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.166586041 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.176049998 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.177329154 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.172667371 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.14356916 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.114018813 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.450723452 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.161855791 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.176348842 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.176968075 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.174915924 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.17655515 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.470201451 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.213189149 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.165770903 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.17243991 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.272215751 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.178372289 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.147428293 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.182770302 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.118842897 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.146219946 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.176009962 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.17786898 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.174883044 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.175503943 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.174374491 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.174230885 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.499717932 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.176781963 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.175553722 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.175582497 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.174326952 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.172188029 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.495548377 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.495230341 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.174803595 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.171944793 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.484824642 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.177804783 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.17373723 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.171973673 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.497727827 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.181355133 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.178121843 seconds)
  done (took 81.164213284 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.176816477 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.221340865 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.179886611 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.502812353 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.179260589 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.175601434 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.174047758 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.177442706 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.175644366 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.24233167 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.267821292 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.177549622 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.176368953 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.17481778 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.177199863 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.176634553 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.176750586 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.175073838 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.238900892 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.494701019 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.178307893 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.176881647 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.177126441 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.177116276 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.489961012 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.178713303 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.174835724 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.17748285 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.177317792 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.177372668 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.172351529 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.172476415 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.176733868 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.217691988 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.176367487 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.174537108 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.176841551 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.172930077 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.173452501 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.155999449 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.129432933 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.228612157 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.16511428 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.177353086 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.490521175 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.176083392 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.167446373 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.240183914 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.172586908 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.243646726 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.49541177 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.468037537 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.456916937 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.131366753 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.160829233 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.178371503 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.178209069 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.177316594 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.177051913 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.179328317 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.178057093 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.17546242 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.498658247 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.178753679 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.176918382 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.177323033 seconds)
  done (took 81.642164724 seconds)
done (took 2465.41519809 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.172635682 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.229013414 seconds)
  done (took 13.565367592 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.173795051 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.175765776 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.332403297 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.179915465 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.168281243 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.211136979 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.179774043 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.160799223 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.16442332 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.262216635 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.179816476 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.300929338 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.258276231 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.147995075 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.135527136 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.179033825 seconds)
  done (took 40.377526466 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.167136673 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.497666644 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 3.123018028 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.869783417 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.167416026 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 1.984690051 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.455408442 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 5.412866481 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.511925554 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.564095864 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.438004388 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 4.813813852 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 6.022745516 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.220303929 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.880665221 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.75924926 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.864016339 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.935062983 seconds)
  done (took 60.847005775 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.167955847 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.32523208 seconds)
  done (took 8.683296912 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.179483607 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.18116244 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.188357242 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.145446383 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.187446805 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.16493165 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.178887024 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.207832479 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.232886554 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.2018717 seconds)
  done (took 63.040289286 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 6.170971726 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.744782975 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.603170786 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.658540494 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.683519607 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.612846527 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.33514127 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.584470319 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.270912228 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.169513312 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 4.988724475 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.781675404 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.909216465 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.11211505 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.708044759 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.599937667 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.794282106 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.588784355 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.489387051 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.642869191 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.294910186 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 5.000994487 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.503958358 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.063606647 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.181822869 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.237287057 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.278842554 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.281871211 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.254358722 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.055143501 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 4.974826567 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.266179313 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 5.052042946 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.270440155 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.414516956 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.673160866 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.815483671 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.382096674 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.495453089 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.475405755 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.546683591 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.44784479 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.337972433 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.40344491 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.433204779 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.353601115 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.167705794 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.423506035 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.261953192 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.291570935 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.843977248 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.356295066 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.312739183 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.287358001 seconds)
  done (took 154.070007696 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.161290671 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.581306097 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.347096326 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.149249206 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.471422221 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.376285305 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 4.933966341 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.704276084 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.162106105 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.378268126 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.344411686 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.291110078 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.127249476 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.165399066 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.166703722 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.167193216 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.358179579 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.718685042 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.182300676 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.147224272 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.363300798 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.369701364 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.267596715 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.142828101 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.345537415 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.410053718 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.592166497 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.301963358 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.571529733 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.16923972 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.616637979 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.180281859 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.168293707 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.060186746 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.551375619 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.512946547 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.60161508 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.171785922 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.941304547 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.167141063 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.806987351 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.303353631 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.475319272 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.318087674 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.329689466 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.408201813 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.814535772 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.123486604 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.949368753 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.341902993 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.3568059 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.369826503 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.447849045 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.175662858 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.654063307 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.166396478 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.142300407 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.461052233 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.320408555 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.302289164 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.17034832 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.135536312 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.168902321 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.412460646 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.175431394 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.289853342 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.173349085 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.168497219 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.285052759 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.305463028 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.323410135 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.41678037 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.400082525 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.099152405 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 3.514647805 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.406567553 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.601699963 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.433783885 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.171682084 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.168605124 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.622995414 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.625433183 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.337943171 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.417025278 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.488054807 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.472786854 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.744423393 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.164777484 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.398756819 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.344663354 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.528049492 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.329295916 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.546703185 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.065992607 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.132461872 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.158232437 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.086826136 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.304631971 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.163839896 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.69079739 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.443439583 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 2.94720352 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.274860475 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.529476801 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.281032416 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.173895003 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.721083209 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.15738155 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.395062692 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.465023545 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.175433487 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.170139901 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.320020512 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.161102245 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.156779596 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.59558544 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.580041801 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.184584455 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.335240976 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.164948681 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.409153265 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.012631307 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.406959334 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.160693486 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.449687027 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.356504529 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.32698478 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.17611854 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.506656111 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.402501274 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.571799851 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.506333276 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.169933648 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.102175576 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.507517657 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.173092524 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.170184322 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.331608497 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.124908586 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.336039768 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.168555156 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.532385329 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.335015674 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.550424799 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.157869919 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.414216176 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.420764835 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.582964813 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.161447126 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.307172718 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.161230291 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.125765628 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.334083959 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.149357149 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.136648834 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.0250063 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.167990877 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.31908519 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.405072413 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.900578953 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.590616379 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.531613847 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.162106386 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.659399937 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.369819644 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.612155496 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.680158159 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.344295577 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.166964908 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.153959785 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.165324559 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.416831923 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.465931089 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.151899234 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.162314218 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.87581187 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.262732442 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.161318859 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.365929121 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.781209369 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.584071449 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.382552997 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.168572946 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.544912246 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.169842387 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.363654284 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.665065956 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.44863551 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.154654256 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.15980512 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.167600552 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.163594855 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.386970227 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.4246065 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.878399843 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.316017518 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.470664699 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.399187722 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.491711149 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.640669253 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.175026234 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.43022931 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.171354776 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.612487818 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.172089527 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.423278252 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.417569548 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.165836931 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.469350396 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.528412195 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.358767243 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.57660058 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.150043384 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.167687314 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.156108019 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.351179216 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.626465431 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.170888529 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.300416488 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.537944027 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.309248751 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.375248076 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.375161515 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.171319542 seconds)
  done (took 742.386419631 seconds)
done (took 1084.133540818 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.153633467 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.153290399 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.157052248 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.168662878 seconds)
  done (took 25.771095394 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.990553094 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.978117239 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.264625603 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.176567672 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.463842772 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.204571518 seconds)
  done (took 11.246159087 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 4.682124902 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.147884765 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.155866832 seconds)
  done (took 18.150747064 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.449571966 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.635774895 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.355409591 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.276775185 seconds)
  done (took 6.881380591 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.183117162 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.166260404 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.165862986 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.175431919 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.179327668 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.168801296 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.166026621 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.164322211 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.157585277 seconds)
  done (took 11.696313409 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.769676866 seconds)
done (took 79.650060068 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.58921486 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.479191535 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.1564713 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.426317919 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.286015935 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.472473965 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.279315501 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.192158184 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.517548438 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.583310768 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.680145347 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.2516494 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.505453267 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.622328289 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.415288557 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.188952039 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.19136434 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.226270309 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.712154712 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.341186593 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.853676736 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.305574978 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 6.154933588 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.176865472 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 1.992156372 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.286410554 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.427144263 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 7.357433473 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 2.362350892 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.195002139 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.255642429 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.689794509 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.369101697 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.462661817 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.237314941 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 2.041923082 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.622831375 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.165253428 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.471537801 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.725895671 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.413016867 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.300694158 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.16400674 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.539522266 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.589535406 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.189167905 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.119448537 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.320927244 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.668246191 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.351969123 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.539414509 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.174477129 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.796951895 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.235006317 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.256727659 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.197810237 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.168210934 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.718233616 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.380910107 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.481850113 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.195130671 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.165500346 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.230416133 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.199205564 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.603882778 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 1.478078114 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.584214478 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.259905807 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.794577904 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.194578577 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.18434661 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.197820237 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.860613975 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.341668851 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.146061622 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.278492935 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.450550688 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.22178313 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.165998459 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.749205525 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 1.405290608 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.306260198 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.30750195 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.53300632 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.329312072 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.538724128 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.680061629 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.546738497 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.696056679 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 7.301886734 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.927876181 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 7.371539612 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 6.256333554 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.16874339 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 6.31268384 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 7.868654153 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 3.193458058 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.677972454 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.302999178 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.87354943 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.17773071 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.16158501 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.479672293 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.501778366 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.971633568 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.205156925 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.30986956 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.145097101 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.439069988 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 7.222045761 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 6.278405772 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.752417259 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.172654719 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.219130639 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.681869223 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.172678782 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.487793184 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.584938834 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.281289867 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.127492854 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.506530505 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.1787108 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.291642304 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.698037955 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.539861857 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.363678822 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.159961424 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 3.315648212 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.144941508 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.391253067 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.176900552 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.84687052 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.801223671 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.199919358 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.423759284 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.307480964 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.162726229 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.38590438 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.201966708 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.305500027 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.535401429 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.474698398 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.303346021 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.172169796 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.552481379 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 6.173022685 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.408236612 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.470951272 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.316319961 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.486747776 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.26041284 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.191567816 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.241456661 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.590153671 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.72564976 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.871173307 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.384589912 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.298042596 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.780314997 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.424046699 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.89037483 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.241945936 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.233798419 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.173733267 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.192456012 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.241604399 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.165289936 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.160693076 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.502257066 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.394678262 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.879274366 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 1.936260796 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 5.878731118 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.459620366 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.293207265 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 2.076371104 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.844342075 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.151487185 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.51775154 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.65147801 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.272258542 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.191794923 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.16845091 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.172670571 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.865159465 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.187228594 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.499509306 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.716968305 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.461473544 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.523323089 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.41012073 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.207636195 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.546531817 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.396863814 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.426510851 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.342685643 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.739445698 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.288395672 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.503986153 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.251250345 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.430552514 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.145209957 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 3.066736957 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.374670606 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.652293772 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.527777583 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.374248464 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.386568031 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.511590249 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.158172001 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.662817503 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 6.276140415 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.527672992 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.176990705 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.631055281 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.27293216 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.45216826 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.154405974 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.32458075 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.455557424 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.291534347 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.237704503 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.590431465 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.18357191 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.501385158 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.391132855 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.356022966 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.392632773 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.190630043 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.328635989 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.362729555 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.31179626 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.389235522 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.165098087 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.609166305 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 8.030364741 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 1.297689983 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.159806063 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.509303186 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.188430888 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.177223958 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.506497288 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.377003432 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.48910463 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.322566868 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.330182763 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.161563609 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.336602866 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.723171175 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 2.012452126 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.769923763 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.296736598 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.179251719 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.158510464 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.591379057 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.584314928 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.220823463 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.28238869 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.850027776 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.207714789 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.348107682 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.144418883 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.170290112 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.842180057 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.301844207 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.413359115 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.843598864 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.157657894 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 3.254736932 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.17576692 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.694650274 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.693558065 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.204586788 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.299183412 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.706145481 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.222954314 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.577846473 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.20065577 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.321953048 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.524656748 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.282786442 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.307939394 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.160035179 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.212547621 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.69434552 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.437831352 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.696472043 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.211914694 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.550741463 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 6.175092222 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 3.122200821 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.185537948 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.253140103 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.575074812 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.290763524 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.524256967 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.178669608 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.308038828 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.428835772 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.202299368 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.296364969 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.31412606 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 8.017117937 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.879181584 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 1.476986029 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.321618197 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.078481725 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.407682416 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.167629129 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.42277417 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.305932145 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.26260926 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.782586582 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.691518947 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.167271506 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.68884317 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.227635446 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.538334157 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.193549108 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.194106725 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.297402728 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.270480226 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.157424336 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 3.400872008 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.336751713 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.703970787 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.28026795 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 2.070690419 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 6.172957978 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 3.053245855 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.249708296 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.440401916 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 5.93237141 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.182431811 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.375224467 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.868834512 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.290607093 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.202728348 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.425475746 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.161502756 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.871083436 seconds)
  done (took 893.153330095 seconds)
done (took 894.407549285 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.220769848 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.542496718 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.338124709 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.093187325 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.986975352 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.824347404 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.397795304 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.407042075 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.249615014 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.397380112 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.149327534 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.989801268 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.27184239 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.299619926 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.266335065 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.284179296 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.447020416 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.416926354 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.295124847 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.084002112 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.521785909 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.097090173 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.606641096 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.475510584 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.551231638 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.280656438 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.24161398 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.521429997 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.524879782 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.419407899 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.41387955 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.380837862 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.028947415 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.41186076 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.268215043 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.260150412 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.292600117 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.206754193 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.122614159 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.223099613 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.558440521 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.302160525 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.956092371 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.113134246 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.98343967 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.609287697 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.069986804 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.289224442 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.285370893 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.363118216 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.20451727 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.19946608 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.532941691 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.448544707 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.066877429 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.104401581 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.533145279 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.296051326 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.918429575 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.348958213 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.543766515 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.278147595 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.354420042 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.412396715 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.275715741 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.434115207 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.56609612 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.201843765 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.379291094 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.409903772 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.425706838 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.385324779 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.256308173 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.507112045 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.295867743 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.403563259 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 1.939168185 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.383351801 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 1.967733242 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.282656255 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.333285594 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.143335512 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.126416048 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.250966836 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.2096609 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.952070128 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.127068063 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.301662499 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.295121888 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.369030312 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.160468162 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.377541804 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.643481402 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.245037506 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.221795741 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.382329091 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.147792649 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.200653954 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.394087343 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.381175687 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.972067762 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.245367717 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.204912238 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.26860992 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.281803477 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.198441663 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.22139158 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.594772424 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.396421807 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.350733144 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.546816054 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.297474199 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.393347076 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.30004616 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.236408195 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.957327361 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.464617909 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.197065915 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.203730754 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.860399215 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.48597076 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.268264806 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.554152082 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.473877347 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.222037312 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.273858534 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.281496694 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.32190695 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.283570595 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.276662404 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.382904587 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.638833573 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.356024421 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.135090637 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.406313197 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.083377755 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.40222014 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.406262956 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.255283643 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.152285788 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.271119395 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.367801028 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.475064907 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.55255724 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.411264359 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.475924818 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.297904183 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.486350992 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.200895353 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.291814812 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.39864006 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.312701445 seconds)
done (took 254.538032328 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.541433541 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 5.403232753 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.460525976 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.402687803 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.568526193 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.5058123 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.223199343 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.627168253 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.22580596 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.635342137 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.397974186 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 3.126024495 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 5.393937494 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.381108257 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.57891213 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.426086938 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.236647734 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.436322754 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.669250626 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.557049133 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.991650524 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.398274686 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.302232673 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.586355954 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.167957235 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.977022712 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.504881696 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.299686412 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.474518275 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.973697969 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 3.003032581 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.453552667 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.492918263 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 5.010039589 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 3.61525621 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.923605745 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.50972212 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.984136802 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.474189096 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.546051142 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.407195524 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 6.149350629 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.973720819 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.999918309 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.295268232 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.468502501 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.251231792 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 5.21206202 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.160215543 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.946663701 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.465801522 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 3.014454285 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 3.120004921 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.452202185 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.400966551 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 4.92355005 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.593833429 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.588480681 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.557129775 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.499318204 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.468754423 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.636900398 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.578220852 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.296978943 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.996196959 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.492651253 seconds)
  done (took 152.596155364 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.584044821 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.484578791 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.60292113 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.430536627 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.712601508 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.587741826 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.586242969 seconds)
  done (took 14.1571305 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.270884155 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.22847869 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.472545606 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.466802393 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.234683726 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.38681364 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.31975447 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 3.097998678 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.48157883 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.276658826 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.555438958 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.451292994 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.979250412 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 3.014087451 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.31478262 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.485054956 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.341403018 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.297302719 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.289257137 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.478803269 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 3.090929004 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 3.025594717 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.390744523 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.212388969 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.228769293 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.271975962 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.235576553 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.202356532 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.228225422 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.194886133 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.219170178 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.342228458 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.229151361 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.97466123 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.214906615 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.560290204 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.237161767 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.229541301 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.398003533 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.166869916 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.203829825 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.23700077 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.37279592 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.234896258 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.213298363 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.415929041 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.198605556 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.225927489 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.21401536 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.225246131 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.41294019 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.228825889 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.216615864 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.989637573 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.432338459 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 3.048325154 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.305720809 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.218118613 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.22725828 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.2809418 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.226075179 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.471593578 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.434685403 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.188437352 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.468631051 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.538009102 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.224739393 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.214254849 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.208278493 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.466642829 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.187711044 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.455836171 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.231345554 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.287043721 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.247168305 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.35920779 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.416021257 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.100247761 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.066868797 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.905349062 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 1.549115721 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.205686492 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.706951452 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.170518924 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.98488193 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.208639431 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.237577422 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.904038231 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.138772026 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.231294246 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.539677404 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.212629679 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.297204285 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.283864667 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.210787976 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.290237533 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.444996073 seconds)
  done (took 159.61827802 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.467637925 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.582839657 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.381494048 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.179408873 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.253066401 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.563288045 seconds)
  done (took 15.599715646 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 1.64526959 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.998254932 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.249710304 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.239296313 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.280328816 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.174875656 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.182215727 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.394581113 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.403652281 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.241080639 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.181418757 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.159827889 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.147609738 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.322754981 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.149444393 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.222833128 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.186756933 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.252735301 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.23621744 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.300979077 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.532146879 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.282740928 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.297045394 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 1.898584366 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.280960749 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.215202654 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.99008628 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.233276703 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.237936679 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.570358646 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.414279806 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.184161776 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.907330673 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.363700297 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.908097118 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 1.903575166 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.41130055 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.15709763 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.196950516 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.156657473 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.165321354 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.298668076 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.251214167 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.183499725 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.58748307 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.859751449 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.267383442 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.502224719 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.184479379 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.185719759 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.183529882 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.250333719 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.182504232 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.185818049 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.688629749 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.684353136 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.166811892 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.188352602 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.279794904 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.911324456 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.348999607 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.189649723 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.627289902 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.171413101 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.947878723 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.187805325 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.912930557 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.411248597 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.289085301 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.198631172 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.142948964 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.232454342 seconds)
  done (took 119.189376418 seconds)
done (took 462.32846214 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.54897971 seconds)
  done (took 7.719378226 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.206702431 seconds)
  done (took 7.517850567 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.166082733 seconds)
  done (took 7.33681438 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.193500103 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.198951321 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.1834038 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.190146084 seconds)
  done (took 25.976341383 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.607799031 seconds)
  done (took 7.712633648 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.173424398 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.185967622 seconds)
  done (took 13.611767114 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.32271091 seconds)
  done (took 7.46801291 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.633347222 seconds)
  done (took 7.813518989 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.181330196 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.169580009 seconds)
  done (took 13.550574684 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.177451766 seconds)
  done (took 7.353684403 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.904778535 seconds)
  done (took 9.164097856 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.174479527 seconds)
  done (took 7.368926712 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.250868738 seconds)
  done (took 7.426321018 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.290516901 seconds)
  done (took 7.421579697 seconds)
done (took 138.606535141 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.136410824 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.174387444 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.17312721 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.161113318 seconds)
  done (took 25.810686773 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.485480542 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.504983168 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.490952121 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.662745042 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.443052493 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.377685796 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.455730542 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.483111524 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.44256622 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.553237771 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.509907621 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.552605122 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.525997437 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.46274099 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.474171866 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.55483422 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.658147047 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.506653621 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.455352264 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.480832014 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.646230239 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.559572293 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.947101394 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.952994548 seconds)
  done (took 38.337775173 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.380430005 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.627204275 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.340806357 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.503730688 seconds)
  done (took 7.020414506 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.226944913 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.56060057 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.54404826 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.604191494 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.542059952 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.358021257 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.541891815 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.396781741 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.333718554 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.324712252 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.809643508 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.324981075 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.349322346 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.600011437 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.357138938 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.182198121 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.175936938 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.344134395 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.561414291 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.430369734 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.451481555 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.544614336 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.544804035 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.544576453 seconds)
  done (took 35.829380318 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.947270746 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.114822447 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.538309381 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.10099039 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.896475706 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 1.971984477 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.462967623 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.67281749 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.441759342 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.41324676 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.954991668 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 1.919768183 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.3234085 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.073348955 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.950929258 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.361284425 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.361524402 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.038031002 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.605934057 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.482905134 seconds)
  done (took 39.80173889 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.165946701 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.422520282 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.440900306 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.330209743 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.125697727 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 6.171787541 seconds)
  done (took 26.830537733 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.519171503 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.312425817 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.47263298 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.422166351 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.32297795 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.295145703 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.724805795 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.398589632 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.975071806 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.872029399 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.607083448 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.540607253 seconds)
  done (took 22.613324616 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.144536642 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.206473362 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.172404818 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.377359404 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.257497755 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.838356738 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 3.181867407 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.151241185 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.746673865 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.436212604 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 3.311639938 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.409133592 seconds)
  done (took 44.37931106 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.37168119 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.341628076 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.48584875 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.206364996 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.549555221 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.217293565 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.537107326 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 6.171203575 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.940375716 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.955143862 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.559171971 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.18579689 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.709605999 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.105832143 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.17280315 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.443926637 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.067923288 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.106889571 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.485479105 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.197512998 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.146660403 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.304461989 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.157801363 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.611882338 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.448017486 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.175858694 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.369421795 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.396561824 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.132039383 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.393465248 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.170223277 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.685561933 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.346757518 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.479281808 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.568435064 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.211919476 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.287400599 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.891957907 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.752810311 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.455009356 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.301126644 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.336991942 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.161777339 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.13667355 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.423075651 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.950751507 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.172390929 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.834782901 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.151018043 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.33172287 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.074723712 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.053308137 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.584886131 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.869792909 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.312109196 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.478741134 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.337102957 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.260592785 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.410996996 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.252150897 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.354976103 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.289788576 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.368616083 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.142380798 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.46128614 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.506329435 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.302338181 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.412536316 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.437223174 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.465513769 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.526554812 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.332781678 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.354251442 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.255646065 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.692441777 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.088559551 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.533024423 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.16239252 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.889244427 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.713713962 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.15226419 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.298396877 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.877346192 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.146059894 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.170899135 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.352359666 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.39771339 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.14109335 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.173669648 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.249646695 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.561131437 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.297996284 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.297095886 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.346235087 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.839517499 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.154420156 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.174078694 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.44830933 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.10901255 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.743270051 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.168432291 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.21919474 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.171147957 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.764070104 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.556958988 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.96508467 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.971221541 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.79320905 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.472160399 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.822436503 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.339677235 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.173345674 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.524540049 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.500909767 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.170937204 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.004041198 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.162568061 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.347968371 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.544510891 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.151398915 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.149662216 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.587469806 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.355563155 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.17610102 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.433923199 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.17594088 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.321932399 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.151251068 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.776289136 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.77990537 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.414047299 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.634190247 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.266192447 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.316373179 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.148190801 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.315193706 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.615351822 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.238307911 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.503283288 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.484448563 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.356906563 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.651810199 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.164215038 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.997139183 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.53747808 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.41996942 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.518607506 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.823433802 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.349228504 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.181956907 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.172248993 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.36760641 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.175581295 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.711068156 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.157375327 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.872974292 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.942407977 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.570532739 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.16555007 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.334915349 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.163502655 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.384189822 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.769867846 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.173427543 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.344053668 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.418792942 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.34024818 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.17168471 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.138436886 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.441635744 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.382457879 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.639056493 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.41133135 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.765936168 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.482226381 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.674165543 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.371630027 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.528043199 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.909441141 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.407457395 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.39399258 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.532469752 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.170715314 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.203271383 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.279071131 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.612404356 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.407146696 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.939639733 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.543349573 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.512818701 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.207072052 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.750885728 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.137635589 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.319958159 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.552587838 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.17092158 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.670468578 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.243903112 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.508303834 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.718665561 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.19737296 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.477766 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.945384332 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.545208234 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.538380397 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.50456261 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.157829744 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.449564872 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.767512186 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.318096972 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.230381449 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.498908762 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.115296566 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.185991757 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.162281787 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.518718793 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.264522118 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.810012173 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.713992609 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.701921025 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.080187563 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.320063795 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.546858774 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.171051452 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.086650742 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.350797656 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.227957081 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.320471019 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.594743622 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.401622142 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.502031484 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.171552891 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.173551659 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.442725175 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.471935668 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.430883344 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.607519094 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.381434652 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.844195061 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.268324415 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.789228343 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.319062645 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.172901449 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.689068596 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.10609439 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.027820082 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.34375312 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.829120579 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.351296803 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 4.872969643 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.447533973 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.16970833 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.532264252 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.73568309 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.17012562 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.058419006 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.292739304 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.166926301 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.358368971 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.935854137 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.232067598 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.302536616 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.830701668 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.394388486 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.343807699 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.544159225 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.575407279 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.488589772 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.124978827 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.341783613 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.276027895 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.468225959 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.169186127 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.482466405 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.831428907 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.788733743 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 1.959237941 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.660470937 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.411193424 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.928075588 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.539089904 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.36887792 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.434683902 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.09298664 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.76724828 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.155015266 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.274033925 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.129248197 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.93056299 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.466249284 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.554111921 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.538675475 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.199773724 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.579909544 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.507841389 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.258238768 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.370492086 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.435359281 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.163494073 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.454043092 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.171915834 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.663581658 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.582423911 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.173908009 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.717917851 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.327122958 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.506656275 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.33327089 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.694329199 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.176056655 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.340693129 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.642131379 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.36983647 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.316925574 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.515104387 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.977489965 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.165983197 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.158876194 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.156911857 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.147040723 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.531936168 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.719901991 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.652936201 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.458797403 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.945371507 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.16613052 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.371756409 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.340759589 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.150533239 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.34845083 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.56843912 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.187553012 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.373491014 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.481879546 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.316115583 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.697066193 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.127534717 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.857626397 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.438636272 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.684737705 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.706309818 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.96291827 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.599365572 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.173012092 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.652279199 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.153828668 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.343277446 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.478108909 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.779910007 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.185859761 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.000190554 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.957890913 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.366045872 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.631542075 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.254243021 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.924815918 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.335174355 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.43965737 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.362724605 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.30690629 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.142765964 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.761611038 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.940149196 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.442907399 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.340085075 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.346850722 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.331725985 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.336738391 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.751486571 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.484261799 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.948244064 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.528824636 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.355061902 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.135381407 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.170607105 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.874241545 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.524632129 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.184307484 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.461083215 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.51785336 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.203571462 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.168313587 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.175738338 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.490046598 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 2.91553112 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.896810383 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.399270289 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.541546633 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.727187052 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.168975751 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.952995317 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.368211698 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.541031998 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.547333276 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.003289013 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.566426262 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.46589854 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.331324582 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.108606615 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.34120894 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.165833612 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.277170106 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.962488178 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.46443566 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.266678089 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.317535709 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.817018539 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.18215197 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.174462699 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.741495785 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.396650105 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.39284674 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.148855945 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.740246547 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.50293062 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.272307383 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.168800206 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.921061512 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.12110026 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.362403682 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.154593939 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.362740677 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.009189885 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.262556563 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.889369872 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.608174321 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.199437666 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.366977691 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.123140476 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.962021258 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.121215041 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.801068174 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 1.98854966 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.391954817 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.719687997 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.32719423 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.175281752 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.470943246 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.313773247 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.478028714 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.457457917 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.539634809 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.562131386 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.444969666 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.437534287 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.689377096 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.324495122 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.421312672 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.149765019 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.176653363 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.22982166 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.544331288 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.476012921 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.127393828 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.689507816 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.396599445 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.34535876 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.330319443 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.279259629 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.721853044 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.372328361 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.307748437 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.331287483 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.224104728 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.464038606 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.153310684 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.377719651 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.150295269 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.220077251 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.362835662 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.420309605 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.539445847 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.47131549 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 1.774567477 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.334588234 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.695832898 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.911964609 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.716274186 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.147702892 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.999224322 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.47552388 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.136595758 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.546222479 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.859492846 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.32521313 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.445147948 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.227776293 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.187968597 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.318547844 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.725764202 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.185221478 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.767449326 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.532091849 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.169392806 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.543793258 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.20650097 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.328597052 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.931876149 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.669494966 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.171638903 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.699699559 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.489037649 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.717109355 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.837927673 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.171911445 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.240084656 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.775235214 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.129017676 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.170884582 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.256085685 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.70932856 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.177436251 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.648027803 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.30975548 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.343774174 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.171997513 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.318729807 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.162903753 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.372269218 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.36698763 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.42320008 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.436570003 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.349564698 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.179046168 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.743298712 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.826306333 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.240806247 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.410830533 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.15681562 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.570505531 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.952174558 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.143344484 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.775228193 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.342207946 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.151362216 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.564737974 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.436634007 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.209404153 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.373486208 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.175908121 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.505217229 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.328283469 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.673657984 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.414861319 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.532939688 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.294081388 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.185004628 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.673696542 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.542200445 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.08299224 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.174664374 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.473270064 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.161834577 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.734040738 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.909702422 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.333827763 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.366327413 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.906750915 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.935271809 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.171095718 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.223298888 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.16170052 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.38912891 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.72700636 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.147096265 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.743738055 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.287761237 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.362831196 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.501625147 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.12734687 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.343025517 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.194866269 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.156106015 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.672232759 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.172205007 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.517556795 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.146989192 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.733390687 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.187180211 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.306003105 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.335191273 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.47981697 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.175300044 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.161868618 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.343363139 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.171105565 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.167436214 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.527172485 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.321399691 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.420147267 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.52327867 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.382355988 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.516678885 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.037789871 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.727657829 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.380826523 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.488029272 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.00791576 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.731544601 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.297344055 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.693865613 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.745805285 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.380032025 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.713211408 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.413521234 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.897738647 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.322808114 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.696022197 seconds)
  done (took 1981.789143421 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.18166802 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.253218618 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.226238901 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.257486268 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.249308005 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.249917142 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.246789391 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.220850532 seconds)
  done (took 51.060656179 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.168332318 seconds)
    (2/17) benchmarking "4467"...
    done (took 6.212842157 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.715284796 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.35054941 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.170675604 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.43413833 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.315399119 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.722721718 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.340716879 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.260665581 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.228579255 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.319950982 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.177783896 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.192239035 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 6.095625951 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.254142576 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.150641728 seconds)
  done (took 94.32943899 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.209591073 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.160224111 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.175914362 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.129271205 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.201261594 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.583318617 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.178434395 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.155956548 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.508702705 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.841074979 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.19997848 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.306547116 seconds)
  done (took 81.859315924 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.204189347 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.210102288 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.222428054 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.217782441 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.216864238 seconds)
  done (took 7.241545291 seconds)
done (took 2458.0881188 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.478226216 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.698818774 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.732811869 seconds)
  done (took 4.605068026 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.249472709 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.307320725 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.369071335 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.320322497 seconds)
  done (took 6.439387034 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.464361355 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.65218977 seconds)
  done (took 4.285814566 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.527678874 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.140967644 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.711319516 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.171037566 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.175968382 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.172364326 seconds)
  done (took 19.704187198 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.199425483 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.208547867 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.203994518 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.204976508 seconds)
  done (took 5.975778375 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.157625008 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.221886347 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.158219631 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.206051722 seconds)
  done (took 18.905894496 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.468964997 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.395784145 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.860996414 seconds)
  done (took 5.880202747 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.99908239 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.317437045 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.980185995 seconds)
  done (took 6.470445955 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.084039948 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.224999932 seconds)
  done (took 5.454959941 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.349823572 seconds)
  done (took 2.524181814 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.632031321 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.633468021 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.83137522 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 1.898376704 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.076055688 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.465494756 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.557607816 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.452387785 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.681697944 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.696337381 seconds)
  done (took 18.068784675 seconds)
done (took 110.344337257 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.059311097 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.569972378 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.326516758 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.863280708 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.263996618 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.327299684 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.191449257 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.67256034 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.767498808 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.76802529 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.364620605 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.224690839 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.22385468 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.571524778 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.226570395 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.529939041 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.572633755 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.071934981 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.250297945 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 3.521499316 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.175527286 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.764674616 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.092148984 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.768674627 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.58418022 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.291085104 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.16507727 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.509965501 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.482136619 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.17952527 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.330755842 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 3.775530991 seconds)
  done (took 154.656465734 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.168704724 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.177859893 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.179357978 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.164185377 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.259325536 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.176240628 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.163559206 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.168947412 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.064888936 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.068178521 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.155252092 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.272529302 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.182920666 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.176215443 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.128698291 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.177771453 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.166160722 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.174641827 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.170599899 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.159239242 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.182824191 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.141543876 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.141506372 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.147665934 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.148948369 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.185906413 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.175861379 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.18061256 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.155673597 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.181113915 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.181957129 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.177187977 seconds)
  done (took 190.530985643 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.129820134 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.181319599 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.15336873 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.177198729 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.157517394 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.182334605 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.153128803 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.176926255 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.183140696 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.180374405 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.18197554 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.180530836 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.156603275 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.177492255 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.181569529 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.11106867 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.180355083 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.184701243 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.104286079 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.183588373 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.127725195 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.165483944 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.182054634 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.112807096 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.182007454 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.167090984 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.177562146 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.182074945 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.179956665 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.170696696 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.185162838 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.174027541 seconds)
  done (took 198.469035046 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.483581448 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.222846667 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.157453393 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 1.727111549 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.090246782 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.206733872 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 1.747560704 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.479384773 seconds)
  done (took 14.296710514 seconds)
done (took 559.135932768 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.832581811 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.098743687 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.367054998 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.420556501 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.782298317 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.438312082 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.396549597 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.626754739 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.921032173 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.590640324 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.648187981 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.390956706 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.0585504 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.405157904 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.377166287 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.642747033 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.556118735 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.904911831 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.378006466 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.048851357 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.39950513 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 2.030018196 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.641616322 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.968230125 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.667168399 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.048694634 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.32542798 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.618621887 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.390777439 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.393568728 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.273552383 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.627137836 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.407919683 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.406085836 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.653869625 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.59194321 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.534510686 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.618203954 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.361916564 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.842049425 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.007281647 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.753245713 seconds)
  done (took 77.593093097 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.206995304 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.2304909 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.3780911 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.279909597 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.848605034 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.252602698 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.435081883 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.423641661 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.294389894 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.428499442 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.468962054 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.880362726 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.457829658 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.866933507 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.44053832 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.46746829 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.283914881 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.858156266 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.441204688 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.414104649 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.247828898 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.382264997 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.254399417 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.397766239 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.239524066 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.271442521 seconds)
  done (took 38.32264996 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.267185649 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.404680113 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.473586641 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.485419105 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.427443349 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.249612 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.553293149 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.36349443 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.992320259 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.381278105 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.296232609 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.312246021 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.395863899 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.494062198 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.539146259 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.28738374 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.377492508 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.388274727 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.41298596 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.39801019 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.447400717 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.310223439 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.552186244 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.322677931 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.843249854 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 4.794037493 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.34677255 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.780941378 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.251923055 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.465655699 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.35278144 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.536274514 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.600812541 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.481403292 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.341791773 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.235233599 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.228647376 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.304044564 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.181532916 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.381072772 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.555272439 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 4.611659511 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.49961533 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.812345539 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 4.513565578 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.372688414 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.687059267 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.329300454 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.35041442 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 3.018452386 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.532517564 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 3.937515397 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.309916458 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.408945692 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.348535525 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.543182438 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.386913781 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.563566797 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.3439528 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.92498872 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.305721488 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.606789787 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.419464356 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 4.521760215 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.458053652 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.413887285 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.373132202 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 4.827062631 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.515917967 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.249665723 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.896704747 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.25445916 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.21729992 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.322813817 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.408829124 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.711634488 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 4.189959491 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.410662994 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.616411824 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.543258297 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.487640996 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.782500484 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.319893272 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.715273808 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.245405966 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.228492637 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.329235679 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.549041184 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.498496951 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.731151666 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.818313783 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.577776356 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.788010194 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.426100288 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 4.88376677 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.589901299 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.219128299 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.243178949 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.464977188 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.824523602 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.29702566 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.40898603 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.88511709 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 4.600777259 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.662691343 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.373295631 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.593645614 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 4.512667427 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.578787255 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.210758966 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.398754476 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.287644224 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.776383557 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.609330138 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.203733298 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.770101092 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.312469609 seconds)
  done (took 246.961208879 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.167537449 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.158832316 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.183081246 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.177452875 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.153872842 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.729973106 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.204950903 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.181566933 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.717790139 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.216506553 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.148807701 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.181386688 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.136714754 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.170379769 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.299765062 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.349259066 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 2.906019991 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.177285821 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.178740136 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.174112604 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 2.879748779 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.177979638 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.159080212 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.135631924 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.179824072 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.149737449 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.137405144 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.218605707 seconds)
  done (took 152.794719302 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.241798959 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.635659502 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.272181237 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.338636306 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.273351338 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.262252177 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.755555769 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.380726548 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.282500211 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.256146945 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.25045589 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.478086508 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.560590407 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.799942859 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.335658154 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.480061885 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.892185786 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.392070961 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.249741836 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.24324302 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.4158586 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.623866506 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.510608488 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.511282812 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.397854035 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.529303126 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.318219903 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.226519332 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.318028236 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.702387785 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.250098136 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.628991002 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.401859514 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.240697799 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.752534401 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.57243439 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.802143687 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.891728132 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.432535273 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.208849521 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.18646162 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.442146908 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.501985334 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.298189124 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.242450061 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.922851328 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.245948444 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.511808289 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.245476656 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.207618753 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.340596241 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.346526713 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.497205388 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.285641902 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.455918622 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.42994691 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.844020601 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.219316835 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.300352935 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.54990812 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.210474272 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.745711172 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.746039131 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.306953496 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.240706901 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.396478252 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.340281784 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.762709802 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.861974955 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.283588291 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.590091096 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.454929175 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.211212437 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.510518698 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.409995775 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.725572568 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.822771762 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.38354491 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.345616894 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.315244941 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.511750392 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.226652102 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.82099168 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.356109028 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.21636284 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.749130729 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.619782273 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.202819801 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.244107328 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.359244064 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.408995835 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.45887362 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.534169656 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.321440868 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.17585072 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.505798703 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.529227255 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.262629738 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.376661 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.225250458 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.68191035 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.396247329 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.191923182 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.557878916 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.665671702 seconds)
  done (took 164.637472876 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.001888641 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.209609082 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.396697588 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.718048638 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.582975414 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 2.675909436 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.453390657 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.264598821 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.498962765 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.422012144 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.429121774 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.341783146 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.192060727 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.977957358 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.280570822 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.415924256 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.305842742 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.906393954 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.561465143 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.248287103 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.57604972 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.019219521 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.552406199 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.650848141 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.593679111 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.730295853 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.891845255 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.341197221 seconds)
  done (took 50.421684145 seconds)
done (took 731.865161234 seconds)
SAVING RESULT...
DONE!
