cset: moving following pidspec: 231685
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.772346091 seconds)
loading group "shootout"... done (took 0.807741824 seconds)
loading group "string"... done (took 0.22898646 seconds)
loading group "linalg"... done (took 3.208507085 seconds)
loading group "parallel"... done (took 0.021798573 seconds)
loading group "find"... done (took 1.197671662 seconds)
loading group "tuple"... done (took 0.709962805 seconds)
loading group "union"... done (took 3.067086037 seconds)
loading group "dates"... done (took 0.155121134 seconds)
loading group "micro"... done (took 0.057061207 seconds)
loading group "simd"... done (took 0.366026184 seconds)
loading group "io"... done (took 1.41232699 seconds)
loading group "random"... done (took 2.369459382 seconds)
loading group "problem"... done (took 1.184544725 seconds)
loading group "array"... done (took 4.62806433 seconds)
loading group "misc"... done (took 0.976291557 seconds)
loading group "scalar"... done (took 3.485970081 seconds)
loading group "sort"... done (took 0.30963133 seconds)
loading group "sparse"... done (took 3.555736298 seconds)
loading group "collection"... done (took 6.065676522 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.541566286 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.07387734 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.249641216 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.078038377 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.280361986 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.08210628 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.087660778 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.070408645 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.032462903 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.161390659 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.211548571 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.386967646 seconds)
done (took 5.013666417 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.26422141 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.03317454 seconds)
    (2/2) benchmarking "String"...
    done (took 0.124292113 seconds)
  done (took 0.772651174 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.138552408 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.015671585 seconds)
    (3/3) benchmarking "different"...
    done (took 0.022593704 seconds)
  done (took 0.789228505 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020429778 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.096434211 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.021531593 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.022090671 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.021973852 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.021436773 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.021198382 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.021196347 seconds)
  done (took 0.835682889 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.029281682 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.022955023 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.020941795 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.022342264 seconds)
  done (took 0.704056549 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.022578552 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.08247741 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.020072239 seconds)
    (4/4) benchmarking "different"...
    done (took 0.019919777 seconds)
  done (took 0.756074306 seconds)
done (took 4.769670265 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.196125594 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.785036648 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.972781777 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.178774667 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.356931222 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.304978526 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.076883543 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.243655809 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.149740485 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.031618832 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.179740495 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.039918903 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.50705275 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.454665586 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.028756682 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.146373554 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.577431518 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.039330024 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.07090707 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.214078772 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.039936586 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.03930838 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.043983293 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.026877764 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.12148148 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.135210652 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.585479246 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.065762612 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.026172947 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.050359663 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.115411411 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.030743148 seconds)
  done (took 9.483738632 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.149524137 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.147444204 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.024567191 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.059936909 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.050746471 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.024867276 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.03011439 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.02311179 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.042843744 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.088555167 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.04570864 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.159818016 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.021278339 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.024246782 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.139664657 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.115925443 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.038017899 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.037311968 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.022625026 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.036830425 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.049339183 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.03520375 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.033149651 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.032768416 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.068617846 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.089987135 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.04490464 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.064358754 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.022788594 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.034751371 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.051689845 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.063748549 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.022988961 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.021280549 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.065718616 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.040661848 seconds)
  done (took 2.667367312 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.682744794 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.050690562 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.138458153 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.130806262 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.066079209 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.051722365 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.179419088 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.077267774 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.05532009 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.023902914 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.206549723 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.625077049 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.169740151 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.065954883 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.02824531 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.180178799 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.874739233 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.943268035 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.023696839 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.023926105 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.134738698 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.026294214 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.175227743 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.023059905 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.135572025 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.8121617 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.025955972 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024326696 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.052229309 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.142156879 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.021032439 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.096341218 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.049829516 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.025248596 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.532330075 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.021882106 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.019832296 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.04208878 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.050433782 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022090608 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.023099187 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.033821974 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.021285672 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074080616 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.035860621 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.515392223 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.025336767 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.697969946 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.82779622 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.030927221 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.027896352 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.057530114 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.019945509 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.023582382 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.563695447 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.111475228 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.023875527 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.247950833 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.025524094 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.024509282 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.024601243 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.056671209 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.023535629 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.024656647 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.026726851 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.041916645 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.96980068 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.0325293 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.042998671 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.02179318 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.022843642 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.021305784 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.38871143 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.029444168 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.025228148 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.020778 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.027106913 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.023029376 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.02243826 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.067699341 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.051160383 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.048371273 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.026787648 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.023689898 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.022835053 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.49432574 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.072116177 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.025089874 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.0242727 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.471282453 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.021342706 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.023469248 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.024686346 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.044110887 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.023780529 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.019908792 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.058128499 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.024789587 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.126212799 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.53903103 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.024544974 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.020136836 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.522502047 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.024324975 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.054506966 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.075884693 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022351224 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.059906752 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.022918158 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.020783108 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.026314172 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.020073445 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.024269057 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.021273889 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.022075242 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.021142657 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.022819439 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.023870448 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022745465 seconds)
  done (took 19.707433074 seconds)
done (took 34.154948302 seconds)
(4/20) benchmarking "parallel"...
done (took 0.746945409 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.214519228 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.048568156 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.019578564 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.165389345 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.044023689 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.13696246 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.177390105 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.128375875 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.045868409 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.045508309 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.045869986 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.184695523 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.195539539 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.047037689 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.120734484 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.198663251 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.047539999 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.020249513 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.047045703 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.046857927 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.047107832 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.020061327 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.046288404 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.047014329 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.120995716 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.04733661 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.019884523 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.12297509 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.048425759 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.124177774 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.048068555 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.046985648 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.048024076 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.124264996 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.049711079 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.123727106 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.02024655 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.049471776 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.049372375 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.050147523 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.049262943 seconds)
  done (took 4.009974321 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.045566508 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.037994469 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.040400539 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.018024193 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.029086266 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.039019041 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.018140517 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.037698209 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.041795136 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.038061173 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.03805744 seconds)
  done (took 1.146110252 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.040314078 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.038769882 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.040104837 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.017903798 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.029496746 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.038495929 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.017847804 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.038188602 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.040814811 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.038525452 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.038516743 seconds)
  done (took 1.077879442 seconds)
done (took 6.913482741 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.153017912 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.121069188 seconds)
  done (took 0.965802457 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.553901378 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.220853761 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.13022867 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.252341918 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.123842431 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.156716157 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.265961214 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.160179044 seconds)
  done (took 6.612161658 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.074344056 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.141574007 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.02432794 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.022628434 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.022829299 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.022916342 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.024425958 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.023211526 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.022425384 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.024909701 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.024510807 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.022680841 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.023393569 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.024593425 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.024017635 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.024246316 seconds)
  done (took 1.388228821 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.02865079 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.025489415 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.026557738 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.017043062 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.027376004 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.0260912 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.027198161 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.027638853 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.026777985 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.026421038 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.024357456 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.027524899 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.026035327 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.024842751 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.027258099 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.016989482 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.027447422 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.026808118 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.028847283 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.027665233 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.02673067 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.024407221 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.028467573 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.025738369 seconds)
  done (took 1.337180249 seconds)
done (took 11.006116277 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.13986956 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.029581501 seconds)
  done (took 0.875189429 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.1264812 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.12553316 seconds)
  done (took 0.961450264 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.028623585 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.015949202 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.032076326 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.024069119 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.016084271 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.015882093 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.031175574 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.016105757 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.016012893 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.016098397 seconds)
  done (took 0.933275103 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.019348968 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.0230086 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.020991825 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.019148102 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.020775204 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.016871372 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.019152575 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.017281482 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.022741763 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.016359259 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.020034437 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.037920725 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.019515464 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.038434617 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.019445108 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.020015921 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.021451936 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.019202213 seconds)
  done (took 1.102458986 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.017617843 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.016830822 seconds)
  done (took 0.746289919 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.020616174 seconds)
    (2/7) benchmarking "second"...
    done (took 0.016958272 seconds)
    (3/7) benchmarking "month"...
    done (took 0.018575699 seconds)
    (4/7) benchmarking "year"...
    done (took 0.018387911 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.016393471 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.015877309 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.01652581 seconds)
  done (took 0.83594787 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.386535517 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.088664946 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.319391688 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.025988579 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.03906655 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.231069224 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.019628692 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.024131766 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.024043565 seconds)
  done (took 1.868148317 seconds)
done (took 8.033279971 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.040265139 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.141409329 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.147057473 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.447560448 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.033920828 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.022383634 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.052003884 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.228402711 seconds)
done (took 1.840088536 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.486440342 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.261133064 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.189460101 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.023887704 seconds)
  done (took 2.191770301 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.309215724 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.142987681 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.031033746 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.023172212 seconds)
  done (took 1.236110305 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.022020333 seconds)
    (2/2) benchmarking "read"...
    done (took 0.027361736 seconds)
  done (took 0.773739502 seconds)
done (took 5.419343597 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.030155667 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.016788428 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.023060518 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.018204517 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.017931607 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.017342315 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.017256638 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.018162173 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.016409639 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.01840403 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.018364036 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018376442 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.018017353 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018025012 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.017604682 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018391443 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.016416348 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.017973717 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.01811796 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.018048885 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.016414887 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.018405591 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.017558603 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.018052372 seconds)
  done (took 1.163079684 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.035765591 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.0207221 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.021405047 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.021145773 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.021785348 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.021320093 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.021313495 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.020446186 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.021278522 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.020148371 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.021784808 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.021873096 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.02022521 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.0219505 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020370959 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.022000168 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.021657263 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020737149 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020345907 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.022017124 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.021507819 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020692809 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.021913546 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.021413792 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.021820575 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.021835707 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.02034835 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.020681946 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.02143506 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.021859993 seconds)
  done (took 1.37902587 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.022893912 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.015196475 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.015342714 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.025341281 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.014950045 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.015162796 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.015585611 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.01474924 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.015109849 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.015883118 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.015498081 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.014815539 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.015666528 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.014831014 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.014844803 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.015375905 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.020000516 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.035860013 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.015286212 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.014990196 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.019653924 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.015230609 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.015000262 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.014977692 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.015452565 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.01505677 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.014801837 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.015282299 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.015042771 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.015572579 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.014972723 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.019585144 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.021139784 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.015461046 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.025266253 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.02008774 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.015453551 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.019471322 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.01585373 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.014761135 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.014788074 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.014816628 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.014963334 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.015060756 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.025474104 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.015234824 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.016100403 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.015520009 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.015190327 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.014845896 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.014975822 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.016485277 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.020777963 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.016335309 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.014995197 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.016288302 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.014976485 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.015732469 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.015096549 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.014951211 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.014955803 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.019167254 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.016526228 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.015808564 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.036560229 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.016580723 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.025771065 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.015182576 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.015616124 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.019294874 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.015699318 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.034721227 seconds)
  done (took 1.987177527 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.027666369 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.025511272 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.033771185 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.024734275 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018420787 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.015801225 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.018777311 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015918775 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.025292544 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.019523398 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015949689 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.019084721 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.025111512 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.019535731 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.016943467 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.025013782 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.019501915 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.018687734 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.015966417 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.019437655 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.01702575 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.019080281 seconds)
  done (took 1.193097911 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.103717725 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.02140708 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.064258967 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.02459317 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.024632905 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.025415034 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.021533697 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.021365402 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021501118 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.022003757 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.021916648 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021460845 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.023547367 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.022043128 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.022036841 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.021724182 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.021475011 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.021687099 seconds)
  done (took 1.252988214 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.033520026 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.021059228 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.048232908 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.020778717 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.020801184 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.020490985 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.024052122 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.024228073 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.020589411 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.021062665 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.024688857 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020712079 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.020702579 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.021067996 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020674562 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.021082984 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.02070196 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020995457 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.024624158 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.024498283 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.024497115 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.024499273 seconds)
  done (took 1.259425347 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.034850179 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.020144939 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.036346618 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.021606924 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.01539829 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.015414481 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.02170192 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.020324617 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.021674948 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.019987094 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.02044195 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.015474041 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.022478123 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.020550594 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.022688862 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.020519586 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.0201394 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.020468341 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020135367 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.015550575 seconds)
  done (took 1.153028198 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.12990479 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.017719585 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.017340108 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.021610346 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.017225887 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.017230195 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.021714088 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.017349612 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.017328935 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.041637563 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.017408457 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.017400309 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.021929099 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.020174294 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.017340963 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.021879847 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.021780586 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.021804747 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.017422043 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.017359 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.041596894 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.017524267 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.022339311 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.01766131 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.017654242 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.017585216 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.017588334 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.020547818 seconds)
  done (took 1.420589329 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.037470154 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.017815538 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.015639297 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.019419565 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.019373293 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.032234895 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.02042146 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.019624153 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.017937934 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.015706216 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.017938338 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.017848782 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.017798802 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.028083449 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.017700646 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.018888451 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.029550905 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.020451613 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.03264441 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.032747294 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.018127249 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.028146736 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.018042197 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.015809063 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.032134509 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.017951182 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.019823437 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.020789237 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.018111827 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.015777969 seconds)
  done (took 1.38662722 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.029397959 seconds)
    (2/2) benchmarking "in"...
    done (took 0.0262972 seconds)
  done (took 0.786007825 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.018461117 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.033213842 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.014819866 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.027986121 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.023619547 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.019106648 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.023660125 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.023678926 seconds)
  done (took 0.910656052 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.12505362 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.14908427 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.01704182 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.017090154 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.122886036 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.084216051 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.133887542 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.028872017 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.030698864 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.019901128 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.017031124 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.134361385 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.016642663 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.030290304 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.018077422 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.026482333 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.024377989 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.034873643 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.029875404 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.015613374 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.029366123 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.01733943 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.0164649 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.017429675 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.017738099 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.02362542 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.032612297 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.029248884 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.025001082 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.014944051 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.035557668 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.015815309 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.01643358 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.025146332 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.125388416 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.016286526 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.054127942 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.016096054 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.020520958 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.015685805 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.027980035 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.037037146 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.030671453 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.035686178 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.018287695 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.018205336 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.016071526 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.017822607 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.020358204 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.025328708 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.016082576 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.02343233 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.015650066 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.01739056 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.026588859 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.016062648 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.020786072 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.025837389 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.030733701 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.026849316 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.028433871 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.031531113 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.024850639 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.024766567 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.01666364 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.036655335 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.017563533 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.029407574 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.030944971 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.017180337 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.029143076 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.015827839 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.015040513 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.015998212 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.050314467 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.017403277 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.016846715 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.016044212 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.016136004 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.017301557 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.025595105 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020924261 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023412019 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.019171113 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.032077299 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.025192131 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.015821661 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.023545552 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.034468099 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.020128655 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.016074919 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.033321876 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.020088969 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.015809766 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.034138499 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.026666849 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.017623126 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.01667558 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.020005294 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.02960744 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.01741629 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.0150549 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.0245326 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.017541165 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.127158597 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.021564233 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024708764 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.016253486 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.0268367 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.023132475 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.018017964 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.01548595 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.021318396 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.017347407 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.015481764 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.026069626 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.016515646 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.031924851 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.023485195 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.031239675 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.031738742 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.027267542 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.032822712 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.016308055 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.015493483 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.035348183 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.025912049 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.017743094 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.035048956 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.016296601 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.027006998 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.016413071 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.017948786 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.025812214 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.015795571 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.018165716 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.016576413 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.024052137 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.018960868 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.019119309 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.023243651 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.025402564 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.029572136 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.017824664 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.025502522 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.016995999 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.033029029 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.026492965 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.021636067 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020243648 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.017490486 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.029192053 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.023698521 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.025956954 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.016484643 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.017487641 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.016642885 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.027956219 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.02641116 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.018519635 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.026698246 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.021636326 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.017456712 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.016649185 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.017685903 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.020539886 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020381446 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.017235983 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024517892 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.025597799 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.03129491 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.024786046 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.02586091 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.015987224 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.016462639 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.018531635 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.016424698 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.021470251 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.026074407 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.032687699 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.028876405 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.038628819 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.016844544 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.026521664 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.018586503 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.034365209 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.030296437 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.017796213 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021949338 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.015801407 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.018662065 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.02639446 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028526583 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.031457654 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.032170863 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.021855991 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.02164923 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.016591103 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.032323131 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.017184883 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.025286796 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.026150861 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.023505771 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.016615073 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.018611336 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.026021641 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.021779714 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.017806139 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.032936893 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.025287325 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.016677336 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.031476987 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.017060728 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.027806016 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.016659648 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.02065471 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.022379887 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.018925453 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.026507807 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.032442413 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.015861607 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.017137871 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.032912095 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.018786935 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.018670794 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.024900336 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.032401098 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.021769652 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.173537223 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.028144698 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.027912817 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.021297087 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.026993765 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.01693963 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.025325455 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.018619993 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.02758043 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.015754071 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.033975498 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.014949473 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.03106568 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.016316895 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.026617816 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.015992306 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.025067482 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.016316833 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.032768603 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.01697335 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.016312411 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.027136893 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.014822692 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.024687719 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.015420758 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.021184482 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.022662456 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.024771055 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.017065709 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.02489636 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.016970632 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.02458384 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.020671566 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.024204812 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.024644128 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.020476578 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.015768752 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.024993219 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.026652991 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.023840007 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.01693621 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.016886367 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.015818739 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.024755123 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.016930728 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.016338205 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.023599756 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.020620227 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.021738819 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.016805416 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.016912701 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.016692987 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.023783211 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.024765341 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.033397301 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.024035439 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.022845253 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.024588423 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.015360679 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.030933913 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.015341102 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.022847441 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.014753884 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.021829781 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.024701533 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.015665942 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.034457184 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.016839479 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.02325008 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.02732852 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.024022421 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.019724552 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.033269465 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.018361087 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.023720705 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.02330221 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.020536408 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.02252883 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.016962873 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.023813216 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.024809053 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.025875558 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.016072433 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.022926244 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024353986 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.016916039 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.023544424 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.016996003 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.024066891 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.017321156 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.015149018 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.020903272 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.027166203 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.021068226 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.021337775 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.01605049 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.014977712 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.01599417 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.02295583 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.02090412 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.024452559 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.031398477 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.015152554 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.017142519 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.016748487 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.020950526 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.035321901 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.025902468 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.024167814 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.021481318 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.015628778 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.017466367 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.017638503 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.016120953 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.019088908 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.015403538 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.015862175 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.02660462 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.017601492 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.02082487 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016292539 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.016988767 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.025963793 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.020322243 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.016425781 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.023132308 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.015789097 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.021582588 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.015398178 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.017483946 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.020998352 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.015717889 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.020090857 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.026332403 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.032693611 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.023117028 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.024888688 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.016914186 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.023925759 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.031629207 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.024411381 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016937739 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.02530449 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.015533952 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.035005306 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.025348366 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.024585446 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.026367343 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.017391447 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.033770138 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.02139941 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.026619032 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.032171082 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.017417075 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.025376224 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.016439136 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.032628238 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.021398291 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.016354777 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.025251002 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.024276059 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.022876987 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.02846676 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.017386372 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.025223345 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.021914734 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.020546507 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.018244126 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.018203798 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.025333216 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.033013358 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.017387427 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.022585767 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.024567973 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.024878471 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.021495773 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.029128023 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.024704238 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.017440014 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.018246708 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.020500767 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.017188238 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.02880506 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.01674554 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.021420988 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.021625662 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.016508229 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.023809349 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.033721506 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.026098429 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.026299896 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.016613414 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.015940075 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.035268349 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.020822325 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.020289639 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.02488829 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.02664171 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.029454207 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.026180753 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.034101267 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.017347009 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.023101012 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.030446289 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.018750353 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.017279282 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.021200115 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.018781059 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.026449692 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.026992264 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.024163347 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.018629624 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.023989381 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.03052777 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.018227716 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.021686694 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.023451167 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.017561256 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.027227637 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.024624316 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.025259945 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.018305483 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.016468495 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.020304357 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.025527761 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.024113556 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.025700048 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.017601761 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.025948387 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.031144483 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.024071531 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.020276784 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.016493832 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020214601 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.025844902 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.023734925 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.016615706 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.021693701 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.020570859 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.026289411 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.026258699 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.021633292 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.016554998 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.034406046 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.02560862 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.025922366 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.018537079 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.018715405 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.017082284 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.016573556 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.028238802 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.016662305 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.018455356 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.0218058 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.018657482 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.035364001 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.024915492 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.033032037 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.017689815 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.021582943 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.016593884 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.027700836 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.022307244 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.017077878 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.027502179 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.016128257 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.032680418 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.02963947 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.024906965 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.01666934 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.022315727 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.175210622 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.0312984 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.025392306 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.024644801 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.018570271 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.025205825 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.017080892 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.026573856 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.015621624 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.014885637 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.025509026 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.024202725 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.027600606 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.015426474 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.025453764 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.017034427 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.023742219 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.023991215 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.016823224 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.016856814 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.016764394 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.024790826 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.020547338 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.024670209 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.020976354 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.033580261 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.017426131 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.027565966 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.025008772 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.026601057 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.0299968 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.027510388 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.023989281 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.015825748 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.02298159 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.023873042 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.016362201 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.020978277 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.018233391 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.037063533 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.017961171 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.017284751 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.029507592 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.022220844 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.015458371 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.021983703 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.0205868 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.025294211 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.016260911 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.025655818 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.02006509 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.016077029 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.02050546 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.020644044 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.014723229 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.01525664 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.015545989 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.024863352 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.020472794 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.015688079 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.034081993 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.016612996 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.023953107 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.02600921 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.022446447 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.016685353 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.014629083 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.016093373 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.028654925 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.030758219 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.019635824 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.02396427 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.016917324 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.024527636 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.014731673 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.024008681 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.023257243 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.023840643 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.015325555 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.015551719 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.030271896 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.030835531 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.020573511 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.031957637 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.024338382 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.01685092 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.03699444 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.024470875 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.016615824 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.026511399 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.017764706 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.015401753 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.015163832 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.017338154 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.027306335 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.015745114 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.017849202 seconds)
  done (took 15.289206647 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.060115927 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.016706084 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.015255139 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.015229376 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.022162099 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.016396761 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.015272253 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.016425947 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.016390551 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.017475952 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.01538888 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.015354354 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.020839535 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.030459727 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.023191212 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.019022838 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.015425978 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.016660373 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.015379428 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.016635746 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.021399055 seconds)
  done (took 1.212296605 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.01979006 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.019645116 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.018997864 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.019254955 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018489834 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.015507745 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.018809518 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.01544911 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.019172939 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.015851697 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.019442699 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015620852 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.015952895 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.015952492 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.015899971 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.017041952 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.019514647 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.018706309 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.015616759 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.019059949 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.017004602 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.019049834 seconds)
  done (took 1.157312202 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.018265818 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.01614721 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.024094055 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.015035055 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.014925948 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.017717618 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.014911206 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.01982139 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.019782685 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.019812992 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.024001371 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.015698761 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.014911553 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.021180403 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.014860114 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.01556689 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.06000264 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.015935782 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.015934696 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.015192561 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.017419922 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.024237731 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.015255639 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.015356504 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.019864693 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.017881793 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.015183753 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.017476074 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.015705684 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.019896176 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.015902824 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.015005882 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.024058858 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.023289995 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.019956247 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.019945582 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.016366191 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.015800745 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.015234745 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.015143649 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.023503445 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.016436686 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.015430255 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.0163019 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.024122504 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.015376339 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.01510396 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.024197666 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.015185997 seconds)
  done (took 1.694914656 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.02822482 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.06698782 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.021421214 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.050358673 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.027022123 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.020473196 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.021135685 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.05517987 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.016940008 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.017125213 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.028692174 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.028272571 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.017886056 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.019086086 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.022449828 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.017777564 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.018428771 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.017140384 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.019968129 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.017362067 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.020120238 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.022562465 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.027513712 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.027905584 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.01891764 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.017359458 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.017559734 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.019184583 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.027715587 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.020797737 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.019359854 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.019857181 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.029076958 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.024676518 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.018728334 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.01827376 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.028918232 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.01841206 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.01808408 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.016600453 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.017840442 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.019194497 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.022637413 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.028805692 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.018212252 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.023158868 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.018403324 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.016331551 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.028429703 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.018075372 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.021732797 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.029213157 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.019234895 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.018434735 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.019511414 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.028352394 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.018315608 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.017054798 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.018456664 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.028029304 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.016629238 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.019008755 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.028836132 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.017773104 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.02116586 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.029004104 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.02331971 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.019164522 seconds)
  done (took 2.458884476 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.025009817 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.051176994 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.028932113 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.029517244 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.025882567 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.026277093 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.026377121 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.025620509 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.025496921 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.027901454 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.025100552 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.165630049 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.022241371 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.026745923 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.025159042 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.025228015 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.025080364 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.025095811 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.025342721 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.025299756 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.025393622 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.029911438 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.025418261 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.029962498 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.029655328 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.022103095 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.025153063 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.025274479 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.030064089 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.025245273 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.029725838 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.025303449 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.025350204 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.030096959 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.029713013 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.02528368 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.016106707 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.025188652 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.025354535 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.025324041 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.022097219 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.030107019 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.025403043 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.022169383 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.025645075 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.025408345 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.030520302 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.030089473 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.027426302 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.028489136 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.025624995 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.03042524 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.025433396 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.025891257 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.030743208 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.033886209 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.030602583 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.030802844 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.02582458 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.030770785 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.030817952 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.034225275 seconds)
  done (took 2.614968279 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.030244201 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.021094433 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.034227607 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.015164635 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.015029005 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.024050358 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.014984479 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.014991866 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.021020758 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.020953143 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.02235629 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.024291467 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.026055374 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.022420482 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.024304012 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.026111215 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.024321627 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.024240567 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.021002827 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.024314613 seconds)
  done (took 1.2445108 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.018965622 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.020537965 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.015922747 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.031332503 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.015894785 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.023101834 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.015849521 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015777259 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.015789131 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015769157 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.020295699 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.020349376 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.015940684 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.023778698 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.019471306 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.02332128 seconds)
  done (took 1.085774983 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.020308798 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.024116484 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.125494731 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.016658212 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.018269422 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.015764901 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.016860389 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.016840749 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.018862861 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.030122971 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.016756411 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.018845582 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.016778618 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.015415773 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.015988338 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.018685193 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.017813047 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.016765738 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.016678274 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.126666487 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.025280358 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.017382045 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.019213801 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.017468144 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.018687682 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.02503964 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.018184424 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.01860163 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.0168392 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.018981529 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.018585082 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.027808749 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.018669446 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.017397241 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.015598091 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.016419817 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.016876247 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.019070746 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.01919606 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.016978799 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.015790558 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.018653899 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.016950234 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.017272414 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.018128963 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.019121609 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.018401534 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.0272484 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.016801076 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.018828695 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.016925122 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.018087823 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.017248916 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.028086526 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.018931341 seconds)
  done (took 2.035097731 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.034506832 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.020797838 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.015060069 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.014927833 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.020332199 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.020934937 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.020428441 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.020518689 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.020981393 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.014970915 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.020951428 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.019990538 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.021541842 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.021131674 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.021327725 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.02081861 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.015046521 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.020867251 seconds)
  done (took 1.155472304 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.024140565 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.020664103 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.020958342 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.016916906 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.01684001 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.02068456 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.015327551 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.016425496 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.016435864 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.016992083 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.016982388 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.016588631 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016652203 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.016625682 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.02052608 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.016976144 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.016744127 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.015621991 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.017007181 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.015457693 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.021052653 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.015616461 seconds)
  done (took 1.16653902 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.188612839 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.147800079 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.039727377 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.035024361 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.026801104 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.052040226 seconds)
  done (took 1.272626334 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.05170074 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.05368167 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.020506088 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.020408003 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024481082 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022843967 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022762986 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022898927 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025890074 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02860382 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023258325 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026464833 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026187714 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027976985 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024820286 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02490901 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023385559 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023282783 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02068072 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.030579202 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023402557 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02681383 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023681545 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023426184 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023605104 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.028376601 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026758784 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.029307227 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023479824 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027049073 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026705999 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.025039124 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027704738 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.029870379 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.021363183 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026989547 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023811856 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.031267733 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02520614 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02844162 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.020833593 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025304344 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026829048 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.026539178 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027148682 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.024017275 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026842728 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023823252 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023925394 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.035253693 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02572838 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02859142 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025559984 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.027323383 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027075039 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.035229673 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029837002 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028870744 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025723291 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029917744 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02918259 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025828921 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029062771 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.03019631 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025914104 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029357549 seconds)
  done (took 2.566562915 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.059913736 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.020942422 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02307177 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028158859 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.027237756 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022878737 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023165296 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023165257 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023232151 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.020895024 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.059854638 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023510773 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027876912 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027791149 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023456546 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023210396 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023797677 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.029373615 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022203642 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.034709368 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024277062 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02883748 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.028579263 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.028371123 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.029375037 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025405501 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023727648 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023702376 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023643579 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023612595 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026510481 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023725828 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028290312 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.021189978 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.028335313 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023757653 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023548096 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026497555 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023514061 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025319403 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.028413805 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.031290894 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023667665 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.140804435 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.030531475 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023984877 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023874075 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.021471146 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023968142 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.021368345 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.029716248 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029668408 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029666265 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028701538 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024051154 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02398939 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023956882 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023875648 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023996848 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.025605521 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.028718438 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023845778 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.035492451 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024132187 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024094133 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029154099 seconds)
  done (took 2.669718856 seconds)
done (took 52.237382497 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.212945113 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.168068194 seconds)
  done (took 1.155153025 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.137029042 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.134702771 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.165261739 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.024758831 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.08208622 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.175700308 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.125921103 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.026315239 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.02397762 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.025474318 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.023665117 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.025088873 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.025258653 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.023480399 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.08669681 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.026070214 seconds)
  done (took 1.917583899 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.073451742 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.240039291 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.058127409 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.022686766 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.107836314 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.030331032 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.024610926 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.028703974 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.028926799 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.022872982 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.071315767 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.037393839 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.028378904 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.029039685 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.024650712 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.027693174 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.02839729 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.028846539 seconds)
  done (took 1.697448275 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.077123974 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.033388248 seconds)
  done (took 0.895011772 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.12587423 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.063784647 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.105614485 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.310252011 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.095507081 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.098248761 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.102024871 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.100638771 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.070028789 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.095292821 seconds)
  done (took 1.946365341 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.061269965 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.056031656 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.28375186 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.054066823 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.034603253 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.029683508 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.02997942 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.031249562 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.030241889 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.029360744 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.077578952 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.028753466 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.024911747 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.072280319 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.050467405 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.058324941 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.024801093 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.030855797 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.032842781 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.023641044 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.028348103 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.031321537 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.134544881 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.03095285 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.052525364 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.029737268 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.029655644 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.029351442 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.029268287 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.030879521 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.031322024 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.054346975 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.030546272 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.037139714 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.029047708 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.050482578 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.024487592 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.051420684 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.027235443 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.024387288 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.027812392 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.031393957 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.024974067 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.03091486 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.030594413 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.030521548 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.031680765 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.023842589 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.030483241 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.027603734 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.024638225 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.029063452 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.028818387 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.02987479 seconds)
  done (took 3.049367978 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.077443036 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.06649305 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.024260478 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.073795351 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.065175268 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.024217129 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.079611231 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.060380614 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.078590573 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023962874 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.02353009 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.023430951 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.031269471 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.035186846 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.07655651 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.069266695 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.025530676 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.024057981 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.068802522 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.069163077 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.02315692 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.081115361 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.070721065 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.067815377 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.022869241 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.024337806 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.022926127 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.023578976 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.031839072 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.031708332 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.02348048 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.034348434 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.0351486 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.030907838 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022863576 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.023080211 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022966635 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.031824143 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.033391428 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.033182497 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.030167895 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022752824 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.023051882 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.023545866 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.024019562 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.022532543 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.033118435 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.031273935 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.033131175 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.02340064 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.02356163 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.022886131 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.023789958 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.030699737 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.031012082 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.032831279 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.035047186 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.023950227 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023801886 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.024905396 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.035157388 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.032049551 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.031707354 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.024406483 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.033021812 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.023428396 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.034035531 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.037322648 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.023341941 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.023846723 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.023411779 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.02343537 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.023788256 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.03015855 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.030261898 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.02390379 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.023709825 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023158874 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.031705739 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.030612749 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.023246889 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.032584214 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.02316623 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.024573709 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.024248455 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.024502234 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.033724571 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.032167633 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.023978803 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.023588875 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.023552621 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023425675 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.022810031 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.032942967 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.032750749 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.032728463 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.035000757 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.024553288 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.035788278 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.033178357 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.024593353 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.032148772 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.024025713 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024411187 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.02429613 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.031986525 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.031721473 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.033425393 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023986964 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.023711038 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.032875629 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.035067644 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.023986794 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.031566301 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.033578068 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.032130851 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.023351277 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.035034107 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.024012813 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.034988719 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.02428 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.034904534 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.02445329 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.032613659 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.024350704 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.023514268 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.024186515 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.036281006 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.025018948 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024152048 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024514441 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.02406176 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.032790653 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.037700325 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.026159125 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.03428961 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.033634408 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.025326446 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.035534672 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024381023 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.035386436 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024415523 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.024592969 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023434678 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.037574234 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.024119068 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.02452421 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.024076786 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.034513661 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.024190886 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.03474774 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.032140149 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023756641 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.036306785 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.034577383 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.032348843 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.03514042 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.025015922 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.024416459 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.02400992 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.024201117 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.035444213 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.037054911 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.025105008 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.024322153 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.031929316 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.035728483 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.023813478 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.032118802 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.032299031 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.032803307 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.024505984 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.167841916 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.033290487 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.034226177 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.029648502 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.032039697 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.030561527 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.02319644 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.029279228 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.03204558 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023236457 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.036223773 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023150611 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.032763019 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.032290293 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.02864402 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.032000023 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.033451043 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.031174182 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.031610672 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.033563912 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022736578 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.022977432 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.029505098 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.02293838 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.023069158 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.028966127 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.023475819 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.023567341 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.035592081 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.023515141 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.032265259 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.022642563 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.029992353 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.022603957 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.024654501 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.035946034 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.023797596 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023806553 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.03027118 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.023210798 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.029233052 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.031883117 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.029247551 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.022925284 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.023381558 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.032659278 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.031891116 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.02291408 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.022803054 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023277547 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.031707385 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.030955465 seconds)
  done (took 7.887633725 seconds)
done (took 19.342910916 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.142756905 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.073956992 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.144758596 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.084036255 seconds)
  done (took 1.22985159 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.056620556 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.019494052 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.140451867 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.152100199 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.019799924 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.13465876 seconds)
  done (took 1.322521192 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.210256485 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.136709927 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.141980979 seconds)
  done (took 1.297814442 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.137833827 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.281992026 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.556470044 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.132579791 seconds)
  done (took 1.918009121 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.173016622 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.165236037 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.03135814 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.181363451 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.038462547 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.016160255 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.102586293 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.022654991 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.052760051 seconds)
  done (took 1.64614253 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.099399806 seconds)
done (took 8.315811702 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.183580902 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.139330467 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.033462336 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.027437088 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.133003528 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.13639938 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.142947035 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.029910495 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.137964172 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.290431709 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.162352251 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.048020584 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.155710819 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.043429582 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.261362396 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.031339561 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.029112577 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.024703046 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.139252948 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.132358981 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.230721221 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.028389379 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.095573901 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.030235536 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.100051913 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.079280417 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.168643049 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.296011027 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.273718021 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.030563562 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.127482785 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.042489955 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.114635035 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.131939705 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.134147239 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.048305481 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.020167737 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.24234268 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.108811944 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.308459994 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.151418303 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.027149374 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.140058002 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.025160473 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.019456219 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.145289544 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.033570517 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.026875343 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.043080108 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.026720338 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.041694427 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.027433306 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.141300904 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.023888032 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.092624485 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.141466234 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.163118488 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.096821952 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.026169125 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.03918474 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.029573949 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.156812036 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.038296106 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.025807395 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.03229577 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.020115757 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.137907136 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.040112174 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.0208193 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.030429663 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.028443188 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.110607823 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.155265637 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.06574766 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.0322194 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.106519936 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.094881743 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.046985986 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.049262338 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.030420584 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.020689258 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.172835008 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.025822312 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.038627251 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.026853063 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.052537282 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.020045798 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.035626833 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.155636115 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.148542168 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.087420163 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.021042318 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.235108915 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.022485937 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.200260237 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.021102205 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.019991205 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.164081955 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.019762562 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.01987045 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.029254148 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.028161809 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.021414986 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.149011536 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.099064487 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.027406821 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.026502277 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.020024043 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.025566125 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.020738821 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.020133581 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.019875817 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.093994067 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.027557162 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.019147202 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.106845869 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.128767999 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.030937728 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.036110748 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.084118142 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.022768792 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.028970646 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.026608684 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.123572119 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.027697187 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.133566342 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.020934694 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.042375195 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.10670081 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.093400828 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.105549433 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.019697213 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.15710285 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.030086073 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.019190575 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.026682146 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.047496996 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.029029942 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.027279159 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.027670085 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.155301637 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.030124322 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.025217431 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.107017849 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.01902419 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.098975813 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.093349866 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.128668465 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.024854661 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.029815231 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.092109524 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.043230474 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.050394814 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.043592925 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.024465702 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.020257407 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.019699888 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.027829733 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.018978467 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.019764564 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.033422188 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.02632407 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.019425941 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.230630635 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.030017716 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.024084961 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.256468476 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.032303128 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.097000637 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.040720066 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.020274538 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.101332731 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.022026356 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.040540486 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.084224255 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.020481089 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.094440776 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.020498762 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.020130225 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.028442946 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.021765288 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.028941979 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.033659427 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.020536117 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.033392347 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.027656235 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.020249045 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.10064998 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.021891133 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.168916022 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.098680077 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.115233145 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.021154662 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.039092593 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.019907554 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.137629516 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.020642132 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.069688253 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.110221489 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.035054294 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.040632855 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.021270987 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.093425876 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.034473082 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.019863037 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.098798094 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.130136084 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.09630215 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.027668116 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.234294171 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.02919746 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.020584785 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.027948156 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.028282057 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.020694281 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.095634468 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.024766633 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.019522139 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.019756675 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.021659602 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.019029494 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.044252617 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.019627289 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.02880037 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.02039306 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.022956463 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.022150041 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.019457728 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.027828325 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.096092107 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.130154263 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.026276283 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.04015785 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.033083084 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.031216529 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.067241574 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.027485228 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.145589471 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.020618915 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.030106053 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.043231255 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.020078812 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.025164788 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.020272352 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.038045752 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.023554457 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.021935094 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.028725003 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.020570214 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.020701531 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.020330372 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.020496999 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.028575385 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.02183203 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.019832004 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.019765584 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.020228706 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.024810592 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.025555398 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.031116319 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.040645212 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.451940094 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.022512662 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.022576842 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.020518763 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.020386081 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.020682067 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.021966032 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.020273905 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.02228953 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.020527697 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.019879823 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.049472059 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.025377762 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.021197128 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.04181517 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.020392557 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.029809819 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.12881774 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.037235022 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.025385725 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.02034967 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.265693806 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.10794352 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.209878536 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.042416078 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.021140591 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.03116966 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.021176573 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.021056481 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.019549358 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.047667604 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.024714999 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.020519116 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.019333073 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.01952785 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.066769385 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.027913298 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.019532603 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.027831182 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.019619437 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.019971871 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.047455076 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.020832066 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.019676027 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.037214505 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.031635383 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.102313769 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.03136288 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.022663557 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.070398201 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.018953247 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.019602364 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.020044827 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.099136559 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.032352132 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.020708752 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.019541431 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.026922925 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.028209609 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.072176901 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.0256471 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.022520488 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.027325047 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.018849731 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.019932316 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.043961468 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.046853531 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.020646215 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.023122167 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.019428055 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.019933606 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.094627146 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.027276692 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.024108441 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.105012745 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.021482867 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.027062401 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.018789422 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.44875421 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.025719231 seconds)
  done (took 21.937610223 seconds)
done (took 22.762274078 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.163066436 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.034354896 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.032831045 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.028326601 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.031647566 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.032360982 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.033440388 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.029329787 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.032295617 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.036766506 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.141598068 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.01966972 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.027312883 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.034942385 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.028308562 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.035920263 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.032378633 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.035199949 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.020343766 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.035424704 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.030482091 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.033026308 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.02843896 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.034790967 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.020368309 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.028174682 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.156363168 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.039866555 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.024089909 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.031326759 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.028838306 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.034239414 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.028584499 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.027529648 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.029434232 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.025244772 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.030097333 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.026377863 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.156910513 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.025703374 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.02044123 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.032909757 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.027172817 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.027737592 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.028420984 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.031182276 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.025222074 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.033773435 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.019732254 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.032464526 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.156075763 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.024658626 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.023586076 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.028313472 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.02521508 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.029191253 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.023398658 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.031705928 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.025074116 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.032138656 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.028015411 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.027795925 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.019754437 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.028382646 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.027128807 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.027538938 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.018911395 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024551227 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.019806394 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.019675959 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.019201341 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.0284556 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.026720659 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.024825547 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.019284522 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.019719353 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.019438673 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.03211808 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.027042344 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.028635432 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.02019449 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.025274694 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.024887946 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.020302125 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.02460788 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.031101848 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.019347899 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.020254882 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.019278106 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.031124812 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.026334509 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.019805055 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.030997111 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.024393779 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.024109201 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.019816619 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.019297212 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.024259036 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.027710505 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.019772389 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.018864954 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024479382 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.025016332 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.028567365 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.020211771 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.024416384 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.024709857 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.020028821 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.029975679 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.02781249 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.02937825 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.03322216 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.028674105 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.031121128 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.020292297 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.01890917 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.029674233 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.020520221 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.025622687 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.028188436 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.02528566 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.027727621 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.020310104 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.019263456 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024346413 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.025832099 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.020268718 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.020398321 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.020239128 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.028737311 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.027142987 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.019055834 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.01982541 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.028675589 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.028655167 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.019430382 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.019308847 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.028572417 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.020334155 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.025789497 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.02520982 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.028641217 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.019720165 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.020167236 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.019205682 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.019579862 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.019393516 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.025201896 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.02447751 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.020383524 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.028546424 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.027277603 seconds)
done (took 5.536417485 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.035252645 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.064089817 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.177273873 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.140309525 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.03359853 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.021170079 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.025006432 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.040615637 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.023734931 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.046043071 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.045937839 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.042443504 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.163269496 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.019237887 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.020230515 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.021108003 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.018729765 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.032532231 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.145557725 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.044899484 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.063682935 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.02002162 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.037046071 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.040681836 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.03337083 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.039487355 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.021520852 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.021095047 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.02307067 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.038247573 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.046939417 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.020006056 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.021382963 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.042199702 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.03839549 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.030147258 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.021516688 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.027785444 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.02118493 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.0202309 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.022191326 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.039147488 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.027422331 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.027618192 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.021477342 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.020812941 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.020792957 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.028540296 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.034863063 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.026841476 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.033150409 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.03752011 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.022347672 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.020838094 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.01902296 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.028111341 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.020625274 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.020723483 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.021036905 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.019866451 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.021025702 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.023200295 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.026249099 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.031784248 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.025458075 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.028456227 seconds)
  done (took 3.34523113 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.039945262 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.048219423 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.034514449 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.035013259 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.019796676 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.020370277 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.020313886 seconds)
  done (took 1.128382656 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.066962636 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.137067201 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.145081202 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.145847377 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.156848451 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.143857957 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.033486036 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.050562946 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.019911091 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.157509682 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.154302866 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.149230818 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.024628195 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.033370671 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.053215357 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.152858791 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.035568034 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.028533555 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.145047356 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.150191766 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.025729528 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.051821432 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.032871672 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.021556576 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.147455469 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.140332214 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.024499329 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.021728224 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.023570652 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.020921773 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020865394 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.044069013 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.139920195 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.036402764 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021912689 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.019892923 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.137921313 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.023304274 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.141216497 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.028715324 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.140517358 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.023496256 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.02347964 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.021173802 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.022377013 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.143493176 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.022285887 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.021036473 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.020572152 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.142345411 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.020500917 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.140845075 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.024908202 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.027808275 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.028887169 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.028125286 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.028560435 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.021605514 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.144035692 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.031350756 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.022748054 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.152405473 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.151754342 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.141572548 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.152149144 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.030325912 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.142041396 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.140985929 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.021077124 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.028993084 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.02156546 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.153975308 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.025038747 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.023845652 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.026523285 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.028518193 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.159594479 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.160039063 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.160264493 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.036142694 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.023986908 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.02147492 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.158498164 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.162635391 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.027317722 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021420196 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.022403842 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.037528929 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.046712605 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.023641033 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.026326757 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.02148379 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.031803795 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.023955833 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.024102848 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.153885403 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.021993037 seconds)
  done (took 7.718119166 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.028583325 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.021659471 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.021168197 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.022796454 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.022518793 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.021796518 seconds)
  done (took 1.147564787 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.048685009 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.021964174 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.03422042 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.021738833 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.044138946 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.141573945 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.142053349 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.023062907 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.037848745 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.033620436 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.142260718 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.146482339 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.145295672 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.022883381 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.142425658 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.033657217 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.143815841 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.026786566 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.032949012 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.023031142 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.035595337 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.02267279 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022851841 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.152272202 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.024031435 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.033185436 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.031997627 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.034898324 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.033531104 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.02335338 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.023143674 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.023706733 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.028580864 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.022963382 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.145168278 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.028755188 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022137496 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.025756744 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.023971659 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.023480669 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.148202288 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.023427138 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.026798034 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.025863253 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.022978196 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.028567224 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.025841947 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.025717119 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.145484411 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.026296467 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.02590891 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.022485361 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.023609949 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.025741428 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.028576746 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022963034 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.025725826 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.146154048 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.023127248 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.02876528 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.02230782 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.023721069 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.022965182 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.023694265 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.027118722 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.025871807 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.028666296 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.023198296 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.023103393 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.022272653 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.026015166 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.022252049 seconds)
  done (took 4.287009312 seconds)
done (took 18.544075302 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.502044638 seconds)
  done (took 1.422383892 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.017422862 seconds)
  done (took 1.97529072 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.052312033 seconds)
  done (took 1.007907244 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.282713532 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.378666008 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.723891472 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.09004253 seconds)
  done (took 2.414834347 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.844778539 seconds)
  done (took 1.801852929 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.213736257 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.175966422 seconds)
  done (took 1.375768623 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.496620652 seconds)
  done (took 1.442866825 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.320885097 seconds)
  done (took 2.272679157 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.19086777 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.129899079 seconds)
  done (took 1.272285398 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.599608128 seconds)
  done (took 1.554063571 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.565441799 seconds)
  done (took 5.517894885 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.18766864 seconds)
  done (took 1.202810424 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.193630522 seconds)
  done (took 1.146101569 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.692394451 seconds)
  done (took 1.652199748 seconds)
done (took 27.026486047 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.04322879 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.039315599 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.039316406 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.034843846 seconds)
  done (took 1.100390113 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.030708646 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.024977208 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.027332202 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.02772381 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.025001714 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.026804922 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.027421366 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.023631827 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.024889701 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.024070492 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.022520957 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.023986081 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.026555655 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.023673033 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.026180351 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.02754794 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.024130958 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.02478622 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.026112281 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.023825766 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.027430349 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.025118255 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.024578811 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.025722573 seconds)
  done (took 1.574532903 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.033995806 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.025871573 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.028921073 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.024667749 seconds)
  done (took 1.070108031 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.032992987 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.030636722 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.039201667 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.043590755 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.030371673 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.030922184 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.03729043 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.037638683 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.044212169 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.04023248 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.021572944 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.021332744 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.020577017 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.039585725 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.037386706 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.016013921 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.017446173 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.03123395 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.030172025 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.032994903 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.023629199 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.019375511 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.030522636 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.031087131 seconds)
  done (took 1.701310622 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.038103587 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.019899878 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.036015729 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.044732429 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.045112717 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.019271854 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.033242584 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.045660374 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.081976234 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.019211958 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.025347717 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.019191643 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.057584397 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.019340762 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.034641893 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.064267961 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.067164736 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.023419736 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.050104223 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.019429243 seconds)
  done (took 1.728676435 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.028644401 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.023829308 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.025234501 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.019314314 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.030403137 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.026675936 seconds)
  done (took 1.120359403 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.024227245 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.021365149 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.021177258 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.025402923 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.021811574 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.021074061 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.021078661 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.019895481 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.019844059 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.020532999 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.020598169 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.02099532 seconds)
  done (took 1.224412247 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.163176114 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.026633283 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.024623829 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.019896952 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.02176437 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.020660637 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.03549082 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.023111872 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.040824699 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.021331491 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.021239631 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.023598037 seconds)
  done (took 1.400465266 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.060494947 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.065749346 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099121653 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06978493 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.06981441 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050213055 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.197273196 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.032895526 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.120745241 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092940737 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071753208 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.045747258 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040066945 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.023620982 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.055420469 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.073884804 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.094861982 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027780812 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.069868784 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.241402061 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08966288 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.09275731 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104492613 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072962463 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.048072942 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104785751 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050863114 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.05925662 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.079662079 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.083834585 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075176541 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.05367609 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.02533711 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.024991494 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108519822 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.063611381 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07676507 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.048020029 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.060528259 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.043648278 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06493574 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.023849382 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.036853945 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.067217186 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.041598775 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090629874 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.0481379 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071731242 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.038053841 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100248066 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088357772 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.17700732 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.042634545 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063140825 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101825537 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.073885422 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100517711 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.066750721 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.040191218 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.229906318 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.059630788 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054509759 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061616111 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034106378 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.132216143 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.042975877 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.07133301 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064727628 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.049721872 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.049269285 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.060861521 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.090007558 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080299572 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.08003053 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090973555 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.045944788 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074431239 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.056774538 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.080552135 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057901758 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.026218257 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.077837702 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083946087 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.054837561 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.05595844 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086090386 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.047643765 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030476803 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.056361682 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.075257069 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034869493 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.07000815 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.035869322 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.06691554 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.095495015 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054324419 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067063439 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.074327999 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.032882036 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114993453 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.063310485 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.027320376 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.072229918 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069412192 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112121581 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053031423 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.029647065 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.05645326 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060114158 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.115890553 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068727823 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.036257363 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070878438 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104404405 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052696516 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.261072294 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.054350072 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106429302 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073628543 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.042216989 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.030901889 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.047240551 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.222448668 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061563552 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066147222 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048340077 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.037943777 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.039678827 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068124034 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047095299 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034733996 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.06828847 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.056651608 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.028643947 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0421005 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.03047098 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099998628 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.0322847 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.088874059 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079407525 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.029186781 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060294523 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.04942305 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059404632 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.05185011 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.072307757 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.094562554 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.140381751 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.044442053 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.048439064 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060763512 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.099441641 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083854242 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.0471367 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.031796885 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.056180544 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0670309 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.053670927 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081297184 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.049154976 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064130519 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.059241551 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100271961 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103724211 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055271874 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.056932144 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065231951 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.07966709 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.029428377 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116311507 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060842122 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075770706 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.042212768 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10149476 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.067102113 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.04638487 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041795 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.056126864 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.063139728 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066624947 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107206578 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.051955766 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.027137433 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052738387 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109262307 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.033900807 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070948741 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.047470389 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.050088166 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079080367 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.054359859 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.038857288 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.023401572 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.245533622 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112438163 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.024019329 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.067179025 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.061307761 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.056340771 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.07475785 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.02327315 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.071829608 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.090165376 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070192538 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.095770509 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142925017 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070289405 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.07150635 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.068083378 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.059667643 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.034763908 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.081797518 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.090268151 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0500667 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.045731556 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.088900231 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.073772582 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.09327544 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.07495013 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074730006 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.06312931 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.063593906 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060896852 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.062222307 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105726247 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.079640767 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.08255708 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.038773576 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063166248 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.074339737 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.094434036 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.036036509 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10105676 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.041184743 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.076909032 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.033380071 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.082322712 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.031124864 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.127545154 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.035124774 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.057929002 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.024497073 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.029665593 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104609657 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.078032954 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.068577401 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061107526 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.101303635 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098472134 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.032548617 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.067048839 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.074920448 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.060804578 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.228674887 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.062174609 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.043122583 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049019859 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.061693026 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.038999874 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.035034291 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07047734 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048294954 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079357759 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.036987316 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.028525136 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.092762004 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058506146 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048775894 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.03014131 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06010113 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.080823344 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.04627361 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.039442108 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.068873286 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058562295 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095274469 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.043743523 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.051966163 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080815446 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.035562514 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.047624764 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.023612692 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.039631035 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.029925502 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082835124 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.029864834 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.071679238 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.022899245 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087122483 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.045469357 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.049060889 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.057853217 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066552598 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.085133775 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.049315972 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099261455 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045810658 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.077604741 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063831309 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050722102 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.042315298 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.058581157 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.056546584 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079446082 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.051023381 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08143196 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.102912463 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059312122 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.101203276 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046508523 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.07955426 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063206115 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082011488 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.070124719 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154781589 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103882822 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072072084 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.069403891 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.030629412 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.054433325 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066124535 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073448653 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.297424025 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079913424 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.026408877 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.058739741 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.0475856 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.062795419 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057375904 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.036098357 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.098573611 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057000247 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.041276648 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.065343179 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.044471293 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.057226945 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029791873 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.055035676 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.053930703 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.048201216 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050596299 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.068080092 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082512269 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065809611 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.097230256 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.056352697 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.045865215 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.07568145 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065718161 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063432482 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.039152853 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.040049108 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092671392 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.073743073 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.081264707 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.052795018 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064430209 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.066540809 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055537286 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.082362668 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063766528 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.085879459 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035149946 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.031723023 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.022599899 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.026245148 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081446394 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064381197 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067550899 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.055113965 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.026596758 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.059540884 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.060058427 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026601687 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041358187 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050960922 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.053610655 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.04832037 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064160396 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.067749821 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.05148778 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.06021911 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.054841609 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108607145 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.055004674 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047322545 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10892312 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115941505 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046600928 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052693975 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.026408269 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034849015 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074443952 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112037668 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.261003522 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.032651595 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.040688003 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.039971452 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04072484 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.025468595 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.042411513 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.043481518 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059491828 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.051513146 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.067626335 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05860184 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029199813 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055920482 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.05296669 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.04611391 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.060026856 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.073251677 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.079528205 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.095153953 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066775358 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061182542 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029873565 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.034215371 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.029884602 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033411819 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.054682991 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.032618883 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029833163 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09982148 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.046247625 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06095046 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063297469 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.04195213 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029900643 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091297168 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.023701834 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092317194 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.02534064 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.037048175 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.036335821 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033262104 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049642584 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.096561599 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.065748714 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.068802128 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062897587 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061309822 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142967673 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117985766 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.037585231 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100092545 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030685161 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.031307808 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.03084779 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067602104 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046141442 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.07056037 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.102765807 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043959677 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057756638 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.033184111 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103471695 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.059849454 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.061286275 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.042213737 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.035711678 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108319733 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.035467886 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.040610415 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.046570515 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.070290196 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.027795897 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.060732023 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.039913358 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.035592666 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.294969233 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.664711438 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.046165389 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.029747101 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.049733553 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.095463728 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085403295 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049571125 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06107135 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.073353253 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.054512071 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.047324363 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061784835 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.153089306 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029206824 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049794574 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.057490876 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.051629598 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055616252 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.052092917 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.040745575 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.046967977 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.03998851 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.033061886 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061555981 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040036363 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.050206933 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.059696814 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.036862418 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.041084187 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085188085 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.057406943 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.03741619 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043067373 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.058350115 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040664624 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057959562 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.023732872 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.067378823 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.043803657 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074791113 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.055434597 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.06425282 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082910575 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048978255 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09518168 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.065164297 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079361689 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.041965498 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.032840388 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083863802 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.046085259 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03230533 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104980108 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.05462556 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.061187296 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061973063 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.051007481 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.07020137 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.077359336 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.071077301 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.053565591 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034211591 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061070665 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.063655036 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.0448466 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.036009776 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.030238906 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.030258947 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06656324 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.04574568 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.042125069 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.07308601 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.047297291 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.210292132 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.054068354 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.076518285 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.04314721 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.056084278 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.065195773 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.045792821 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06309594 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.055143841 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083106444 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128093727 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.077780676 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083145682 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088343005 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.031618988 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.029100798 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.02264128 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.069339017 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.285011267 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.043244119 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.032681007 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088374872 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.037940541 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06463712 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.208430331 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.034209583 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.048263745 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050165518 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.023719059 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.037195022 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061113582 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.040587887 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034215778 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072618164 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.036005456 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08461535 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066694866 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054617227 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.050781821 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035538546 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070104107 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.057978915 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.086328284 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.050260187 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.030051231 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.081080423 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.059534345 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097386573 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.027497209 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035847259 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087353433 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060600877 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091599757 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.036178933 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111379021 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.101661878 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.057302689 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094292367 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.025576988 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.044200558 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.045871758 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.079905842 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.040941407 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070360152 seconds)
  done (took 41.210936585 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.149849463 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.139919927 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.077811075 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.09097545 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.24502774 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.252732874 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.106107311 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.077572923 seconds)
  done (took 2.255491331 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.024662069 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.03773321 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.035305529 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.279206376 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.055780071 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.021550298 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.026304815 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.036280997 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.021115286 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.020568959 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.055640272 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.020915477 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.021167782 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.429629604 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.020109261 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.02569331 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.021195864 seconds)
  done (took 2.240161236 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.306614156 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.558075485 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.341236801 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.489511184 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.103941659 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.560883384 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.02903081 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.034472787 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.639272467 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.35683403 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.099125304 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.181844564 seconds)
  done (took 17.777267263 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.031291056 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.156205112 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.155047368 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.028081063 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.027493389 seconds)
  done (took 1.531803237 seconds)
done (took 76.969765041 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.040524864 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.12425796 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.020829985 seconds)
  done (took 1.252981261 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.158922141 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.15388855 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.153906972 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.157095253 seconds)
  done (took 1.69995334 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.030717515 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.030236877 seconds)
  done (took 1.146936965 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.195253703 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.250576127 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.044548611 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.039875625 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.034627647 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.035801176 seconds)
  done (took 1.193725426 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.02712659 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.024975866 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.025000848 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.025404966 seconds)
  done (took 1.178275519 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.137778542 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.020228734 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.022289672 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.023956604 seconds)
  done (took 1.278106112 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.040632276 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.040001191 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.070271702 seconds)
  done (took 1.227404923 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.039339827 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.038672704 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.033179505 seconds)
  done (took 1.19881795 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.063920489 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.049744178 seconds)
  done (took 1.187025677 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.035883215 seconds)
  done (took 1.116836188 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.048098619 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.052126845 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.220250635 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.185844393 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.223479942 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.210914234 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.030611472 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.030987833 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.026845621 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.025781309 seconds)
  done (took 2.127587587 seconds)
done (took 16.220235578 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.036270448 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.142914547 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.394485157 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.041362145 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.609418209 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.39296555 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.679138762 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.045899908 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.053754134 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.022143008 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.038619761 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.586679741 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.682292208 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.104072535 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.667454218 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.093299977 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.763514162 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.024454044 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021914346 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022247812 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.660639193 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.024349897 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.022598962 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022619315 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.759209064 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.2884951 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.023161994 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.101694569 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.024291647 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.026267342 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.269578239 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.023108887 seconds)
  done (took 12.745640754 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.026025536 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.07628408 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.026946461 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.037559338 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.023910793 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.023806685 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.025628398 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.022225397 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.064719002 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.022003209 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.039015221 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.021440136 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.026079796 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.02292137 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.042821382 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.024032515 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.025558686 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.023072899 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.022168129 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.023000491 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.041060024 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021675492 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.022424357 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022467239 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.022058489 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.036849237 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.023117115 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.021872194 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.022086759 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.026054813 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.027324139 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.023437126 seconds)
  done (took 2.017054037 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.078523597 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.078422076 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.028029156 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.062324487 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.074171549 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.025001668 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.105338028 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.044049333 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.066959643 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.022396566 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.039436119 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.022112219 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.058400725 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.024221059 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.045454263 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.023178057 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.025166563 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.023578125 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.022331094 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022793216 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.041647363 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.022007988 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.022634165 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022740063 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.022613327 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.03841322 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.023159513 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.02219693 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.022127424 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025946413 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.027589107 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.023527445 seconds)
  done (took 2.292848324 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.025577791 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.026242749 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.031818045 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.034969873 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.020395568 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.022844237 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.024050918 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.020520943 seconds)
  done (took 1.294496108 seconds)
done (took 19.448173256 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.035749456 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.022357182 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.025318647 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.04123351 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.028484672 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.144446865 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.019392059 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.027269692 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.025633741 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.024894607 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.027175019 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.020397778 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.024169648 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.018985301 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.026146336 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.020325533 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.149365499 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.025494025 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.146017542 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.14648902 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.023117533 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.026010569 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.028763035 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.145694846 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.145928477 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.146039322 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.029509895 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.026390804 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.020607013 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.023331244 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.143394445 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.145607543 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.023370454 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.14174145 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.020913039 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.020575975 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.024917775 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.022200949 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.149589911 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.029732725 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.022864668 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.029371865 seconds)
  done (took 3.460781002 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.149030105 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.154333948 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.149832061 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.032684178 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.028917686 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.031881996 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.154341232 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.029372531 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.028068287 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.153246819 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.024112267 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.027787503 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.02972766 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.020988253 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.027234974 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.024198589 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.02954906 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.02213035 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.027350511 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.027731444 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.152913104 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.021434793 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.028734046 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.028774819 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.023540578 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.029576742 seconds)
  done (took 2.569032507 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.030449355 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.04324559 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.045681464 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.099076999 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.063454236 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.036515872 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.037046538 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.047560935 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.054020031 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.021656718 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.043552525 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.049920497 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.049864259 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.028681859 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.060725407 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.04001491 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.034227119 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.023208584 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.028097505 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.055837584 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.044906055 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.040708568 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.054470468 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.043566812 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.021761697 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.031399201 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.029008243 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.037944224 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.028951106 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.034912932 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.026964527 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.025831067 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.023000614 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.03346912 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.02602634 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.020069274 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.045266207 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.034468433 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.036515855 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.060985487 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.031692567 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.023039003 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.048079848 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.085861755 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.021169263 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.024081184 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.02575621 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.034064047 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.022863427 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.051611167 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.036701673 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.021201451 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.040386844 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.022981887 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.022946105 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.036803561 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.023142104 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.023598798 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.033238238 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.027555581 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.042770143 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.027031418 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.041751248 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.021300357 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.032802098 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.022920384 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.023226619 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.020211477 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.055211715 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.029200038 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.070114086 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.022650158 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.019849898 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.033927856 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.032967959 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.03044229 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.021780006 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.040488377 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.035772864 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.025449304 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.032686769 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.024466121 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.024678294 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.057364026 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.0207192 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.019752923 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.019705421 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.024118137 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.02471131 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.022143624 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.034439142 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.020969292 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.024733932 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.035584207 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.021402919 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.022150085 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.024004615 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.022840909 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.020823252 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.031363584 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.025092383 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.023134665 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.035650802 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.023687019 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.025436892 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.037427728 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.031541665 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.02105802 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.022772294 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.023892051 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.023228972 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.026094027 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.024685273 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.023327523 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.026524843 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.028992792 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.027601598 seconds)
  done (took 4.989590341 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.245905541 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.231616035 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.022572647 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.227990979 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.031148745 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.163071215 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.230658648 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.230857219 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.022337017 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.022972452 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.021275396 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.173236252 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.168452741 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.181415569 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.161477571 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.024527903 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.048858806 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.180846091 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.237564586 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.234291749 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.047625854 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.029316078 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.024428216 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.023413322 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.023611241 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.032301711 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.039981297 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.031937382 seconds)
  done (took 4.229193611 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.030576431 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.065023736 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.025518021 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.045600293 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.039115373 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.022133568 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.023791909 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.022544944 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.038500179 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.027307125 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.021770293 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.025949092 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.025449524 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.024146576 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.022148282 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.028459437 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.028362414 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.029400355 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.025532372 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.026351407 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.033218743 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.046179364 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.025969408 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.021900469 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.025319764 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.02182591 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.027171298 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.030491255 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.021702001 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.021697021 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.019091062 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.026230617 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.036772036 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.02312858 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.022121369 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.023697127 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.023354826 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.022948574 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.022860562 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.02090615 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.020657975 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.027394201 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.020751161 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.026913313 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.035819057 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.024343822 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.023663047 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.024789737 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.024460791 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.019038332 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.025067636 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.025238761 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.024434409 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.030577561 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.025848654 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.024644798 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.023361477 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.036320382 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.027691776 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.021423834 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.02110324 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.020469656 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.023860159 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.028579929 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.038325559 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.023748139 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.020395326 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.022110865 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.023514944 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.035472816 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.021255808 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.027645664 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.019028532 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.022168732 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.024417867 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.0250274 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.023507189 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.020675851 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.021916198 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.021406048 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.022082892 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.021972142 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.021365801 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.024633556 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.020091373 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.020653047 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.022715841 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.02371633 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.027430034 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.020998586 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.024927291 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.023589755 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.02081462 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.024721117 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.027476287 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.024836621 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.042286816 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.029990842 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.022859865 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.020031109 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.036826844 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.024037141 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.021516308 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.024120831 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.026506229 seconds)
  done (took 3.867164528 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.052027943 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.024380031 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.041447242 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.053451436 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.032315581 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.027728832 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.035761004 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.023371466 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.043457237 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.021393165 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.031334252 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.020520893 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.035001763 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.030812465 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.023997279 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.03206502 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.024762611 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.042220237 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.036793541 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.021067206 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.031001246 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.034629744 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.034666085 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.039639228 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.039075922 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.040208971 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.034443158 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.024887436 seconds)
  done (took 2.061535003 seconds)
done (took 22.269358488 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.15709691 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.352850651 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.123325342 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.84160717 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.195971544 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.248998454 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.216638863 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.118739349 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 6.744065226 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.208616458 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.794782484 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.78382167 seconds)
done (took 59.967233557 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.143245557 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.267279544 seconds)
    (2/2) benchmarking "String"...
    done (took 1.348404557 seconds)
  done (took 3.729946768 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.561001472 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.120388549 seconds)
    (3/3) benchmarking "different"...
    done (took 1.144267398 seconds)
  done (took 4.93058204 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.422752779 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.969852415 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.377943889 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.114056957 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.121071755 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.665705857 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.300983816 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.778608439 seconds)
  done (took 27.435273815 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.110662605 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.377409491 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.458283041 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.560897644 seconds)
  done (took 17.69217386 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.560317218 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.552709218 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.561473895 seconds)
    (4/4) benchmarking "different"...
    done (took 1.824205094 seconds)
  done (took 7.725044901 seconds)
done (took 71.280609728 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.107594425 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.415225651 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.122113815 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.301281564 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.151411335 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.219337319 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.115529666 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.150832907 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.108212836 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.113888377 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.117406263 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.116168125 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.116319012 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.162869893 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.123006138 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.112250051 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.415385739 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.116117996 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.148540206 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 6.980740401 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.45231505 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.116852323 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.124697167 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.188855208 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.567314213 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.123392191 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.574155563 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.121590848 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.72142609 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.124037823 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.123429285 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.114563595 seconds)
  done (took 182.667916161 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.105862357 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.91217989 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.94686645 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.116202863 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.496102146 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.47124096 seconds)
    (7/36) benchmarking "scal!"...
    done (took 1.971796785 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.514785514 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.116228118 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.132052936 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.145462009 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.110383751 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.178104951 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.672798631 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.15608938 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.106862919 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.051587581 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.939838508 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.168498768 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.035607001 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.119450222 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.686923971 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.670905478 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.974417299 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.128474332 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.173878224 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.129017094 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.130146645 seconds)
    (29/36) benchmarking "asum"...
    done (took 1.615999917 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.031074161 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.124435615 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.135562296 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.298019556 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.351681851 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.12397855 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.12615528 seconds)
  done (took 153.277339497 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.346090262 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.108481617 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.15883201 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.219320405 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.07570451 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 3.94698358 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.121360986 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.100029043 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.107739373 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.107318237 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.113823344 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.168978295 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.115419436 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.192093023 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.141881135 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.106500338 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.102741911 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.190183199 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.118110649 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.110042178 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.099828646 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.210082057 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.449222216 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.221246429 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.114364278 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.109108286 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.21829964 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.116296746 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.106808879 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.099423505 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.216402347 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.108042501 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.245377761 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.217866053 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.119752178 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.158925872 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.123943171 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.338430186 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.119652992 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.100866554 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.109336019 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.147131449 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.114638673 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.160698387 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.218012527 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.112534585 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.124554179 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.595877044 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.686163135 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.114630954 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.100389544 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.109195011 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.103194516 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.10816958 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.488115956 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.118562346 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.135406488 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.689067327 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.124908278 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.100897857 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.111528174 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.104349508 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.10820342 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.106069517 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.146340964 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.756885817 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.919388597 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.462530364 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.831258815 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.111047708 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.106757804 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.101279052 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.91081989 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.181316719 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.102754767 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.107471331 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.274398705 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.115141862 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.099844116 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.024872933 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.023709963 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.117303979 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.210915087 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.117820808 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.100142935 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.111880695 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.197678078 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.120309458 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.125969948 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.155876835 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.10943774 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.099410145 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.116504081 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.019522542 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.119595028 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.11271458 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.493002796 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.116373499 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.100322524 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.182756943 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.472639606 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.114548118 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.180904748 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.511995388 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.07056675 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.10914602 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.11062609 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.118159789 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.107533699 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.112132186 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.12349277 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.102133466 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.107302894 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.105410063 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.107513852 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.104958744 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.107243431 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.11979428 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.10837464 seconds)
  done (took 326.720679981 seconds)
done (took 665.259021865 seconds)
(4/20) benchmarking "parallel"...
done (took 1.102924322 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.365706008 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.118443811 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.217451143 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.36363624 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.316568647 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.285017509 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.323166039 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.400124653 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.340123626 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.282477498 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.335942418 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.289786343 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.40742571 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.369855177 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.404234148 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.370125348 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.312812317 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.799757507 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.331797862 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.28385786 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.325587879 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.272794733 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.271705841 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.337321229 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.411081031 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.285709137 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.508726154 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.355974155 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.315113776 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.357976336 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.38855273 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.389363789 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.329634599 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.398813586 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.365267713 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.424625972 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.270668225 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.384689186 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.309203756 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.3242713 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.340581385 seconds)
  done (took 63.386454347 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.524838571 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.3096456 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.441340459 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.410192126 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.825308331 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.443657032 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.499380351 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.310720268 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.318609971 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.435315017 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.480572653 seconds)
  done (took 18.133350428 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.373336586 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.319269183 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.435814682 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.437552244 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.526406549 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.426643295 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.469444743 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.314401334 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.309113105 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.447728431 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.489524705 seconds)
  done (took 17.672426895 seconds)
done (took 100.297224444 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.664328315 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.188587181 seconds)
  done (took 3.959011857 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.138781538 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.121302198 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.122613967 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.120207078 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.12324332 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.112606064 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.175590469 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.131380587 seconds)
  done (took 10.144836899 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.112846903 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.120594283 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.115108112 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.120974956 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.111861454 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.120854332 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.113086584 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.124481109 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.112858855 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.120538717 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.113467195 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.125169101 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.114068704 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.12095288 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.112902447 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.120771848 seconds)
  done (took 18.986630756 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.118613983 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.113338262 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.118929035 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.118126079 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.121203822 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.112493601 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.11857691 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.121436574 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.124943816 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.114299673 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.118743239 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.117718257 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.120726572 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.112945678 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.119744344 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.114966581 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.123079768 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.117090819 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.119962298 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.114345249 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.120081342 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.115141535 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.120955951 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.116079376 seconds)
  done (took 27.939185147 seconds)
done (took 62.152999432 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.734478703 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.134718726 seconds)
  done (took 6.968086512 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.1241776 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.113597497 seconds)
  done (took 3.449544658 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.112138673 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.120309444 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.112903872 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.120118446 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.120645907 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.120081286 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.113390625 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.121606831 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.115194242 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.120996278 seconds)
  done (took 12.290090824 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.119636231 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.113971878 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.120085462 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.114713432 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.118696186 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.113163624 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.120957068 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.112964841 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.118466724 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.112988477 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.119484167 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.30313427 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.121730832 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.339386286 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.119056389 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.124612935 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.113101704 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.118123135 seconds)
  done (took 21.623198444 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.120224152 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.114777219 seconds)
  done (took 3.340127028 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.115894589 seconds)
    (2/7) benchmarking "second"...
    done (took 1.115624977 seconds)
    (3/7) benchmarking "month"...
    done (took 1.126056262 seconds)
    (4/7) benchmarking "year"...
    done (took 1.114822902 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.117332811 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.114611351 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.120889239 seconds)
  done (took 8.927899685 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.553614558 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.282566909 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.333432521 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.581508216 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.720083077 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.065355695 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.720099208 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.073345912 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.967014113 seconds)
  done (took 16.397587616 seconds)
done (took 74.104497591 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.722649086 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.116097018 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.830996453 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.277775065 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.114382906 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.485546376 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.111818482 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.699567353 seconds)
done (took 37.491122128 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.360870498 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.100609188 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.151330013 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.156391643 seconds)
  done (took 19.520936819 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.109531076 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.712993665 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.151640386 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.141745595 seconds)
  done (took 19.317813956 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.635164167 seconds)
    (2/2) benchmarking "read"...
    done (took 1.645568934 seconds)
  done (took 4.399850001 seconds)
done (took 50.711015757 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.120924594 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.121450941 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.126359215 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.113895901 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.120742284 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.114000233 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.121227462 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.120928184 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.121265926 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.112843058 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.121503246 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.117123084 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.119627277 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.112772356 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.119440191 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.113091929 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.121289288 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.114341172 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.11909875 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.113728345 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.122705731 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.114090748 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.118648058 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.113552476 seconds)
  done (took 27.934137332 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.182905337 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.182475381 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.185132914 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.185392835 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.213022382 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.183235509 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.182459327 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.153362907 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.191701281 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.165309424 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.158555486 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.20638663 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.159929448 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.209334594 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.157550268 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.209249936 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.19323806 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.153416132 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.15818179 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.211624473 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.184223884 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.157925727 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.211692531 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.15277365 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.211827017 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.155768126 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.168265176 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.178381892 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.154210345 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.213000462 seconds)
  done (took 36.539983316 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.155103862 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.114279095 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.120063205 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.205956348 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.118471288 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.113512626 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.118789371 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.116509158 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.12014633 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.11334636 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.119359522 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.115834491 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.120805239 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.113586897 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.119686078 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.113991528 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.154399707 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.289304388 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.121653957 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.113174352 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.172515335 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.11416465 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.12172758 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.113492087 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.120529863 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.118995655 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.120554965 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.112506938 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.122401253 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.119404972 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.120094878 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.159864473 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.154867281 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.115032507 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.244408076 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.170857977 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.11882892 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.144213815 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.119920088 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.113830325 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.119886195 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.118589481 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.122245998 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.115167374 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.185002043 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.114327757 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.118596117 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.117650911 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.119065076 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.114537763 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.126961474 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.117593296 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.134744479 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.113424166 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.122830876 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.113695459 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.126492631 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.112524296 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.119021022 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.113251396 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.122424775 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.184546214 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.120592934 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.112798875 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.497475569 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.114286271 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.185748964 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.113962514 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.121945457 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.335054257 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.119856355 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.328107276 seconds)
  done (took 83.281452723 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.124351008 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.113562441 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.204095779 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.203410878 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.123741762 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.114286312 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.119727239 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.114411209 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.789301816 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.115566818 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.12156222 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.113139109 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.798557906 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.122167255 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.114141376 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.204150868 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.11949509 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.120621143 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.113141364 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.123355313 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.114002863 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.126815937 seconds)
  done (took 27.315679181 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.158570977 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.128763065 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.169328106 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.130245943 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.134354109 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.137525031 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.163417092 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.129260452 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.167044245 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.155381045 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.166908012 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.157006983 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.135029725 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.158514687 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.162849516 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.195363502 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.161001537 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.19211073 seconds)
  done (took 21.902956659 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.29708436 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.284432199 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.203592512 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.158369797 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.385702743 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.350218504 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.224192826 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.293942386 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.166501491 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.283885479 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.289690239 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.165198913 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.351295428 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.16496787 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.155679079 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.385041081 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.201378914 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.164728845 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.227113645 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.222561346 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.299435295 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.226624192 seconds)
  done (took 28.609407228 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.149540325 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.166709164 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.195092061 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.193802629 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.113918668 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.120077812 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.179976082 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.168352116 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.129531958 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.15829234 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.161212763 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.121759038 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.203819495 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.178105354 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.206262084 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.16662011 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.164426603 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.175589183 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.154108541 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.122238181 seconds)
  done (took 24.338430445 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.115174353 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.116516847 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.119426235 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.116838127 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.118292152 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.114454674 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.119046192 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.118475951 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.120269562 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.369245649 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.120000709 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.12579789 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.114875374 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.121043105 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.115502101 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.122518351 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.114013058 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.120812213 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.114177636 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.12166102 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.375154098 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.120656361 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.114581588 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.120727618 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.123922406 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.120103132 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.114288142 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.118716079 seconds)
  done (took 32.930935716 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.17477979 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.114562421 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.119674455 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.114632287 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.120995262 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.17745797 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.120388727 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.114320655 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.122359059 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.115172141 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.119387855 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.114127802 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.119221618 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.16702655 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.120629929 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.114833161 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.1968272 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.14328103 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.185229856 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.109817629 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.129479952 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.209387742 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.127442396 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.120501971 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.10859143 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.121839948 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.120230897 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.113662078 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.124865518 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.11404053 seconds)
  done (took 53.075669903 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.136954968 seconds)
    (2/2) benchmarking "in"...
    done (took 1.144516826 seconds)
  done (took 3.388443274 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.120074534 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.215438005 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.119289436 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.31727847 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.288355306 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.289560657 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.287428537 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.223391756 seconds)
  done (took 10.960900028 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.121669996 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.473132254 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.134574696 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.123857957 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.114359638 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.570476984 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.044634823 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.070374069 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.893743635 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.105207544 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.211651923 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.664131616 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.083200576 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.427241028 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.237485255 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.989122466 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.368715339 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.757624999 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.205102139 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.246073874 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.882438772 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.222454327 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.125338902 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.1140121 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.119582013 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.021243113 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 4.002448474 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.56524059 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.290961328 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.255932217 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.901933392 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.208007919 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.119197614 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.385570728 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.246995591 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.115582236 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.281951779 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.228037653 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.121701396 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.114267645 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.898038673 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.825171255 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.403605672 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.35068843 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.20721782 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.122054392 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.114491867 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.121648154 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.392887521 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.757698083 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.08494155 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.100952381 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.262799453 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.121691272 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.828784843 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.127317583 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.127676909 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.027905727 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.784055697 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.369974525 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.469678702 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.208965561 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.168682715 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.256799872 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.115135772 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.322770966 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.928271337 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.916474625 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.882555162 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.239164727 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.635021788 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.13974089 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.116791268 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.120143646 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.05720067 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.433190413 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.122768909 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.114668451 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.124525708 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.114610167 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.395571386 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.240289764 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.959414374 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.267900311 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.301498351 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.577550232 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.250306238 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.12135172 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.78959455 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.978947605 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.212120689 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.791268076 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.3609425 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.263323885 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.137232968 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.381723317 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.154421912 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.119142507 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.963415193 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.773201112 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.137483568 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.114940073 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.467644226 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.14334436 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.121484892 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.12268194 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.831998693 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.252896438 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.242043916 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.159950797 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.130148364 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.11484543 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.716180078 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.223249743 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.12803848 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.597274782 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.09076157 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.662004794 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.419613592 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.330369738 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.48525813 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.145981976 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.37649562 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.931354764 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.122128809 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.662409697 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.96871083 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.696060179 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.387982324 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.25089817 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 5.015013419 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.192726848 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.122783071 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.311794168 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.207464439 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.120046544 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.123159761 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.114673962 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.12230034 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.11592691 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.246898262 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.506382098 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 4.976771184 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.134662462 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.357107423 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.24528798 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 5.00018454 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.363122796 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.84049124 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.269967273 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.117286054 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.885621659 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.392244044 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.857737387 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.251569096 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.121223916 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.115890134 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.980247601 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.152414787 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.22673239 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.117222674 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.734031018 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.222099977 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.126283294 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.115408366 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.595981742 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.268726075 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.114777845 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.255991401 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.937382754 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 5.017359871 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.135449686 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.425986093 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.241848799 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.12348515 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.115405003 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.124289964 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.911196046 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.754524974 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 6.267752749 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.73622287 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.873047245 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.218016223 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.273030301 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.216208697 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.400657894 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.353204268 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.265086102 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.120778985 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.116898966 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.12339377 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.606788914 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.954594036 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 5.153934536 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.986227056 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.139350626 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.083927518 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.212445174 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.923773444 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.139706234 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.844317186 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.134827108 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.230035318 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.119690759 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.11754506 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.271632453 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.304611726 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.263350049 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.70224749 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.1293593 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.130271803 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.795075479 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.25773355 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.803432313 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.235338237 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.951523747 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.224682805 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.256253362 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.25712583 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.824098318 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.259124733 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.117941895 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.886485779 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.273859618 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.119683958 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.223364201 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.823371962 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.927922173 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.881312403 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.78352775 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.071775674 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.683491514 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.388913575 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.270077396 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 4.000969308 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.227148975 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.345819332 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.166828213 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.654273855 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.137439188 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.873868288 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.137108897 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 4.869570744 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.128923138 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.121383922 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.246240498 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.614443315 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.246809935 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.118213789 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.298274139 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.219105574 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.80635554 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.257144712 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.239303193 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 4.455628258 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.059834996 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.227401084 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.350494911 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.174958519 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.037626948 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.104985068 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.470364892 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.102079261 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.127664003 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.215111082 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.917219406 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.274856591 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.378696611 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.268839033 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.117325127 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.123099878 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.352865483 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.213318079 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.124055917 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.444299375 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.120272535 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.162657426 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.210232834 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.125613628 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.115831628 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.354439463 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.29070936 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.433779996 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.609531002 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.702816521 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.960740464 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.254205582 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.790881077 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.264430502 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.804456172 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.22303287 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.125372009 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.809309648 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.2600584 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.412684145 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.276265717 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.241268234 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.794302212 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.235219435 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.423768242 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.287657344 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.247984861 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.898550533 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.677000566 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.37949209 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.535991586 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.157955488 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.648157643 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.196967275 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.68453172 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 3.11416333 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.817875069 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.191072591 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.182785769 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.11785546 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.126999447 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.646957038 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.084093622 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.127288198 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.911457678 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.837854289 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.048758809 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.848152979 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.229005292 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.125043656 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.123203887 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.117713842 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.032013191 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.225529913 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 4.485461182 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.262321388 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.124336427 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.116338511 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.108123616 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.47114258 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.94752415 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.026527741 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.111167372 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.269926814 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.124868368 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.115538869 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.123559381 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.116693813 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.12612269 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.116902466 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.653643433 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.136394828 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.71841982 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.225886718 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.130371237 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.319400102 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.194315367 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.116880734 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 4.343982213 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.212105824 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.230426698 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.193480049 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.124765038 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.540222241 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.269081618 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.0883824 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.396341055 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.436584976 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.362982713 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.694876324 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.178224785 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.541248309 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.429527624 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.887754128 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.128716486 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.027071109 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.210233547 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.919484279 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.113770455 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.560925719 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.728985703 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.104433945 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.389835003 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.044774043 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.509061433 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.267274822 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.197396277 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.124895545 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.121136133 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.207873928 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.37069772 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.169015195 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 4.443548369 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.332652792 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.108723908 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.422223437 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.228523954 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.346008122 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.149303483 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.137378277 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.120034908 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.123927251 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.605006067 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 4.045838945 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.216518011 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.122464823 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.053328648 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.991683092 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.035364579 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.754679885 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 5.002130989 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.271575692 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.119995687 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.345578971 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.176994704 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 4.926413818 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.139183026 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.929095935 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.455902245 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.174695362 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 4.312051494 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.510645271 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.829451677 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.529270749 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.241601945 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.123938345 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.49253052 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.126925337 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.273116358 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.030667617 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.458675734 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.669353172 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.55236072 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.377704296 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.250556418 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.020955857 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.673778303 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 3.107373621 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.123292664 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.978126401 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.27328774 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.455634417 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.097503511 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.395478247 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.267328086 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.76275582 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.821635702 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.265689531 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.734154317 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.273897939 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.120010698 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.938532665 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.036502892 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.307434644 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.252594972 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.122098381 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.139391329 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.806587905 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.717605124 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.376456428 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.207595137 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.119377287 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.938857299 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.826318489 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.221238705 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.128653224 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.119703087 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 4.566945922 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.180434499 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.116903087 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.544429718 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.731182355 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.264723257 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.6588773 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.235341723 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.270857286 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.393650574 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.521240497 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.333580217 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.185276176 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.118647655 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.125314309 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.120800123 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.696946365 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.138050484 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.117283608 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.716756399 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.270400314 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.877165931 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.061022037 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.383399584 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.199802187 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.537935442 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.26928218 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.610246839 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 3.991161557 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.213430964 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.373237596 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.173595547 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.248096433 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.886064065 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.229723167 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.124768546 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.056546132 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.463640938 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.497494745 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.536338069 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.477634182 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.216947334 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.798667139 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.236985695 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.930403765 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.147068966 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.118822199 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.602870536 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.282794744 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.586685095 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.27884997 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.608551606 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.241298353 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.438098531 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.35335532 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.221356892 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.118481533 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.123868547 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.133994916 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.162635367 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.667388001 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 5.005663261 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.59800341 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.263092385 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.93548107 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.654514042 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 5.000609331 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.313260904 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.410956215 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.410300164 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.158745676 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.101241631 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.51269044 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.2053776 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.29346262 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.217861276 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.925652849 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.196123044 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.12645103 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.693984508 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.135258955 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.118628082 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.130797458 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.020566996 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.911199891 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.239804169 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.337763475 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.227603186 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.119600796 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.732678775 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.405077175 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.166324733 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.118263327 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.122898111 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.99846708 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.234004769 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.125823044 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.501207936 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.286022737 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.422505283 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.950843546 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.57261156 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.217933219 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.118836869 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.131336295 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.821349074 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 4.718613621 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.159414216 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.455057306 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.148395081 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.626327707 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 3.098005839 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.600368261 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.673714071 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.13801388 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.260081599 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.11933706 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.148536021 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 5.053513628 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.048735214 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.862099239 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.542368423 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.219657718 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.91936831 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.128373944 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.184122839 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.305111253 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.199677059 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.124706052 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.125568184 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.12035183 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.604061166 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 3.102730989 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.124897688 seconds)
  done (took 1443.552642927 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.396195259 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.126448803 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.118061161 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.129237675 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.119331571 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.126268103 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.126173543 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.131708342 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.118194959 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.126841068 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.118396402 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.126276737 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.123572309 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.41185356 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.118686677 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.126396403 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.120919744 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.126505846 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.118297667 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.12586679 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.120035571 seconds)
  done (took 25.271820955 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.119664744 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.125357772 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.118724809 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.127756087 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.118265888 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.126672456 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.119325086 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.131236828 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.119423841 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.124889432 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.118675048 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.126105063 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.121510304 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.125420797 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.117880809 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.1255831 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.124258071 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.125203825 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.118937747 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.125484824 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.119264717 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.128026338 seconds)
  done (took 25.822190684 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.124771467 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.1189755 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.855094918 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.250412384 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.125851125 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.122473469 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.126212454 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.324791247 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.164295484 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.016638178 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.517548121 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.154114404 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.129971016 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.300453651 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.224104169 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.125873664 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.253723172 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.119219967 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.127381653 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.121515134 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.12592601 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.349998205 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.270919263 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.119309065 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.959752577 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.279332404 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.120528701 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.12698799 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.120492616 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.098371171 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.21063681 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.126458089 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 3.002032119 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.911840023 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.469583531 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.017741194 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.222368246 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.127105661 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.125983222 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.120843004 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.321058682 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.893287743 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.130202407 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.124401904 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.420173917 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.243037426 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.128966924 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.472244131 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.152395641 seconds)
  done (took 89.201491874 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.120264541 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.256026724 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.181158354 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.126902146 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.252222378 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.121829674 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.18296196 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.122016882 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.127931373 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.118425107 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.267477815 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.280551343 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.127856749 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.119401518 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.219939093 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.119902554 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.127935329 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.11888302 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.125035032 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.120365879 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.126194844 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.17540511 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.246281411 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.27882061 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.128735218 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.119016159 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.123592473 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.11932731 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.276959882 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.122457269 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.126880218 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.120044614 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.258847652 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.240940862 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.12168974 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.127176555 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.245052849 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.127599926 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.120339719 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.125702262 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.123940955 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.127518979 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.171141254 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.263447295 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.119911387 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.231494443 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.124895571 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.125963903 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.269230728 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.127071394 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.122164331 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.293845249 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.12001166 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.124332353 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.122385481 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.243509288 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.120589154 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.12757975 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.11983018 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.272599586 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.12149772 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.123123833 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.277449669 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.127555711 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.126874251 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.287022932 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.228461203 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.122222277 seconds)
  done (took 80.450775865 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.120945883 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.263020322 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.302366891 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.303769 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.255868647 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.246753552 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.265236384 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.259082329 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.26204933 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.259580544 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.26523815 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.224204583 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.233113707 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.2238442 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.269013597 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.247334476 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.243275031 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.247238909 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.261921936 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.266814439 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.241019354 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.306203013 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.259273368 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.302547756 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.489551351 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.228107074 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.2642151 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.260932787 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.307260674 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.256823224 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.489994169 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.267443841 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.256707703 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.30695787 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.482115439 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.259637752 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.125683111 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.256248947 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.271113729 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.256764311 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.234713123 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.298232206 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.263237836 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.228033219 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.248470632 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.261165413 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.298196275 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.483498232 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.220919933 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.270040499 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.258486307 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.302401641 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.26047765 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.244881606 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.305077277 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.227605289 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.303964897 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.301224098 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.267179636 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.302698313 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.296712144 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.235527317 seconds)
  done (took 80.137487174 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.125183162 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.119894065 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.213574169 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.11948085 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.127242484 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.208563902 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.126945738 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.124717075 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.126612257 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.119383812 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.128028753 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.211671804 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.487242128 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.127463767 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.208839383 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.485251648 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.210896401 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.217550162 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.121999204 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.211893253 seconds)
  done (took 26.931635211 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.125354246 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.125151763 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.12594811 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.275025143 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.127605478 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.258407991 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.125974136 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.119958183 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.124954178 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.121790432 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.12662482 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.119542683 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.124645231 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.276478372 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.12868728 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.253450973 seconds)
  done (took 19.668491217 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.121576339 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.128266626 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.122718325 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.123192686 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.121363176 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.128253618 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.122227805 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.123849109 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.121552731 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.584887251 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.132630305 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.119636428 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.128454872 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.120198087 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.132608472 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.119702942 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.126538196 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.127028393 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.130473541 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.119247128 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.705102904 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.119812283 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.132432868 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.120384749 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.129177464 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.698281498 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.130026779 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.128236138 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.120383245 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.130551506 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.1191937 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.60677698 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.12102338 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.12608685 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.119268298 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.129294266 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.119182507 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.126509288 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.11997207 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.132256625 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.120484322 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.127022833 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.121383739 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.131295732 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.120778247 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.126578174 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.119312866 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.580187519 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.130257683 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.119669661 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.125762801 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.11910682 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.127657349 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.591965206 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.12811178 seconds)
  done (took 65.991990942 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.169798024 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.18021685 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.125665821 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.119944082 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.182989122 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.165280888 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.168732698 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.136729144 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.171251491 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.123944533 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.189593958 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.135539284 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.171206492 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.178722377 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.184966559 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.172026777 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.119713583 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.210138875 seconds)
  done (took 22.012119015 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.126601622 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.121212146 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.128041338 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.121859702 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.127040665 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.119977954 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.127210237 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.123645231 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.128397807 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.120115688 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.127370149 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.119771241 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.133578211 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.1198568 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.127169895 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.119654688 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.13090433 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.119977837 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.126775554 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.119381905 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.129611318 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.121008138 seconds)
  done (took 25.846092547 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.15213921 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.17474367 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 1.126544698 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 1.12699711 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 1.120725721 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.148726413 seconds)
  done (took 7.963833237 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.183630456 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.187329434 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.171753455 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.167649457 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.20359168 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.201512347 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.20697164 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.198672777 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.204348528 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.427526793 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.210907973 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.206707454 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.201383877 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.256926827 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.189682333 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.199307293 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.204948812 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.211427619 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.176750527 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.205229687 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.217173745 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.198033341 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.204224657 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.204697068 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.209998244 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.250848081 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.204500315 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.428990172 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.21257074 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.196251424 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.195527653 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.203777705 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.207118838 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.425072599 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.170551357 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.198586646 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.200559595 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.207088361 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.189438066 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.24971306 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.161198287 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.194685247 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.199135695 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.215315023 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.191355857 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.223561011 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.214479451 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.206674635 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.210973846 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.440230273 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.19812721 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.24526086 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.193398288 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.203015481 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.200891032 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.426553828 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.436913048 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.262960502 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.186926151 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.433694968 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.251166867 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.194311825 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.250594293 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.433352381 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.196474749 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.245934485 seconds)
  done (took 82.542428371 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.246723516 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.174992244 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.218892453 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.438492201 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.254653763 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.211297112 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.221033192 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.215803654 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.226842371 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.186380194 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.216242921 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.209080154 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.254007637 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.247648816 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.218645456 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.211322267 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.210202845 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.254145355 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.186809478 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.436750144 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.20674069 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.253057909 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.250726852 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.254386584 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.429600008 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.209336186 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.221889179 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.206419739 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.208082908 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.21162487 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.217920641 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.209586762 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.254671019 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.164350942 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.25424488 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.219955629 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.210674372 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.217353632 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.211407986 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.207335858 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.249506769 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.211066884 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.210980518 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.208462127 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.42505857 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.227189437 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.231231078 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.182620501 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.228000077 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.183585322 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.435844508 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.424029756 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.437897536 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.256823556 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.212672701 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.214845284 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.215169326 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.218585468 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.216899364 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.207390398 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.248906217 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.206517998 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.444821628 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.204683538 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.224024375 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.247579542 seconds)
  done (took 83.350708695 seconds)
done (took 2430.133185753 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.196674067 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.182890344 seconds)
  done (took 13.485100413 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.128584213 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.120225289 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.280962448 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.124697512 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.120880672 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.263019962 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.180940339 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.132016785 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.127914853 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.205470352 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.128604996 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.25176727 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.2338815 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.121239485 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.156188862 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.134943914 seconds)
  done (took 39.845959926 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.248692862 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.667160024 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 3.086109229 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.926756808 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.155439624 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 1.966767292 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.47056418 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 5.845254417 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.433172912 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.570660374 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.393272881 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 5.029162248 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 6.050364793 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.301650801 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.651730661 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.708692458 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.805746501 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.860482905 seconds)
  done (took 61.281770032 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.121002754 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.284748362 seconds)
  done (took 8.541670432 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.139000671 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.12048105 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.137329592 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.126480023 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.149822093 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.141364656 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.1234024 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.162495808 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.141775842 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.137167304 seconds)
  done (took 62.507755258 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 6.282586047 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.585165419 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.429814322 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.578856772 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.72759451 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.61142222 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.297835077 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.555379762 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.229191263 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.110015243 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 5.349746543 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.500012031 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.982828188 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.39955321 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.755770313 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.364646095 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.8389623 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.569408751 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.449410711 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.538435138 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.401135751 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 5.257910576 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.547472709 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.046602912 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.145676838 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.744139153 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.329825545 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.266646532 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.201658048 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.292925249 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 5.447937934 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.136997895 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 5.445933576 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.132070879 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.31622027 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.68467987 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.793186167 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.329427473 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.610922946 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.485842637 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.496355431 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.794537419 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.197110086 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.795665729 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.280035299 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.500400686 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.216537985 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.353645032 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.214950859 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.246985222 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.708516878 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.30865679 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.277322913 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.232091404 seconds)
  done (took 155.533902786 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.109024137 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.451699522 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.268320053 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.118392202 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.5732821 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.332037224 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 4.926353253 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.683350274 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.145266359 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.337464391 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.292460992 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.264646436 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.116330328 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.123365955 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.124326365 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.117559219 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.31246766 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.702348667 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.127133896 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.117156246 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.340657704 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.366890353 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.249107394 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.119223642 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.286707043 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.36796717 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.523675413 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.258649205 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.512185496 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.138409246 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.562132199 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.133152703 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.128311086 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.084060144 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.50666675 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.459272992 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.5578479 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.120458682 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.855865887 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.117605067 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.742719865 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.326782631 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.434216705 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.275269094 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.278162806 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.350865879 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.716426289 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.123189885 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.895778586 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.299453145 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.377434272 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.341811735 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.400441027 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.124923082 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.628008249 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.127560331 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.118658144 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.378397271 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.272729341 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.246410773 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.119228561 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.121213932 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.118131116 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.371439018 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.122218935 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.234302237 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.120223533 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.131242696 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.237555128 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.24996215 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.26876454 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.36955374 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.378883829 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.040884048 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 3.464066932 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.358333879 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.542478054 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.358404033 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.116072766 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.125374261 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.514322245 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.559097234 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.280384153 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.367705708 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.433356702 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.430535697 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.690690913 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.118448118 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.356971241 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.28630022 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.347292713 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.279239665 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.482068011 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.019280715 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.122613821 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.116567823 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.135994651 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.26699714 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.114738631 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.642955283 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.389046482 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.057619293 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.296340943 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.638358326 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.226352652 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.121550763 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.685742305 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.110844801 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.337313248 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.423600061 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.121763686 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.121805366 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.287974927 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 1.845723332 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.115675842 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.549471051 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.500251459 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.128281621 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.288100805 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.112997534 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.373480549 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.994603168 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.357787388 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.937089473 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.402688158 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.309936242 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.277521168 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.114240263 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.474144157 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.398706606 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.522539843 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.450486778 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.130283375 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.124051969 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.488649158 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.120907779 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.117028521 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.302099133 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.124324635 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.301617089 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.117613346 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.381486826 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.290906817 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.498196589 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.11614897 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.384410906 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.369496652 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.491638341 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.120176863 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.255852371 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.121423737 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.093652073 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.290721971 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.116639012 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.122341944 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 4.96961869 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.126773986 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.282583095 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.355518074 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.808534829 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.493026977 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.472352511 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.120571331 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.575726785 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.312059607 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.4920105 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.675469639 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.292686288 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 5.861396602 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 5.346096634 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.126012618 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.368533377 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.42368249 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.120260534 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.119536103 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.82831654 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.235794949 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.124691605 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.286762433 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.358061981 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.549037904 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.328792027 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.124385685 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.492100318 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.112791071 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.321509593 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.626520966 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.454842971 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.119921351 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.123029155 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.126274118 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.116404222 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.339156668 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.371406834 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.936497327 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.279000629 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.414003158 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.345665119 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.44067133 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.595769026 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.132085147 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.446722359 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.124834653 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.521773834 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.11967564 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.286293326 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.373344861 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.123516417 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.342198532 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.482449733 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.323500578 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.51950459 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.120060265 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.119619243 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 5.694738354 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.29427414 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.54256799 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.120232874 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.222578406 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.489806788 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.24225365 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.373750584 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.35873511 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.13242363 seconds)
  done (took 730.28245919 seconds)
done (took 1072.597231282 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.112454572 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.117653498 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.124506681 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.124515405 seconds)
  done (took 25.594131238 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.091560798 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.198131538 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.307580305 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.123224498 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.47708211 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.182699957 seconds)
  done (took 11.501107235 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.118221316 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.127090554 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.120866834 seconds)
  done (took 19.473960102 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.421316565 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.565623001 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.293954116 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.220492486 seconds)
  done (took 6.617925884 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.151114902 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.154651003 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.129781393 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.149336864 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.131278592 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.121864806 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.163325613 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.142484032 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.128858779 seconds)
  done (took 11.390701409 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.868200663 seconds)
done (took 80.561158971 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.470915418 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.418281942 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.286795814 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.315658326 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.268795696 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.452162263 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.237898047 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.144789643 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.464267534 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.606052547 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.660793046 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.250575619 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.558253572 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.554868896 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.362062302 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.154109212 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.133367508 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.190063969 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.808270555 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.317194627 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 6.125064621 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.260161268 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 6.111291493 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.147792178 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.065846367 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.243073081 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.373318496 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 6.928510208 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 2.288763153 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.150924265 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.198603812 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.611473875 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.251266384 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.468843872 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.21733559 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 1.979721783 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.557836078 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.263414581 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.253167908 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.573520288 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.430268539 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.250421111 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.117735601 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.28634393 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.489410338 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.144067097 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.106996519 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.279365166 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.688044751 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.312719339 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.505740578 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.132304012 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.683245329 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.195055391 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.211805482 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.111252944 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.050369438 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.625071659 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.284277008 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.441381277 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.139861769 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.261405648 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.01849384 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.156105713 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.292032951 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 1.428584914 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.53649976 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.217402553 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.739480591 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.151540467 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.130577145 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.154627823 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.851481249 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.291583932 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.11777277 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.277739416 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.381608631 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.216633284 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.119524868 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.332127139 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 1.348544014 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.117748979 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.261425739 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.481605433 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.282996007 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.550929639 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.638554284 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.57735876 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.570205726 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 6.966026572 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.722985903 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 7.00235451 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 6.224470196 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.130039836 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 7.539417683 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 6.223998635 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 3.45681531 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.648519511 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.268493533 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.719353815 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.151751316 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.144883867 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.564911681 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.423943726 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.956861537 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.161416791 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.280608125 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.118287697 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.423674511 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 6.879253456 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 6.219069791 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.694318655 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.131737716 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.309513513 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.669259643 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.129133033 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.472799164 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.552922288 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.195632403 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.125341866 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.427195543 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.12530086 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.254588892 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.682465729 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.496792453 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.349847052 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.123401342 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 3.438819691 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.123863656 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.324248133 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.124423903 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.705730492 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.662346773 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.16262846 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.373163436 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.255391182 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.111672262 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.407022279 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.304205299 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.256724163 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.433998071 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.422207828 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.250162696 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.120858744 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.442052698 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 6.124660273 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.334057938 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.439289325 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.290298782 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.44299598 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.212765433 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.145909276 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.045843659 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.532769576 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.716596121 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.728829921 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.361944451 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.34466519 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.652047887 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.382679572 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.930905809 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.22490066 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.267502167 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.130982864 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.139462187 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.190348008 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.115107265 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.119677695 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.427804296 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.427320868 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.664883853 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 1.931082297 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 6.125051839 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.382895719 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.282194271 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 2.001561408 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.718623019 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.137912018 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.440330877 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.639993873 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.272562849 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.157451657 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.113270657 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.178884827 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.862862812 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.16617503 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.426857996 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.737466458 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.492908672 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.537892985 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.309634216 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.162392757 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.469469455 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.383914177 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.377218385 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.35692538 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.547966108 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.247561235 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.433413973 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.18998495 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.373442181 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.128330329 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 3.233038324 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.343515357 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.616106644 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.49849842 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.335596225 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.291741769 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.465768422 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.121375885 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.31775575 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 6.221777406 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.536514404 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.153988927 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.301116145 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.220164907 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.525287275 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.022562535 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.238976897 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.492054277 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.231413375 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.221027419 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.625194442 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.147288914 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.42299139 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.292438472 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.266019468 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.374037465 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.157883958 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.252148662 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.302302979 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.261793705 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.356184009 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 1.944003015 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.56176243 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.648158832 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 1.258541277 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.110635088 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.579074876 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.146021786 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.140917567 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.402073125 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.312293268 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.446191115 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.236580712 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.291841849 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.162077133 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.146159528 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.557040559 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 1.954225663 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.706236291 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.274030489 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.149865013 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.117336937 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.621874851 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.492030225 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.281431075 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.267630035 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.715480081 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.154337101 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.308570552 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.124663678 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.129389249 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.981791785 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.372367721 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.395936864 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.682705368 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.13003104 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 3.354353083 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.217890251 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.538374897 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.669983573 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.183038931 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.249604846 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.377856347 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.213515438 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.512317016 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.148267229 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.27907119 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.492317559 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.249352041 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.232871238 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.123212934 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.159291783 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.693705625 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.423649274 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.607686625 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.154716168 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.590595876 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 7.16419921 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 1.345258008 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.142185022 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.212025422 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.516309689 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.272115221 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.51448144 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.124997365 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.284565886 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.378875617 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.147889608 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.110738475 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.261115296 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 7.678512233 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.505234606 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 1.431188214 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.226485809 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.075614415 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.363623977 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.127464314 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.744410426 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.255982819 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.224068273 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.716597067 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.622547277 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.135487262 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.337270977 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.124569094 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.473642509 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.150125476 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.144389397 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.277519228 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.213453561 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.116834171 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 3.714045465 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.28602477 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.615898005 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.206091262 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 1.994437301 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 7.185186457 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 1.298247833 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.246433745 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.518033973 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 5.917261991 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.136639578 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.269647371 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.795703568 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.263833788 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.162230552 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.395048774 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.13151933 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.735172575 seconds)
  done (took 874.127048394 seconds)
done (took 875.40752247 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.378865561 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.495275846 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.367383253 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.089514707 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.926887954 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.772394377 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.382022572 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.353793857 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.202151817 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.380319579 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.047109597 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.926966568 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.228338514 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.235317169 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.2139565 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.254537448 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.332941624 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.364940311 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.242009515 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.220290183 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.490580371 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.223915866 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.550953782 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.420157406 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.498058865 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.23011759 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.380193264 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.476715181 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.478877702 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.315011604 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.338453391 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.353327098 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.956213265 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.36954107 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.215334839 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.208851854 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.004437883 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.223764832 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.324544224 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.204689151 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.50428289 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.246772007 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.844335347 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.087887005 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.90410571 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.544597594 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 1.998920769 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.228423505 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.260796178 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.330939982 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.31709469 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.321412543 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.4825716 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.330724782 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 1.958976339 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.086352237 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.478829936 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.017143452 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.860802178 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.331253939 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.496379384 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.222939954 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.327335182 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.363240378 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.251887592 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.430202373 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.545875954 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.318376152 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.351442109 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.392198257 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.367466927 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.353607394 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.23554198 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.276186243 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.257121873 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.383352113 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 1.996458027 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.368872234 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 1.914900619 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.232307724 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.090688897 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 1.977456134 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.080641018 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.203179573 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.376103301 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.897628518 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 1.966777755 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.085884567 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.245615336 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.350777046 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.016750468 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.369608782 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.582338351 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.370979091 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.377361301 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.375315816 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 1.969679395 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.316317792 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.218424896 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.351128992 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.909910266 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.377644258 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.149662205 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.2240119 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.227849472 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.329853934 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.372239094 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.54562816 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.355333834 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.296446726 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.503746629 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.257666364 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.351704848 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.241301114 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.199310176 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.903393572 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.414182571 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.014912684 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.316196848 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.799987384 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.405118819 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.224130317 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.505159695 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.42300992 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.37619471 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.212633443 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.229722447 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.078431462 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.228856408 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.22717618 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.306650157 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.583133227 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.334560376 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.088832679 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.353684642 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.92294209 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.363905277 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.360515755 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.196014602 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.00660571 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.219329764 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.191866887 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.424079856 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.509946902 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.369813801 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.422332701 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.236130268 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.422291544 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.319025418 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.239138961 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.34809258 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.24777025 seconds)
done (took 248.423422093 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.48320344 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 5.263381629 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.416583657 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.405153008 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.513669069 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.502596694 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.191816644 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.560420593 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.239392243 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.548563213 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.377324053 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 3.022631733 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 5.31964727 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.339751975 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.483942755 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.367566791 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.239011705 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.393005375 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.586861428 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.485516915 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.925935659 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.395305177 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.260960898 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.548639011 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.120719194 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.925822857 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.488667808 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.256405135 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.396153169 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.903278767 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.942673958 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.395230683 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.48289776 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 4.853377939 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 3.636387762 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.869489034 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.516159676 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 3.007755221 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.474964711 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.475385624 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.420423693 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 6.034462293 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.918700353 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.943518986 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.28908666 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.47480452 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.198134441 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 5.0662415 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.12675399 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.868103443 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.394983484 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.934208871 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 3.04409462 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.458091395 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.349234549 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 4.806941905 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.608987745 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.625335815 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.486607932 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.429756842 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.481175771 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.567877559 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.542888212 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.313773245 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.932683833 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.413691801 seconds)
  done (took 149.458639614 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.520279043 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.456805632 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.560596001 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.584492123 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.710722746 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.564020941 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.66613197 seconds)
  done (took 14.181480781 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.186676155 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.185903901 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.421672855 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.375420343 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.179587536 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.302386978 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.258719417 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.914353269 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.399677349 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.216220642 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.48573831 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.420783317 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.831752277 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.91645815 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.266532179 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.416884167 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.154277747 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.242862133 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.236419808 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.431454008 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.914699208 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.889650058 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.371106955 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.260252403 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.182445462 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.212919842 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.177148868 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.144138133 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.216583211 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.155240445 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.188169956 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.287633609 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.168171764 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.890473505 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.201665799 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.500193417 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.176578868 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.222993501 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.310026161 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.120676961 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.167920065 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.175046223 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.310235019 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.183074767 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.155440962 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.36296996 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.158663156 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.188841369 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.150514648 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.172294915 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.361297351 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.183860165 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.19372029 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.846611141 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.38553829 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.889100291 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.248505419 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.174347079 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.165530076 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.235436873 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.173484794 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.436587029 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.387038319 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.158156193 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.390854982 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.46040233 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.177723574 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.149170452 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.157769241 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.413159976 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.169739552 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.420543317 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.178149826 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.226995417 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.21848857 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.309570415 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.368470705 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 1.976002995 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.942212155 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.841831694 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.147784597 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.167052007 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.48528051 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.114314414 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.849702385 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.165825412 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.220065541 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.836361727 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.08332456 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.181998292 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.478686124 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.159944572 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.23574678 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.219842475 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.202746212 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.230029901 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.401121435 seconds)
  done (took 154.178374104 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.359855407 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.742682818 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.391618466 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.200697763 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.308979505 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.476347582 seconds)
  done (took 15.594171156 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.481671456 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.969491226 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.194717488 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.1840484 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.236055437 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.166790213 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.172443239 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.332099981 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.293508447 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.179828072 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.170849129 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.193343168 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.170043763 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.312954705 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.165864227 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.186573456 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.164664265 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.194124213 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.174551216 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.243565036 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.478237728 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.231823704 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.239074946 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.065717539 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.211652853 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.182358991 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.119573084 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.178516129 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.184189973 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.516455414 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.366870212 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.165017478 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.019921035 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.488347989 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.931819585 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.161928106 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.307292953 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.192589783 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.23595469 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.168626501 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.1944607 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.234371757 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.204220981 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.188830261 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.510013493 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.977679674 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.24526614 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.437341556 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.179147892 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.191269119 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.195003665 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.187956682 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.176220206 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.190046947 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.68588634 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.585049882 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.131300941 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.176129116 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.223640055 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.072930867 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.242103775 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.173268045 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.490439944 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.108055423 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.860956751 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.203350545 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.065404005 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.29506108 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.241011738 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.200557923 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.198013878 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.195861374 seconds)
  done (took 119.063984605 seconds)
done (took 453.595518979 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.52751445 seconds)
  done (took 7.644580943 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.2258678 seconds)
  done (took 7.512812117 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.11956187 seconds)
  done (took 7.241434332 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.126343304 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.165936828 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.140347943 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.135295031 seconds)
  done (took 25.73051693 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.272281373 seconds)
  done (took 7.3935143 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.119013349 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.141723828 seconds)
  done (took 13.47673588 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.315417509 seconds)
  done (took 7.448946883 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.476304823 seconds)
  done (took 7.607034193 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.124300865 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.148962473 seconds)
  done (took 13.420140588 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.115748458 seconds)
  done (took 7.236526448 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.583982313 seconds)
  done (took 8.799035112 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.125895164 seconds)
  done (took 7.280267378 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.196299634 seconds)
  done (took 7.322559034 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.161088796 seconds)
  done (took 7.287400168 seconds)
done (took 136.513629891 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.123393775 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.128373562 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.121880653 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.120425664 seconds)
  done (took 25.603643369 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.449231952 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.454610027 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.433419535 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.507490308 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.400053363 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.395643348 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.454212516 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.458741282 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.393144464 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.514201843 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.457731516 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.599388458 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.514427222 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.441878289 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.42745424 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.500997145 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.50696589 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.455168628 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.40065998 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.432815359 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.495401345 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.505058189 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.875104989 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.875960809 seconds)
  done (took 37.076021271 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.340084559 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.487799211 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.30048836 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.450408876 seconds)
  done (took 6.696918091 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.16132195 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.503616544 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.487593616 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.547437753 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.48407631 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.299572897 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.481488659 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.340767817 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.283602891 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.262446068 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.735561672 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.285948682 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.289386699 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.44698475 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.294770009 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.136723738 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.128804616 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.307151848 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.506760405 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.328836504 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.39899279 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.482688087 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.490046628 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.487906062 seconds)
  done (took 34.285233297 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.898153494 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.062912926 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.492491875 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.054674713 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.83469703 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 1.92641555 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.40903454 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.629141131 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.401924974 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.376820501 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.855478082 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 1.883554263 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.277615873 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.019553065 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.89013691 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.309344573 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.301340758 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 1.988952847 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.544226942 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.43100831 seconds)
  done (took 38.699552917 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.112018221 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.384496346 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.375060852 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.291833993 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.121607309 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 6.127924967 seconds)
  done (took 26.535129002 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.180049113 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.274171709 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.452015469 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.408403083 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.27910258 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.268227614 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.780295043 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.339103488 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.882709999 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.986860847 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.860867577 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.596353554 seconds)
  done (took 22.426761325 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.119767254 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.159916764 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.121692154 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.351799874 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.44823646 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 3.887414295 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 3.138960839 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.123796173 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.646214326 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.384859047 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 3.264196566 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.364200538 seconds)
  done (took 45.145320158 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.333300491 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.314509397 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.45985241 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.175255405 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.651156007 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.210738612 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.540357127 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.089385382 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.957011453 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.990383041 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.647415504 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.180184599 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.660283388 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.099803298 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.868429196 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.428781985 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.949956354 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.618672707 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.571929255 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.195750942 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.088399809 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.279735789 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.124532022 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.663351571 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.443164864 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.125662443 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.32103707 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.369503997 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.120074002 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.369317917 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.153863259 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.602862077 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.312735317 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.431221257 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.649910114 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.210930236 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.226005275 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.814049544 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.702545674 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.423854103 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.263535984 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.285923965 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.117124248 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.127064384 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.380673547 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.904200088 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.13362866 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.761053556 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.102478825 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.246046755 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.023735035 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.787238835 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.576658507 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.098912249 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.27211489 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.422922427 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.279049779 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.119554021 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.377473891 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.162226524 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.322176192 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.226496334 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.340009536 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.094330491 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.343929986 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.46936004 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.441219351 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.463759447 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.400126679 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.421608422 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.504758166 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.250545378 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.955633586 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.267986092 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.670219169 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.034543864 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.481124182 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.122269836 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.828432105 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.660359786 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.104434055 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.250118513 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.746433512 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.089945692 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.119839444 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.300538724 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.991121291 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.097306763 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.216104348 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.170249887 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.506352379 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.26652029 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.273557482 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.316693361 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.824677867 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.103191809 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.121938869 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.414874178 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.09403523 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.683721088 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.119857986 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.110923734 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.126017951 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.683859124 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.537672648 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.920306992 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.86271749 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.778755595 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.429282375 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.729326045 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.294653455 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.961841426 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.499740417 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.453185562 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.119106974 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.87627963 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.127660566 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.239942065 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.486571957 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.125610066 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.100313109 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.532932768 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.314165512 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.12123854 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.380154708 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.122234569 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.277006294 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.127276433 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.905205526 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.097775867 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.373210681 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.635885334 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.222591186 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.199652511 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.092725631 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.264567346 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.635581015 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.206883596 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.45479243 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.558833519 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.352916551 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.574526796 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.116699561 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.993134131 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.596798674 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.387375014 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.467049865 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.774057453 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.298052531 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.212422838 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.121060258 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.297641946 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.135182991 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.689855441 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.122363777 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.796089104 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.83373918 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.418874042 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.118751618 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.281440944 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.086943385 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.361829029 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.795121306 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.178136488 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.294210782 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.422591407 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.318838793 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.122729335 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.096151126 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.498453436 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.377508699 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.643678896 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.375260694 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.792214622 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.488254135 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.608220671 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.320284132 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.491643121 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.859921096 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.347740005 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.469896423 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.514129642 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.141495139 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.147259207 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.202871301 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.540276359 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.350997203 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.91035175 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.433131039 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.379140478 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.166838714 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.132395865 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.099782681 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.276900323 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.60836311 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.152586559 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.685482649 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.214356446 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.338443598 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.365638261 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.156617711 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.464396435 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.976517526 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.537707492 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.481136461 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.455270354 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.09587504 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.331840451 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.575785581 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.62180574 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.25749381 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.37410915 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.122362565 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.174531264 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.120979444 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.474424521 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.058054586 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.790115891 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.377409441 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.971204759 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.026431006 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.285186819 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.513192116 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.131924986 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.096335424 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.266015562 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.159979539 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.766893364 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.664497108 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.378549915 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.449827233 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.11707498 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.122756839 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.40692967 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.43363404 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.40045297 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.649024143 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.373535722 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.818056753 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.223001427 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.789121886 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.288709688 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.154901803 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.698898182 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.437136075 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.069407245 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.31070556 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.782726017 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.243347365 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 4.81649252 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.416278953 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.121524531 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.602029401 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.735777504 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.129346834 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.094664109 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.273251861 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.120558906 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.338376786 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.016880873 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.37288763 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.297186574 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.408761747 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.36435028 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.313744388 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.538768711 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.643900692 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.915265089 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.101193084 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.292425875 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.24506601 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.431913608 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.120734136 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.410096633 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.821509945 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.786906121 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 1.906561075 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.67222984 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.350029609 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.78175421 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.596995147 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.375940817 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.421620962 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.087876175 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.743761872 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.11004603 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.264191181 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.099114282 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.957495624 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.448931959 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.496150006 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.60344626 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.190933904 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.647026513 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.505634624 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.185479968 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.304936275 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.381203726 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.140371317 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.356757289 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.123080878 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.520979983 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.552644529 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.130137125 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.443304195 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.314891912 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.459514858 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.289792208 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.865588159 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.155890957 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.264719385 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.565725051 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.302573349 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.257137388 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.468138469 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.979138072 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.162418235 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.148684037 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.634210348 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.764909328 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.598124199 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.729841621 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.727401827 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.484181913 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.861085044 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.121329638 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.32848452 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.28831207 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.120526227 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.31844473 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.529428382 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.154646824 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.334584429 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.462322254 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.292434188 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.681457793 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.112626099 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.777161393 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.25109633 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.628518463 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.677161622 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.894768596 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.615186333 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.155709687 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.613127004 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.13130361 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.284479054 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.380124378 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.845783188 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.203197019 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.968678676 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.917375827 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.28451814 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.558441056 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.205218319 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.886018091 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.29665677 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.361624748 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.313668012 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.269217114 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.092418977 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.720784955 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.889605164 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.403290246 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.28914695 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.310069117 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.268626367 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.291523272 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.644764549 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.43589047 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.861334068 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.597347983 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.365393776 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.088745815 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.122881963 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.830491044 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.311021779 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.217610023 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.421501816 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.57118661 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.190367856 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.125901224 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.142945815 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.400796273 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 2.916211242 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.846421908 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.468143565 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.665247332 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.720641093 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.126512058 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.863148663 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.325542259 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.492089836 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.540878947 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.027458895 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.506306265 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.434139261 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.280898093 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.095220046 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.314044489 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.126306651 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.214048647 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.817556181 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.422203219 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.184368201 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.959069994 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.76442903 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.127098904 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.146622403 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.54574198 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.349701395 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.31467783 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.124072322 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.722256018 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.5395007 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.272808382 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.111272168 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.889542825 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.090919847 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.32273228 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.120030632 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.314219169 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.958773167 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.204416755 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.788891086 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.666370952 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.207812352 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.28978942 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.094997221 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.9542599 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.144188559 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.806962965 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 1.912117612 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.372280561 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.644995947 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.31053841 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.132486801 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.460074996 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.25964039 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.4598323 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.831673132 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.601875881 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.555630165 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.495319037 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.420465995 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.57323277 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.274213988 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.375042558 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.089135977 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.123810792 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.137658047 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.503708074 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.479104548 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.128306147 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.665219758 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.374265004 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.255200268 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.298423498 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.225019321 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.692993545 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.340092652 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.24715679 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.291808675 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.365990418 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.485978409 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.125081987 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.331893744 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.123189455 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.155472762 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.3227413 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.368089792 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.506136731 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.431663435 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 1.723950499 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.285686896 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.581814525 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.093667681 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.660097941 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.125569968 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 4.007518039 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.467999151 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.121839046 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.605509771 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.770475153 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.314936471 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.822044392 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.203723481 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.143322131 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.276740387 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.639037119 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.134471448 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.768638132 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.521379003 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.115322802 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.599736932 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.200470779 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.29462299 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.90605753 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.620458204 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.122436404 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.955701454 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.241990369 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.622131169 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.77212519 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.185771494 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.13014489 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.926573049 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.106626801 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.121820396 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.196793323 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.658233966 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.1275402 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.693371359 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.265163756 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.283930647 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.131192886 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.262815438 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.12679033 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.32966369 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 1.719753514 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.370557158 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.402202105 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.311812971 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.126657943 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.723789445 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.822576999 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.224756968 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.311767029 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.114293281 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.468054535 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.98873381 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.128032178 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.680621372 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.315809517 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.339591444 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.559110609 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.375795 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.159697568 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.327918468 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.119307133 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.486664962 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.283009993 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.679741894 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.38306551 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.354258531 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.215106362 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.13900157 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.668413776 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.592489409 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.021872637 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.127034826 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.433937699 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.125632421 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.960258612 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.761997435 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.318140227 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.257915837 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.128692566 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.718875564 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.429370489 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.25734334 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.128567073 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.334528448 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.637221373 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.097302225 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.957920392 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.008605399 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.331740192 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.446774397 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.096050438 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.319560154 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.134569373 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.103289682 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.628367815 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.122207444 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.504656852 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.091963783 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.679037415 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.134777731 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.209996287 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.285319089 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.464062301 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.121175857 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.115572237 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.298649844 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.126183562 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.122220998 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.507862922 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.208425879 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.369430722 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.594772366 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.378032921 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.463697639 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.030690759 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.956781108 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.137471371 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.43778177 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.950286083 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.6816538 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.202830356 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.643031383 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.959683113 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.138036985 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.665044113 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.370827371 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.863010407 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.269181622 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.618374361 seconds)
  done (took 1953.877098723 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.20150507 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.1967504 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.220683124 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.216521377 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.273567182 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.27603174 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.197844521 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.153539807 seconds)
  done (took 50.859789023 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.120470838 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.116013162 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.563311781 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.303912907 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.152069381 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.332136457 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.28378579 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.626907425 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.325581171 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.15825883 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.183082719 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.173357762 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.128806967 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.151301967 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 6.011504212 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.215178724 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.124113375 seconds)
  done (took 91.102564206 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.152674334 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.537085687 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.145201131 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.018819404 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.150967999 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.509804867 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.134577457 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.129657913 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.443166885 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.781255253 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.184888834 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.259610114 seconds)
  done (took 81.603300129 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.157875701 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.157143397 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.161076076 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.153976234 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.160993851 seconds)
  done (took 6.911321575 seconds)
done (took 2421.968598287 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.351739206 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.542818792 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.645178537 seconds)
  done (took 4.302941967 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.192594448 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.259122824 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.327997965 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.26564635 seconds)
  done (took 6.183803368 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.406371966 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.609773871 seconds)
  done (took 4.135233048 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.52614979 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.136774751 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.659105054 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.116859691 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.12570728 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.133874392 seconds)
  done (took 19.512339599 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.149255415 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.152078567 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.149294946 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.153259154 seconds)
  done (took 5.728517039 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.123020644 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.161519548 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.12980598 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.104833864 seconds)
  done (took 18.632949236 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.407336347 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.210071328 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.898951561 seconds)
  done (took 5.646419312 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.934938516 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.504952709 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.931683686 seconds)
  done (took 6.497484062 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.411409456 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.053330594 seconds)
  done (took 5.584558729 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.285327345 seconds)
  done (took 2.406916523 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.609683608 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.609684823 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.990162391 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 1.996915665 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.152302088 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.436040936 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.470445128 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.396622868 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.826958204 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.719435577 seconds)
  done (took 18.325518078 seconds)
done (took 108.753371412 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.113332049 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.535106312 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.298124897 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.820059662 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.222943795 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.294233273 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.72924883 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.62033207 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.420378812 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.425113447 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.316808338 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.217006269 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.146166425 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.527763161 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.14418269 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.467319143 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.282404706 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.138417984 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.145989411 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 3.366713988 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.744325975 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.716814059 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.045412503 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.717151342 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.287525933 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.266431527 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.010828938 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.47249405 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.382218518 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.018248095 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.280126324 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 3.591566745 seconds)
  done (took 152.888675146 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.119643577 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.134301448 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.135227372 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.129509953 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.165957133 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.134514832 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.126140247 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.125422993 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 4.840512864 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 4.821220133 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.128417843 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.173663444 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.130214114 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.128941879 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.134535083 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.122548889 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 4.950105292 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.12680576 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.13346056 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.134246437 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.132451573 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 4.968592802 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.129273916 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 4.962382672 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 4.923269009 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.12933686 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.123076054 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.137545843 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.134309758 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.127779572 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.129890336 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.130626872 seconds)
  done (took 188.056103056 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.12197317 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.133284834 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.127397896 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.125749226 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.134218286 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.13682909 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.12532903 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.129205985 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.133664917 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.128495686 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.130830807 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.131217321 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.14086469 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.122798479 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.130280845 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.130228131 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.135595461 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.12851858 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.129027005 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.135058956 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.127855507 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.127078001 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.133484083 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.133465536 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.12811644 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.134761934 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.129899262 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.129674417 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.132210684 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.130374765 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.136686399 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.124318611 seconds)
  done (took 197.307435081 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.430551019 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.160066887 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.078282695 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 1.697987323 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.023486565 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.155240725 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 1.694427972 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.437441124 seconds)
  done (took 13.802937713 seconds)
done (took 553.183871358 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.819576404 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.06136569 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.302485437 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.356262288 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.753518078 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.435685456 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.350708964 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.592571165 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.867177253 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.591422443 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.606568117 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.356102449 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 1.961571399 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.351766883 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.318499394 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.576593789 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.555557031 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.848003649 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.335447801 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 1.987975142 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.339499686 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 2.020989983 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.601884078 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.922970296 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.603605535 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.054631941 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.244166433 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.557323415 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.344523128 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.338553764 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.145065936 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.49255241 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.376506552 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.370361575 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.571901556 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.589701098 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.464617657 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.548804422 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.297437563 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.817525104 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.004979047 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.735946641 seconds)
  done (took 75.592947162 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.156364788 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.163800628 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.328631912 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.234292275 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.773600749 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.227992148 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.379114753 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.367229935 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.255814202 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.354424008 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.398048511 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.804699239 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.390097704 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.772479007 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.385943649 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.403744006 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.231972572 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.759295789 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.382840732 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.374615587 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.188676912 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.319312447 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.187760152 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.345027831 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.187427849 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.195676743 seconds)
  done (took 36.708495879 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.209559218 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.341166716 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.408041955 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.551211637 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.38210412 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.149515236 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.500159125 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.31363971 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 3.04176158 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.3084736 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.237362668 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.288315507 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.329932123 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.435626923 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.756119255 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.319524244 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.311175911 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.323097378 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.341282687 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.413480568 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.272627807 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.241510276 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.49078362 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.337483982 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.833349726 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.542753033 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.485624748 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.751518469 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.749785982 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.295340066 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.286072903 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.477519964 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.54441778 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.416263688 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.309229925 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.170167432 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.183459644 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.235593643 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.077769629 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.344010914 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.486505618 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.370352682 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.558974671 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.705709779 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.254953135 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.412586116 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.614090858 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.250831189 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.287821804 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.998350521 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.454764461 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 4.192474603 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.318977131 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.376227075 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.285773956 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.729361285 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.364388227 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.472737684 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.344128351 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.885459889 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.232045435 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.557936975 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.353356883 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.239900492 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.496743535 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.390727853 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.392428918 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.613418062 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.550560862 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.681339902 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.73466755 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.258095232 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.193451993 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.240751506 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.342296704 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.648116609 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.654570685 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.436768992 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.566211126 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.489383922 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.71622191 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.607569134 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.145399388 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.843437749 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.211289224 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.168380516 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.239556849 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.501317938 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.475628444 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.636379531 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.709947655 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.492645855 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.743529954 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.568442172 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.594465602 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.600436591 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.16100267 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.18382769 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.400856061 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.724834718 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.253255505 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.458912798 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.836599992 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.563603695 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.461435141 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.456798249 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.563058089 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.255665613 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.599411092 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.158602843 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.395253594 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.499725828 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.426358298 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.523667206 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.158275444 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.680513802 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.253936398 seconds)
  done (took 231.838684009 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.115310344 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.134017663 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.134877251 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.130641489 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.123772175 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.757230684 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.203486842 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.124476191 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.752950493 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.204795004 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.132946848 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.125275431 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.124715122 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.134588932 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.747714632 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.708566543 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 2.776984281 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.128324424 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.130105484 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.124617761 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 2.836074312 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.12727527 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.124480754 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.130032882 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.131787305 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.124730339 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.128428851 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.175795037 seconds)
  done (took 152.720801708 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.175816988 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.569267421 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.212601865 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.280170911 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.223415017 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.196228045 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.693119128 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.321434769 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.256526026 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.190784952 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.193728763 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.408084535 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.430664587 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.791240345 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.310325103 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.290200598 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.834480936 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.328566635 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.189444948 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.191551927 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.347200801 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.542599767 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.474838093 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.462126865 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.339854487 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.466863439 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.256920525 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.188155691 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.307424892 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.682800547 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.204056349 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.562807207 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.334735333 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.190601693 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.689143062 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.534577348 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.773743835 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.741972997 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.373291321 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.151385315 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.145686321 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.430916675 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.488698019 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.231570858 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.190525025 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.847733321 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.199061254 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.604014495 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.224136745 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.153151288 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.278962113 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.300114016 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.45253318 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.158741257 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.351371072 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.332224272 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.696758312 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.160949731 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.248550846 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.488661042 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.160659541 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.678695833 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.672151398 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.255625524 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.200466523 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.040813712 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.278858484 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.709630709 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.79721309 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.233322661 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.576140582 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.372033506 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.164180991 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.459852717 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.359219666 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.635262394 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.761681246 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.321016238 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.288586944 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.261544143 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.467130861 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.181361722 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.747659367 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.28437201 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.155411464 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.686165471 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.577914922 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.156715764 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.18289175 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.285543065 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.34442381 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.396742168 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.458281105 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.256354394 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.247485178 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.434895666 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.496615138 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.206755804 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.31291443 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.177620617 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.605085436 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.360624505 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.173076554 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.503804232 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.580982225 seconds)
  done (took 158.338492152 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.913853774 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.237680556 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.432351299 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.703631403 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.494001095 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 2.630338546 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.451367024 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.261620144 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.446234554 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.38849093 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.397858131 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.268899072 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.872156151 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.933817026 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.237102749 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.386713589 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.264538716 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.869263498 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.46506594 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.175531088 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.468589177 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 1.943359739 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.483263716 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.571822685 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.56662767 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.664119079 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.822453419 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.322803549 seconds)
  done (took 48.804449699 seconds)
done (took 705.118561817 seconds)
SAVING RESULT...
DONE!
