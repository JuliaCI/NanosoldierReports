cset: moving following pidspec: 4107289
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.941083145 seconds)
loading group "shootout"... done (took 0.894826626 seconds)
loading group "string"... done (took 0.254323934 seconds)
loading group "linalg"... done (took 3.428106999 seconds)
loading group "parallel"... done (took 0.023713346 seconds)
loading group "find"... done (took 1.324549155 seconds)
loading group "tuple"... done (took 0.773948484 seconds)
loading group "union"... done (took 3.419702338 seconds)
loading group "dates"... done (took 0.164063495 seconds)
loading group "micro"... done (took 0.06247338 seconds)
loading group "simd"... done (took 0.380092008 seconds)
loading group "io"... done (took 1.463542473 seconds)
loading group "random"... done (took 2.646564375 seconds)
loading group "problem"... done (took 1.256196376 seconds)
loading group "array"... done (took 4.967912267 seconds)
loading group "misc"... done (took 1.084645011 seconds)
loading group "scalar"... done (took 3.678181002 seconds)
loading group "sort"... done (took 0.328511648 seconds)
loading group "sparse"... done (took 3.81041756 seconds)
loading group "collection"... done (took 6.478939946 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.595831296 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.08225775 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.280190107 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.088521987 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.298350958 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.089146429 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.096251922 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.077423645 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.127507856 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.172969974 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.23049508 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.420880884 seconds)
done (took 5.381517663 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.273695456 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.034559457 seconds)
    (2/2) benchmarking "String"...
    done (took 0.133479219 seconds)
  done (took 0.849998374 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.146829558 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.017890878 seconds)
    (3/3) benchmarking "different"...
    done (took 0.025795468 seconds)
  done (took 0.862977081 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.023643678 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.104890542 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.024441385 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.025141474 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.025172132 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.024625436 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.024362058 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.024639826 seconds)
  done (took 0.929646681 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.030284722 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.025494341 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.023486409 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.02552504 seconds)
  done (took 0.780612685 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.023654498 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.088098905 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.022916937 seconds)
    (4/4) benchmarking "different"...
    done (took 0.023262082 seconds)
  done (took 0.829182754 seconds)
done (took 5.235605368 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.213787127 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.816425541 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 1.027068577 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.192505776 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.382179023 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.320340093 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.083272711 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.256420763 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.159138033 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.034997516 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.194115652 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.044563766 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.816515312 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.484333283 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.032101707 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.159028858 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.603201351 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.040625942 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.074329676 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.283976038 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.041979471 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.042418545 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.048728702 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.028991379 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.173687285 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.146311387 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.703436689 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.067705928 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.028873031 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.051207326 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.030967999 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.033994288 seconds)
  done (took 10.333751691 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.158409131 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.156774856 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.026668541 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.063719305 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.054068114 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.02768059 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.033951418 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.026358813 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.048667168 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.095334413 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.049441552 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.169671628 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.024276249 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.027265293 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.149028444 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.12561161 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.040223404 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.041436761 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.025412012 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.040762988 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.053563319 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.039855268 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.037032567 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.03657026 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.072969884 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.093244798 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.043890942 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.071670634 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.024362082 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.038294582 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.054724048 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.067080169 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.024883235 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.023650126 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.070816528 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.042932422 seconds)
  done (took 2.895105663 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.072839048 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.056479957 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.149135453 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.13992662 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.068556157 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.053248567 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.191345004 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.085789729 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.059995297 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.026850712 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.224130171 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.705833251 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.180893559 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.170092061 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.030002709 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.19413724 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.939812315 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.982550132 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.026217165 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.027018836 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.144195508 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.029465936 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.189121484 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.025432555 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.148329992 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.872514155 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.029521556 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.028465954 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.059446549 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.153638124 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.024600671 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.107025971 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.056229948 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.029113111 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.59430553 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.024934998 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.022797684 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.046451551 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.056449494 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.025010018 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.026528725 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.038075105 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.024118664 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.080358967 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.038842828 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.561669154 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.028806152 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.740196717 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.869326009 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.034249016 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.031295506 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.065060352 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.023511056 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.027115723 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.582295489 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.11540043 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.025655887 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.266871254 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.02624156 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.027046937 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.027628407 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.063620958 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.026993808 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.029014264 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.030726452 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.045381798 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.052890137 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.034449645 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.046152335 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.023785709 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.025583108 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.024141327 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.419241338 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.031064878 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.028702265 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.023652521 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.030320634 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.026418657 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.025789138 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.070486439 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.054182049 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.052107719 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.029316759 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.026577434 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.025627619 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.549271365 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.097492969 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.026024005 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.02756646 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.522334065 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.023079193 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.025364821 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.027882387 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.047244973 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.026178314 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.022560658 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.062150869 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.026982074 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.136613746 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.509664819 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.027247453 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.022988118 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.684241807 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.026941407 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.058790959 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.082917974 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.026879649 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.064416666 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.0265995 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.023543068 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.030959445 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.023507537 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.028253211 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.024091491 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.025739228 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.024041208 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.026247343 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.028225087 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.02639827 seconds)
  done (took 21.196137878 seconds)
done (took 36.175420295 seconds)
(4/20) benchmarking "parallel"...
done (took 0.83210018 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.231743684 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.055272068 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.022211954 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.176640299 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.048107557 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.145316518 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.19251673 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.137859577 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.049701444 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.049781023 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.049993104 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.195609147 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.208501069 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.050453923 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.130389247 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.207389207 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.051272134 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.022734825 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.050810616 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.050695447 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.051700703 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.022522635 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.049917561 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.050642548 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.129358614 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.051028963 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.022469078 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.13097739 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.051685062 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.13215624 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.05169144 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.050279673 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.051479441 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.129736027 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.053580242 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.131218426 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.023190108 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.052680458 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.052524274 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.053408221 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.053193157 seconds)
  done (took 4.33185362 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.050230141 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.043057928 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.046694571 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.020442142 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.032020193 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.044529332 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.020872055 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.044059874 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.048409988 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.043316376 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.043663529 seconds)
  done (took 1.274898529 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.043323935 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.044609054 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.046546724 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.020694763 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.033418317 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.044660537 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.020672195 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.043210636 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.047523905 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.044163201 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.044258688 seconds)
  done (took 1.21003837 seconds)
done (took 7.579202458 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.164498409 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.130515722 seconds)
  done (took 1.067084678 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.572213939 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.242910905 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.14039266 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.264824744 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.133142635 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.16570744 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.393475953 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.169021097 seconds)
  done (took 6.912850063 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.084158991 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.153509089 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.02716643 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.025961917 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.025911128 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.025926843 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.028127195 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.026717616 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.025592195 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.028748765 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.028416212 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.026160223 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.026796107 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.028015211 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.026160574 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.026910888 seconds)
  done (took 1.537642551 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.029812727 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.028642485 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.030476916 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.019593559 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.031416039 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.029754738 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.030832898 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.031879415 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.031118889 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.030045891 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.028292392 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.031334475 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.029879803 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.028807241 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.031074826 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.019240262 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.031256258 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.030648819 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.0331609 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.031481823 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.030242095 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.028186608 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.032732247 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.029265088 seconds)
  done (took 1.502029593 seconds)
done (took 11.802540336 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.151272181 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.033703363 seconds)
  done (took 0.973204512 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.134015005 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.136219256 seconds)
  done (took 1.064371065 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.029397953 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.017807918 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.035180043 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.027101249 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.01876173 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.018224523 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.034313477 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.018453457 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.018476515 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.018647539 seconds)
  done (took 1.036800635 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.019754353 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.025203591 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.023232948 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.021509697 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.023304265 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.019088032 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.021596059 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.020105831 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.02642519 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.019214485 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.023147578 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.041821167 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.022001538 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.042706154 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.021886825 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.022453366 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.024254876 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.021594671 seconds)
  done (took 1.233932491 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.017958368 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.018683954 seconds)
  done (took 0.829021229 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.021224355 seconds)
    (2/7) benchmarking "second"...
    done (took 0.018827909 seconds)
    (3/7) benchmarking "month"...
    done (took 0.021040704 seconds)
    (4/7) benchmarking "year"...
    done (took 0.020843227 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.018812501 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.018128082 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.018383403 seconds)
  done (took 0.926377159 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.412012389 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.091618907 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.327660121 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.025955302 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.039381046 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.240872026 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.024378736 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.028729164 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.028378464 seconds)
  done (took 2.007815282 seconds)
done (took 8.862841626 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.043162282 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.155433557 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.16348043 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.520455514 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.039418636 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.026891261 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.055486352 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.247229926 seconds)
done (took 2.093315915 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.508278769 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.423937494 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.221795905 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.028623093 seconds)
  done (took 2.504526876 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.343496989 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.154882563 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.034860363 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.026014048 seconds)
  done (took 1.402594898 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.024135759 seconds)
    (2/2) benchmarking "read"...
    done (took 0.031798256 seconds)
  done (took 0.887367271 seconds)
done (took 6.15143998 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.032416286 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.019874005 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.027075398 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.020921335 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.019809888 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.018848868 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.019250692 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.020715884 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.018624577 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.020826909 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.020711215 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021567483 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.021009915 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.0206662 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.019978816 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.02070122 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.018862645 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.020872424 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.021577662 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.021698401 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.019776781 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.021082734 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.019951422 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.020559723 seconds)
  done (took 1.330592804 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.038653655 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.023667835 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.024443855 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.025544872 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.026617443 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.025878961 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.026168041 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.025109578 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.026030836 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.024714834 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.026609645 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.026348449 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.023851424 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.024613391 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.022497787 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.024866175 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.024554283 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.023191233 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.024280674 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.027035364 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.026119116 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.024160144 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.024697504 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.023991508 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.024384506 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.025046017 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.023668417 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.023666948 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.025240021 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.025552336 seconds)
  done (took 1.582338161 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.02363546 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.016599207 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.017092509 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.030196421 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.01799583 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.018548062 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.018679966 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.016640198 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.017362066 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.018421757 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.017608357 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.017127209 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.017864145 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.016758616 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.017449919 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.018589404 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.024664392 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.043488762 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.01821822 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.018325014 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.023604563 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.017034704 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.016611608 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.016297773 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.017470992 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.016630434 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.017154845 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.017709294 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.016919231 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.017871222 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.017800535 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.022813553 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.024468034 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.017738918 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.030595562 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.024575061 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.018677129 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.024319718 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.01862388 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.017989739 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.01768432 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.017910266 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.017414496 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.016823333 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.028423947 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.017789755 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.018159694 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.017500768 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.017177852 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.016481129 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.017276567 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.019442465 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.025037078 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.019397948 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.018110166 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.019563137 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.017385282 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.017690689 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.01697051 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.017104799 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.017747399 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.023048173 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.019801533 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.018950766 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.040867604 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.019323854 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.02945774 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.017278988 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.018293158 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.023346591 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.018804036 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.041050795 seconds)
  done (took 2.291242778 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.028702763 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.027941548 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.036931434 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.027916163 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.021001066 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.01895489 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.022376274 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018995731 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.028490029 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.021614478 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.017633692 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.0219208 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.028106873 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.021778794 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.019517165 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.028762308 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.022387104 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.021935086 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.019284384 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.023004466 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.019611181 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.021138008 seconds)
  done (took 1.342590635 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.105949156 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.023970814 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.072518578 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.027738289 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.02549612 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.027973856 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.023890011 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.023760018 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.023930367 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.025762611 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.024926489 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.025826972 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.028087441 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.026293784 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.0244979 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.024457306 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.025884668 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.02609403 seconds)
  done (took 1.404543095 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.034919245 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.023489042 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.056358221 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.024948928 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.023996794 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.022659107 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.028007564 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.027229062 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.023108151 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.024056007 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.028136507 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.025260862 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.025245192 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.025524495 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.022953823 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.023186201 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.024031962 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.025481113 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.02928778 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.027492257 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.026834215 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.027567217 seconds)
  done (took 1.412426609 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.039157016 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.023787658 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.039915229 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.024573321 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.017570255 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.017274334 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.024424424 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.02329322 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.025279831 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.02318093 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.024917171 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.018692924 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.026646989 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.022917069 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.025036272 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.02373016 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.02430992 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.024813875 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.024010634 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.01727924 seconds)
  done (took 1.307260321 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.139496705 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.020113535 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.019574213 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.024191833 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.019365007 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.020078681 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.024906622 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.020306536 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.020876426 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.047732221 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.019534947 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.019308379 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.025462209 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.024024311 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.0208856 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.024937878 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.024193765 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.024579831 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.020187976 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.019845471 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.044612803 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.020009848 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.025352552 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.021006368 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.02114462 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.020910323 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.020182486 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.022921044 seconds)
  done (took 1.585835422 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.041064953 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.02112094 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.018641696 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.021860837 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.021492369 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.034539075 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.022920207 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.023010821 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.021260277 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.018346271 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.01996499 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.020619537 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.020375535 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.030503303 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.019754671 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.019873638 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.030842033 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.023154006 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.037964565 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.036084144 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.020073002 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.031947261 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.020010962 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.017455711 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.035569471 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.020590344 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.02351802 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.024558357 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.021708094 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.018831595 seconds)
  done (took 1.563651209 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.031242574 seconds)
    (2/2) benchmarking "in"...
    done (took 0.029017826 seconds)
  done (took 0.886818685 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.018669737 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.036933804 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.01643965 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.030250289 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.025944897 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.021392945 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.027567891 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.028428279 seconds)
  done (took 1.034226496 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.135835103 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.162075686 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.019110444 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.019914413 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.131487112 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.096097748 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.143569686 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.034726566 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.036965781 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.021813071 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.018020448 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.141092083 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.01831242 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.032364222 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.019716482 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.028223593 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.026233143 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.042364648 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.03506287 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.017138855 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.033260429 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.019095637 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.017874184 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.018815427 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.019011746 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.0253057 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.037528587 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.035336326 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.029107579 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.016170366 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.037466865 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.016976997 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.017749904 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.026985897 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.131452016 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.017318125 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.063056868 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.018723466 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.02218361 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.016950075 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.031441944 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.039480473 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.032105455 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.036960713 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.019824854 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.021054755 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.018835958 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.020373889 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.021428853 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.026520873 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.017025814 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024792289 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.0167246 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.018549802 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.029251726 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.018460595 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.023011816 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.027408588 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.032039946 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.029150914 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.034187137 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.036673984 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.026960069 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.026557384 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.019023918 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.038379021 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.018763968 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.031661021 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.034952803 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.020297947 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.034214076 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.017502007 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.015975861 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.016816453 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.052849202 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.018754754 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.018261231 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.018418568 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.018097253 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.019374301 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.027789138 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.022496572 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.02561725 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.022382651 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.038206922 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.028338262 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.017128324 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.025277176 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.038493999 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.021847023 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.01720114 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.036065885 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.021790871 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.017281848 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.039863883 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.031982191 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.019326679 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.017887053 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.021204287 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.031568341 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.018785358 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.017266823 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.026927396 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.019422204 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.135328342 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.023108838 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.025727079 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.017243488 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.028711331 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.025128702 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.020436775 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.016675439 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.022795458 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.019006649 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.017136486 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.027932913 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.019006703 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.03742451 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.026687724 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.033245298 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.033803008 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.02939289 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.036683747 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.01792933 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.016989934 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.038135875 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.027829235 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.020455564 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.041390265 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.018533116 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.029153803 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.017716581 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.019188916 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.028490109 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.017777456 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.019530937 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.017642215 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.024792788 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.01953695 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.019593402 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.026456812 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.029721711 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.032574358 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.018849532 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.026805528 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.018085838 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.035122835 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.029637505 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.02353175 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.022162305 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.019015573 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.031064637 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.027545106 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.030870149 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.019171805 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.019058856 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.017856377 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.029491475 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.02856781 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.020818366 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.028228832 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.023321718 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.018999389 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.017900102 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.0188973 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.024128887 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.023390374 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.02016592 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.026725884 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.027061646 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.033371758 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.026484359 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.028803134 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.01699572 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.017445073 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.020089636 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.018157199 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.023175082 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.028703732 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.038714049 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.03284492 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.040539256 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.018043183 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.028160825 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.02064238 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.036884483 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.032893233 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.01919898 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.023280872 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.017472914 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021533835 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.031008094 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.031360119 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.032850836 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.033924011 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.023286599 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.024655424 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.018007865 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.03433741 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.018793111 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.027750378 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.029866758 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.026526517 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.019430324 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.020402313 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.027430315 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.022912455 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.019092043 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.035088503 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.027321119 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.018249627 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.034304944 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.018328538 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.029836289 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.018617935 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.024632199 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.026597526 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.02112463 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.02839808 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.034654956 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.017082096 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.019439389 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.03517588 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.02033965 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.020518015 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.027098271 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.03818168 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.026194048 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.02712359 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.029210693 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.028875645 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.172313906 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.031450944 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.01999935 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.029864475 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.020333165 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.029993823 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.017326536 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.038727405 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.016513508 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.033963003 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.018577061 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.029910071 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.019279616 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.03057651 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.019671678 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.036499993 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.018380248 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.017651869 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.029783253 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.01632238 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.028335543 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.017316947 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.023566335 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.025479819 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.027223733 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.018594187 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.030296967 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.020456223 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.029295839 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.022104638 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.025509244 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.026463902 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.02213529 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.017031229 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.02730103 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.02848596 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.026930656 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.018440817 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.01816344 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.018092109 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.030098502 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.020144864 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.018907001 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.025403212 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.022119352 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.023392441 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.018642213 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.019540955 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.018356851 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.025611724 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.028288789 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.039333309 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.025721767 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.02431732 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.025827856 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.016672554 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.033249489 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.016838001 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.024705694 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.016034653 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.024434975 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.026967139 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.017109827 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.036416934 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.017642667 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.025430946 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.032678391 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.027911247 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.020692238 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.03422151 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.018647533 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.024213751 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.023756635 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.020833328 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.023401513 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.017616896 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.024483948 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.025518673 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.026317027 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.016362522 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.023368498 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.025160886 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.017668895 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.024668738 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.019174544 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.025347937 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.018041399 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.015480267 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.021204382 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.027770577 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.024806545 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.025714061 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.018800539 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.016278288 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.01672496 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.023598557 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.021274827 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.024881446 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.031968169 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.015428683 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.017561225 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.016736218 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.020655353 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.035121934 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.026291127 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.024168405 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.021544977 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.015641165 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.017763224 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.01797832 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.016482637 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.020448447 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.017287818 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.016739564 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.027678358 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.018262175 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.021486338 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.01666501 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.019267476 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.031017593 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.022981209 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.017448111 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.023817292 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.016020556 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.021799388 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.015567615 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.017800805 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.021172219 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.015921473 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.020687501 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.027330468 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.033462176 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.023484956 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.025228249 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.017210576 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.024502597 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.032449474 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.026114374 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.018921288 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.026557635 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.016128572 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.036113292 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.026285644 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.029030454 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.031084954 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.019035792 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.034433293 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.021410105 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.026674738 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.032878962 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.01774791 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.02620747 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.017090713 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.033543947 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.02193271 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.01665257 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.025558768 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.024726908 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.023606901 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.029559289 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.018151368 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.028257341 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.023079439 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.02116294 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.018899654 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.018789601 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.026939942 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.039236433 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.020221334 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.024092934 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.025385676 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.025339558 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.021796676 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.029773075 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.02507069 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.018096057 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.01963048 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.021604029 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.017752143 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.02968457 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.017106441 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.021677691 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.021706465 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.016685483 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.02422758 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.034231859 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.029145183 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.02759826 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.017169586 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.016419344 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.036182836 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.023646446 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.023587291 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.028924855 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.028060912 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.030076199 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.026544953 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.03478999 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.017354676 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.023755802 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.031370941 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.018299285 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.016778506 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.021147113 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.018650525 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.026235546 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.027245861 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.024673562 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.019246255 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.025333981 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.033121173 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.01895976 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.022371405 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.024241709 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.018108043 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.030873302 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.02941984 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.02898368 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.019234723 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.016894273 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.020710676 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.025970897 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.024516063 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.026085393 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.018186828 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.027568383 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.032635829 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.024746287 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.020884785 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.016684018 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020761359 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.026520733 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.024524971 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.017148868 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.023102138 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.023094889 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.027309828 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.027133258 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.02223835 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.017020759 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.039761143 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.029973386 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.027698826 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.01902295 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.019089372 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.017324529 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.016907446 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.028798472 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.016809554 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.01912274 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.023019868 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.020074892 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.036415957 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.025768499 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.033545782 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.018360093 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.022226254 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.01718615 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.027566043 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.024484165 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.017831482 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.028495414 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.016690308 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.033635476 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.031983156 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.027969479 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.019161556 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.023668442 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.026703214 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.03295111 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.027237457 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.0265405 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.021216606 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.028109274 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.167802191 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.027819628 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.017454078 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.016969423 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.027403064 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.025663932 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.029127979 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.016312601 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.030162089 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.020943584 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.028794558 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.025796228 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.017620841 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.017336885 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.017239623 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.025646612 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.021285328 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.025386982 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.021734533 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.035288454 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.017199346 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.027486208 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.025310311 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.026935183 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.030276652 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.02836623 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.024693554 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.018043179 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.025214001 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.025075611 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.017011269 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.021672239 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.018886987 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.042644976 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.020074602 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.019887063 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.031171653 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.022812053 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.01579877 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.022419673 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.020972916 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.025855368 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.016707116 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.026761412 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.020824732 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.016562607 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.021086583 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.020853113 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.014888447 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.01547064 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.015928801 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.025811972 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.021034969 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.016063663 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.037437657 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.017557058 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.024891827 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.026986641 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.023137489 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.018909354 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.017777078 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.019253527 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.032237145 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.031926625 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.019951869 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.024434772 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.01727225 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.024945997 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.015114221 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.02507345 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.024195753 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.0245597 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.015701911 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.015823343 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.030714712 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.031551758 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.021082632 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.032789169 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.02758252 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.017882972 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.038289803 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.025241913 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.016864259 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.028065994 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020369036 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.018100031 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.017662844 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.018644567 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.02813677 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.015916377 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.018156554 seconds)
  done (took 16.463212031 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.060002528 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.018214289 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.01725782 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.016253662 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.023225459 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.017099582 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.015753782 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.016992204 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.017046275 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.019709934 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.018139073 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.018416092 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.023984675 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.032012025 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.023908007 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.019455592 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.015612026 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.016929342 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.015623953 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.016854538 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.022090474 seconds)
  done (took 1.264043536 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.020118477 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.020474555 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.019841552 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.020081901 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.019247978 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.016068116 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.021784257 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018676734 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.022712434 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018023189 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.020616262 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016217043 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.016386082 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.016226679 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.016261539 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.017365095 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.019927909 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.019201264 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.016432827 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.020919968 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.018103985 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.019925957 seconds)
  done (took 1.220473139 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.018029112 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.016439406 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.024807401 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.017458303 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.017901727 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.02091457 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.017160244 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.020726939 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.020271696 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.020147514 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.024398214 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.015989612 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.01503223 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.021380842 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.015071061 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.016131009 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.06130441 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.016219687 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.016045769 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.015371282 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.01769329 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.024947563 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.015814254 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.015880285 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.020667093 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.020322116 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.016522162 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.018322387 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.016190099 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.02056302 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.016486343 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.015383048 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.027201666 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.02808867 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.023729977 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.021213528 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.016866463 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.016174999 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.015342081 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.015334444 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.023916943 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.016592109 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.015756691 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.016922284 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.026083674 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.016285396 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.015540443 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.024907926 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.015516402 seconds)
  done (took 1.779919586 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.028879139 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.071676866 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.021854608 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.052299101 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.028116273 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.021203599 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.021749219 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.055663833 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.01718925 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.01822947 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.031042198 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.029649846 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.018753947 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.019928508 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.02206712 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.020660303 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.021864236 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.020506326 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.02225066 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.01833338 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.020967831 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.02315533 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.028379779 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.028628938 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.019629496 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.018253029 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.018408217 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.019836626 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.028709153 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.021434127 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.019865733 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.020519223 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.029191426 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.024022935 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.01879546 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.020284719 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.030460287 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.019094929 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.018704972 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.017271497 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.018378053 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.022040085 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.026988033 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.032209471 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.018990925 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.023817383 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.018728775 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.0165138 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.028996275 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.018441515 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.022377074 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.03140989 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.020096399 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.019036613 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.020208037 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.029127567 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.01872478 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.017662971 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.019130479 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.029134306 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.01725211 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.021243655 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.030970262 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.01861083 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.022099664 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.030134961 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.025292873 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.022387685 seconds)
  done (took 2.592273834 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.025007455 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.051013905 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.030011465 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.029951867 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.025644295 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.027871645 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.026300884 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.026029022 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.025825788 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.029386472 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.030044262 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.172143811 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.023353824 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.028748804 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.026205015 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.025856229 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.025796953 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.025915413 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.026291308 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.026276684 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.026533525 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.033190906 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.027161633 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.031257948 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.030847567 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.022920201 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.02941922 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.030175389 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.033254295 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.026310644 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.030532563 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.025959145 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.025987182 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.031194409 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.032016268 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.026273403 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.016449311 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.026103511 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.025903614 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.025951254 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.022778861 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.031637043 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.027428903 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.024952673 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.026998883 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.026535994 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.031775441 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.03371261 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.032287286 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.031539186 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.026693769 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.031386882 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.026046795 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.026553384 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.031567794 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.036243838 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.032089685 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.031959974 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.026449784 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.031602767 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.032085153 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.035427705 seconds)
  done (took 2.749530822 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.030412607 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.021416578 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.034502601 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.015585194 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.015663945 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.02494794 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.015381148 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.015444063 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.021562565 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.021378967 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.02298602 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.025124916 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.02715714 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.0238073 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.027418919 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.027925204 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.025346466 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.025205158 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.021966384 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.027166862 seconds)
  done (took 1.315647082 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.018810774 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.020919083 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.016236183 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.031832058 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.016135221 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.023725625 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.016452051 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.016478068 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.01639162 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016446581 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.022696366 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.02233749 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.016846471 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.024865287 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.02027157 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.024150074 seconds)
  done (took 1.139635163 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.020164277 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.0257444 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.12816607 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.017311855 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.018982268 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.016358112 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.017170557 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.017807845 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.019575448 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.030694332 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.017292191 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.01945287 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.017257446 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.016796932 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.019075416 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.022219343 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.020419236 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.017713687 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.017368645 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.129182403 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.027179155 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.018260839 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.019378766 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.017837151 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.019145546 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.025320766 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.018646663 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.019470232 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.017362251 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.019830369 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.019423954 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.030687104 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.019902395 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.018157403 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.016063929 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.016955445 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.017391719 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.020090163 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.022306277 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.020130677 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.018662318 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.020399725 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.017755982 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.017838755 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.018671748 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.019504717 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.018541833 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.02715049 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.017289115 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.019612704 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.017800557 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.018551077 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.01771694 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.028439217 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.019147525 seconds)
  done (took 2.121337903 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.03845606 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.023547612 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.015777702 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.015384784 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.020741287 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.021240322 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.020845367 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.020797986 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.021244117 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.015487144 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.021996093 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.020637117 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.02154606 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.021294805 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.021466099 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.02123926 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.015523984 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.02158051 seconds)
  done (took 1.201030228 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.024551818 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.021190058 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.021434824 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.017271001 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.017190689 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.021308677 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.015559753 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.016776979 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.017341928 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.018359638 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018020599 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.017258288 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.017154336 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.017342842 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.021150022 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.017464176 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.017039151 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.016180181 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.017722077 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.016067651 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.021966191 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.017354439 seconds)
  done (took 1.230456156 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.19115735 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.15292012 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.041225342 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.036871121 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.032332457 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.053839826 seconds)
  done (took 1.341053031 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.051148701 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.053463811 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.021023172 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.02132459 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024916426 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023010623 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023160973 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023357683 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026259411 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02887919 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023190817 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026347345 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.02602028 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027956966 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024565561 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024625801 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023043661 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023026545 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.020385202 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.030350109 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023147966 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026446946 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023330409 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023019614 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023293815 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027954973 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.02666077 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.029070811 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023159922 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.026536986 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024907232 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023245671 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026718088 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.029105758 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.020599671 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026411011 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023341361 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.030940258 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024878147 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02821302 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.02042991 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024892714 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026488591 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.026250462 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.026892165 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023595213 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026500397 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023521452 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023597098 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.034867375 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.025323999 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028834244 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026637337 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.028226167 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027695099 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.036457119 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.030505561 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02960541 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026533741 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.03035933 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.029200363 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025987118 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029215643 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.030790876 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026536711 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029426898 seconds)
  done (took 2.581118549 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.059669911 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.020842264 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02307719 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028561233 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.027581675 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023304825 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023578282 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023618428 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023688487 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.021240544 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.059935532 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024165709 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.028190635 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027961266 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023691812 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023317022 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023274985 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028103689 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.021342551 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.034844677 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023705817 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.028842294 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.028690909 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.028359399 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.029601715 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025625459 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023747881 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023665515 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023617878 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02428553 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026938079 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02383925 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028878154 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.02150844 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02897233 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023900732 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023512552 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026775297 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02365944 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025295663 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.028704808 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.031949999 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.024216851 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024082549 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.030022444 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024610845 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.024424078 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.021419491 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024199119 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.021394262 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.029754314 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.030021191 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029731099 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028767687 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023958748 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024118706 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023994667 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.024451732 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02464791 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.145079732 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.029757787 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024699833 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.036278158 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024096805 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024349916 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029577227 seconds)
  done (took 2.701201188 seconds)
done (took 56.259147177 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.20552371 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.172953721 seconds)
  done (took 1.168084592 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.137089031 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.137866676 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.164878188 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.024363186 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.082051653 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.174695915 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.126551162 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.026257535 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.024461249 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.026096008 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.024824758 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.025933102 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.025858535 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.024295668 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.087493289 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.026127381 seconds)
  done (took 1.937991111 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.075086753 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.244246003 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.059556952 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.022621852 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.105427281 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.029107111 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.024082524 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.028228636 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.028714167 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.022761968 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.071619712 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.035677179 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.027273351 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.028292049 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.024099281 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.027272312 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.028135538 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.028619651 seconds)
  done (took 1.712327267 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.085210339 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.034715999 seconds)
  done (took 0.905303323 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.126128087 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.064054572 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.103435793 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.309092909 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.094954506 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.097711009 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.101516662 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.09837368 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.070787536 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.094902721 seconds)
  done (took 1.95950213 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.061082139 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.057281396 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.285092619 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.054933575 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.034333836 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.029336142 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.029156862 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.030870727 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.029524201 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.028982683 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.075134493 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.02752898 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.024262401 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.07239139 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.05019107 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.059808197 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.023468351 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.029977571 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.0322283 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.023333016 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.028080188 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.031088651 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.133272188 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.030645849 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.052491663 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.027732727 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.029411459 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.028593496 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.028544667 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.030663131 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.031157797 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.054332382 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.03044741 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.03708863 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.028642258 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.050096486 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.024326596 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.051082751 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.027049269 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.024354785 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.027609458 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.03116533 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.024845416 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.030668346 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.029947443 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.030080762 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.03148973 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.023549773 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.02981285 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.027263284 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.02446862 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.028707742 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.028529487 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.029570988 seconds)
  done (took 3.018925933 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.079410931 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.066080787 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023910718 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.07366567 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.064817045 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023893382 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.07973561 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.060093085 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.078247285 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.02354448 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023081929 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.02310641 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.030924389 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.03501304 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.075914327 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.069218322 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.025178622 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.02379329 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.068451252 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.068792463 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.022786146 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.079978302 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.070857559 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.067816958 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.022557112 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.024080212 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.022708967 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.023374381 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.031596634 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.032271413 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.023326629 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.034113749 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.035263638 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.030679885 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022542251 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.022939265 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.02275347 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.031577447 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.032963143 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.032738393 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.029869968 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022445276 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.02279889 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.023322707 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023766965 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.022295007 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.032791761 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.030660197 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.03265574 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023293242 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.023320734 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.022697754 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.023423141 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.03039806 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.029326354 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.030656018 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.033889593 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.023524611 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023770404 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.025298151 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.035388919 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.031705219 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.031526003 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.024153429 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.032686425 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.023142661 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.033775385 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.036944345 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.023048201 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.023614962 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.02319694 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.023166123 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.023470363 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.029883962 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.030013082 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023654144 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.023472096 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022963922 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.031814982 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.030257239 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.023036072 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.032226059 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.022604747 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.02329705 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023696942 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.02387175 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.033290377 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.031829759 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.023708088 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.023284308 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.023226017 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023170344 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.022600694 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.032491419 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.032273577 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.032931438 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.034570018 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.024117469 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.035395272 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.032962359 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.02434539 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.031688331 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.023742563 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024163445 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.024064724 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.031679587 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.031339506 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.033038865 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023717784 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.023362824 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.032548777 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.034711991 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.023587287 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.031223632 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.034048449 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.031886113 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.023077268 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.034525297 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023646053 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.034725817 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.024003993 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.034774377 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.02406121 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.032407747 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.023940743 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.023137677 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.023776174 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.03591627 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024453735 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023885183 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024250794 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.023845542 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.032465108 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.036706263 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.024511766 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.032861386 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.032529171 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.02445666 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.035037907 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024052279 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.03501325 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024083705 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.024328495 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023097606 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.037101346 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023823558 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.024499069 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.024161329 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.034435589 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023798817 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.034358444 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.031716243 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.02335351 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.035999518 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.034134884 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.031843926 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.034937004 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.024667864 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.02404035 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.02370886 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.023979328 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.035005124 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.036596822 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.024779855 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.024001005 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.031430708 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.035373053 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.023423091 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.031946598 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.031773071 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.03214716 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.02418448 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.166302914 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.032932013 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.033605139 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.029277025 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.031839541 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.030187576 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.022863912 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.028891694 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.031721197 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.02292811 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.035786955 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.022768381 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.032467152 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.031932322 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.028318046 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.031684381 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.032719469 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.031381305 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.031201095 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.03317219 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022368916 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.022671118 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.029124388 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.022725787 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.022838978 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.028750628 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.02314335 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.02322733 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.035498143 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022979392 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.032089181 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.022337732 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.029819655 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.022234514 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023180563 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.033775205 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022681341 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023125974 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.029415288 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.022742468 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.028762005 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.03177862 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.028789475 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.022565504 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.02317537 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.032307706 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.031452164 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022599201 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.022439186 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.022996263 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.031326693 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.030842467 seconds)
  done (took 7.78608798 seconds)
done (took 19.296754078 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.153377735 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.071673045 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.158468203 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.090871777 seconds)
  done (took 1.241908649 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.05653809 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.019232708 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.139935125 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.150741015 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.019461697 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.133707781 seconds)
  done (took 1.309473476 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.213558667 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.138144062 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.141895211 seconds)
  done (took 1.286298713 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.137959689 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.282914419 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.554100492 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.132353631 seconds)
  done (took 1.906758669 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.171639749 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.164334018 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.031008797 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.180892675 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.038039637 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.01571049 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.104299959 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.022268033 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.052545426 seconds)
  done (took 1.631904675 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.096049465 seconds)
done (took 8.262584149 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.180210343 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.137567015 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.032810458 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.026693276 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.131507598 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.12967484 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.138984242 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.028984773 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.129596349 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.297034983 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.161084598 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.047591387 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.1548741 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.042955765 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.261781362 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.030852134 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.02862985 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.024228288 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.144167963 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.126638638 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.23782857 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.027759708 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.09306908 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.029956503 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.104277124 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.077636959 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.167616627 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.288409502 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.272255434 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.030197233 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.126422196 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.042198625 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.120022977 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.131084916 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.133033261 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.048551259 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.019853528 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.241112019 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.111301236 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.303802864 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.151937285 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.026396047 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.142554437 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.024484646 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.019093871 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.141769552 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.032900208 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.025743214 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.043583631 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.025879408 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.041052974 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.026231978 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.141152233 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.023384739 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.092488843 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.138998642 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.163202136 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.09841995 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.02535104 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.03885536 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.029133937 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.153112912 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.038553909 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.025228356 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.031781639 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.019825117 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.137123754 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.039331982 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.020191666 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.030193307 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.028040539 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.113619034 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.15527811 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.06446322 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.031695268 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.118679196 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.09610054 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.047970466 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.0487589 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.029395316 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.019328227 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.168535668 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.025089386 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.038220072 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.025990454 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.052694747 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.019665801 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.035305248 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.157548967 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.151536092 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.086968544 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.020681818 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.234399925 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.022002592 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.200305273 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.020777929 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.019652941 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.163397583 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.019351524 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.019527454 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.028972664 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.027759145 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.021122453 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.150223812 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.102679202 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.027085846 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.025794426 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.019737273 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.024748944 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.02037958 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.019668983 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.019525194 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.093595773 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.034681962 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.018735076 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.106101091 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.125010208 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.030165607 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.037301423 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.083466768 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.022272989 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.027875406 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.026110361 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.12228958 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.027140096 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.132109582 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.020655129 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.041776254 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.118572195 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.092859544 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.105792299 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.019243226 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.153199167 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.02919323 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.018767503 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.026131854 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.046772421 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.02858461 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.034482951 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.027238669 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.153448099 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.029859955 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.024569017 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.118144648 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.018636352 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.110115564 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.093460754 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.126568261 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.024207969 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.029515651 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.091814278 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.042713085 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.047899279 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.041974311 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.023473137 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.019431639 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.019133476 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.033963069 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.018511714 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.019295372 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.033579624 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.025671777 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.019170078 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.237471373 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.029417222 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.023569543 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.258970836 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.031431373 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.098846451 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.041295329 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.019899264 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.10483773 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.021527957 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.039832085 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.081059376 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.020041194 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.095470597 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.01994813 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.019680025 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.02708246 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.021279386 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.028487778 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.032945244 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.020212895 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.033682844 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.027278546 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.01980878 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.104346176 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.021520036 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.167868563 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.103699975 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.115624222 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.020021346 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.037837566 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.01950978 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.133653524 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.019816633 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.067527945 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.114848138 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.036175316 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.040013392 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.020922693 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.093600473 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.03493264 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.019538231 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.100876192 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.127954074 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.098645426 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.026970634 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.24266973 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.028751784 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.020277616 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.026962904 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.02788836 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.020429059 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.095526337 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.024081453 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.019092457 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.019410619 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.021330776 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.018782576 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.04550083 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.018929409 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.027080074 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.019478991 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.022109821 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.021372039 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.018839637 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.027514825 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.09623747 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.129450384 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.025432098 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.039715764 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.032481309 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.030880355 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.06691366 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.026395974 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.141098087 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.019213534 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.029029534 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.042108951 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.019383178 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.024551548 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.01982409 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.039040158 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.022961421 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.021223505 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.028177555 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.020167107 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.020310155 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.019972182 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.020207725 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.028086848 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.021510315 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.019458498 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.019495795 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.019921951 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.024321574 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.025032751 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.03043179 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.039796254 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.476373039 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.022166211 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.022190493 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.020175144 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.020113772 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.020390724 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.021715301 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.019981861 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.021968118 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.02023093 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.019582178 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.049310462 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.025072965 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.020843009 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.0427881 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.020153662 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.02947132 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.128613158 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.036963564 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.024962514 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.019384457 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.268844667 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.110759885 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.043141793 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.041297775 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.020496122 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.030668658 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.02046012 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.02076328 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.019359603 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.047563937 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.025299499 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.020482636 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.019365998 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.019673481 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.067812906 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.027765279 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.019595983 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.02770361 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.02010552 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.019971509 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.047956267 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.02112452 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.01995648 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.039915431 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.033584761 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.101139126 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.031983494 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.022844371 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.070209703 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.01938711 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.020094499 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.020464691 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.112597258 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.032675457 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.021665227 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.02012873 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.027656738 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.028620127 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.072345764 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.025743009 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.023116503 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.027705185 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.019337706 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.02046744 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.045867276 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.049192005 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.021318721 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.023594232 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.019987596 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.020462382 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.094566465 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.027556171 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.02442577 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.108024749 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.022091552 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.027740259 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.019377385 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.476642372 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.025276282 seconds)
  done (took 21.813612721 seconds)
done (took 22.621552339 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.167720198 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.03419483 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.033005417 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.028428105 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.032359311 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.032450988 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.033634775 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.029324396 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.032295858 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.031634432 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.142107324 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.019506069 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.027304144 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.03496072 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.028461343 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.035776245 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.032234677 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.035045274 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.020347501 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.035385915 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.030529005 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.033037333 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.028654479 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.034741408 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.020248075 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.028404418 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.162256329 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.038741002 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.023328706 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.029627417 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.027514878 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.033623563 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.027537792 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.027098168 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.02939902 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.025138911 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.029980875 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.026726323 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.1575229 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.02535617 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.020250036 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.032761105 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.026944871 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.027662789 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.028452755 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.031800043 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.025030409 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.033620673 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.019473327 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.032721797 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.157051739 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.024455977 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.023306616 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.028368414 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.025097931 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.02916148 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.023134437 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.031505646 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.024830395 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.032019742 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.027883944 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.027731976 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.019558102 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.028258926 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.027050277 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.027268763 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.018688122 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024405998 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.01966246 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.01952743 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.01893987 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.028279665 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.026562659 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.024653451 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.018937932 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.019560795 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.019090545 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.032182767 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.026938711 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.028532095 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.020021915 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.025058843 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.024694468 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.020103641 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.024465869 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.031510636 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.019069018 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.020100429 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.018979517 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.031302207 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.026138427 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.019583343 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.031655618 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.024333947 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.02399177 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.019625881 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.019084294 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.024159952 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.0277079 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.019617736 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.018603215 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024186863 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.024756303 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.028409464 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.020019415 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.02415751 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.024033994 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.01870168 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.028358677 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.026985589 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.028722004 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.032615012 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.028372947 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.030887538 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.020062984 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.018576148 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.02937186 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.019905194 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024392031 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.027569185 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.024892012 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.027573105 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.020114474 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.018952802 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024173059 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.02554475 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.019942415 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.02010527 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.019909008 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.028437281 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.02686999 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.018669054 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.019469699 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.028420497 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.028359287 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.019115153 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.019024978 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.028459324 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.020152959 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.02559267 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.024960402 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.028517691 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.019374603 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.020202441 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.018986218 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.019309701 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.019116703 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.025022067 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.02446752 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.020191955 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.028462963 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.02698862 seconds)
done (took 5.631945106 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.035010372 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.063665262 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.175667517 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.138360298 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.033159954 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.020751891 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.024618939 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.040174042 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.023374708 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.045407327 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.045158647 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.041736188 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.161817452 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.018742526 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.019889447 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.020706315 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.018365065 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.032138658 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.143886855 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.043917011 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.062713839 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.019607661 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.036507341 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.040098212 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.033042668 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.039024999 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.021198976 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.020778407 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.022817015 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.03759907 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.046147119 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.019718643 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.02103625 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.039636527 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.036281789 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.029024046 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.020727234 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.026940345 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.02082075 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.019840744 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.02187522 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.038616772 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.027280619 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.027541614 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.021151448 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.020658763 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.020668138 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.028345257 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.034856062 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.026902413 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.033602215 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.038017734 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.022079453 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.020470295 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.018785772 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.029731851 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.021437906 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.021176917 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.021280006 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.020081131 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.021253677 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.023343683 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.026738244 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.031737819 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.025050151 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.028319349 seconds)
  done (took 3.309191713 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.03940693 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.049638375 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.035234821 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.035388071 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.020258615 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.021043768 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.020761772 seconds)
  done (took 1.161487576 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.067640403 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.139260901 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.148003303 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.1454837 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.156108841 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.143080257 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.03301775 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.049936548 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.019631938 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.156720222 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.153143985 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.148497389 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.024172501 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.033024123 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.052989754 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.151200557 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.033300166 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.027298784 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.142703682 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.148512848 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.02519491 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.051010991 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.032258184 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.021254179 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.14612651 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.139050838 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.023936226 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.021371521 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.023080088 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.020419301 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020339013 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.043581117 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.138613899 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.035619849 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021396127 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.019470775 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.136083811 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021719264 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.138720436 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.028107041 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.139196531 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.023045889 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.022998885 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.020639155 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.021861217 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.143404582 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.021924135 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.020698644 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.020202204 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.141824991 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.020181512 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.139697364 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.023467032 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.025929763 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.027754305 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.027296979 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.027562765 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.021071942 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.143714934 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.030610691 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.022383422 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.151476389 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.150892916 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.143826103 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.157264904 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.031427442 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.142086597 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.144830987 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.021611467 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.029030482 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.021970913 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.158540998 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.027610782 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.02469163 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.026841985 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.028241232 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.161037526 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.163393782 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.162189528 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.036640786 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.024973208 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.021807764 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.161539713 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.164634953 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.027425717 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021265322 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.02218943 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.037591597 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.046700876 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.023517263 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.027726405 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.022193384 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.032165126 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.024257291 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.024248882 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.154997856 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.022207046 seconds)
  done (took 7.736758299 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.026005095 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.022108014 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.021390949 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.021698888 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.021810833 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.021794339 seconds)
  done (took 1.188119359 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.048319472 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.022307999 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.034042291 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.021572127 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.043559284 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.141902582 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.144222063 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.02417627 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.037682618 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.03416354 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.143672957 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.146385535 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.1436225 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.022398497 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.141260592 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.032785823 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.142373131 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.026274572 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.032089969 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022627885 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.034916769 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.022183283 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022498117 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.151259416 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.023444361 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.032492837 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.030499652 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.032355339 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.031826791 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.022517625 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.022136333 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.023054175 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.02811007 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.022469945 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.143708076 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.028355059 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.02164629 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.025226554 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.023364579 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.023078714 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.147100754 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022940653 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.026262938 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.025354399 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.02263178 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.02829539 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.025382065 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.02540755 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.144754484 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.025639461 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.025416265 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.022121085 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.023223787 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.025218256 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.02834699 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022691471 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.025263777 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.14535161 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.022654905 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.028508668 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.021777024 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.023259652 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.022640635 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.023225709 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.026706318 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.025297676 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.028411008 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.022783033 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022713439 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.021723936 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.025453614 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.02178196 seconds)
  done (took 4.275647353 seconds)
done (took 18.585067659 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.501683856 seconds)
  done (took 1.417874155 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.023926296 seconds)
  done (took 1.968901399 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.052006996 seconds)
  done (took 0.996239267 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.286296401 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.377188279 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.729211899 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.091215672 seconds)
  done (took 2.412422244 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.846362439 seconds)
  done (took 1.796691011 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.218631321 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.180516834 seconds)
  done (took 1.376874593 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.498607638 seconds)
  done (took 1.438500608 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.313950388 seconds)
  done (took 2.261847364 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.190917677 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.129151068 seconds)
  done (took 1.267668495 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.594176881 seconds)
  done (took 1.539340682 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.527793237 seconds)
  done (took 5.475972077 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.191735906 seconds)
  done (took 1.198963191 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.19401213 seconds)
  done (took 1.144033108 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.706934044 seconds)
  done (took 1.653162254 seconds)
done (took 26.902692963 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.043274488 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.038878558 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.038566195 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.03403399 seconds)
  done (took 1.090453101 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.029977249 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.02414036 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.02658137 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.027064029 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.024490837 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.026416119 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.026766173 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.022954346 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.024377311 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.02352559 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.021816859 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.023413914 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.025937922 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.023058019 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.025590164 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.026997473 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.023548939 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.024020169 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.025670393 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.023177153 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.026041672 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.023500106 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.023413328 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.024918886 seconds)
  done (took 1.546639469 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.033673254 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.025464059 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.028424332 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.024251104 seconds)
  done (took 1.064886505 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.032123842 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.030019326 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.038453186 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.043257899 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.02944088 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.030200148 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.03687483 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.036988508 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.043323199 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.039752956 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.021138312 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.020863271 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.020070369 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.038827693 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.036290899 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.015724258 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.017195356 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.03051829 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.029616102 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.032413897 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.023203937 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.018941897 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.02959093 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.030356265 seconds)
  done (took 1.674359434 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.037271682 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.019048513 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.035120203 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.044191736 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.045472828 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.01886091 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.032596376 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.045178088 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.081511028 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.018886192 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.024887682 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.0187829 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.057449791 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.018943644 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.03405377 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.063836281 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.066676153 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.022848159 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.051729933 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.018942026 seconds)
  done (took 1.713663592 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.028164233 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.02339144 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.023606515 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.019072456 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.029950424 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.026285879 seconds)
  done (took 1.108999022 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.023914696 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.021925253 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.020912167 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.02578212 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.021557837 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.021533047 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.0207634 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.019637682 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.019582799 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.020385726 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.020341549 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.021490605 seconds)
  done (took 1.211011585 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.169618402 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.02629747 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.024015751 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.019601209 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.021335198 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.020438771 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.034475234 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.022340849 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.037646548 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.020300206 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.020584042 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.022799891 seconds)
  done (took 1.39383472 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.060865092 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.065327196 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099251321 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069426071 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.069005183 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049588704 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.196747795 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.032257906 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.118914433 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092162516 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070811291 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.04551229 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040048423 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.023186729 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054690582 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.073949811 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092371269 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.026413636 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.068474728 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.239501831 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089331816 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.092247264 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104176247 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071974261 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.047562283 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104458779 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050692517 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.058499291 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.078377912 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.083947525 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074836369 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.053048095 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.025046608 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.024617665 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107271153 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.062262165 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075756931 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.047080134 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.060199468 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.042999292 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063884134 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.023303038 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.035994975 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.066313194 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.040860642 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090129613 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.047561949 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07163643 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035394163 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096062242 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088069459 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.175964831 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.041669906 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062229593 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101132184 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.073243412 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099291792 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.064360217 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.039282403 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.226002413 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.058557823 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.05368869 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061561363 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033616285 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.131527597 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.042652832 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.065567459 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06467778 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.049120167 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.049272808 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.060216552 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.089413843 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079318745 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.079576889 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091078031 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.044983583 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072919148 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.053478428 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.081958524 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057084074 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.026241072 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.076683212 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083399258 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.054016112 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.054821918 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086104971 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.046700348 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.029795952 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.055942079 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.074517868 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034164778 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.069396966 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.035171747 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.06520961 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.095367614 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053734 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066482315 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.07378167 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.032223846 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114154677 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.063833711 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026889153 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.072794509 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069177514 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114653145 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052194457 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.030240911 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.056093785 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05976768 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.111209611 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066253144 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.035559403 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068616695 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103505652 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051095129 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.259162862 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.052792843 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105117139 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072970016 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.042674957 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.030526033 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.046564086 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.218885973 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061471751 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065445253 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047656246 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.03729381 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.040101807 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068054764 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.046290796 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034201944 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.067086123 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.055821088 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.028153871 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041467129 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.030016233 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094205647 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.031581668 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.088411102 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.0783636 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.028589926 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059854881 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.048593623 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059158679 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.050854238 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.070488697 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.092729541 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.137555571 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.043599102 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.04763373 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060909859 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.098697164 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081667054 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.04642382 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.031164148 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.055767986 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067147704 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.053343493 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.080815879 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.04880959 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062809754 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.058479801 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099471175 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102559555 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054573743 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.056221931 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064841514 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.078829532 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.02894684 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11554992 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060438026 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074621209 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.041322496 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100514006 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.066361054 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.045511663 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041711701 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.055337634 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.06181796 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062659249 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105065341 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.051584234 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.027077009 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051275709 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109647749 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.033456127 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069694243 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.047332284 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.048999393 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078634127 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.054319536 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.038090173 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.023023962 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.242755623 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112317561 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.023501142 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.06574533 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.060360077 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.055883994 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.074331265 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.022787273 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.071347027 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089294061 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06917267 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.093786915 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118377653 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070211498 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.071349796 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.066966638 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.058725206 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.032390658 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.078440589 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.087764162 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049289785 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044954601 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.088670636 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.072845284 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.091870445 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.074248208 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074485401 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.062141184 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.062367596 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059799892 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.060945448 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103658037 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.078118457 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.081662142 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.037594193 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061800757 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.073651249 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.094041368 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.036154104 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100368586 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.040439359 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.077336495 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.032996145 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.081679482 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.029962975 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.123913896 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033624955 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.05767906 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.023893646 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.02910855 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.1023009 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.070612735 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.067460149 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060272884 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.100516514 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09829536 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.032013318 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.066356386 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.073687935 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.059170418 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.225478763 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.062899222 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.042540758 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048620219 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.060302983 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.038420688 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.034606178 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.069551139 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047574436 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078692744 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.037503579 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.02826606 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.092427396 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057439226 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048367972 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.029575951 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060088195 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.078526431 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.046073312 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.039843898 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.067699279 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058001458 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094387974 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.044001458 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.050855543 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.077681477 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.033751002 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.045558128 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.02281989 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.038920979 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.029450966 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082221901 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.0291615 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.071150938 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.022519858 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086692957 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.042522533 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.047625797 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.057344182 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065975913 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.083703263 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.049152916 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098608124 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044865286 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.077085633 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063843983 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049711358 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.041723864 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.058162793 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055680541 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078745864 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.050931815 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080044401 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.102184569 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058752299 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.099638271 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045848237 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.078536004 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062696491 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.081365208 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.069073499 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127715027 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101417976 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071035992 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.068820727 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.030235516 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.05317599 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064507556 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073233953 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.294030154 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079720111 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.025975868 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.057912586 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.047401856 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.061993518 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057166017 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.035428998 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.097603119 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055877362 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.041316379 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.065120969 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.043921553 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.057526738 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029378627 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.053074949 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.056457026 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.047962323 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.0503037 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.066886962 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081184968 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065141581 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096305248 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.05543891 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.045189874 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.071819031 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063457842 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062396554 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038853356 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.039348674 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092021014 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.072897679 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.080367242 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.054856528 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064003019 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.066112709 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055347848 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.081993462 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063424027 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.084995297 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034790628 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.031237662 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.022137256 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.026037644 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080933929 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063494272 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067420681 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054324515 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.026243424 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.059072328 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059163872 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026138922 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042746998 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.05058202 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.053079185 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.047739794 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063912046 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.066034387 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.05125091 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.060073634 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052999359 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107394697 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.056835087 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044332693 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105828346 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114177738 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045579747 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051916214 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.02597335 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034217421 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072908377 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115151041 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.256816125 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.032123034 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.040653634 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.039377875 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040229477 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.025072471 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.041282631 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.04242372 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058582707 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.051538477 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.066632191 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057820155 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028708085 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055677243 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051963829 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.045640871 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.060312917 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.072539481 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.078600935 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.094729921 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066830026 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060473743 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02937037 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.033569039 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.029227161 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.032785114 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.054559343 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.032227489 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029420924 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09672332 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.044939048 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05878197 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061864609 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.041422447 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029133326 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090015178 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.023043013 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091187012 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.024855834 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.036296459 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.036121393 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032976341 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049229436 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.096007637 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.065464048 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.068098502 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062092718 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060390432 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118881425 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116672653 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.036772723 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099121852 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029953728 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.03082796 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.030110379 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067505343 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045539848 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.06934333 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100627332 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045586338 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057662686 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.032590179 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102693813 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.059123257 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.060465565 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.04103169 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.033455684 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105587725 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034239682 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.039656581 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.046253742 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.069819789 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.027104745 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.059425363 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.03850716 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.03510752 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.268635312 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.663508946 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0442584 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.029160849 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.049393161 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.094183545 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085038582 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049586896 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061358424 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.072309609 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.053392941 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.046785039 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060862229 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.146279544 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027417907 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.047801863 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.056855498 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050632253 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054704269 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.052082457 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.039771045 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.045649587 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.040175583 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.032536184 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060643077 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041371015 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.049586865 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.06058988 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.036118769 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.040894024 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084683227 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.057435023 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.036822977 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04247797 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.057285949 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041816813 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057836941 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.023219962 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.067113219 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.042931135 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075091619 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.054802915 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.063578018 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082119131 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049059997 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095370432 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.064152864 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078762297 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.041851718 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.03248373 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083978637 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.045251521 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031953178 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104249569 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.05369529 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.0582855 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059635167 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.051111288 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06911899 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.074979464 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.07056958 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.053450705 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033887641 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060486482 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.062348995 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.044063569 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.035245927 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.029845735 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.031019775 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065987991 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.044013057 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.041152335 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.070729488 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.046702045 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.207031297 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.056992084 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075693889 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.040871557 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.055099568 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.064589359 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044970347 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063345107 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.054217153 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.081936554 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.376220822 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.078425136 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082316101 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087147384 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.03104195 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.028656331 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.022157691 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.066792355 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.032826976 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.042437385 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.032230366 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087088364 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.03709321 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064488723 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.199628229 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.034046819 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.047658928 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049557249 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.023077579 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.036528274 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061047673 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.040447403 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033734615 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.07258321 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.035038066 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083856941 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06644996 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054598334 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.050075678 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035089546 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069802729 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.05767231 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.08522134 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.049328779 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.029384863 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.080142089 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.058874084 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097228757 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.027133987 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035386937 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087306223 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059402527 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.089700779 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034813071 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110204587 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.09961564 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.055871074 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092999489 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.02501279 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.042110286 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.04538724 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.082413329 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.040416027 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068752066 seconds)
  done (took 40.604492368 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.145829075 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.138252032 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.075724924 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.088680058 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.24452178 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.253218933 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.105880397 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.078735986 seconds)
  done (took 2.231766242 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.024363341 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.037058116 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.034583287 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.277526231 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.053514169 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.020686486 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.025509554 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.035205039 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.020711937 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.0201227 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.054882109 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.020747921 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.02088377 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.430087829 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.019848686 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.025417163 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.020887917 seconds)
  done (took 2.220432005 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.308731597 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.575759981 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.336402036 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.493589405 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.103347654 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.560467129 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.028570914 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.034215043 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.63830154 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.36403979 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.097646595 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.180308259 seconds)
  done (took 17.786236474 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.03100724 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.155287175 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.152663061 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.027685588 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.027138316 seconds)
  done (took 1.51741923 seconds)
done (took 76.184832722 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.040261213 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.123105108 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.020361962 seconds)
  done (took 1.236058778 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.157803636 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.152511413 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.151866849 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.154750604 seconds)
  done (took 1.678017393 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.030083818 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.029552473 seconds)
  done (took 1.128860237 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.18579448 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.247763724 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.043794548 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.038822424 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.033017575 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.03448761 seconds)
  done (took 1.177669804 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.026669895 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.024438005 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.024525438 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.024834537 seconds)
  done (took 1.162262042 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.134516509 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.019252511 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.021787669 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.023458744 seconds)
  done (took 1.261679635 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.040468086 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.039632355 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.068774741 seconds)
  done (took 1.215715519 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.039125865 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.03849207 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.032754686 seconds)
  done (took 1.178212029 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.065095299 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.049862608 seconds)
  done (took 1.179528171 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.035211769 seconds)
  done (took 1.103404788 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.048069366 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.051028523 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.218874697 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.183684059 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.221656545 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.20687859 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.030366982 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.030781404 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.026501671 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.025452912 seconds)
  done (took 2.108250514 seconds)
done (took 16.011059037 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.03572558 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.151567905 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.269212938 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.040305127 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.60862364 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.266012234 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.677900517 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.043280394 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.052669361 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021541117 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.037991829 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.586145816 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.681687302 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.10099264 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.670764207 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.089321937 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.515272112 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.021918761 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.02096906 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.021644331 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.660224851 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021195333 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021475649 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.021947637 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.512990627 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.288048583 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.02237172 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.093790799 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.021211549 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025169304 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.269408038 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.022423596 seconds)
  done (took 11.951707686 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.025768557 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.075565518 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.026749589 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.037029587 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.023450573 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.023694513 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.025116248 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.021928405 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.06389872 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021598872 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.038376229 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.0209934 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.025807952 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.022394937 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.041450521 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.021343145 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.02359963 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022105303 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021348985 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.021946189 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.040010462 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021118432 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021772638 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.021970587 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.021627463 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.035799606 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022554211 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.021554486 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.02175942 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.02548765 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.026581448 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.022987862 seconds)
  done (took 1.986210251 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.078576982 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.078416915 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.027535046 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.061683244 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.073718103 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.02451836 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.10547379 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.043759747 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.066910218 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.022116152 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.038449574 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.02177598 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.058314136 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.022890879 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.042379261 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.021693043 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.024127592 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022342243 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021611932 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022205564 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.041033485 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021645527 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021910605 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022446711 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.0222896 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.037658649 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022629743 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.021560958 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.021698098 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025452207 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.027101998 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.023128868 seconds)
  done (took 2.265041766 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.024746605 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.025320524 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.0307792 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.0340342 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.019975969 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.022076983 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.023190107 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.019923362 seconds)
  done (took 1.279861507 seconds)
done (took 18.564839136 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.035294932 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.021900334 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.0247156 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.041381799 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.027936976 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.143371786 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.018888173 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.028626106 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.025118427 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.025275346 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.026556204 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.020155004 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.023726376 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.018638573 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.025470257 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.0197575 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.14566665 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.024137105 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.1435005 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.14484128 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.022370998 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.025473137 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.028501933 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.143908717 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.143840675 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.143842402 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.028857388 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.025820621 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.020209181 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.02282069 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.141868367 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.143902067 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.022886021 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.140107934 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.020304879 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.020086492 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.02433101 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.021756862 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.148216212 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.029205171 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.022367882 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.028736936 seconds)
  done (took 3.416295008 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.147683706 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.153136261 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.145258927 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.032003701 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.028491544 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.031740844 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.151293036 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.028816827 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.027424658 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.151149343 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.023162783 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.027416406 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.029849193 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.020633722 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.027326899 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.023687809 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.02907103 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.021641668 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.027388651 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.027378858 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.151304413 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.020898831 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.028211989 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.028881948 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.023043163 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.029012063 seconds)
  done (took 2.532188876 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.030037613 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.043026532 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.045869044 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.099210969 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.06332024 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.036045418 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.036342103 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.046792325 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.054303293 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.021153862 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.043452844 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.048554304 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.049344999 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.027837398 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.060325426 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.039523969 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.033574096 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.022710088 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.027659731 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.055316692 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.043787952 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.039772932 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.053794952 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.040966983 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.020221123 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.030245226 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.028334756 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.037245076 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.028330088 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.033073358 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.024848642 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.024450001 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.021897588 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.032405568 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.024820738 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.019176012 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.043834859 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.033597708 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.036299745 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.061497255 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.03154349 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.022619675 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.048355666 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.086521911 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.020716534 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.023549777 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.025354925 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.033485452 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.022420243 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.051482202 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.036185711 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.02077985 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.040233873 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.022516224 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.022487066 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.036509538 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.022660689 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.023123052 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.032645772 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.027054665 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.042129488 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.0262248 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.041419593 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.020884865 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.032203455 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.022487233 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.022749816 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.019848812 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.055533528 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.028468703 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.07072185 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.022191402 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.019351759 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.033261572 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.032404642 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.028230205 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.020816314 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.039842049 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.033396212 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.024933646 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.031877984 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.023958391 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.024323969 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.057684575 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.020148499 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.019297466 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.019257561 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.023386054 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.024267989 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.021708428 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.033506578 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.020592662 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.024341926 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.035363847 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.020997675 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.02174635 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.023629401 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.022296112 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.020440782 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.030989312 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.024732098 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.022709467 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.033623045 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.022053984 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.024269175 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.036009079 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.030098199 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.020503392 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.022146196 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.023309374 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.022682735 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.025478803 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.024234775 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.022805907 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.025996529 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.028474104 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.027018323 seconds)
  done (took 4.901668642 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.239627141 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.226845185 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.022157085 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.223705139 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.029718206 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.157550747 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.229620765 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.227045883 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.021874681 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.022532768 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.020905181 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.171290206 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.165740788 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.178772601 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.158790645 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.023817219 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.048522967 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.178634038 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.233285075 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.228826575 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.047592515 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.028782422 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.024053282 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.023044313 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.022364112 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.030377727 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.03858294 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.030330914 seconds)
  done (took 4.160311035 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.030168001 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.065890063 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.025039219 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.045861265 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.038378388 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.021590032 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.023351696 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.022618691 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.038260087 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.026911103 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.021333677 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.025600097 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.024837301 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.023649398 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.022369793 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.028070375 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.027959327 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.028788486 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.02527293 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.026138131 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.032307508 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.045519026 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.025592641 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.021698254 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.024869446 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.021490307 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.026928056 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.030060798 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.021298759 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.021293637 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.018671423 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.02592972 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.036117004 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.022733844 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.021351212 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.022262421 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.021947422 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.02176197 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.022072937 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.019952181 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.019810667 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.026757223 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.020350505 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.026480514 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.035839338 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.023856576 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.023021206 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.024246304 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.024083088 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.018673411 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.02517147 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.024844104 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.024148904 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.029877619 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.025525346 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.024185047 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.023007031 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.035588584 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.027278531 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.021126878 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.020756569 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.020009512 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.023245496 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.028244398 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.038237249 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.023371727 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.020031033 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.021805262 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.023232418 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.035900706 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.021109214 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.027244494 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.018741433 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.021851015 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.024045355 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.024745303 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.023136226 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.020281707 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.021459163 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.021920372 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.021769638 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.021474681 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.020944742 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.024308134 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.019629948 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.020200709 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.022439667 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.023280299 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.027041714 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.020472486 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.024429733 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.023033356 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.020509258 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.024329823 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.026984514 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.024522189 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.041750568 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.029448535 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.022351931 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.019677755 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.036463298 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.023531034 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.021222193 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.023571781 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.026063829 seconds)
  done (took 3.811295206 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.051002242 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.023835106 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.041391689 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.052758715 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.031777721 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.027271161 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.035247652 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.022855809 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.04260083 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.020850618 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.030704219 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.020123869 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.034234235 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.030058083 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.023442428 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.031270025 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.024264645 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.041726641 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.036100462 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.020456013 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.030300595 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.033664909 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.034015243 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.039256696 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.038751797 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.039907461 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.033798571 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.024497566 seconds)
  done (took 2.027538704 seconds)
done (took 21.92239009 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.143625725 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.336103123 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.112155682 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.888596232 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.194069103 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.256150862 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.252852085 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.09277586 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 6.916624574 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.193982782 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.80309142 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 4.921904849 seconds)
done (took 59.292482205 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.116464765 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.270704372 seconds)
    (2/2) benchmarking "String"...
    done (took 1.365869825 seconds)
  done (took 3.738379219 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.551597615 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.108814183 seconds)
    (3/3) benchmarking "different"...
    done (took 1.140108213 seconds)
  done (took 4.903730705 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.486722762 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.99330084 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.386229535 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.09000593 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.103349728 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.626682439 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.292246431 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.773697859 seconds)
  done (took 27.3625283 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.206383529 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.359629144 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.461224632 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.612206272 seconds)
  done (took 17.816563349 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.545314208 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.493591896 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.495147476 seconds)
    (4/4) benchmarking "different"...
    done (took 1.80482297 seconds)
  done (took 7.557255 seconds)
done (took 71.180553895 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.089615085 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.248914569 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.142355936 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.285020874 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.157032636 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.190453426 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.107673315 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.124479226 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.099811502 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.102200554 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.029109739 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.099243222 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.10412796 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.146008443 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.104277812 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.153120473 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.241226105 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.107633701 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.117434785 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 6.677333356 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.421506692 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.096351453 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.107582947 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.173590476 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.261665192 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.142416222 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.398179218 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.108718977 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.698579464 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.105552189 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.10629692 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.101330981 seconds)
  done (took 181.137913297 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.089975898 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.850579883 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.908360107 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.129755385 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.479381551 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.47062794 seconds)
    (7/36) benchmarking "scal!"...
    done (took 1.976902557 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.517186533 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.110509803 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.150431957 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.141534111 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.095638762 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.141881348 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.660071629 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.145351984 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.151835145 seconds)
    (17/36) benchmarking "trmv"...
    done (took 2.98509882 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.972732554 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.180509677 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.059772354 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.138521017 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.653197988 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.574189756 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.948317803 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.152179799 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.378411138 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.18040813 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.214253638 seconds)
    (29/36) benchmarking "asum"...
    done (took 1.676586668 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.04662572 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.182481084 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.184002529 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.358672381 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.438127477 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.182877144 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.224766739 seconds)
  done (took 153.851197486 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.415517966 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.209083684 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.226341097 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.284287651 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.169872124 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 4.057264192 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.172928052 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.172465852 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.1696378 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.17732539 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.17132735 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.239536231 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.172475309 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.593149528 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.196428211 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.174424526 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.174873787 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.544224682 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.183347232 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.180344192 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.19238761 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.297414001 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.517256653 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.282216886 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.176260472 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.190620686 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.320594597 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.214442389 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.200969581 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.170824101 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.281197119 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.173023571 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.305327816 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.304840299 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.18575143 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.235948575 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.175625256 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.472257267 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.175891665 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.188018699 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.188016827 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.225814163 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.178391591 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.33476336 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.282043475 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.191041305 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.203484853 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.641051798 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.741202518 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.173883292 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.174696618 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.172407864 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.185508306 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.177452881 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.377967135 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.17413882 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.212068341 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.95738295 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.188040848 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.177316318 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.183095393 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.179171816 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.180018163 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.185985779 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.213399635 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.881934149 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.473441825 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.537439582 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.970163998 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.183440815 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.18425407 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.177511874 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.37447645 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.248049292 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.190699171 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.206963462 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.384441203 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.183259687 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.175507781 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.109443335 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.110942335 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.172414631 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.290805523 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.179135409 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.172669665 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.593269125 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.599365925 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.182648983 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.201159369 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.238628863 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.178930141 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.178398587 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.179505694 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.106237077 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.195822713 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.193430711 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.624269133 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.182503943 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.181840485 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.674509697 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.540613846 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.178252528 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.267244302 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.572775395 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.169965135 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.181839951 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.187337442 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.187064048 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.190481094 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.181615318 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.187945243 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.172321692 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.178597575 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.177579314 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.184938085 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.186366014 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.185967958 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.193258276 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.181290302 seconds)
  done (took 337.451440463 seconds)
done (took 675.097670895 seconds)
(4/20) benchmarking "parallel"...
done (took 1.202609172 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.451412478 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.338605772 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.335060669 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.431416038 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.380232292 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.374509946 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.384268173 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.47189361 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.412676713 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.349173248 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.419253947 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.356922718 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.479299321 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.439411111 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.472077368 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.458242729 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.392112967 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.912454213 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.397532799 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.362897366 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.399185906 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.364576059 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.345468763 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.412134393 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.497773179 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.36742681 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.584215179 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.454241049 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.411433129 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.437928834 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.45753651 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.462681148 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.397141727 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.467716215 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.427114921 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.487483937 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.351409705 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.465916106 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.371982541 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.386604512 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.408760781 seconds)
  done (took 66.758373267 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.533853477 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.380878325 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.500490621 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.481597658 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.103672169 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.491617836 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.559700374 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.363396633 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.373307825 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.496147497 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.525199422 seconds)
  done (took 19.006752841 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.487432457 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.379135965 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.537886772 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.516942354 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.581543602 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.52400723 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.532302064 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.371235587 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.375755808 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.513119515 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.529489983 seconds)
  done (took 18.543159585 seconds)
done (took 105.49922941 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.74280304 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.255528234 seconds)
  done (took 4.167615655 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.208657538 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.199746329 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.187906041 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.193138218 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.184504704 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.190648109 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.239353927 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.212044673 seconds)
  done (took 10.784863198 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.196711872 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.182422615 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.1950898 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.196720224 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.176512516 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.184506771 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.180680174 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.186449607 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.196903154 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.199264778 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.195532088 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.20592945 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.208346997 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.199437174 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.181494216 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.179548653 seconds)
  done (took 20.24077472 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.180123059 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.183532738 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.180638265 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.17984909 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.185701632 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.177568745 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.182302629 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.19522001 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.180695553 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.181692749 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.171365933 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.186069182 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.171725471 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.164798903 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.172341366 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.159831013 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.166279254 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.169817615 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.182319625 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.162324668 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.161616961 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.155267669 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.175631887 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.18348162 seconds)
  done (took 29.377153833 seconds)
done (took 65.772584033 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.745940669 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.17518294 seconds)
  done (took 7.072164362 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.152240639 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.148705816 seconds)
  done (took 3.54841018 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.148944099 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.150501153 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.139193197 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.13865109 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.137291728 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.13960432 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.12632182 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.13678602 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.126806267 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.131531047 seconds)
  done (took 12.508938923 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.12951704 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.130549688 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.127218873 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.126773676 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.126670602 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.127355439 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.13516741 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.132154017 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.116529012 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.116755508 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.153636226 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.368056008 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.183084316 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.409309102 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.187660625 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.183090726 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.189655792 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.181216981 seconds)
  done (took 22.244934088 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.185942003 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.18402206 seconds)
  done (took 3.541897702 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.176612635 seconds)
    (2/7) benchmarking "second"...
    done (took 1.189386522 seconds)
    (3/7) benchmarking "month"...
    done (took 1.176440604 seconds)
    (4/7) benchmarking "year"...
    done (took 1.1896501 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.181785206 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.186422612 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.183619531 seconds)
  done (took 9.457490547 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.6252526 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.296409688 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.327655056 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.585701507 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.703570927 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.026508974 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.713010282 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.027262826 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.912408521 seconds)
  done (took 16.390404285 seconds)
done (took 75.93132368 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.804165979 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.092728393 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.820190057 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.2073409 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.110095401 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.459283661 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.107297151 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.694742467 seconds)
done (took 37.42152232 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.435253987 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.108172692 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.13812856 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.138553446 seconds)
  done (took 19.493016408 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.091245241 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.665570294 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.13672599 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.140881253 seconds)
  done (took 19.228526352 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.626004543 seconds)
    (2/2) benchmarking "read"...
    done (took 1.526121726 seconds)
  done (took 4.25836062 seconds)
done (took 50.545494204 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.101891199 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.102088401 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.101920867 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.102139036 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.102763291 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.102764611 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.101819532 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.101601919 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.102404212 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.102454011 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.102060647 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.101919806 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.10200639 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.102169217 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.102338223 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.101928911 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.102034011 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.102205777 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.102417776 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.10196023 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.10206927 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.101888986 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.102288957 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.10237915 seconds)
  done (took 27.54109557 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.173613967 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.16185729 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.179697376 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.179154484 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.191461626 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.179244354 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.173746586 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.135734385 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.181919939 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.150144606 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.13655058 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.188309004 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.14034536 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.189632187 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.144043138 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.189080763 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.17998901 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.139130999 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.141220091 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.191654396 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.174237973 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.13915836 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.188536598 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.13542131 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.183563331 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.138395271 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.150499345 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.162202484 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.141010701 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.183221477 seconds)
  done (took 36.032238381 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.135841148 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.101969447 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.102117945 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.192472345 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.102377236 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.10221298 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.102110592 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.10245458 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.102016929 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.10210298 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.102309992 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.102178149 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.101946017 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.102071452 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.101719941 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.102414439 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.138107605 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.283704962 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.10194343 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.102293043 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.147968044 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.102278917 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.102139123 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.102735981 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.102572862 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.102295628 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.101969359 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.10211828 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.102174282 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.102483171 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.102331699 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.156597923 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.135621531 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.102356578 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.227956207 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.162172974 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.102261159 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.645871633 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 3.153611484 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.105030409 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.10252754 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.102369359 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.102254907 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.102268363 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.161689494 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.102337233 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.102688248 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.102235751 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.102638062 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.10213815 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.102300109 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.102575955 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.117862961 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.102305475 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.103140241 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.102342406 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.101940349 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.102330744 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.102302311 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.102274 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.10243882 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.175131347 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.102641271 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.102482436 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.476565899 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.102328668 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.165491991 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.102931684 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.102570855 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.326600542 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.101890972 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.315239413 seconds)
  done (took 85.736698356 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.102055703 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.102666258 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.183656138 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.186094109 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.10275965 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.102212646 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.102756248 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.102294544 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.773232231 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.102428979 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.101971981 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.102579937 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.762274029 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.102384165 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.102698549 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.186111607 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.102349696 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.102490068 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.102890593 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.102180257 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.102412574 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.102541738 seconds)
  done (took 26.922616456 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.145498932 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.117131452 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.138745193 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.116911657 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.117235398 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.11728957 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.138689582 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.117528967 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.13853762 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.138775413 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.139025738 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.144793038 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.118281786 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.13938831 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.144334256 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.186004885 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.142676939 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.186162052 seconds)
  done (took 21.576537549 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.278964713 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.268110666 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.183627718 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.145192292 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.364799081 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.336947343 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.207407675 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.278028286 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.147290485 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.268186038 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.27724172 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.144278926 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.336283505 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.145209127 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.144388362 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.364725391 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.183413178 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.145005519 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.213961522 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.207355789 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.280626279 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.213997314 seconds)
  done (took 28.224203518 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.146933797 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.155829141 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.17503189 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.180829635 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.103047724 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.102188507 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.161741422 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.139495563 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.117480927 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.138178571 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.139036601 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.102320716 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.196026702 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.162964848 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.190861126 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.138998373 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.156257385 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.162741799 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.144786235 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.10260868 seconds)
  done (took 24.007198622 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.103682228 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.103426513 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.103212241 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.102930246 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.102992114 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.103042253 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.103131599 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.103327016 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.103165816 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.3405666 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.103381137 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.103342188 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.102961295 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.103329521 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.103253098 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.103236637 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.102949908 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.103236136 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.103222873 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.103062138 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.340105838 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.103002178 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.103074483 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.102936195 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.103542496 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.103158809 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.103753177 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.103263146 seconds)
  done (took 32.454186183 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.150734755 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.102806031 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.102678323 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.10273675 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.102739609 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.166737091 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.103179013 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.102836498 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.102561555 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.102824452 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.103030359 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.103001528 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.102865708 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.153282526 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.102865069 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.102510423 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.199385083 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.10298542 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.16625855 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.091035083 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.103364281 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.15645269 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.102693894 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.102803386 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.091039502 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.10285604 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.10328323 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.102979829 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.102433689 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.102976077 seconds)
  done (took 52.528072429 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.12460263 seconds)
    (2/2) benchmarking "in"...
    done (took 1.121220763 seconds)
  done (took 3.334767911 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.102659718 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.20550329 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.108371327 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.30411345 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.293996433 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.288128186 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.290688405 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.23270404 seconds)
  done (took 10.915171351 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.108495119 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.581606563 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.155711594 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.113618507 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.105257714 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.580916977 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.072703144 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.015293083 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.944521293 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.01698807 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.242559014 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.591725546 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.124979757 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.410269163 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.226184291 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.956606725 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.357174316 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.65577379 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.19193156 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.235399822 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.858084895 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.212539462 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.149889366 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.139379189 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.118725708 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.008326734 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 4.016109069 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.534125192 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.299831332 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.236554644 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.873357754 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.191275666 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.103349727 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.351393702 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.229299203 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.10385184 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.262838592 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.218175746 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.103743153 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.103400733 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.873804967 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.795477813 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.389460617 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.354478321 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.197553589 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.115491573 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.171896175 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.156415157 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.429206955 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.768802319 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.138660333 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.078248588 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.253242649 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.105642234 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.811345095 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.146404691 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.105177037 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.008961978 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.739086207 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.380396234 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.49790594 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.242987025 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.139552047 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.240494208 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.104658324 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.29295474 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.966061688 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.900700886 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.906048357 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.224700755 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.60793145 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.124133948 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.103366317 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.1027795 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.039549958 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.42350708 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.104401688 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.103189879 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.103315735 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.103468931 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.367107273 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.230566175 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.93400991 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.252612145 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.277543488 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.601888969 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.241326893 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.104498221 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.783607992 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.964368981 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.241333023 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.74815352 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.337836822 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.250981659 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.120561175 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.374165564 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.144443647 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.103680158 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.94599912 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.742531951 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.133202968 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.105101931 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.440602685 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.184392705 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.106273867 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.10430962 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.801432774 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.240907372 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.252743587 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.152199146 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.104642518 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.103317112 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.694412542 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.258287023 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.126169749 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.601443532 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.129381626 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.623909639 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.376096626 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.322789096 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.483262447 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.087886074 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.368085971 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.966751766 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.106679619 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.640864296 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.944621475 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.747695166 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.367688375 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.238761244 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.981370164 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.175996582 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.103560446 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.263652913 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.188966565 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.10506231 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.103766108 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.105071458 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.103940599 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.104242951 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.228826486 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.507634461 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 4.966860225 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.119539683 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.34659316 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.233648719 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.963696312 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.326019277 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.821174804 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.253266542 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.104187685 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.861242715 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.393707339 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.821301265 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.242216357 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.1046455 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.105094346 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.967158908 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.125445772 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.21153345 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.104669526 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.718428514 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.248214 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.108204946 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.104553912 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.56454523 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.252830274 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.105482764 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.223380519 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.899449719 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 4.982719127 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.119874338 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.417453287 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.229796725 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.104566636 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.104584983 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.104273062 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.892742971 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.74151859 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 6.295329746 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.724624482 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.921677524 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.205347881 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.263420229 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.206180952 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.37191367 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.346900178 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.254723964 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.105693979 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.103980268 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.104067307 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.586644836 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.988099426 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 5.142207289 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.981558359 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.128441945 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.105243954 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.23627413 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.898471166 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.12249397 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.821994451 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.131829594 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.216631229 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.105991714 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.104736567 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.257397055 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.30286557 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.254307339 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.678367752 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.119971104 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.105114707 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.790910707 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.242553664 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.782299184 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.220717914 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.940303178 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.211078847 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.240335802 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.275548953 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.787732399 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.24495597 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.104114338 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.829648662 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.263368983 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.104554638 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.173976567 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.811587666 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.914403223 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.874138077 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.743273634 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.063095284 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.677316504 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.389732893 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.254474569 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 3.982351019 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.215373388 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.335610432 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.204149106 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.600200263 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.126867846 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.855101126 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.1230171 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 4.836653663 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.119518512 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.104011358 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.238421119 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.583346786 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.23231945 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.104865544 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.280559902 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.209393904 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.772900284 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.241851615 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.229427832 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 4.425015683 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.069911081 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.214996548 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.332381208 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.205707563 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.023900564 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.085351501 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.456729996 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.0736658 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.113939305 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.236349413 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.877768953 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.263903104 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.369437783 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.250702638 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.10565425 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.104725448 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.320204625 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.200640517 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.106229993 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.431313741 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.096325844 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.15518485 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.238235785 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.108579374 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.105599191 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.319428784 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.305817926 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.404828025 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.595101197 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.68666012 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.927238731 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.242370628 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.761792024 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.247786732 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.789246818 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.246570588 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.10872307 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.828858371 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.241770166 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.376461072 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.261442855 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.228755979 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.770183867 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.22587474 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.406162475 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.270742518 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.237619681 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.87660017 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.657450814 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.379381769 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.566973404 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.148298563 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.627662149 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.227215219 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.659756954 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 3.149234412 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.802958966 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.221417306 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.168192055 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.105446333 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.105719364 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.617068656 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.122985467 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.109024431 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.894296062 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.816456105 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.035834364 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.841787391 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.25038664 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.108863599 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.105102158 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.10542971 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.018328024 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.263888135 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 4.477607627 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.251421306 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.106327138 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.104887598 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.077290644 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.429344547 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.968422303 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.00958819 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.113651125 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.251871535 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.106534021 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.105859338 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.106097715 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.105683175 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.105840179 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.10559142 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.614646411 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.120774207 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.709849356 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.250464159 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.108793741 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.347952762 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.176565827 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.105446188 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 4.303452026 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.195975651 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.221963273 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.179327388 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.106428477 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.526401024 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.254248426 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.07698211 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.447241035 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.429220129 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.357069071 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.684546919 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.161036047 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.532486927 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.419953259 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.926827264 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.108501612 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.017099162 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.239399993 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.909148769 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.095301341 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.6054845 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.710233004 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.144633598 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.38832579 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.032268482 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.480191411 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.294554482 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.179391646 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.105842876 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.10595348 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.185300078 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.358871585 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.15580532 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 4.371076884 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.321781776 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.093331185 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.433281663 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.210264416 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.344176366 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.140368588 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.120736093 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.107379371 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.105249075 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.601787342 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 4.023158539 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.20398682 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.10659815 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.023025055 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 4.019615138 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.036216678 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.739051813 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 5.053521449 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.251912697 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.106458848 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.309796808 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.162263238 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 4.901012066 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.129441321 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.892269936 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.442548137 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.156745367 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 4.320708313 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.475433741 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.869188697 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.528022347 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.231106764 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.106373684 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.49292758 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.113504313 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.257598002 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.019040183 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.474383775 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.659356469 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.588333516 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.424476821 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.230758979 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.00719085 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.686063023 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 3.144487899 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.110658965 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.957042867 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.257591127 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.465701027 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.101059042 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.374433525 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.256249216 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.752492358 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.845610637 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.254045838 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.736925771 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.25501813 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.1064204 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.942996746 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.024400483 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.336462014 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.235653946 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.107096473 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.126194975 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.789642605 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.709656582 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.356348747 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.189657775 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.106285857 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.879480657 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.811756774 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.248424754 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.110481889 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.10591407 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 4.568269248 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.160080814 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.10668694 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.529794737 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.72200971 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.25474606 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.592571967 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.298224675 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.257476116 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.394144714 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.496426759 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.322445486 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.173963455 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.107439984 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.106885015 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.106588114 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.677883341 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.122031636 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.107413381 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.705955233 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.255061631 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.865992349 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.032468927 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.364940072 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.181930727 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.527829052 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.25598191 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.592502642 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 4.029892269 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.239194705 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.353164124 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.211504633 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.224898882 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.860735806 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.219706349 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.107656782 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.06632758 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.472967792 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.477730907 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.518056617 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.464380503 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.200962672 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.824439916 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.226323407 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.889395896 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.127401286 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.106311997 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.580232115 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.305118309 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.548126893 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.268027563 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.58636007 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.231850105 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.408629688 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.394469348 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.205590502 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.107393068 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.106302394 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.136278172 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.147391381 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.681000884 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 5.050605433 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.591553417 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.249043837 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.930641125 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.68105487 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 4.957612027 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.29343935 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.441279603 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.428705097 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.145104847 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.080648603 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.479980864 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.196595919 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.274191324 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.208687072 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.913354203 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.185352859 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.133354006 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.698805015 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.12973344 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.115293182 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.168646933 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.024949099 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.944839216 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.237049886 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.368292411 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.223718037 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.121541324 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.74728446 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.418736784 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.171397748 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.107621353 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.106416217 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.988599182 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.224343633 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.107229472 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.453940264 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.314072163 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.468810508 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.975826644 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.590999909 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.223982717 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.110468537 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.108479341 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.818548851 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 4.732856376 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.179381208 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.585873177 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.403617182 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.810668501 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 3.351671862 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.830596305 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.851604361 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.323732591 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.430098806 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.304410719 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.334373716 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 5.271054314 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.20118288 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.023570316 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.795136681 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.352597398 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 4.082195578 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.285929762 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.323473786 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.466625476 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.335327689 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.266786338 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.272638205 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.272486046 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.761021402 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 3.311579924 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.274098507 seconds)
  done (took 1443.063151608 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.534523454 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.270698019 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.274568401 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.274491414 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.271346526 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.269014198 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.268472542 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.270299628 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.274326156 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.268193415 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.259449628 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.251274051 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.204878261 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.525735929 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.365050307 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.267925282 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.21761793 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.19207887 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.190285688 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.183411301 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.195928766 seconds)
  done (took 28.081688981 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.137525535 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.120622863 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.108233148 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.108899175 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.107910807 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.132476427 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.10928591 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.107143869 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.107163717 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.10720691 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.106885043 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.107051285 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.107262709 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.107895385 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.107841343 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.107353198 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.106652145 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.107286849 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.107071091 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.107248498 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.107220875 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.107198836 seconds)
  done (took 25.55273825 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.106938679 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.107364877 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.827485871 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.240931776 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.107785508 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.107901261 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.106903476 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.308226667 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.137414464 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.004850259 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.534212795 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.193931441 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.110948192 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.288214309 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.209928739 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.107938611 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.229074574 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.107726244 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.107110322 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.107110266 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.107604875 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.323513746 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.25512046 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.107342204 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.947265896 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.259218521 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.108206434 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.106955236 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.107206797 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.080276543 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.234875392 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.111676599 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.963160377 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.896246078 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.46498749 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.029861405 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.251731944 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.111946419 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.108955741 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.107974128 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.303277276 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.928190802 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.111896512 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.107819155 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.397715536 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.232754357 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.108235857 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.448273904 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.192491815 seconds)
  done (took 88.661481492 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.107764139 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.237500386 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.165679099 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.107250595 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.236746396 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.108028635 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.165571514 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.107519338 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.107796435 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.108041207 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.24370455 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.252067736 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.10759698 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.107462768 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.179745045 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.107923172 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.107873333 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.126725969 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.127138911 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.125375843 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.126526329 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.164604302 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.228811639 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.251151156 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.108223173 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.107812252 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.107634491 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.107120638 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.246643466 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.107581483 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.107315505 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.107556492 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.239852277 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.20889101 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.107942629 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.10736187 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.236958667 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.107875086 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.10745974 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.107468346 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.106997606 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.10783276 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.166811769 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.239855837 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.108252873 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.208513 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.107642838 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.108181634 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.243364599 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.107372333 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.107545944 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.258260826 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.107432956 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.107425248 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.10769717 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.237443733 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.107979534 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.10734815 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.107635966 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.239486401 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.108486579 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.107657998 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.253195503 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.107588978 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.108186555 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.258797481 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.204593933 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.107143529 seconds)
  done (took 79.281470925 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.107749976 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.244029608 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.282407717 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.284478942 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.244813428 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.229583499 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.247899134 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.245796313 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.243932331 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.246259406 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.246835318 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.205949848 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.214327705 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.206156509 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.248144212 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.228651242 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.229119865 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.228817812 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.247271862 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.247277445 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.229804515 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.282807795 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.246159136 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.284797816 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.463733306 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.214795843 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.244327006 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.247451001 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.286468972 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.244746978 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.462066028 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.247176034 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.245870833 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.287952946 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.46005424 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.242389075 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.1085657 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.244279868 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.248338222 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.244401128 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.214551697 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.285548723 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.241481934 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.214063939 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.229381506 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.241376283 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.28472322 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.460014475 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.204214962 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.247094609 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.24641248 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.28603216 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.241467953 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.231104819 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.285437679 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.211534061 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.282814893 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.285407331 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.249050004 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.2824981 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.284136397 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.209298792 seconds)
  done (took 79.029254698 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.107810973 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.107707462 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.192413982 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.108290223 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.107861298 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.193013357 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.108387568 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.108400724 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.108253971 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.10805919 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.108276619 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.192501738 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.470063271 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.108446084 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.19370055 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.469762616 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.192373802 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.193165653 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.107423036 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.19304923 seconds)
  done (took 26.574179719 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.108214509 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.108543788 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.108023164 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.263313779 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.107808591 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.244208748 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.108110701 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.10813477 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.107934308 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.10776703 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.107750755 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.108044464 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.108146983 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.263994525 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.107977344 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.24382024 seconds)
  done (took 19.406665466 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.108046859 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.108177935 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.109700038 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.109449916 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.10847302 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.108439104 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.107650292 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.108366703 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.107709361 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.565936644 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.108243054 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.10832956 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.107889817 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.109220892 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.108349937 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.107807208 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.108023722 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.108210513 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.107974467 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.107786726 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.685594452 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.108405076 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.107771529 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.107668867 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.10802762 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.679361348 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.108469753 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.108106932 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.10781675 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.107803023 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.108108402 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.58796316 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.107949962 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.108002981 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.108088575 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.108517012 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.107723888 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.107875198 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.107805019 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.108110078 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.107784761 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.108349086 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.107753338 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.107517992 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.107973497 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.107203002 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.107860771 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.56242029 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.108455315 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.107588348 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.107780377 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.108082682 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.107644842 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.581866923 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.108822413 seconds)
  done (took 65.056380038 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.148609402 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.16780363 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.108207769 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.108437622 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.160611124 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.148944983 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.150397218 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.123471768 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.147388942 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.108251567 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.167894751 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.123482226 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.147663354 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.160695479 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.171499773 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.150347625 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.10866777 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.183106982 seconds)
  done (took 21.680439952 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.108593876 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.108615696 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.108368527 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.108401931 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.108142051 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.108437078 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.108240383 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.10796453 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.10805981 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.108446632 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.1080812 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.108428778 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.108298699 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.107924894 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.108455724 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.108513137 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.107526673 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.107835538 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.108520983 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.108516996 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.108848381 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.1081694 seconds)
  done (took 25.477548899 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.139880069 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.154266697 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 1.108812632 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 1.108459563 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 1.108628049 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.130439957 seconds)
  done (took 7.844683055 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.172054537 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.171197508 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.144841716 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.163232341 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.17735119 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.19134758 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.186317286 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.190243558 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.174064633 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.404852795 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.19232198 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.18002541 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.170957902 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.23885199 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.174193213 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.180034809 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.193315285 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.191620991 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.159030895 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.197829425 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.197723931 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.180068221 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.196980344 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.186872868 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.193603923 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.239490711 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.170800381 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.408079306 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.192940154 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.174720728 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.174033888 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.192036406 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.180422494 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.400936148 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.161975536 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.171374623 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.190162556 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.194711376 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.173540974 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.233902239 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.144604674 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.174175081 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.170967559 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.201165554 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.17492578 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.200336195 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.200675971 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.192409272 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.195083071 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.407108243 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.174421784 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.233291091 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.173916419 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.180202995 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.174916449 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.396242786 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.406095285 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.232247255 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.170836818 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.405926989 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.235175876 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.175150327 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.239079733 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.407935217 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.208126469 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.247769415 seconds)
  done (took 81.308927483 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.281850221 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.154910442 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.246331198 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.452584018 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.234187937 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.211292293 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.221097057 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.239431189 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.237485586 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.199748076 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.217880479 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.221428403 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.254685427 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.254429374 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.213496708 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.20760172 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.231480851 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.274537289 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.215689186 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.409146765 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.192441478 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.234888531 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.234532168 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.234490485 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.400076999 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.177381481 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.201475544 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.192016411 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.192430674 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.194210858 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.200503812 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.192131536 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.235655788 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.14775133 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.23393534 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.20047579 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.193176327 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.200364208 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.194827888 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.176693068 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.239077862 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.194592247 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.192124111 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.191863722 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.40173292 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.198911658 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.198998891 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.197699672 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.247690741 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.190124351 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.402026566 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.400646678 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.412017873 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.234776638 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.19927365 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.196844516 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.194873928 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.19754855 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.198318284 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.174923667 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.232934539 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.191914955 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.401319454 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.192712328 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.19740106 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.234486742 seconds)
  done (took 82.640888039 seconds)
done (took 2424.034765635 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.169893998 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.162075053 seconds)
  done (took 13.425958083 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.108490547 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.10843508 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.267278746 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.108170212 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.129927964 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.170907431 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.171451304 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.118583519 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.10848105 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.196792844 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.108665356 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.243518689 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.212715451 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.10860421 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.109275033 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.118158841 seconds)
  done (took 39.50138212 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.233248579 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.649747656 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 3.056108225 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.909143012 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.143878381 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 1.91431695 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.478307759 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 5.860246785 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.417264553 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.573603419 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.372475019 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 4.998960459 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 6.042770182 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.302212655 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.641276129 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.735533955 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.823445921 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.851552301 seconds)
  done (took 61.09918692 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.114974176 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.302758775 seconds)
  done (took 8.543437084 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.223869419 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.301529815 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.338471347 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.28649586 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.25295135 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.265171899 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.273660639 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.284161465 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.299730342 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.22235863 seconds)
  done (took 63.888744321 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 6.146179137 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.598594838 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.432886444 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.57709748 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.779548671 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.600576227 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.274602784 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.54747503 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.208944571 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.096734371 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 5.387631081 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.505608389 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.968832969 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.426989876 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.7399595 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.372709976 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.893485926 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.566893242 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.47226929 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.557236735 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.414707283 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 5.268665809 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.567073856 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.041641338 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.124617931 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.746323312 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.395591424 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.238084153 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.18504645 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.279367042 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 5.518607875 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.125978793 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 5.465353312 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.118000247 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.195565876 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.786542253 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.83144482 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.310444971 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.668470237 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.469117265 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.502470741 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.824567338 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.178489694 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.795570519 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.263677002 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.498389405 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.216059563 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.358807655 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.194220643 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.228314724 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.660330855 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.294318666 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.244273276 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.230645136 seconds)
  done (took 155.515146863 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.097333751 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.481249879 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.248728889 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.099504333 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.48713424 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.315144563 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 4.683408761 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.671687546 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.127108154 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.334180229 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.274309907 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.232971071 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.100002448 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.101254266 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.102305556 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.100087013 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.2906181 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.691999549 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.117633374 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.1204783 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.337003069 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.373092215 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.263604271 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.142939916 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.390456921 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.394636982 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.509768318 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.234626968 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.510521017 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.099484987 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.558395006 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.118356153 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.248697612 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.240109881 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.56918174 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.500796268 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.594754017 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.154021539 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.906164831 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.178050099 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.825445642 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.343029932 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.455914023 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.306946674 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.404493074 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.38954688 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.763047166 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.156516745 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.948444895 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.360783605 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.472997869 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.483094518 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.587715972 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.268536729 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.875102794 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.258859262 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.262517731 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.474744841 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.374190786 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.320327991 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.157074869 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.225340283 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.1340715 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.383478853 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.149440953 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.265666411 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.131713551 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.140252363 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.260243855 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.294434584 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.296848808 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.387239633 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.396507808 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.377101187 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.123274644 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.422176279 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.563685536 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.393016893 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.143075373 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.135553097 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.550155439 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.595202769 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.297118931 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.382215029 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.462204394 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.469105132 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.711671992 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.140269959 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.363000997 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.30902934 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.5398962 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.410399049 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.506689003 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.027128723 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.14664337 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.151198928 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.127255016 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.283148585 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.150131915 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.652770495 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.425130207 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 2.739555058 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.320988177 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.586230203 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.24830913 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.142039776 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.693850009 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.146577765 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.361863086 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.457949663 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.149060424 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.144311828 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.302197628 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.082854508 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.136184767 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.592747454 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.566989087 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.140788031 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.300378373 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.139007316 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.398731526 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.93234063 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.368704235 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.146730916 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.418575196 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.329982324 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.41869225 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.14077099 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.416320848 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.417844967 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.547303718 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.516675728 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.148613832 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.111935007 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.450108648 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.144028576 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.133943072 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.337339804 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.070477085 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.363930142 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.141776109 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.558547482 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.304282418 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.526985247 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.139767027 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.385406207 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.359258459 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.473347112 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.106609634 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.265638387 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.107970448 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.058777954 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.27929933 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.103528135 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.111580819 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 4.945931449 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.113063677 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.285835464 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.335684585 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.793197768 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.480749171 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.464602336 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.101235338 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.537247861 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.314250743 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.539683345 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.633835179 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.283019268 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 5.833834253 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 5.345548965 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.108608535 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.353486269 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.434607536 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.115927996 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.11116696 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.922030552 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.297629114 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.171137275 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.29380063 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.035415854 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.605819134 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.322973758 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.107050127 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.49302116 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.12629119 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.335416649 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.601621358 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.391819247 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.099065263 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.098271644 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.097549549 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.105240104 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.321641996 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.343781509 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.663598389 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.248305144 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.401565828 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.321170151 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.42465485 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.56196331 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.107527115 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.431171324 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.100374684 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.501000454 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.10640283 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.272831222 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.37327692 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.102992977 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.321252799 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.459356602 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.196451699 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.508844911 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.102686135 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.101127072 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 5.705683344 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.279754032 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.539985477 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.100108586 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.196922964 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.466110888 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.232448836 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.299949682 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.182603842 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.082830858 seconds)
  done (took 733.801860353 seconds)
done (took 1076.882582291 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.098558928 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.121181707 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.106220853 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.104980443 seconds)
  done (took 25.527075024 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.078403488 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.175301423 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.286393816 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.11079508 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.453111694 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.167257178 seconds)
  done (took 11.375287913 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.097768737 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.102299936 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.105167601 seconds)
  done (took 19.401535173 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.401154702 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.581216096 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.275135239 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.207029377 seconds)
  done (took 6.567542773 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.153671542 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.134720538 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.121491882 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.146613965 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.112905507 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.113910062 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.151113814 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.144549265 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.147888853 seconds)
  done (took 11.333801219 seconds)
  (6/6) benchmarking "26942"...
  done (took 5.644708529 seconds)
done (took 80.960305028 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.509522605 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.475991239 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.196812541 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.650848136 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.478378098 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.642269352 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.446697108 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.271907197 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.527370651 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.578881473 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.671946414 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.276367048 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.604962153 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.5851554 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.394609803 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.175259846 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.147123247 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.194241135 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.834374293 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.338978279 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.625121819 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.273204121 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 5.795407669 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.180408255 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.100717082 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.29863738 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.439842 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 7.243211655 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 2.214211499 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.137792568 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.196603706 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.579782654 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.346632801 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.447019336 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.25121775 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 2.000603863 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.534481863 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.166360243 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.253376873 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.626581678 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.403489768 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.244372199 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.110363387 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.282196502 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.506996771 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.138782859 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.110851094 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.367995159 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.781152987 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.275018177 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.63332097 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.127585748 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.818303399 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.275356594 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.331648127 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.181182932 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.053382874 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.740785801 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.48855468 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.529927761 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.132205959 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.176820936 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.051359312 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.216852098 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.633451125 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 1.578475462 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.759049251 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.496244502 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.772679726 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.37836477 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.367870855 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.361585939 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 2.050418918 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.488984909 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.304487997 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.357407331 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.522366138 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.349162456 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.209027285 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.621046896 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 1.471082298 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.24040544 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.397716693 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.562671049 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.451002658 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.67049988 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.748099558 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.713049501 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.676430144 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 7.433041122 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.826785917 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 7.317105302 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 6.282422363 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.232369044 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 6.223745915 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 7.819058801 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 3.123352364 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.628239827 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.310656577 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.701545915 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.204461224 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.20266818 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.632342534 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.453687479 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.979291822 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.211220415 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.341920237 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.176152686 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.476932688 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 7.236673657 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 6.315434238 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.761264595 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.199707964 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.257379469 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.715727726 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.198866074 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.528619626 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.635272417 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.292506365 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.195712067 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.495647086 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.20461352 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.324279519 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.760257776 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.570668668 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.385436935 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.176144814 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 3.202298306 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.170508124 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.371057226 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.176080193 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.742152553 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.652689194 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.210738312 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.43846541 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.309068626 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.177537749 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.553629905 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.245537111 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.39731711 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.515621165 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.503719037 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.336491905 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.181233936 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.501565331 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 6.178578345 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.445742951 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.535307523 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.368905093 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.524941413 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.300285634 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.2315271 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.221762565 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.624301747 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.804081088 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.753253666 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.448548164 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.308909934 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.691606608 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.521414186 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 2.046358363 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.304604598 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.234628739 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.180648691 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.195808579 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.243514377 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.173875975 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.173908233 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.473834006 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.49850402 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.722783287 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 1.978909665 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 5.900476187 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.44952147 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.331469925 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 2.058008503 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.742776157 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.182914909 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.459667159 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.671020452 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.300913818 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.2055774 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.177394801 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.236043443 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.911657735 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.220671721 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.483209131 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.756611332 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.596626051 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.59544044 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.43728907 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.214107893 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.533461111 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.43399785 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.470200905 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.392759268 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.604964803 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.31853737 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.474805337 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.220095096 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.495621014 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.197310691 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 2.960322504 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.431625704 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.671401076 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.499717022 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.408429059 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.342463538 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.518568699 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.178439188 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.645099485 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 6.274065859 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.49660946 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.142670968 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.561070423 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.208781744 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.486918941 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.034002635 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.235827244 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.526743781 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.265964457 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.258249052 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.572622439 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.132414029 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.449017156 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.278371155 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.254339692 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.36408599 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.144540161 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.247528529 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.390934978 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.271811813 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.385866319 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 1.904939306 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.542486438 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.699521485 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 1.238915101 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.109397019 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.579758402 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.162593795 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.139530504 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.402806059 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.2801428 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.425881195 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.242373928 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.278128683 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.173277889 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.136868381 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.592430487 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 1.93949159 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.726902884 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.08684759 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.135468117 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.099320104 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.509771976 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.508810303 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.175441548 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.246622306 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.67782319 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.144623411 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.258184566 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.114718307 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.113699631 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.93156567 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.242335346 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.353199524 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.659417711 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.114969087 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 3.098136662 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.144170146 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.541679875 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.576838237 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.162862907 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.232195832 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.548475057 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.165124147 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.513389862 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.139695681 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.280438685 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.433031012 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.230823986 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.222391276 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.102386509 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.145578331 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.674082804 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.45027921 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.59731929 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.140988714 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.560961432 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 7.201011906 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 1.365858929 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.12623177 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.193344263 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.502188658 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.266551991 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.498683401 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.115867904 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.276368437 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.361747592 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.130527487 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.099590098 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.249512964 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 7.744561561 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.680153709 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 1.381424714 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.20900395 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.09420933 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.352528056 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.110622986 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.65567817 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.252154817 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.237847994 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.701256722 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.58485496 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.112241436 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.317093262 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.102477791 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.469264126 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.138488488 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.1281013 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.246028229 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.195209271 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.100248595 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 3.735941916 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.296001661 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.598674363 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.253579639 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 2.019894055 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 7.256465259 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 1.28636676 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.223331601 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.505686442 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 6.113921921 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.127321666 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.250402125 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.765661216 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.266787791 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.144679889 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.372701527 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.114321631 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.705914051 seconds)
  done (took 886.589240209 seconds)
done (took 887.895574776 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.357671747 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.48460768 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.346299045 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.064206567 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.918183345 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.748599492 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.362286639 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.338860802 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.182654922 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.364133302 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 1.997684728 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.915087229 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.204035684 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.220612967 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.194858961 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.206185685 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.312242801 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.346994061 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.223511137 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.200639482 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.496090216 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.202395679 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.522230895 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.401682445 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.482874184 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.209835816 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.309781883 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.622633263 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.621979265 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.09361452 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.292359351 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.380776307 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.94537748 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.349088136 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.195146313 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.190590915 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 1.979210052 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.204391897 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.356868871 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.188913972 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.482539805 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.229360368 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.821966216 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.016698205 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.884714256 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.519180536 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 1.9865282 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.208653512 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.211061823 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.312881397 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.366412255 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.356165477 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.622415092 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.116594638 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 1.954628378 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.015135304 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.622527456 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.000567163 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.843918839 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.313468339 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.628989122 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.210432758 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.311329304 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.338718629 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.227658427 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.402363129 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.519114896 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.357076481 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.380220323 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.36696498 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.350763413 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.330575131 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.22280355 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.307543578 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.225667202 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.362201368 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 1.83555342 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.344697792 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 1.895955971 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.20990053 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.014067211 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.025731104 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.062639276 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.182079089 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.357262638 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.880628164 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.164776173 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.011932734 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.22564938 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.380006665 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 1.99630548 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.346154273 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.568460111 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.310519706 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.357290902 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.34558951 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.175271339 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.359022616 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.081812291 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.379023518 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.888240148 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.31095361 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.146756528 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.184439134 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.208913872 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.357182523 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.310297299 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.522531903 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.331196063 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.264208484 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.483342824 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.234776334 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.33046642 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.223095494 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.181805221 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.88480802 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.391187143 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.993291675 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.360016806 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.783266445 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.364827337 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.185019453 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.483498875 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.402180739 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.357447357 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.204589176 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.20995011 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.004107959 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.208745102 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.210231099 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.295326854 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.558794312 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.313135375 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.066788527 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.331412652 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.894267933 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.343922962 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.331559268 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.181792423 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.000586588 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.205308612 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.063918859 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.402752221 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.484556485 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.347209711 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.402722233 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.226612373 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.399851148 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.3587956 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.22370375 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.330579515 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.231411899 seconds)
done (took 246.123684018 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.492342979 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 5.388480723 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.384263238 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.421432014 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.475622679 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.474345473 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.176050323 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.541446958 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.221560546 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.526137061 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.362711785 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 3.045572327 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 5.401065592 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.320641803 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.46913419 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.348416738 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.221914306 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.368103464 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.557888624 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.465742859 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.928627193 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.360723709 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.261339165 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.522830405 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.100902799 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.933989857 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.465300329 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.237631033 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.374256332 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.916630721 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.946564224 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.375120493 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.466272658 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 4.982450081 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 3.609721666 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.884124621 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.478755308 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.981272021 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.4913346 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.490872509 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.381917929 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 6.100526189 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.91933075 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.954392906 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.265362124 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.457771916 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.180660877 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 5.215509691 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.101146095 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.896076988 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.368922131 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 3.014043599 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 3.044666723 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.450935817 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.321477378 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 4.884469098 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.594621372 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.60786449 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.46546107 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.412139556 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.493063942 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.522821725 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.525805295 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.308140057 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.949042297 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.392412264 seconds)
  done (took 149.401045914 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.540199073 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.411104065 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.510388749 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.500466401 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.691399265 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.53029612 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.600484999 seconds)
  done (took 13.883070774 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.172622115 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.154664815 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.357143725 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.358837157 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.162713069 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.285994644 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.244373528 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.956936265 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.378327587 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.200442552 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.471325419 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.353150988 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.859898948 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.939735196 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.245229106 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.397262043 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.12590671 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.224459213 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.216559438 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.418112224 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.938475836 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.910702496 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.34578221 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.245158641 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.165479698 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.200809711 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.154405629 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.128030295 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.197988136 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.143583794 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.166565434 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.270926686 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.155912496 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.91067206 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.180363444 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.471556445 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.162407958 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.206257737 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.297025764 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.106935115 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.138995642 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.162423558 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.299227218 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.168567309 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.140565598 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.347797824 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.144206022 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.166281098 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.137160149 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.154000355 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.345451987 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.157794043 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.180184078 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.87120792 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.365210733 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.935797216 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.225006864 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.152337397 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.15191015 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.212149211 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.155514787 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.41771314 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.401225999 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.137370652 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.375078598 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.441868232 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.155549847 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.138774789 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.138320516 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.401755178 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.150538225 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.40019525 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.160062897 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.207102429 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.205217768 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.284321675 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.347969137 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 1.943346159 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.917517339 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.859349064 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.124973924 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.144025776 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.475447673 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.094806992 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.873853431 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.144056989 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.205329506 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.863195324 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.067347834 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.154387621 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.466570588 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.141225869 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.214812656 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.205878977 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.186030044 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.21751138 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.379865111 seconds)
  done (took 152.82037606 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.341814953 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.694249056 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.383051891 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.19515629 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.335180313 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.460510219 seconds)
  done (took 15.509144479 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.691999475 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.976387656 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.179874555 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.173908453 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.211931894 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.155017057 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.15273112 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.445837831 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.31865472 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.169432327 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.151915835 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.174432831 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.158176204 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.296143265 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.153158463 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.159562779 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.156144182 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.183925554 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.164411888 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.221241154 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.470999866 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.212109329 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.221714951 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.041186109 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.226805234 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.162931723 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.095013739 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.165990405 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.164896684 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.477401189 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.346541805 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.152480784 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.993030724 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.592003684 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.936949987 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.04796741 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.318009567 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.17737269 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.210922958 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.155133011 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.181681113 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.221290868 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.185389364 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.174880867 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.605843914 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.986226685 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.247606669 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.424507751 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.153169808 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.184464626 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.186024621 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.174275145 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.151979531 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.175223235 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.631546634 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.681218421 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.144493222 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.154962123 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.211742204 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.055708831 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.253573951 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.155639587 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.581034919 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.11520949 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.889892318 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.17552646 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.064683046 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.306781942 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.225077037 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.174549175 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.174234882 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.173580183 seconds)
  done (took 118.847104696 seconds)
done (took 451.571344375 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.497730297 seconds)
  done (took 7.59628415 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.235415439 seconds)
  done (took 7.506370336 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.100816401 seconds)
  done (took 7.213296574 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.108931848 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.156602208 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.127862129 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.128759458 seconds)
  done (took 25.660882597 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.262836806 seconds)
  done (took 7.364948033 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.100075774 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.123656141 seconds)
  done (took 13.432248564 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.222498308 seconds)
  done (took 7.350208843 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.498466674 seconds)
  done (took 7.622187743 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.109454655 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.165654404 seconds)
  done (took 13.413500312 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.114966553 seconds)
  done (took 7.236396272 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.524957287 seconds)
  done (took 8.747326547 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.109069824 seconds)
  done (took 7.252090567 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.123410465 seconds)
  done (took 7.223997331 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.209829062 seconds)
  done (took 7.309533135 seconds)
done (took 136.040175645 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.147877582 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.110665633 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.107025206 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.105431475 seconds)
  done (took 25.605237738 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.436960391 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.436753154 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.414944509 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.587018976 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.380823289 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.380464583 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.437709506 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.436417211 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.380746313 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.482163305 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.43612394 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.480172144 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.587483314 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.414033711 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.414274646 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.482638602 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.488132422 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.437094839 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.380892485 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.414799269 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.480150901 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.486737214 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.854735317 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.847443385 seconds)
  done (took 36.682678895 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.32445309 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.557783492 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.268122071 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.429463843 seconds)
  done (took 6.678943892 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.14639704 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.486697344 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.470508021 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.528118763 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.469344113 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.282321188 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.469384729 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.321803959 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.261334233 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.292141123 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.711477085 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.26286192 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.276340144 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.528106005 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.282614013 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.112191468 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.11275428 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.291846105 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.486115434 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.312394443 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.377689363 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.469443523 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.468463 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.469768336 seconds)
  done (took 33.989684266 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.870549555 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.04138485 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.470237987 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.117893999 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.837993781 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 1.905111283 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.392273327 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.614010212 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.378914962 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.35322464 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.851877512 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 1.904201099 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.257697037 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 1.998670984 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.872097575 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.289556117 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.289436 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 1.959385162 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.752816776 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.412154917 seconds)
  done (took 38.669382606 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.10127617 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.364652081 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.423055174 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.329425968 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.148230197 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 6.12016632 seconds)
  done (took 26.586277326 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.16075629 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.290626999 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.428517152 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.441427706 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.419377091 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.407381856 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.947998411 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.495658682 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.051227235 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.0730373 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.934931981 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.732509094 seconds)
  done (took 23.494887223 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.26398373 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.295663171 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.26328657 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.429533801 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.121604277 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.118374332 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.583429266 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.265090099 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.385557224 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.460630858 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.131699213 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.436679502 seconds)
  done (took 42.024990294 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.449585266 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.45739077 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.603839449 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.157965763 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.790681648 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.351241264 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.688441603 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.772296445 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 4.065549896 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.416829467 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.803286195 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.337513135 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.814194515 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.235948246 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.259832131 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.596650685 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.0930166 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.281141748 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.713031602 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.343997819 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.228289181 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.418669814 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.266803443 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.869925461 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.597487959 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.272652806 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.469748918 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.511149176 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.289437512 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.481350591 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.339901826 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.725537748 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.368659541 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.66974609 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.914572442 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.317717501 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.286637617 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.268784096 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.710004269 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.399676161 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.256073585 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.266386352 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 5.631947601 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.220246077 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.362260681 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.931481906 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.106528455 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.774440025 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.146418646 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.302343793 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.024994752 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.041219937 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.471324382 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.123435613 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.253883168 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.432220076 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.346044897 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.234521533 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.406882935 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.167395485 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.292674359 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.218851604 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.302613483 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.074783127 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.597272011 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.45047185 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.439288268 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.454607437 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.42082079 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.404802429 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.452686288 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.203240717 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.926945355 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.24492055 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.640626219 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.017952132 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.459355881 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.104985637 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.83392654 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.638182173 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.083912913 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.219205749 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.771946691 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.067505981 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.10177631 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.275570392 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.97170672 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.075139383 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.196874768 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.134355625 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.503886052 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.2449347 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.255264805 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.404279905 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.803732506 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.087704102 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.87133832 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.401483659 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.071689386 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.665738372 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.101714832 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.083443288 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.103128094 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.662771129 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.518445499 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.158478256 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.849033507 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.730545261 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.421291032 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.743976934 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.269326907 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.101803012 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.453067683 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.432726563 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.101457936 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.85755594 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.245182752 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.207637867 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.481696618 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.121733091 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.101768755 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.51057808 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.302875504 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.14476991 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.347537208 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.123033946 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.280439635 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.145173736 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.836117103 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.403725128 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.356771136 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.633086742 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.433109259 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.191950399 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.074911037 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.247527124 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.60583931 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.198794118 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.475955727 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.590860598 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.745780033 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.688897776 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.102442348 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.990184705 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.636655649 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.429490509 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.505766914 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.29266184 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.316078585 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.245415587 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.135335683 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.338012975 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.147654076 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.655349202 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.138866982 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.774785347 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.856372748 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.403426704 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.102041199 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.083886551 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.25556327 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.335615076 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.770752678 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.158649001 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.265093819 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.387236025 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.309786846 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.102410149 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.075427797 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.481151724 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.368501234 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.633152746 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.367357959 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.771040207 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.454260116 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.58924654 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.308358139 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.462556779 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.894904558 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.775178934 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.455537143 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.716655893 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.12997205 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.103402631 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.169205807 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.531913484 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.333050264 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.833594626 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.253146588 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.156785787 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.13102814 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.595984447 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.075201101 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.254751976 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.59152632 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.14364237 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.672767096 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.29242804 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.300073346 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.384256708 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.135466211 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.451293312 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.931985851 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.513417793 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.478803713 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.416893402 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.083496661 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.869256589 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.624618514 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.614939335 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.248251293 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.531380399 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.368476013 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.167140553 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.102482867 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.450920686 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.133250787 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.929201909 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.41148652 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.792340726 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 3.800272524 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.270876119 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.102388585 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.107096224 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.041911059 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.282835924 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.153490278 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.278414202 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.648117758 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.376361924 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.433046309 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.102286659 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.108335111 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.385321872 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.412143065 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.379593059 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.613142244 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.723810912 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.788976107 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.21599092 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.720172137 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.271823764 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.14410443 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.766513386 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.415369945 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.052343538 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.279062348 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.931809339 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.246974131 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.175483266 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.379193859 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.103343911 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.58101534 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.729116291 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.104698848 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.136299209 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.252538224 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.102478406 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.332746749 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.000633547 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.370644171 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.285652407 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.450925293 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.345893598 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.278435342 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.512238274 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.641119991 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.470786327 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.077116234 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.265214409 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.19980264 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.417642382 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.103230669 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.386590045 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.74880789 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.780192499 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 1.904049092 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.65100037 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.340085824 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.869133828 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.576859609 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.362332378 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.404429615 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.065963151 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.774953214 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.092260802 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.244074121 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.073738013 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.895845869 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.434945067 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.487057427 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.589198201 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.178428414 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.637942131 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.511508324 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.134207521 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.26286881 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.363339817 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.101944762 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.431752992 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.101790132 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.191375788 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.509213949 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.109734372 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.640400851 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.305807633 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.434999133 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.263568566 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.763252308 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.147729245 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.225125526 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.575029221 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.280995531 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.242656808 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.443543936 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.922386373 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.14767575 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.238433973 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.088538093 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.73558036 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.581680985 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.724609331 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.6951708 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.452666874 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.84616115 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.104424654 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.308726518 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.267426796 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.863444069 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.298059022 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.512729257 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.146471875 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.307240144 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.434955949 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.305149289 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.663875123 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.086838042 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.707136456 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.352902225 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.623937862 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.65616521 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.874169646 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.57392863 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.326925616 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.629213566 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.104235126 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.271870619 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.521872437 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.834512794 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.959822574 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.949595558 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.897475635 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.224551296 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.540950986 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.19671834 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.892054582 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.267466097 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.339401911 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.309985687 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.241611995 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.072654716 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.731265176 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.888496695 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.380352072 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.268669267 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.278025503 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.250080075 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.451765057 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.625623305 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.416223018 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.845973315 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.584384273 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.352461155 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.074419799 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.104158047 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.378508475 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.288362267 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.199289891 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.405353235 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.562015912 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.206068107 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.116834658 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.141697971 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.6460033 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 2.848024797 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.825710139 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.449054343 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.640244138 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.709634174 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.103810687 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.848314102 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.309466393 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.464888215 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.51605234 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.022356654 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.536818093 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.418516196 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.26020095 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.072349626 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.283042863 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.122315578 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.127703893 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.883557353 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.402281509 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.166421358 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.965570302 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.74555231 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.082647586 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.150805676 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.159634323 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.401134715 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.300027908 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.102509308 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.699807189 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.52342123 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.258930386 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.091473401 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.866681476 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.071891107 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.30953305 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.258390167 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.308959765 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.954250843 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.175123273 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.764281373 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.650486714 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.354191429 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.317132127 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.074183124 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.881625672 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.127498991 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.773669473 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 1.899846216 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.354239563 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.617416691 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.278712215 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.107737605 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.43127806 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.244662259 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.432802334 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.823085134 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.596536909 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.529000486 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.477122168 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.405690696 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.83560361 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.255012563 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.346642898 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.072468031 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.189870729 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.112992762 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.477242145 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.48446757 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.102728584 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.641575983 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.352866049 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.227146818 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.280536868 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.288941734 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.644288905 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.312937316 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.241298926 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.274550242 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.372238657 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.464310217 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.161722704 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.285081929 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.104345665 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.099252427 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.310159029 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.353978632 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.485572061 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.418686424 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 1.706064463 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.262299392 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.628734523 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.971856254 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.634926426 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.104987896 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 4.21504465 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.461854804 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.103839507 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.594177558 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.774223751 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.27787712 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.807240815 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.206231461 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.280190666 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.301870093 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.599988886 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.111904219 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.760906845 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.511376129 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.103422125 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.582852378 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.186310824 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.268180743 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.857128464 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.60103815 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.103972268 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.166899608 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.257993001 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.661218795 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.804143606 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.277838168 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.116489073 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.744754121 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.084290795 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.104163106 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.172649219 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.637131552 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.122807126 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.689008278 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.263536798 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.273663018 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.109984645 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.244943992 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.106609525 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.310701935 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 1.707230791 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.349907592 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.380880154 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.279229511 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.103813379 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.736339051 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.804789471 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.367939828 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.318091727 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.257379878 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.495199963 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.96303588 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.251924791 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.682533397 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.313001796 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.331246325 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.543069391 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.364464406 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.138500132 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.305790123 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.104018564 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.442601305 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.264744282 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.6690671 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.368289514 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.843343906 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.351684114 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.118860239 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.660820611 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.578503492 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.990594863 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.102954649 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.414433547 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.103580644 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.890619129 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.750923326 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.302012865 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.230619263 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.337924628 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.697926413 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.419191364 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.240415207 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.105529322 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.316697061 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.608021199 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.077226571 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.171287276 seconds)
    (567/608) benchmarking "2d"...
    done (took 1.993045336 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.314419636 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.433898982 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.074352096 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.279281225 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.119974251 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.085008624 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.601298383 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.104182699 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.488785569 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.076390872 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.641801362 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.083307407 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.1740055 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.269625738 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.458454048 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.10430348 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.825225795 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.355629391 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.103012505 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.103510655 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.455786187 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.193637209 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.357901282 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.577561093 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.319028267 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.449618336 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.997687829 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.889856802 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.122412873 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.413225156 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.103093073 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.662954659 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.177346147 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.626065633 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.880249096 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.122616254 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.661886904 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.352872365 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.83155044 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.250945906 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.571708979 seconds)
  done (took 1953.903813523 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.110617761 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.166195601 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.157544642 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.201541286 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.263537951 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.265143544 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.183077215 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.166640328 seconds)
  done (took 50.616073282 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.102640475 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.046817645 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.579308783 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.289588158 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.130494894 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.337534839 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.264696092 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.629702236 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.309223021 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.142688745 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.170654081 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.187565377 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.117013703 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.14173028 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 6.030302497 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.194749297 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.107894316 seconds)
  done (took 90.89910549 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.122456925 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.273643567 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.130767798 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.010098975 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.193813097 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.492401771 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.117169025 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.10639927 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.429818291 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.401612936 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.15474114 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.191140729 seconds)
  done (took 80.762485814 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.14342674 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.177683661 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.146052548 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.163576638 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.173368884 seconds)
  done (took 6.911624185 seconds)
done (took 2417.968419244 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.3387174 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.572959937 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.634936776 seconds)
  done (took 4.371095629 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.208074856 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.258890802 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.323771567 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.279588728 seconds)
  done (took 6.236955071 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.42061562 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.604459466 seconds)
  done (took 4.143069372 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.604246135 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.169628257 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.647440382 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.1036261 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.116277204 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.111852533 seconds)
  done (took 19.449903642 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.206311661 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.19303127 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.185962323 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.178306313 seconds)
  done (took 5.890269782 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.144352328 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.129422582 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.115492019 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.084319171 seconds)
  done (took 18.612359182 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.286225549 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.195879988 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.859215266 seconds)
  done (took 5.520033247 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.924494179 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.487395022 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.90857332 seconds)
  done (took 6.422076534 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.059499193 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.132450868 seconds)
  done (took 5.293582548 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.268537421 seconds)
  done (took 2.370082839 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.591892245 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.593359796 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.96322477 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 1.996199171 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.136579082 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.430791107 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.427234037 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.478011757 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.803112205 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.655668795 seconds)
  done (took 18.178301173 seconds)
done (took 108.399527006 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.014500779 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.569126948 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.363566285 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.806377502 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.204841916 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.262655191 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.716793592 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.574933789 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.706524514 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.706067072 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 2.817653396 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.205285225 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.127186614 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.488807305 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.129221524 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.442176619 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.513347933 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.011136743 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 3.636759333 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.231060613 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.72919144 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.695401681 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.534869767 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.71006813 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.525700265 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.264586074 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.057182106 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.468781554 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 3.898492118 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.047243688 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.274955865 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.500687507 seconds)
  done (took 153.378596113 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.102882985 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.118281468 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.120398849 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.113905281 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.092167946 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.118729846 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.114755616 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.113281573 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.061164774 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.06079385 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.118857788 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.081031117 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.119042958 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.114685262 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.118036883 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.113740903 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.276996508 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.119017086 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.11774398 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.117909591 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.120050819 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 4.951623062 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.118882968 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 4.963805275 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.274851505 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.119492841 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.114422386 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.118891098 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.118718926 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.118333327 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.118894924 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.113961881 seconds)
  done (took 188.683276214 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.103374757 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.118730899 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.116628886 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.113895347 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.11814081 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.117305476 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.117473242 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.113962661 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.117622308 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.11813601 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.117514125 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.118782447 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.121068519 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.114612998 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.119695538 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.114479723 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.117981443 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.117855634 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.118406288 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.117426361 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.116754494 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.113627871 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.117304402 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.117068618 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.117371092 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.12035891 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.114433707 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.117923567 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.117083931 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.117112225 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.117295744 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.114777595 seconds)
  done (took 196.85218485 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.412820219 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.145820353 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.034829423 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 1.67770148 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.000621297 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.137078164 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 1.676479271 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.414235576 seconds)
  done (took 13.615201964 seconds)
done (took 553.698747888 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.774581096 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.033815368 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.292599691 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.333228625 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.706265348 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.406659837 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.331216113 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.585955588 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.858796851 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.58345016 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.58716135 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.326203699 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 1.935906316 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.338861703 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.300343134 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.566818885 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.542616445 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.829950662 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.318837604 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 1.975257203 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.335302692 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 1.974486999 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.60900177 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.913955613 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.587253845 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.026992258 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.224668189 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.546211698 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.327546121 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.326997298 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.139639001 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.489416478 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.369018586 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.361368256 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.587146335 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.599967661 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.446297285 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.556431922 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.288564578 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.778364026 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 1.984163606 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.719980408 seconds)
  done (took 74.924520446 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.137091677 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.154488196 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.308487151 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.207069017 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.759999238 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.214135995 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.385718404 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.349899368 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.242252307 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.359911727 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.399584704 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.792983552 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.387286043 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.787668341 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.375460121 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.40550356 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.213933368 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.736713374 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.375881389 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.345975065 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.179534853 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.309649601 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.184215771 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.333879047 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.172928424 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.186330981 seconds)
  done (took 36.438151736 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.184489446 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.299146715 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.397123751 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.502811243 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.369902288 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.159877093 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.479049078 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.263421492 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 3.062341453 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.466870064 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.241744202 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.255947803 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.312506907 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.424419238 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.71227965 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.31875151 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.302726283 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.30943697 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.305935749 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.383928438 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.257518951 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.223595565 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.483638628 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.326031523 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.84232514 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.529623631 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.513576157 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.776480862 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.683473083 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.30155969 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.272775859 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.461396076 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.520386924 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.398732265 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.282922752 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.166389064 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.164627861 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.243134166 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.067663265 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.31008068 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.47681104 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.329867191 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.537115829 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.691233582 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.203665536 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.406181943 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.638014945 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.251501371 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.269742515 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.948273339 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.445957931 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 4.14716955 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.302381466 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.345398541 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.276624046 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.566509015 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.343072522 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.454492872 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.331928535 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.884043127 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.222144107 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.557629963 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.309935618 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.209108988 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.454462659 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.357230434 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.354593011 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.621804621 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.539771932 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.662566968 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.708011514 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.226884445 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.176327063 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.240741331 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.305109433 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.669778849 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.614438934 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.400545697 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.535622918 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.462624032 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.680842302 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.640780365 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.130293166 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.856428732 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.208512259 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.152546454 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.226667632 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.466919165 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.4591193 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.628394731 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.69782762 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.473156565 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.56559724 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.58237663 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.569705998 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.588118395 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.142154292 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.164883311 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.385438961 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.701073944 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.227856982 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.415628822 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.815613178 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.524094794 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.538739149 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.428131215 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.547205845 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.206046348 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.580848196 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.138657935 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.384101693 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.502087369 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.406094445 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.574361596 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.134683293 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.667357985 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.265017598 seconds)
  done (took 229.842214867 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.104949116 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.119989927 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.106189408 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.12062282 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.104858156 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.730698417 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.185686529 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.104763186 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.728734465 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.18606809 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.105747832 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.105212417 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.106993641 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.109025463 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.699076709 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.666885172 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 2.759560967 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.105139965 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.105111749 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.116603752 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 2.816826541 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.108881119 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.104854795 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.116150557 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.108004292 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.110679191 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.156309332 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.16598439 seconds)
  done (took 152.168906457 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.18560238 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.56925652 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.22216029 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.281310747 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.221820323 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.195281735 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.691097506 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.334170987 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.271831152 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.222046369 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.198360228 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.403080403 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.418607088 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.772821908 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.299881475 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.302404377 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.879844343 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.336690168 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.229902491 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.191911232 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.329178432 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.51796625 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.464074138 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.464095676 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.327140536 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.447542296 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.246804509 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.1704093 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.292149106 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.667494348 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.189601997 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.550166426 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.355878655 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.202315715 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.692374491 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.520248752 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.758480149 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.731874802 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.360718752 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.132045106 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.135361909 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.407377754 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.475767992 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.223967907 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.170413643 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.832680414 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.193102063 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.57466936 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.216973718 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.131557383 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.267334925 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.289325674 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.444915262 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.147956651 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.347126269 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.320640357 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.677477253 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.15479723 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.235842092 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.468840365 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.145328338 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.663330185 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 3.125199835 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.233824161 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.185554326 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.022502465 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.253011605 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.698567054 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.786012228 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.221616146 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.507553769 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.352265128 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.147899858 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.429962666 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.34236301 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.633838973 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.746998819 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.310458515 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.271302604 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.253313248 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.447593207 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.162380764 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.717794647 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.273309677 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.14661577 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.665888181 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.558920037 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.147035292 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.164496716 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.288873905 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.325270081 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.376234546 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.454410759 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.240154299 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.068996882 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.42962977 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.484180283 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.190247561 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.293130757 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.16223588 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.571968362 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.352300415 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.153304683 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.486046768 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.567576562 seconds)
  done (took 157.569266862 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.846088169 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.225793418 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.411275812 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.685045296 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.505427138 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 2.599835829 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.388577929 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.243665818 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.423377274 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.378458209 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.37132306 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.255367894 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.127800292 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.922917226 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.222645816 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.333552338 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.23774757 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.794275349 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.493447033 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.144493033 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.461362248 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 1.898463669 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.475640544 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.566386745 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.549073192 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.651778103 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.841099093 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.312191478 seconds)
  done (took 48.483616663 seconds)
done (took 700.541469589 seconds)
SAVING RESULT...
DONE!
