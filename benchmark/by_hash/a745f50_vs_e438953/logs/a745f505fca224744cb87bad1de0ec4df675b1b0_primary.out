cset: moving following pidspec: 4106416
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.76363612 seconds)
loading group "shootout"... done (took 0.821132267 seconds)
loading group "string"... done (took 0.230363187 seconds)
loading group "linalg"... done (took 3.175810974 seconds)
loading group "parallel"... done (took 0.020947848 seconds)
loading group "find"... done (took 1.19863054 seconds)
loading group "tuple"... done (took 0.703499047 seconds)
loading group "union"... done (took 3.1498696 seconds)
loading group "dates"... done (took 0.152455614 seconds)
loading group "micro"... done (took 0.056005187 seconds)
loading group "simd"... done (took 0.358670237 seconds)
loading group "io"... done (took 1.378859438 seconds)
loading group "random"... done (took 2.349673942 seconds)
loading group "problem"... done (took 1.189390947 seconds)
loading group "array"... done (took 4.544455566 seconds)
loading group "misc"... done (took 0.973634637 seconds)
loading group "scalar"... done (took 3.402806347 seconds)
loading group "sort"... done (took 0.302402275 seconds)
loading group "sparse"... done (took 3.529507401 seconds)
loading group "collection"... done (took 5.92284443 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.554001991 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.074259848 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.257636205 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.078922805 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.282807149 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.082054695 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.090291041 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.072501221 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.065399504 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.16131747 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.210782945 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.39658521 seconds)
done (took 5.08325264 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.262672712 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.033137177 seconds)
    (2/2) benchmarking "String"...
    done (took 0.12339829 seconds)
  done (took 0.765166612 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.137551376 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.015287852 seconds)
    (3/3) benchmarking "different"...
    done (took 0.022133937 seconds)
  done (took 0.776612152 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020195471 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.097951153 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.021108467 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.021741133 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.021532552 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.02099459 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.020824902 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.020771923 seconds)
  done (took 0.827860211 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.028299763 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.022716791 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.020663481 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.022053413 seconds)
  done (took 0.695889696 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.022034581 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.082077946 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.019744165 seconds)
    (4/4) benchmarking "different"...
    done (took 0.019560015 seconds)
  done (took 0.742342642 seconds)
done (took 4.706515284 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.194994048 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.77656006 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.950907507 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.182004945 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.361962132 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.308657626 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.077800018 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.246355343 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.14701409 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.032052952 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.184262448 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.041047452 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.544269743 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.452082365 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.028543593 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.144398611 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.577156814 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.03931221 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.070042139 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.216836589 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.040733625 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.04075682 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.044639124 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.027230326 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.152556766 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.144607745 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.61698419 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.067726223 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.029143041 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.05516416 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.031317489 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.122442643 seconds)
  done (took 9.590539317 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.158943602 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.155349511 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.027356819 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.063506116 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.054557567 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.028305174 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.034967546 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.026523732 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.048110904 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.095387531 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.04920458 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.167993433 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.024423105 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.027924863 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.147485184 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.122922848 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.040347054 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.041764326 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.02537088 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.041244483 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.053773214 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.037144375 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.039441904 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.036698875 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.073072202 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.092950676 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.043504137 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.071484791 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.023903376 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.037680235 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.055247949 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.06661951 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.025018456 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.024443202 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.070833943 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.043079439 seconds)
  done (took 2.875286937 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.069377078 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.05748168 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.148326021 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.139355376 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.068164182 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.052720251 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.186645814 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.079793257 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.056556594 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024245186 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.215926308 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.699847391 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.181099044 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.165183829 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.029284348 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.192181297 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.933558141 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.97172314 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.026303209 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.026572715 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.14167026 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.028764135 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.188514704 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.025765745 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.146166277 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.865449085 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.029102865 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.027260561 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.057537703 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.151498407 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.02340374 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.10645023 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.055707295 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.028604891 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.582594321 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.022595444 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.020429209 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.043128492 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.050890217 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022483321 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.023581169 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.034165994 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.022352263 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.081326405 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.042220119 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.571047906 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.027500298 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.712978599 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.811664597 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.030629907 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.027566887 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.058181915 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.019748067 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.023252977 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.569370589 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.111412305 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.022730748 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.250151585 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.02571647 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.024945859 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.024963527 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.057875349 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.023771413 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.025461107 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.027261329 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.04129478 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.040449495 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.032377756 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.042717904 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.021429312 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.022625943 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.021043632 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.389678754 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.029203604 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.025016174 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.020569578 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.026867495 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022967203 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.02211788 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.067399716 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.049440531 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.047009978 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.025989037 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.023090284 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.022310705 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.541821272 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.047206244 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.024937363 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.024102931 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.481274483 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.020076256 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.0219576 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.02362508 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.043558137 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.022509078 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.019363919 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.057239413 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.024138241 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.125398308 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.487903601 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.023511382 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.019577855 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.509583728 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.023902294 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.054478044 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.075910876 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.02198776 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.05939077 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.022497597 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.019752585 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.026112131 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.019715496 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.024007946 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.020862002 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.021726695 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.020690647 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.022476469 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.023523696 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022440058 seconds)
  done (took 20.388648489 seconds)
done (took 34.52588747 seconds)
(4/20) benchmarking "parallel"...
done (took 0.737273096 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.21048612 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.047996501 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.019116213 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.162029353 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.043463699 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.133945352 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.176355643 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.126537154 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.045318227 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.044995344 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.045272845 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.181195807 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.19317051 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.046361037 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.124201208 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.192773574 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.046660698 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.019657071 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.04559012 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.046582375 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.046491723 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.019995848 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.046523279 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.046493562 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.118478734 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.046561761 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.019528721 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.12210427 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.047999563 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.12318541 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.047561246 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.046378313 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.047378165 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.122026073 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.049614549 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.122290121 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.01990792 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.049404155 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.049544175 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.050559329 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.049652669 seconds)
  done (took 3.955804408 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.045093942 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.037075542 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.039519703 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.017619374 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.02709596 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.037079915 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.017618186 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.036600014 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.040783679 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.037068644 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.037010576 seconds)
  done (took 1.12214223 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.039830318 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.03813738 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.039413983 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.01749721 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.028757498 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.037884532 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.01746549 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.037387109 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.040234307 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.037918629 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.037883895 seconds)
  done (took 1.062352543 seconds)
done (took 6.808961735 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.152070316 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.119926413 seconds)
  done (took 0.951204021 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.555040873 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.218530798 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.129505847 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.254655209 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.122259042 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.154412186 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.276635061 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.159281464 seconds)
  done (took 6.603483219 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.073539833 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.140375901 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.023651352 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.022196331 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.022404724 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.022394682 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.024117926 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.022832034 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.022118786 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.024699935 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.024252054 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.02228844 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.023018123 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.024366245 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.022402292 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.022652712 seconds)
  done (took 1.367667905 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.02850741 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.025189763 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.026339427 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.016786014 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.027260201 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.025920413 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.026815758 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.027191351 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.026489215 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.026265799 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.024133864 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.027046006 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.025859048 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.024605381 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.027089907 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.016794056 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.026971104 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.02656959 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.028557736 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.027548311 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.02681031 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.024499171 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.028166508 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.025408699 seconds)
  done (took 1.321039065 seconds)
done (took 10.932297147 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.140146804 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.029307184 seconds)
  done (took 0.859763381 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.12608232 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.124353288 seconds)
  done (took 0.95061569 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.028717573 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.015631652 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.032046517 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.023893623 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.015679019 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.015548702 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.031082102 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.015852331 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.015675206 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.015808399 seconds)
  done (took 0.913520921 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.019117466 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.022830392 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.020803515 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.018933507 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.020551391 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.016628103 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.018730853 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.016956382 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.022477691 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.016007396 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.01979311 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.037433535 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.01932241 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.037769751 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.01922207 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.019793224 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.021264046 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.018961868 seconds)
  done (took 1.088703329 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.017313365 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.016552057 seconds)
  done (took 0.736993904 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.020339274 seconds)
    (2/7) benchmarking "second"...
    done (took 0.016705576 seconds)
    (3/7) benchmarking "month"...
    done (took 0.018406752 seconds)
    (4/7) benchmarking "year"...
    done (took 0.01820937 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.016215611 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.015698954 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.016140683 seconds)
  done (took 0.819379949 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.386074323 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.085571402 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.311713559 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.023834919 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.037568031 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.224163819 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.019211557 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.023636521 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.02352314 seconds)
  done (took 1.834774922 seconds)
done (took 7.906118026 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.040172915 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.141890066 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.145902242 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.449020265 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.033309752 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.021935811 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.051410428 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.228434278 seconds)
done (took 1.824282688 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.499782626 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.256598236 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.192270891 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.023448856 seconds)
  done (took 2.180874873 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.310399884 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.139161791 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.029718159 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.022163399 seconds)
  done (took 1.222475238 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.021687585 seconds)
    (2/2) benchmarking "read"...
    done (took 0.026726582 seconds)
  done (took 0.765133603 seconds)
done (took 5.386462105 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.030021843 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.016558101 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.022867191 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.018055835 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.017706564 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.017190268 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.017181601 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.017943088 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.016056402 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.01819556 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.018178658 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018190355 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.017875607 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.017888942 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.017380814 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.01813178 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.016197731 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.01791722 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.017886405 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.017889007 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.016174365 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.018217715 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.017381862 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.017868461 seconds)
  done (took 1.142636736 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.035634458 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.020500949 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.021120005 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.020980247 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.021498708 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.021012652 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.020984472 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.020163715 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.021080515 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.019868631 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.021445872 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.021645305 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.019948667 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.021729096 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.02006566 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.021715856 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.021319421 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020376517 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020103376 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.021652536 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.021160455 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020350914 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.021649738 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.021218626 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.021590769 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.021605274 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.020099581 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.020422325 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.021211217 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.021554028 seconds)
  done (took 1.360824389 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.022502636 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.014764414 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.01505441 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.024843666 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.0146668 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.014871856 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.015249048 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.014436922 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.014850862 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.015687026 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.015168499 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.014600492 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.015436378 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.014551904 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.014601106 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.015099088 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.019610109 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.034956899 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.014971268 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.014679873 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.01927415 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.014929745 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.014734371 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.014675051 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.015186244 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.014713438 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.014534063 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.015035258 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.014710603 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.015312804 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.014906893 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.019187547 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.020716657 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.01524938 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.024832401 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.019684074 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.015254548 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.02129036 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.015584734 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.014570686 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.01459603 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.014566159 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.014692553 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.014741258 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.025023983 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.014959173 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.015893243 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.015249471 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.014873236 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.014607052 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.014731902 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.016318346 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.02032516 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.01603366 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.014687017 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.01599123 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.014702084 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.015459545 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.014873956 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.014646443 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.014678782 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.018665475 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.016139722 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.015545832 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.03582403 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.016141953 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.025198268 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.014890035 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.015310091 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.018855419 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.015405008 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.033940281 seconds)
  done (took 1.951018901 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.027517221 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.025443951 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.033595738 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.0245378 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018267881 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.01558752 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.018627446 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015542632 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.02480614 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.019249487 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015712182 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.018868603 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.024804831 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.019323266 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.016744048 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.024798895 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.019234789 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.018408878 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.01571205 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.019210405 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.016805641 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.018875343 seconds)
  done (took 1.17383893 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.100451579 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.020936353 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.062614171 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.0241794 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.022811094 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.024401706 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.02095197 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.020935571 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021019641 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.02153275 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.021510122 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021046765 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.023077222 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.021589515 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.021535025 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.021270515 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.021082742 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.021317682 seconds)
  done (took 1.230916438 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.033388941 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.021401064 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.048396752 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.021032992 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.021374788 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.02125229 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.024635845 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.024409225 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.020408431 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.020897391 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.024563213 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020429729 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.020471091 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020817584 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020949666 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.022738468 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.022135673 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.021747457 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.025310354 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.024985868 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.024815174 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.025083246 seconds)
  done (took 1.267598587 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.034750967 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.019894022 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.035890457 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.021311706 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.015181972 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.015147499 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.021735195 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.021761113 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.023045396 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.020374567 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.020699962 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.015579658 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.022536599 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.020734368 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.022829791 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.020701652 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.020325931 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.02085756 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020415372 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.015713501 seconds)
  done (took 1.172547675 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.129963936 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.017359952 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.017149619 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.0215227 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.017031972 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.017037458 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.021507161 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.017221375 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.017218966 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.040831921 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.017324062 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.017222898 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.021847897 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.020018937 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.017299878 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.021956118 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.021819679 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.021818623 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.017300029 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.017233801 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.040678983 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.01739804 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.0221543 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.017416527 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.017394176 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.017335357 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.017383236 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.020358773 seconds)
  done (took 1.427007287 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.037467712 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.017649834 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.015437248 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.019381708 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.019263642 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.031334753 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.019315006 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.019125794 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.017374162 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.015453015 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.017604141 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.017643785 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.017576791 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.027692269 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.01749393 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.017636384 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.027735651 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.019404219 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.031593785 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.031458956 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.017695269 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.027541895 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.017573647 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.015432906 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.031661979 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.017622646 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.019655121 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.021054064 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.019443955 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.017116612 seconds)
  done (took 1.367660631 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.029907763 seconds)
    (2/2) benchmarking "in"...
    done (took 0.027577679 seconds)
  done (took 0.812655977 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.019077195 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.037880748 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.01720729 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.033485597 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.027369949 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.022641519 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.027370129 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.027718458 seconds)
  done (took 1.041333183 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.134967818 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.165256702 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.019603812 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.019797089 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.135162355 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.096500601 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.148333472 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.033860666 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.036165205 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.023569761 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.019954972 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.148713861 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.018912645 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.035380684 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020900396 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.03142407 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.028368432 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.040856484 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.035522057 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.018386601 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.03440912 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.020534408 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.019437362 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.020290475 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.020548701 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.027629724 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.038399542 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.034213677 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.029340806 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.017362315 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.041547726 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.018557028 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.019161294 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.029382166 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.137071014 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.018396518 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.061730082 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.018516649 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.023059802 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.018151205 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.032648182 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.04296339 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.035391607 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.03956812 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.020155879 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.020649301 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.018324772 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.020441836 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.023538063 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.029130444 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.018430661 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.027045144 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.018169913 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.020147924 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.031216751 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.018771664 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.023663782 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.029126109 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.034496205 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.030918162 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.033339264 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.037094145 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.028989681 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.027544883 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.019223869 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.041586705 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.020256059 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.03447089 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.036006614 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.01971583 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.033322456 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.018395129 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.017696376 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.018413338 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.05888511 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.020012703 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.01933559 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.018617402 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.018618182 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.019883889 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.030168833 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.023795604 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.027331013 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021874745 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.037274327 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.029414705 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.018464326 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.026356307 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.039924655 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.023609397 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.018649577 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.039065112 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.023657226 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.018353185 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.039301145 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.03046912 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.020310646 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.019612367 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.023565436 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.033965459 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.020003637 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.01747096 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.028300154 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.020155295 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.138230367 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.023922227 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.028693715 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.018782162 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.030914918 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.025978039 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.020648664 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.017867709 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.024651136 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.01962034 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.017858027 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.030320331 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.01915711 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.036139965 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.027001246 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.036351591 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.036974654 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.031667493 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.037760606 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.018785624 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.017971304 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.041051148 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.030015345 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.020267226 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.04005474 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.01894785 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.031882898 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.018957047 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.020536239 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.029916593 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.018021038 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020713418 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.019161385 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.02600464 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.020691821 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020669097 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.026115658 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.029330723 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.033440824 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.020233388 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.029217172 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.019327219 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.038340812 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.030832639 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.025005236 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.023010333 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.020017659 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.033212599 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.027507532 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.030083675 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.019102319 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.02010711 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.019202921 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.031999911 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.030295258 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.021086868 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.029601092 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.025038188 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.019912359 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.019179626 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.020353881 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.023845944 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.022603397 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.020008995 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.028400723 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.029896964 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.035843372 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.027183844 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.029730719 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.01842291 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.019014629 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.021191611 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.018837422 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.02475272 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.030223781 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.03824142 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.03300959 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.04434936 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.01940071 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.030602165 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.020932036 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.03928739 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.034744682 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.020410095 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.024543979 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.018189317 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021132663 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.030172773 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.032740398 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.035693065 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.036665815 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.025441885 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.025290845 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.019033912 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.036700455 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.019538727 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.029237896 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.030329108 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.026276839 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.019076314 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.021171711 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.030055113 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.025033189 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.020288838 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.037965477 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.02797279 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.019269615 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.035950675 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.019199371 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.031681323 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.019060952 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.023876117 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.025902811 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.021242728 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.030598216 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.038079749 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.018265774 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.019703604 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.037601003 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.021189901 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021215808 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.028864748 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.037375899 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.025314936 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.028842166 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.032014735 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.031701105 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.177205313 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.032003688 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.019746607 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.029945174 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.021497956 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.032546735 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.018692638 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.040759228 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.018131235 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.036932359 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.019074671 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.032023135 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.019024992 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.02956066 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.019268522 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.039248841 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.020154118 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.019525033 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.032617028 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.017533781 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.029140386 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.018287311 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.025532809 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.027074827 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.029776823 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.020058282 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.029774964 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.020097474 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.029176873 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.024589445 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.02875199 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.029680079 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.024354622 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.018081425 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.028503957 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.030934722 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.027866317 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.019692921 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.01978394 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.01849184 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.029320097 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.019671476 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.019236243 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.027872414 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.024344303 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.026072789 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.019718187 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.019656398 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.019532165 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.027747213 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.029234447 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.039411695 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.028127778 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.026986517 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.028743236 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.017968258 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.036355545 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.017746863 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.026943709 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.017299663 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.024660089 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.028693831 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.018339221 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.039947159 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.01948462 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.027490178 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.031713832 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.028067054 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.023272851 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.038975174 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.021197228 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.027927826 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.026936698 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.023762759 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.026795669 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.019692324 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.028005858 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.029006719 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.030027769 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.018786617 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.027281331 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.028961097 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.019759257 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.026467141 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.019515673 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.027795802 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.019954785 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.017507067 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.024697279 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.031634867 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.024423445 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.025048822 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.01880586 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.017475232 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.018530313 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.025972709 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.024541469 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.028506914 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.036729199 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.017348535 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.019116673 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.018114269 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.023061949 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.039580806 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.030022536 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.028126203 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.024704416 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.017764164 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.019895882 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.020097976 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.018544342 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.021862876 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.017970368 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.018623311 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.030978217 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.01999708 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.024243109 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.018817221 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.019658684 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.030330134 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.023087325 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.019050172 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.026722439 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.018225594 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.025175312 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.01775083 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.02014499 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.024483751 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.018211437 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.024054814 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.03086061 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.037605019 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.027080529 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.029141046 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.019449284 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.028154698 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.037297553 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.027495821 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019476696 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.029392219 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.018072401 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.040903053 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.029385356 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.028631911 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.030111699 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.019364709 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.038835782 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.024697021 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.030928564 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.037241979 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020140632 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.028025823 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.018685406 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.03755872 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.025105136 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.018787899 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.029092291 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.028755428 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.026553055 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.032426935 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.0196998 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.029100429 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.024650113 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.024152105 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.020968893 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.020708228 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.029593057 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.038428438 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.019987192 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.025212849 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.028544899 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.029186707 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.025105878 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.033320594 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.028826857 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020155746 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.020797262 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.023867785 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.019789774 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.033056118 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019694585 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.025044316 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.024688859 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.018522722 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.027218986 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.03882015 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.030492084 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.030396682 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.019029767 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.018381926 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.040413138 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.024186676 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.023120195 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.028587864 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.030711827 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.03352083 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.030535231 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.039440627 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.019695165 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.026630958 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.03332508 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.020202624 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.018870007 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.024141015 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.021161532 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.030087899 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.030647638 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.027855296 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.021271099 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.027856568 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.035074804 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.020773991 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.024953507 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.026076109 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.020024195 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.031974272 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.028625082 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.029496242 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.020929367 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.018974041 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.023554859 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.029750605 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.028153043 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.030155611 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.020298286 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.028645539 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.035520537 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.027889106 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.023014924 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.018872878 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.022823689 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.030050644 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.026371451 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.018855925 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.025152095 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.024097693 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.028961468 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.030136838 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.024971705 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.019034747 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.039079401 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.029586478 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.030035382 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.020865477 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.021145153 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019583125 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.019083739 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.032479886 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.019323702 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.021066196 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.025391153 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.02115358 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.040702351 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.02849492 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.038104558 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020443661 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.025136338 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.019123856 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.030500034 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.025070008 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.019132757 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.031574284 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.018492066 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.037970103 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.033408558 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.027272319 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.01890731 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.025977648 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.029420466 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.037661423 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.030660012 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.029920778 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.02349684 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.030595322 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.172370071 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.031696376 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.01859365 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.017732481 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.035018388 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.029406453 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.033088422 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.018328976 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.030691825 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.020089119 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.028275023 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.028828855 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.020068652 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.019919843 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.020093609 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.029765508 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.024690621 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.029376925 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.024737997 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.038626136 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.019238039 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.031519185 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.028995968 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.031161027 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.034912353 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.032345858 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.028801377 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.018725125 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.027357917 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.028358797 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.019203597 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.024740807 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.02118991 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.043408261 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.019890002 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.019707268 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.034094764 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.025199139 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.018251073 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.024884416 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.024001804 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.029878997 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.019099727 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.030076131 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.023007902 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.018854132 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.024323317 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.0243 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.01710885 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.017773271 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.018205934 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.029242325 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.024225026 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.017999121 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.039551068 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.019288611 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.02838065 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.030666522 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.026531948 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.019265345 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.017036141 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.018686629 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.033827914 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.036532826 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.023398812 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.028247967 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.019642047 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.029033635 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.017393302 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.028763343 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.027464175 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.027695814 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.01761427 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.018015142 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.035329166 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.035757459 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.024304784 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.037021597 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.028270995 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.019493505 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.043069157 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.028922846 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.018949386 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.03067905 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020242349 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.017508211 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.01726782 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.019612696 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.031772422 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.018473183 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.020571643 seconds)
  done (took 17.602151471 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.064741752 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.019303985 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.017910253 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.017917062 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.025088585 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.019051273 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.017736372 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.019150487 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.019089653 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.020219336 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.018126822 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.018154193 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.023853281 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.034500286 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.026120415 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.021804821 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.017992355 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.019379785 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.018038098 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.019446924 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.024584081 seconds)
  done (took 1.382422228 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.020767098 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.022232142 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.021749914 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.021947339 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.021454169 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.018257739 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.022026958 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018119798 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.022039573 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018458986 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.022325336 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018526821 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.018785578 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.018806233 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018700044 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.01983557 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.022673704 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.021908988 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.018593097 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.022098644 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.019701153 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.021992025 seconds)
  done (took 1.332112951 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.018857761 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.018069794 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.027897739 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.017606305 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.01739305 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.020805668 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.017494729 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.023084222 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.022982213 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.022801882 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.027911515 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.018134526 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.017430062 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.025004481 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.017318665 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.018207388 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.066346172 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.018312645 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.018527678 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.017661263 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.020228829 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.028720583 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.017757198 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.018068995 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.023396053 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.020576594 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.017734737 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.019963711 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.018100465 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.023475521 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.018616449 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.017532849 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.028569831 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.027427239 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.023475331 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.023400863 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.018956249 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.01845252 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.017633203 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.017541014 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.027809029 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.019081265 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.018095005 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.019104795 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.028266116 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.017874696 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.017380705 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.028054463 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.017718343 seconds)
  done (took 1.949114707 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.029585265 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.077226359 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.025249255 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.058415832 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.031125519 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.023522052 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.024618794 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.061778305 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.019122341 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.019648366 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.032171474 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.032169859 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.020699895 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.021813038 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.026352146 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.020721545 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.021169647 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.019872577 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.023295327 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.020488582 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.023051586 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.025935979 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.031404445 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.032430932 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.021786377 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.020145926 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.020676874 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.022048564 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.031840579 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.023843618 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.022343645 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.022890397 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.032348625 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.026881704 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.020443644 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.020617125 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.032926149 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.021022787 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.020960717 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.019387809 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.020706453 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.022197888 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.026479941 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.032953237 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.021168503 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.026970573 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.021178922 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.01903742 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.032506202 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.020810034 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.024639731 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.033547173 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.021874819 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.021179863 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.022249862 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.032465903 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.021433223 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.020054986 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.021343517 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.032279379 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.0193661 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.021787679 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.032559226 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.02053545 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.024229577 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.033300755 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.027007243 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.022136798 seconds)
  done (took 2.823382196 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.026562975 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.05762103 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.032927824 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.033522486 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.028798249 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.028953819 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.028831663 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.029318881 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.029167318 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.032476139 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.029233751 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.181541156 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.02573589 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.030500595 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.029115412 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.029312762 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.029139832 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.029403757 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.029574296 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.029858895 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.029608224 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.034005392 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.02949219 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.03406215 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.034042957 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.02607268 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.029137829 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.029455848 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.034620233 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.02943495 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.03390096 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.029371567 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.029438269 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.03468347 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.033960005 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.029711384 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.018664789 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.029189788 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.029716119 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.029627259 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.025917206 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.034784561 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.02940932 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.026109747 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.029155855 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.029302071 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.034291783 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.033136523 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.029838895 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.030815761 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.02697764 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.031495185 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.026074909 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.026145282 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.031413383 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.034659766 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.031632921 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.031317301 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.026295608 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.031792162 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.032938023 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.038455732 seconds)
  done (took 2.95048108 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.031828121 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.023175991 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.037408204 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.016950194 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.0169288 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.027370499 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.01703533 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.016972287 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.023367724 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.023553408 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.025069102 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.027861492 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.029398128 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.025056698 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.027486639 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.029593061 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.027515943 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.027335983 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.023569443 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.02754711 seconds)
  done (took 1.38295355 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.019298543 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.022537411 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.018083291 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.035121716 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.017883564 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.025952473 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.017877768 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.017954833 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.01800661 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.017918216 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.022711978 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.022951603 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018017436 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.027088573 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.022411308 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.026821191 seconds)
  done (took 1.218423402 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.021028897 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.026870768 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.134549347 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.018448478 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.020483259 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.017727686 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.018630429 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.017650604 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.020168672 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.032779183 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.018781858 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.020993947 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.019128388 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.017572897 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.018060079 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.021007086 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.020189606 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.018892379 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.01880105 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.136068412 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.028051858 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.019569307 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.021019901 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.019461888 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.021009722 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.028411757 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.020781229 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.020985821 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.019133843 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.021439575 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.020962888 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.03098923 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.020928026 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.019623347 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.017978652 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.0190452 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.019796435 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.0223975 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.022656796 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.019911794 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.018163969 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.021408506 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.01915747 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.019354386 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.020301174 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.021392199 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.020342459 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.030290037 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.018819456 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.02103396 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.019095269 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.020165585 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.019408556 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.031328707 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.021341871 seconds)
  done (took 2.26667295 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.037442774 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.023472308 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.016993115 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.017215147 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.023134016 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.023914918 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.023381648 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.02329022 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.023795969 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.016880334 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.023615174 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.022567184 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.02368436 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.023206457 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.024124076 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.023285321 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.017050579 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.023666563 seconds)
  done (took 1.289594049 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.02478395 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.022673512 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.023213079 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.019034203 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.019151243 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.023524784 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.017511164 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.018757252 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018658216 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.019043868 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.019219226 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.018889267 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.01890831 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.018887451 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.023158117 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.019325706 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.018783417 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.017588384 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.019393094 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.017500484 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.02367445 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.017618255 seconds)
  done (took 1.315733827 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.201913535 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.159520353 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.044032774 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.039617359 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.030445181 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.057854424 seconds)
  done (took 1.403401719 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.054325923 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.05826206 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.022949708 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023032383 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027446856 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.025720333 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.025902561 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.026476016 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.029007671 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.032260941 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026340735 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.029965252 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.029788294 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.031415461 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027977317 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027973823 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026477705 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.026218583 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023472528 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.034464108 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.0268131 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.029968928 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026703367 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.026734114 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026996304 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.032386347 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.030406189 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.032767734 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026658351 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02978296 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.028588564 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027220724 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.031026541 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.033509392 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024144508 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.030572996 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027429892 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.035573011 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.028792761 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.032138573 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.023431495 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.028319364 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.030066591 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.030331095 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.030502197 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02699909 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.030110309 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027108563 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027167012 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.038573989 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.028663463 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.032020671 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.028720991 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.030443534 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.03030848 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.038767645 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.033188002 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.032176414 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.028593951 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.033181371 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.032250898 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.028844324 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.032322385 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.033250382 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.029159712 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.032582863 seconds)
  done (took 2.879547535 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.063658605 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.023653038 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026542491 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.031714813 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.031021452 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026609067 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026318215 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026705412 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026538401 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023897093 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065556416 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02693384 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.032352188 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.031555729 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026699468 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026485492 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026608499 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.031603018 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02383663 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.037794038 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026627303 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.031736247 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.031742696 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.03180584 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.032573535 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.028331515 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.026853524 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02692792 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.026335727 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02697943 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029976624 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.027263739 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.03172164 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.023751878 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.03168457 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026694842 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026674691 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02959787 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026657449 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02831628 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.032060363 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.034794491 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.026888473 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027093993 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.033303878 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027248729 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.027196456 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024500405 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.027413309 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024244985 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.032979127 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.033357386 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.033304875 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.03295996 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027399032 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027445124 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026860183 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02743735 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.0274758 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.028867005 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.032453104 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.150801672 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.038624728 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027046526 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02714308 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.032339034 seconds)
  done (took 2.991157302 seconds)
done (took 57.445791412 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.220610131 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.176553282 seconds)
  done (took 1.264353056 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.145314546 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.14519202 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.176993004 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.027456916 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.087119618 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.181904523 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.129927786 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.027237406 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.026952334 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.029304657 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.027874758 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.028989074 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.029022826 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.027124676 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.092458526 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.027590664 seconds)
  done (took 2.09476067 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.079539861 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.264265502 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.06606619 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.025877502 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.115615176 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.032310753 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.028055017 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.032532436 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.032816674 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.025998679 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.078154006 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.040116276 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.031345733 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.032340292 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.027390885 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.0312672 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.032225596 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.032982364 seconds)
  done (took 1.896219549 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.074075002 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.037994295 seconds)
  done (took 0.994552153 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.134593123 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.067041229 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.109800681 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.334399523 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.099375792 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.102557979 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.105937472 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.101258111 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.071870228 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.098137156 seconds)
  done (took 2.098098695 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.065388565 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.06453327 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.310768473 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.062021242 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.039224283 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.033782946 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.03374448 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.034118113 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.033797507 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.033690649 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.084678615 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.032057911 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.027916156 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.08140327 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.05458759 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.067594687 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.026613055 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.03381663 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.03750901 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.026726912 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.032065381 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.03458376 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.144555744 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.03392108 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.056959134 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.03141985 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.034093642 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.03267866 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.032625271 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.035239558 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.036148679 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.059103552 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.033616842 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.041058921 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.032687921 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.054850341 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.027646381 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.05498191 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.030966185 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.027546004 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.031445395 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.035390361 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.028488505 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.03504035 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.034072671 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.0343115 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.03493405 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.027222155 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.034092283 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.030903622 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.027807001 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.032637041 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.032856931 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.034160049 seconds)
  done (took 3.397881936 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.084490623 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.072341253 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.027241712 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.080307942 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070855692 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.027757457 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.086601169 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.067589103 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.085644246 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.027110722 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.027103582 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.027070216 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.03497049 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.038468541 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.083101774 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.07520063 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.029061159 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.027901148 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.075071546 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.075996522 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.026305583 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.087452129 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.077578246 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.074582166 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.026381462 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.027351663 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.026236317 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.026745151 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.035711362 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.035041061 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.026872897 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.038707223 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.038946256 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.034208073 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.025679941 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.026201669 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.026058341 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.035608823 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.037319553 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.03708046 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.033919276 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.025656088 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.026049023 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.026492836 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.027087436 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.025611653 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.037190184 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.034821787 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.036997377 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.026577362 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.026854242 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.026010987 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.027272687 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.034565062 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.033568729 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.035075654 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.037768046 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.02657419 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.026419249 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.028392261 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.038921905 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.03551615 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.035436716 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.027500472 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.036622893 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.026442066 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.037903556 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.041017661 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.027120033 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.0272308 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.026661577 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.026488442 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.026622715 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.034048411 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.033617168 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.027580182 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.026990353 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.026929272 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.03507966 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.033833371 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.026386511 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.036153494 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.02600818 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.02638329 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.027155188 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.027332231 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.036996324 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.035525235 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.026986597 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.026558499 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.027111529 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.026967547 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.025871767 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.036405027 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.036095836 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.036700829 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.038716443 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.027650673 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.039276839 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.03704237 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.027593811 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.036083606 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.027049175 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.027519455 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.027697694 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.035814092 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.03551469 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.037526183 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.027026779 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.02645804 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.036101017 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.039362042 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.027445926 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.035038816 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.037423932 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.035322383 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.026178108 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.038469272 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.02708666 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.038325879 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.027021659 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.038556208 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.027391432 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.036180609 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.027333156 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.026335202 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.027151314 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.039344103 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.027822459 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.027284408 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.027760665 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.026981431 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.036044351 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.040407093 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.027667394 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.036283716 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.036508806 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.02827578 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.039015538 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.027751855 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.038550845 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.0276921 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.027402594 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.026725661 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.04081852 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.027601092 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.02730134 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.027076586 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.037697821 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.027482222 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.038169165 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.035406103 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.026694673 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.039741751 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.037978013 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.034923598 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.038134354 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.027805965 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.027071982 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.02699322 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.027226035 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.038461594 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.040470453 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.028084329 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.027176445 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.034864932 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.038675051 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.026362149 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.035566 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.035235061 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.035699304 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.027499586 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.173707336 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.037168698 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.038271454 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.033885193 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.036858535 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.03477746 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.026733351 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.033233657 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.036477183 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.026691576 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.040124892 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.026613067 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.03650955 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.036258012 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.032798534 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.036352805 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.037794039 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.03572377 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.036128305 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.037595369 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.026104938 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.026348442 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.033456263 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.026146071 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.026445625 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.033036643 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.026812885 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.026705516 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.039255565 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.026547124 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.035969233 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.025782289 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.033737635 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.025907843 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.027334646 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.038137062 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.026640396 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.026475003 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.033332539 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.026275519 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.0332962 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.035880881 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.032697468 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.025855235 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.026811654 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.037215027 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.035582787 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.026059283 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.026048428 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.026948218 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.035620855 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.035222148 seconds)
  done (took 8.775337276 seconds)
done (took 21.404209843 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.154421321 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.078971026 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.17353771 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.098949317 seconds)
  done (took 1.38976176 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.0601059 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.021955012 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.151693617 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.162891215 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.022657356 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.146684101 seconds)
  done (took 1.470105269 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.268848265 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.16394165 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.172827362 seconds)
  done (took 1.510180818 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.164183051 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.308584624 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.595426592 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.156413915 seconds)
  done (took 2.139909722 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.182979331 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.176712307 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.03477841 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.193917191 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.042519812 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.018241614 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.114938936 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.019128654 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.057301325 seconds)
  done (took 1.806327203 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.104501725 seconds)
done (took 9.321698562 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.194008081 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.150343059 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.037936274 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.030449713 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.144909202 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.141375886 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.154019918 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.033033747 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.143502982 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.326054459 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.178019271 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.053383129 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.170717488 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.047974334 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.285652813 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.034947732 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.032354616 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.027813436 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.158290051 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.140166264 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.258466893 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.031717716 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.104460285 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.033890984 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.116906344 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.086745207 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.184564675 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.314325285 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.294986442 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.034354298 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.139638069 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.047747242 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.132759031 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.14488359 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.143485062 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.053558412 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.022716284 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.261860265 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.123096653 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.328071489 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.165605921 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.030141738 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.153829815 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.027686674 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.021815394 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.153203391 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.037144318 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.029284371 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.048792166 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.029427628 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.045799421 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.02990097 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.153594986 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.026605924 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.101459485 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.148744386 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.178899378 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.108902561 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.029327159 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.043313154 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.033002699 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.167217193 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.043076665 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.028555278 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.035936597 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.022395147 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.146610402 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.044106379 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.023438046 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.033736994 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.031538614 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.124705111 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.166172289 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.070257302 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.035690441 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.128530517 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.104992983 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.053103483 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.053399895 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.033652922 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.022203188 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.183436817 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.028554932 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.042457395 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.029463772 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.057853355 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.022862854 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.039556129 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.168995714 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.161984925 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.096621997 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.02306779 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.255674876 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.025126456 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.209843494 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.023957845 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.022991093 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.179406184 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.022316311 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.022545246 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.033212127 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.031710316 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.024420689 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.165035928 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.115652062 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.031181 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.029290362 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.022739048 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.028574881 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.023167378 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.022891758 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.022741793 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.103014181 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.039378079 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.021515906 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.117501745 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.137778773 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.034430196 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.04302228 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.094371961 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.025776373 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.03163523 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.029772078 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.135543819 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.031534089 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.146544386 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.023629033 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.047577698 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.131336409 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.103309759 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.115657659 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.0218341 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.167161047 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.033181747 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.021133179 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.029855693 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.053359008 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.03270892 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.039077199 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.031064048 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.168304779 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.033568155 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.02798885 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.128783108 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.021139089 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.120444799 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.102464094 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.138296136 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.027332006 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.031940773 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.099081153 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.046317319 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.052313037 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.045923403 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.026134215 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.021254838 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.021320179 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.037233736 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.020422189 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.021523351 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.03770091 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.028245058 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.021371171 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.249989357 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.030733015 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.02435508 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.26836055 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.033939846 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.103427918 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.04304367 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.020796715 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.108857638 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.023042697 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.042567914 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.083891833 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.021012349 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.102287405 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.024646236 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.024712906 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.034138973 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.026296834 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.034406856 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.039401029 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.024118145 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.039910023 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.032772854 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.024568162 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.124559435 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.026966875 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.195253802 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.123598556 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.133659019 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.023266463 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.041786406 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.022131091 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.151113589 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.02344676 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.076780552 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.135005582 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.042674789 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.047644549 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.025670678 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.112418293 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.042143645 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.02402128 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.117635035 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.149250453 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.11324819 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.030494237 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.262450203 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.034231889 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.023985699 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.031831272 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.032433919 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.023932781 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.111642623 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.02968649 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.023184662 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.023441269 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.025360366 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.022518119 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.052476603 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.022654111 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.03232466 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.023412128 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.025727907 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.024195659 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.02149519 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.03096753 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.105928033 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.142131304 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.029062191 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.044021852 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.036983734 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.036751852 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.07671438 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.031596117 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.157522955 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.022455056 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.032006514 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.046231659 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.02100742 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.026853159 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.021899579 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.043301783 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.025808816 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.024578823 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.031773161 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.022587171 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.02382069 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.022517005 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.022865733 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.03362799 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.025777943 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.022628415 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.021974481 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.023738963 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.029397733 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.028804386 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.03358488 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.043015115 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.502039326 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.024154429 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.024976408 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.024377358 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.024383845 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.022816168 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.023436257 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.022642733 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.024619222 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.021919831 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.021316717 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.053447248 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.029353528 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.024906514 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.046137543 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.021439447 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.031167646 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.136870055 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.040117287 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.026996268 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.020930003 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.283215969 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.117876048 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.04588745 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.044673084 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.192718324 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.037991659 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.023916042 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.02186083 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.01998592 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.048863168 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.025398369 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.021046959 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.020150857 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.021332559 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.070892106 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.02930084 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.020156302 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.029059895 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.0204231 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.020791404 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.050713694 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.024161532 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.021070188 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.040466121 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.037916193 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.102386039 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.032174887 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.023695021 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.071298036 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.019431893 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.020044592 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.020484178 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.115084348 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.032756379 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.021022135 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.020924807 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.0289738 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.030359916 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.073497485 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.025697683 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.02252859 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.027568963 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.018823527 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.020022597 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.04509145 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.048003947 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.020877898 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.023970989 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.019959606 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.020066274 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.093980761 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.027241369 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.023869837 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.101958224 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.021229846 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.026947923 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.018586998 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.470002541 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.023893827 seconds)
  done (took 24.123671471 seconds)
done (took 25.045207622 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.165966449 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.035644614 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.034257867 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.029260194 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.032726478 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.032670763 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.033787981 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.029380661 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.032287476 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.031323093 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.14182616 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.021269933 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.029379096 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.036501893 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.029119415 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.03658796 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.033061486 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.035977497 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.020824018 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.036334407 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.03147208 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.03342028 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.028607713 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.0353006 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.021026025 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.028786041 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.156872593 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.038578169 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.023079399 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.029317363 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.027231596 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.033183833 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.027184819 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.02678153 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.034296481 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.024801202 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.029688641 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.025942145 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.155977927 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.025607755 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.020038202 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.032448715 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.026699612 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.027436779 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.028149235 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.031510341 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.024778111 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.033335042 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.01933137 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.032344736 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.155370447 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.024255466 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.023077704 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.028111454 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.024857943 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.028909802 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.022892316 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.031289168 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.024647067 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.031765303 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.027589167 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.027407831 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.019409903 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.028089295 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.026812623 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.027029485 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.018447457 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024226261 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.019396541 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.019462632 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.018777742 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.028096435 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.026340393 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.024402713 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.018794158 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.019367105 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.018909275 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.031835246 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.026645543 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.028284812 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.019844673 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.024782052 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.02446165 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.019954467 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.024291851 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.031344763 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.018925607 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.019947568 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.018877136 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.031025 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.026031882 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.019429138 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.031334795 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.024078923 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.023882053 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.019488762 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.018928103 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.023969422 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.027387406 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.019444418 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.018463502 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024016702 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.024554949 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.028218865 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.019805326 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.023936954 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.023833085 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.018560322 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.028150319 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.026652669 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.028533208 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.032374695 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.028228694 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.030729598 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.019975373 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.01844945 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.029226544 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.019801106 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024216114 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.027353265 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.02465283 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.027410709 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.020008842 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.018793575 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.023979332 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.025347245 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.019775517 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.01997131 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.019800813 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.028476038 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.026747668 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.01879485 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.019551391 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.028398876 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.028264415 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.019014883 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.018896995 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.02836444 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.020077087 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.025529916 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.024878374 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.028491714 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.01926534 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.019885033 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.018859976 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.019238315 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.019000637 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.024826667 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.024266047 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.020067439 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.028318305 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.026745159 seconds)
done (took 5.517479074 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.03476871 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.063193631 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.17519913 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.138150479 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.033064754 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.020687287 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.02453838 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.040085594 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.023202829 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.045315164 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.045014003 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.041500101 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.162304864 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.01871724 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.01977957 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.020578658 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.018260126 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.03191689 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.143713804 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.043697773 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.062535703 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.019538661 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.036476736 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.040061937 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.033113283 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.039047531 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.021174528 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.020772253 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.022761388 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.037695453 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.046087847 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.019665501 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.021058009 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.039640623 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.036239184 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.028988109 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.020681773 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.02694424 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.020742704 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.019797934 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.021815187 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.038513172 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.027074258 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.027235966 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.020976675 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.020495005 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.02031991 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.027998449 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.034393428 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.026331236 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.032817933 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.037025734 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.021849261 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.020281688 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.018628879 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.02767999 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.020210695 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.020433104 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.020728464 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.019563523 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.020683088 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.022838087 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.02588059 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.030767209 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.024132669 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.027653506 seconds)
  done (took 3.281831873 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.03946565 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.048667651 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.033928501 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.034156053 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.01942742 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.020060121 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.020072342 seconds)
  done (took 1.117493312 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.067238077 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.135720592 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.143443033 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.144163901 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.156325548 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.142587181 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.032887202 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.049632094 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.019519937 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.156546675 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.152696353 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.14777242 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.024077564 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.032776258 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.052886697 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.151131058 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.033154712 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.027163148 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.142276094 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.148590896 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.025148962 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.050973085 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.0321451 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.021183251 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.145843974 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.138737215 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.023931001 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.021358514 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.023044122 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.020449958 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020336474 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.043458808 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.138714886 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.035550332 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021373864 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.019435436 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.136292664 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021616219 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.13914553 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.028195642 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.139482697 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.022863042 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.022949989 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.020653645 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.021738789 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.142747444 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.021772903 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.020638514 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.020184685 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.141754183 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.020056651 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.140081543 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.023399544 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.025888998 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.027597826 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.027080788 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.027414762 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.021037371 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.143041676 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.030443072 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.022212058 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.151155716 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.150320892 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.140500102 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.150884384 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.029529122 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.140686497 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.140132112 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.020519452 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.028454412 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.021095924 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.152126775 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.024420583 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.023269261 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.025989721 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.027952218 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.158134461 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.158979497 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.159702725 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.035563872 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.023663461 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.021075719 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.15711875 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.160550906 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.026967937 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021242313 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.022308812 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.038054859 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.047557635 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.0231555 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.025957973 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.021973243 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.032788308 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.024310678 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.024235616 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.154596803 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.02206541 seconds)
  done (took 7.624722898 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.028264184 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.0217049 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.02114826 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.021797359 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.022366378 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.022091683 seconds)
  done (took 1.175134634 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.048391556 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.02203121 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.033887862 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.021988997 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.045416229 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.143621169 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.142197029 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022760966 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.037313274 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.03303727 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.141992314 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.145593452 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.143743176 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.022396976 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.141314059 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.032802609 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.142756509 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.026262384 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.03220897 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022732297 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.035013932 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.022223854 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022516684 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.151650663 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.023471499 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.032519715 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.030521585 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.0323685 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.031849902 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.022584326 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.022223472 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.023070116 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.028072253 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.022512892 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.144048159 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.028409333 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.021682352 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.025234833 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.023340746 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.023100475 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.147497114 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022936282 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.026351965 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.025388205 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.022682737 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.028270361 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.025386328 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.025458735 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.145176433 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.025750934 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.025312175 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.022049565 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.023214591 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.025304649 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.028347153 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022610435 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.025307342 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.145832376 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.022647919 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.028549597 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.021767663 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.023274989 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.022663615 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.023191068 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.026663897 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.025353126 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.028462662 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.02277044 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022783399 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.021893656 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.025545419 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.021900687 seconds)
  done (took 4.269807314 seconds)
done (took 18.375727645 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.517633618 seconds)
  done (took 1.478319459 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.101795061 seconds)
  done (took 2.160243669 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.055490042 seconds)
  done (took 1.123404369 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.327953352 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.574519715 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.812060246 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.098148475 seconds)
  done (took 2.882173129 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.886413923 seconds)
  done (took 1.987425311 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.239213286 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.198100355 seconds)
  done (took 1.558264022 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.515817939 seconds)
  done (took 1.590739543 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.479087721 seconds)
  done (took 2.553938877 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.220114442 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.14395808 seconds)
  done (took 1.448133195 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.665994139 seconds)
  done (took 1.765053535 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 5.164095885 seconds)
  done (took 6.244943968 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.204017785 seconds)
  done (took 1.344811054 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.205357593 seconds)
  done (took 1.310454357 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.747368207 seconds)
  done (took 1.833840364 seconds)
done (took 30.23603542 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.04581853 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.043771168 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.043348274 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.038422076 seconds)
  done (took 1.246533727 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.031614789 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.027667188 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.031396819 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.031122648 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.028117061 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.030070609 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.031106981 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.026902837 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.028534453 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.027793229 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.025939587 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.027272157 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.029807941 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.026800308 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.029862801 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.031215828 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.027810316 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.028275993 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.029453333 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.026700424 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.030019919 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.027504562 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.027096423 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.029136891 seconds)
  done (took 1.778795362 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.036275072 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.028895862 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.032554147 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.02771598 seconds)
  done (took 1.179361553 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.033317811 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.032140324 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.042394552 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.046706814 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.032979267 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.033100734 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.039958418 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.039980581 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.0466476 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.042909996 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.023882114 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.023286414 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.021835582 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.041909888 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.039661414 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.017784818 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.019587547 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.033618789 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.031885065 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.034840042 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.025143944 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.0203814 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.031754427 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.032547113 seconds)
  done (took 1.832968662 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.03830139 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.020433422 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.037889352 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.046427789 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.047793875 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.019932867 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.034724379 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.048750604 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.086853459 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.020281416 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.02757644 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.0202946 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.06151377 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.021231474 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.037134788 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.068900485 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.070291943 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.024209654 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.054384203 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.020509067 seconds)
  done (took 1.826799448 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.028447823 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.024975239 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.025355081 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.020389719 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.03112364 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.027332692 seconds)
  done (took 1.174203378 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.024036704 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.022047497 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.020964355 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.02597599 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.021666162 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.022619649 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.022008215 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.020355661 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.02169036 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.023568794 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.022867212 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.022091325 seconds)
  done (took 1.2485869 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.173675994 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.026975831 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.025747605 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.021026978 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.022415447 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.021400716 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.036119195 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.023483077 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.044660271 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.023994058 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.022013119 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.023853107 seconds)
  done (took 1.486784983 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.062374868 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.068238296 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105520165 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071828151 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07127787 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052763754 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.20863402 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.034285472 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.121777611 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.096123245 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074184993 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.051654048 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.044351396 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.024350332 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.056611487 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.076183377 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.095824974 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.028056931 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.073056991 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.24864243 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092590309 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.102701167 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106497599 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074245318 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.049597304 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107268673 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.057821199 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.06247135 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08055838 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.086061076 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077955251 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.055327182 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.026234316 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.0288865 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111840969 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.06456758 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077542648 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.049772946 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.06312134 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.045086308 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.085014584 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.024099251 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.037109624 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.068469694 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.042352984 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093107082 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.049453089 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.078864249 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037645125 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100377424 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090272198 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.184920482 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.043896983 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064595654 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103506487 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.076332894 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108072337 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.066994414 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.040771549 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.228556688 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.06381428 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058333228 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063436935 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034735317 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.13638294 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.045165716 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.070920491 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074544167 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.051086338 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.051491843 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.062155793 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09357823 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084925318 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.082605911 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096226531 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.048270533 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.078099409 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.055604929 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.083376195 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059780244 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.027979004 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079844332 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085762743 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.055105995 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.058571448 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093448707 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.04744969 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030255887 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.057131354 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.07601658 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034752166 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.070959828 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.037121828 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.087900041 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.097661034 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055291588 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067848844 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.075438813 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.033272157 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124813811 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.065134321 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.027380914 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.074030093 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071214638 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118006332 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053780115 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.031251407 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.058506341 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063191765 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.113687356 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069668774 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.036275405 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069895248 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105478492 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052289873 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.262048585 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.053443825 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106258723 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.22430716 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.04077242 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.028753103 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.044187237 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067252668 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060926246 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067212445 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047301185 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.037141042 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.039956077 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070001921 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.04605159 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034132307 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.066850346 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.055725493 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.028140788 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041585809 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.029816214 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094471956 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.031591649 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.088579897 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078694302 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.028645503 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060037185 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.048551352 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059157188 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.050724674 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.070881789 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.092602877 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.137795343 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.043810955 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.048169027 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062460652 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.101424673 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082314994 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.046792551 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.031184895 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.056263986 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06709318 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.053355543 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081378005 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.049124741 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063473679 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.058681675 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099858478 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103856641 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057286345 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.056744354 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065201092 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.079201172 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.02902153 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11935744 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062052656 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076246875 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.042557396 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102602238 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.06883585 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063853636 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.043615402 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.057640489 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.064927022 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067892238 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110153308 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.053254585 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.027633836 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053572364 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114959183 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.034050512 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073808939 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.047579056 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.049333473 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.233277061 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.048924532 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.03535781 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.022094355 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081385332 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111507697 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.023367704 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.065561382 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.060079199 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.055868269 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.074691538 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.02282374 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.071583064 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089417011 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06984204 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.093804842 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118464588 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072450143 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.071408865 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.067221132 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.059178746 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.032577672 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.079095587 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.088350379 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050595977 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.046093353 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091760525 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.073807231 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.093797168 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.074898488 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080103029 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.062342699 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.062791715 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060450217 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.061632973 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104098624 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.078226528 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.081982554 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.037796061 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062234089 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.073961952 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.0938866 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.036207295 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100817019 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.041271597 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107519562 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.034071101 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.084507057 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.03046189 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.125527111 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034088972 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.057796169 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.023912103 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.029161109 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104246731 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.072066147 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.068977097 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061319324 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.102746512 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.248693161 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.03138014 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.061810403 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.067262364 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.054760355 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06995136 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.061989948 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.042312413 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048303215 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.059979454 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.038255678 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.034678666 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.069629069 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047450529 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078871938 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.037356394 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.02821745 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.092417363 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057718231 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048508375 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.029656132 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060150752 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.078176968 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.046020925 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.039912391 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.067789104 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058165776 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094811013 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.043961876 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.051032205 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07838475 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.03383837 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.046187801 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.023101974 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.039397902 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.029851815 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086613889 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.029865573 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.073523585 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.022663987 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087878804 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.042833637 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.047727175 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.057493391 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066752203 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.084284238 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.049192114 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099610378 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045254262 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.077568928 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064076104 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070265809 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.041849942 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.058496027 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.056137989 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078994684 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.050999561 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080560875 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.102964471 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059328024 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100189512 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04608455 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.080974715 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06450141 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08462701 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.073733017 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132955833 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105205084 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072648971 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.069691642 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.030406401 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.2039521 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059571391 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.066209369 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128636343 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078439033 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.025789532 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.057759847 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.047150632 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.061890241 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057110571 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.035372564 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.097359659 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055799137 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.041198926 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.064558053 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.044050572 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.057588915 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029421158 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.053157589 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.057708836 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.048015432 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.05032196 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.066991366 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081548948 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065894902 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096894007 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.056035889 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.045701416 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.073388223 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065579409 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064936766 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.040248525 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.040645709 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099046566 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.075390925 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.081343901 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.055670878 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065066047 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.066896954 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055951189 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.08378621 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06484317 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.086039535 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034868069 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.031338905 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.022213987 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.026050826 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081174351 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063839145 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067934666 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060356885 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.026336318 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.059300154 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059438723 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026157835 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042930971 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050860538 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.053314316 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.047957297 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065328895 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.067600198 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.052532388 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.061716747 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.054674621 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113832987 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.059107831 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04707967 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109780961 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118458619 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.194387058 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046484332 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.02527785 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.032689235 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069129847 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.102792248 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107184051 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.031852383 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.040356939 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.03921199 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.039981417 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.024969749 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.041925376 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.042528075 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058735562 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.051413321 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.066595887 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057772631 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028748393 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055786912 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.052146468 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.045648122 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.06048316 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.072792812 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.079058796 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.095107068 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.067191568 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061566375 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029779159 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.034259252 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.029513962 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033053765 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.055283264 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.03254537 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029897263 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102541467 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.045824019 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060286153 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063505371 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.042220459 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029512615 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091593391 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.023220452 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092309348 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.024818421 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.036420721 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.036335936 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03315867 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049830475 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.09727805 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066068382 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.069060774 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06246603 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060589637 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119249019 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117482554 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.037181257 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099720324 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030100495 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.030868338 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.030043526 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.068035972 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045645102 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.0697483 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.102210573 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046775577 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060235757 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.034126677 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108190129 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.060384186 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.063953973 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.042886049 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.034671987 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.255153881 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.032996328 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.035470992 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.042665137 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.064677189 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.025888417 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.055167132 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.035963052 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.032767838 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116183095 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.663687764 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048434886 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.02891306 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.048960477 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.093417757 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089099765 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049038175 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060957569 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.071794531 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.053445403 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.046707275 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060891106 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.146685609 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027253338 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.047954136 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.057302102 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050679013 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055062152 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.052122249 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.040406665 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.045836143 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.040169123 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.032630635 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062002016 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042450461 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.051025333 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.0623389 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.036776051 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.042447736 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08700143 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.059344582 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.037673916 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043318816 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.05797548 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04256103 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061174167 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.023185169 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.067423533 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.043186287 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078466743 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.054973013 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.064085768 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082873005 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049302279 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09618086 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.064904072 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079151676 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.041819385 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.032737206 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084480966 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.045621942 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031982339 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106833083 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.056902064 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.059222658 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061726352 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.051982805 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.071741441 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.077982329 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070319914 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.053324973 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033978776 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061676279 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.21410921 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.040758914 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.032942839 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.028036769 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.030131478 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061044113 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.039407538 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.039379082 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.066182367 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.042304788 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.056034408 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.056385497 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075147807 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.040591127 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.055075099 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.064286363 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044976734 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087119463 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.054228474 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.081836284 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.376221863 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.078789086 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082699729 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08779045 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.031109443 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.02888308 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.022121592 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.066871906 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.032856597 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.042524977 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.032344873 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088840027 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.037545816 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066035457 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.200782208 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.034666637 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.049381342 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052008082 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.023653062 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.037612295 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063362813 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.041173781 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034414516 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.074822486 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.035375737 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085288434 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067368737 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055274388 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.050725829 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035498818 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.071069259 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.057945244 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.085650664 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.050374876 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.029783446 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.080974402 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.059420906 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100773004 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.027171066 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035551769 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08762099 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060477987 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.090420282 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.03503324 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118300228 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.102777458 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.058178879 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098242601 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.025633134 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.04351426 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.048081576 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.085896157 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.043810157 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07431045 seconds)
  done (took 41.381762983 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.143704098 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.133155684 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.07668613 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.089071154 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.244890417 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.253810813 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.106145624 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.077846321 seconds)
  done (took 2.246834648 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.02472486 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.037561692 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.034827433 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.278022619 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.053761255 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.02064079 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.025673201 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.035298999 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.020841847 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.020140772 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.054844206 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.020476567 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.020958044 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.453034784 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.019797862 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.025432975 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.020870043 seconds)
  done (took 2.246421696 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.310844424 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.566337576 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.337062459 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.49727952 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.103560797 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.561097846 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.028568032 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.034117967 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.638732207 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.354325596 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.097900787 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.180347203 seconds)
  done (took 17.776175787 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.031116779 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.155002813 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.152823236 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.027643217 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.027802508 seconds)
  done (took 1.520519684 seconds)
done (took 78.109172072 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.040355494 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.123520402 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.020359545 seconds)
  done (took 1.239858366 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.158010332 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.15232436 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.151964198 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.154957303 seconds)
  done (took 1.680370174 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.03021239 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.029694926 seconds)
  done (took 1.129684395 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.160532288 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.247437564 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.043926775 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.038324327 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.033885448 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.034195331 seconds)
  done (took 1.179461637 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.026838563 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.024434056 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.024556661 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.024816678 seconds)
  done (took 1.163496812 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.134800747 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.019459998 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.021755192 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.023457684 seconds)
  done (took 1.2632415 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.040472743 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.039834461 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.069073015 seconds)
  done (took 1.21648715 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.039344701 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.038489227 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.032674902 seconds)
  done (took 1.178011697 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.065280941 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.049821639 seconds)
  done (took 1.179173429 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.035314458 seconds)
  done (took 1.102479804 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.04831807 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.051158068 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.217885837 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.183623651 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.222270087 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.206806185 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.033520145 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.030796339 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.026500792 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.025556226 seconds)
  done (took 2.108793016 seconds)
done (took 16.001327499 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.035852148 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.144228351 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.269265182 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.040099921 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.608618562 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.266118928 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.677385194 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.043319439 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.052645446 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021553561 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.038140785 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.58613369 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.680866944 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.099318107 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.696283651 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.08930743 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.760517624 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022095429 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.020991341 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.021594909 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.659695217 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021292673 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021596996 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022048954 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.758559733 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.363676427 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022383542 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.094531109 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.02126428 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025225096 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.354281837 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.022482241 seconds)
  done (took 12.619633724 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.025858047 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.076171871 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.02672682 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.037027209 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.023501428 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.023750765 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.025392858 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.021867694 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.063901574 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021572973 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.038549069 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.021063878 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.025823737 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.022543565 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.041499244 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.021291513 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.023440269 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.02212681 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021545062 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.021957063 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.040285762 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021197164 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021922839 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022208927 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.021923083 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.035888329 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022601537 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.021465005 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.02192933 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025505838 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.026615745 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.022959129 seconds)
  done (took 1.987632845 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.078768872 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.078861043 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.027124933 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.06202148 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.073938309 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.024096173 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.105033961 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.043960752 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.067176059 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021927429 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.038735626 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.021567931 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.057917686 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.023152157 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.042133409 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.021891797 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.024126113 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022263671 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021405028 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022011468 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.040580014 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021491796 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.02212752 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.02231094 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.022215374 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.037905338 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022726566 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.021769966 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.021609456 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025601245 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.027432166 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.022875136 seconds)
  done (took 2.265632049 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.02490103 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.025403519 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.03092263 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.034057426 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.019905765 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.022024429 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.023142155 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.019949145 seconds)
  done (took 1.280632159 seconds)
done (took 19.238402975 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.03537266 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.021968791 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.024883962 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.041354687 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.027880942 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.143650711 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.018888779 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.028566394 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.025055155 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.02521702 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.026540561 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.020018683 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.023641162 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.018546635 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.025447084 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.019775893 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.145817981 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.024079342 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.14363986 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.145093945 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.022348069 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.025366655 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.028444542 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.144604502 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.144121097 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.14428583 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.029076652 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.025757947 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.020211055 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.022807904 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.142138292 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.144217791 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.023146547 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.141745952 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.020723167 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.020550505 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.025054472 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.022154435 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.151248657 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.030304015 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.023054448 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.029516252 seconds)
  done (took 3.428796113 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.150462859 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.155572375 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.150542428 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.033043478 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.029312727 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.03268415 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.155683187 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.029345918 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.027560197 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.154834175 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.0244829 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.028124467 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.030401743 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.021072264 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.027847678 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.024366999 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.029899809 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.022236816 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.027930729 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.028165046 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.155615972 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.021833268 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.02878997 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.029104639 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.023211282 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.029064962 seconds)
  done (took 2.611984287 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.030191902 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.043252153 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.046066946 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.099581558 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.063416053 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.036108315 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.036338945 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.046986573 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.055058848 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.021151965 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.042920357 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.048657756 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.049858243 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.02793813 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.060565396 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.039639834 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.033707933 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.022762908 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.027695753 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.055348157 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.043870304 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.03981592 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.05405474 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.041225286 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.020219569 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.030460112 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.028449947 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.03733027 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.028486629 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.033190917 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.025182624 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.024673385 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.022001994 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.032602393 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.025139277 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.019341497 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.045609049 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.036563429 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.037807924 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.062546445 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.032098546 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.023193311 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.052751542 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.093880536 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.023753634 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.026564627 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.029410503 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.038693998 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.026298649 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.05824115 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.043291873 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.024816185 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.046065642 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.026446686 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.026440692 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.04395949 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.027056752 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.02757329 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.038458826 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.032088377 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.048497385 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.031287867 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.050466357 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.025337368 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.038339709 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.026709822 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.02710739 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.02387061 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.06604752 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.034121891 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.084506101 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.026603411 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.023227163 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.039749194 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.038936017 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.03374665 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.025094062 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.04806857 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.040479576 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.030031772 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.038571085 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.028990127 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.028854188 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.065699129 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.024296912 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.023293916 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.023155236 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.028067593 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.029035947 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.026192287 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.040224963 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.024662861 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.02906416 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.042293858 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.025501076 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.02632253 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.028130712 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.026738792 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.024811369 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.037308099 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.029175304 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.027397057 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.040154485 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.026690982 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.028780178 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.04226092 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.036637512 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.024758128 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.026641706 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.028014582 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.027527204 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.031137622 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.029590919 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.027818136 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.031598419 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.034603842 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.032561163 seconds)
  done (took 5.32515217 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.267868207 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.257855406 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.025819875 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.254215829 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.035264093 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.179289197 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.262270427 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.258732949 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.0264783 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.027806092 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.025118803 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.19430722 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.19012645 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.201933982 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.18145314 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.028216416 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.056882474 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.203807912 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.263956456 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.260017912 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.054607646 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.034752445 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.028826503 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.027732841 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.026827835 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.036182535 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.045724154 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.035751983 seconds)
  done (took 4.817133577 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.032919205 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.077613436 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.029999217 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.054499671 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.044792148 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.02599071 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.028162549 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.027693831 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.045577782 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.031913597 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.025916817 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.030434486 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.03001846 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.028224748 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.026887072 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.033564038 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.033497445 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.034972755 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.030056316 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.031026966 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.038495661 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.053528684 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.030412536 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.026317531 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.029754192 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.026162941 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.031546342 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.035460345 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.025967791 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.02592673 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.022710293 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.031273992 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.043284466 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.027487908 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.025844107 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.026843398 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.026384968 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.026102408 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.026875705 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.024273843 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.024418055 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.032047695 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.024722392 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.031343489 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.041827327 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.028459221 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.027894593 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.029224237 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.029318217 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.022889843 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.030510121 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.030191214 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.029327157 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.036300557 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.030702315 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.029154719 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.027994768 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.043233755 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.032518732 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.025536426 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.025019556 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.024543535 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.028230511 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.032858579 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.044716734 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.028211627 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.024472374 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.026451257 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.028404189 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.041801036 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.025660754 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.033453388 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.022976946 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.026557672 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.029225096 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.029631734 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.027892621 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.024572282 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.026008553 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.027099788 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.026277821 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.026147655 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.024936823 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.029142996 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.024122198 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.024607029 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.027232516 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.028051232 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.031919305 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.024956015 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.029284944 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.027752892 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.02505379 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.029117117 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.031812498 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.029563938 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.049998407 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.034118501 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.02650229 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.023426839 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.043330279 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.028399237 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.025686208 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.027886376 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.03141655 seconds)
  done (took 4.575065034 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.056855013 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.028817775 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.048182323 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.062049071 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.037568099 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.032972741 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.041438614 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.027928175 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.050654318 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.02565297 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.036832703 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.024440434 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.040815975 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.035992358 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.028496847 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.037541247 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.029379902 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.049495893 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.042912062 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.02507599 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.036061731 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.040299451 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.040205481 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.045975888 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.045685443 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.046978212 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.040124014 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.029682788 seconds)
  done (took 2.414091467 seconds)
done (took 24.247622479 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.338374318 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.522770108 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.281178104 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.992408799 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.398437132 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.251326471 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.376546004 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.27865978 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.05723803 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.325709192 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.009870765 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.195693313 seconds)
done (took 61.403530368 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.335878327 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.369121125 seconds)
    (2/2) benchmarking "String"...
    done (took 1.439876567 seconds)
  done (took 4.047646789 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.602625619 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.157521196 seconds)
    (3/3) benchmarking "different"...
    done (took 1.210521227 seconds)
  done (took 5.140108199 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.530555876 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.007499534 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.452831006 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.16725662 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.162802592 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.806479055 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.341806217 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.765545691 seconds)
  done (took 27.86072629 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.095902258 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.43842563 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.481223283 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.594947267 seconds)
  done (took 17.815980611 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.536860917 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.507083439 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.507012807 seconds)
    (4/4) benchmarking "different"...
    done (took 1.809064177 seconds)
  done (took 7.569908036 seconds)
done (took 72.656550579 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.079310235 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.239163163 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.126141191 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.286379443 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.165715305 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.180852336 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.092200999 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.119133785 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.089410887 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.094702453 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 5.990900083 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.091745926 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.090348219 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.135398044 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.094025105 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.12592573 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.227765921 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.096030189 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.130851432 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 6.694702274 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.415485304 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.088354349 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.10310131 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.16198986 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.279017726 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.158899252 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.400680149 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.099580536 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.690757245 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.081685885 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.096443564 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.089587967 seconds)
  done (took 180.8980575 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.078894719 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.888925704 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.866493614 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.093132823 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.416329475 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.437302134 seconds)
    (7/36) benchmarking "scal!"...
    done (took 1.885019277 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.432830015 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.087866255 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.108055878 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.058437724 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.0817084 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.091709346 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.621138803 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.125214304 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.09901482 seconds)
    (17/36) benchmarking "trmv"...
    done (took 2.95012294 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.918470223 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.136353359 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 1.952792373 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.078879932 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.516847969 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.485846545 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.898125051 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.089149451 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.144149601 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.101220861 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.110444171 seconds)
    (29/36) benchmarking "asum"...
    done (took 1.563458836 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 2.933393517 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.092672829 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.112560041 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.270638462 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.327321141 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.091607358 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.094756851 seconds)
  done (took 151.331285938 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.354774318 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.088271812 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.11939672 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.198644871 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.862403471 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 3.7482705 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.089839976 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.078964441 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.078654924 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.084813328 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.079775937 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.144556255 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.089419188 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.491424407 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.205219644 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.11021945 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.144804651 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.299018169 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.236019551 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.144295581 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.117206396 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.246226118 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.463212884 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.211184174 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.102123704 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.104216551 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.200607318 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.104957115 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.129437139 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.213916669 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.324944711 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.204478534 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.304738751 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.309191786 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.161096348 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.273241922 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.177939179 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.426634769 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.13685119 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.130380052 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.14953141 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.156281491 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.158521149 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.181908398 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.219202491 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.131723895 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.135098326 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.69609436 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.690638101 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.105769212 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.142449689 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.098300863 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.08687325 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.083584891 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.540636786 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.108039442 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.133729023 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.780402308 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.137963277 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.127365709 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.110978047 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.148033813 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.128632644 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.115616895 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.138947315 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.730978081 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.236903646 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.495609342 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.887195203 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.118652999 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.156918619 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.146388326 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.142047661 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.18922997 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.09650366 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.098910761 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.303957718 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.119474791 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.112684721 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.055542603 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.006293013 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.093651281 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.204029435 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.107378131 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.099286753 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.605263994 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.212903992 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.125348956 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.10120431 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.137572519 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.090880946 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.083828294 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.091422168 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.002870918 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.124225207 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.124479312 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.409919468 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.09437057 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.104380511 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.140316693 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.463460133 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.104581943 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.187183083 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.502227068 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.982383105 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.098542251 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.084583729 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.120397553 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.112659941 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.113375401 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.119260151 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.099406122 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.084614463 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.092438872 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.093209552 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.102145498 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.087473775 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.102812736 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.095796122 seconds)
  done (took 327.754323048 seconds)
done (took 662.57829142 seconds)
(4/20) benchmarking "parallel"...
done (took 1.10532903 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.344933984 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.215624183 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.207067296 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.342170331 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.305604725 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.280351881 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.302324134 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.397820717 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.331408242 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.288847163 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.327987347 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.272877768 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.396298911 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.360315325 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.38880897 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.378670155 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.317899523 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.810993977 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.322049343 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.275023336 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.332397727 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.291072578 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.275809237 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.344255666 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.423190943 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.287674094 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.523689091 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.352169978 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.321377027 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.359947485 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.398552816 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.403230259 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.335199901 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.410680552 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.385789238 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.41575143 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.305670562 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.393192066 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.310227609 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.325155044 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.341320771 seconds)
  done (took 63.491578137 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.435286429 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.312925675 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.416996174 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.422237765 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.861610854 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.419391508 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.503089795 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.304202716 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.323439201 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.438494488 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.455059221 seconds)
  done (took 18.02252605 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.340067395 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.29350643 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.409862143 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.416174636 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.511806546 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.432328202 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.457017826 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.288267579 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.308351149 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.459034336 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.441590161 seconds)
  done (took 17.471769292 seconds)
done (took 100.068921643 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.664024689 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.165737266 seconds)
  done (took 3.919932199 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.129918196 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.117781988 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.098492212 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.102807637 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.10346638 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.10860125 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.171563972 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.114495277 seconds)
  done (took 10.039167094 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.101794048 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.115791897 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.124186039 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.102427738 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.11270444 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.102285421 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.10040013 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.097299693 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.098332527 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.102262746 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.104157987 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.11147563 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.099588854 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.098165794 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.094237999 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.116751357 seconds)
  done (took 18.78005302 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.097729736 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.102178558 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.0992299 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.112049252 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.115584725 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.104461375 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.114618244 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.114346651 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.113826368 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.104119631 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.10480494 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.100601745 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.102586993 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.115521095 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.103171352 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.101783171 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.100071384 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.110504642 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.127927268 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.098344648 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.096481066 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.103631666 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.120406367 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.122111827 seconds)
  done (took 27.700626845 seconds)
done (took 61.554402584 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.734156123 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.186538355 seconds)
  done (took 7.022337513 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.122645195 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.108400973 seconds)
  done (took 3.437701739 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.099385608 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.11818848 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.107832575 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.099379781 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.102359536 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.101741738 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.110961776 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.113361456 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.117279927 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.098898452 seconds)
  done (took 12.154050148 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.100237505 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.09650828 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.099722254 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.100556618 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.10193307 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.116638305 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.10619198 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.097842801 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.097296433 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.122620914 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.110263846 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.284264744 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.100876056 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.332709894 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.110003401 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.112310094 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.120554442 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.104060224 seconds)
  done (took 21.405209928 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.100948245 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.100728364 seconds)
  done (took 3.297077136 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.102439978 seconds)
    (2/7) benchmarking "second"...
    done (took 1.10147174 seconds)
    (3/7) benchmarking "month"...
    done (took 1.114709974 seconds)
    (4/7) benchmarking "year"...
    done (took 1.105976412 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.098358635 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.105903156 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.12837594 seconds)
  done (took 8.844682899 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.550628688 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.267443761 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.322683796 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.581019065 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.770657678 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.05730852 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.74696819 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.044331908 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.933748563 seconds)
  done (took 16.365202388 seconds)
done (took 73.624509027 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.730123261 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.09905066 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.820299566 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.216165788 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.116920582 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.442556857 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.089886558 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.652164149 seconds)
done (took 37.297734376 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.165249732 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.119573635 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.140302048 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.133182312 seconds)
  done (took 19.502337385 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.097204276 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.69747507 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.144946764 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.173168923 seconds)
  done (took 19.305007572 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.625875596 seconds)
    (2/2) benchmarking "read"...
    done (took 1.646733669 seconds)
  done (took 4.386963637 seconds)
done (took 50.464208928 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.100813423 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.096901337 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.09679084 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.101742965 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.098784104 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.114323632 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.110901882 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.128378722 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.110501847 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.104660259 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.110445525 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.101526226 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.095718965 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.102940846 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.101196937 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.101479688 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.123787362 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.129667124 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.099619384 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.100648235 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.097967712 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.095791404 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.098806654 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.10235505 seconds)
  done (took 27.612747893 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.173574713 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.188559087 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.189381226 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.16617429 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.203264147 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.165893671 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.166534634 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.141492723 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.176357357 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.193385891 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.198553857 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.245007182 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.15007813 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.202562575 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.164454914 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.21938032 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.184638294 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.154858455 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.141147903 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.205851842 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.182583041 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.142364334 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.195643407 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.155401033 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.197583896 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.141653993 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.150637543 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.172685733 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.170671543 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.199440834 seconds)
  done (took 36.443764708 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.135052625 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.100121098 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.096071602 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.190909352 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.115373121 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.110541934 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.118839702 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.118435938 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.109520225 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.099405592 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.100133749 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.104356817 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.104591852 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.106557928 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.104499957 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.114496311 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.166871305 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.285679596 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.098080199 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.104534396 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.147813346 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.099482978 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.105690344 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.117285772 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.106771713 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.116596587 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.115402917 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.115510836 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.099079282 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.100136085 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.102166804 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.149663051 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.139674541 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.100584342 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.242270459 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.188212183 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.104799459 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.637812729 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 3.101606165 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.107793435 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.10096956 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.111261029 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.113569981 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.117893465 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.167865685 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.111200508 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.099848976 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.104180931 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.099049319 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.107539435 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.13005235 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.121618532 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.123253566 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.097360008 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.104184076 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.098863318 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.098378058 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.120613666 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.100328948 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.114614944 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.114007543 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.183009693 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.120068533 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.100593869 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.480021903 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.107615503 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.177156657 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.101864902 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.121897325 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.348647235 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.117366938 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.314740393 seconds)
  done (took 86.107500483 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.102402164 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.098463532 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.195560499 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.175212281 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.115179429 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.111509 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.104854323 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.113663388 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.769913956 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.116281593 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.108554994 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.118972266 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.787505022 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.129549451 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.117437929 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.19482248 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.113898693 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.112229572 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.109688442 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.114269488 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.117719991 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.11255853 seconds)
  done (took 27.131124401 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.156395671 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.126569312 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.160673426 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.132344274 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.118643505 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.1149076 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.142518932 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.124500664 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.22030205 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.183219628 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.164243772 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.171151091 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.144438697 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.156584908 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.161686324 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.231753338 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.167310037 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.220551837 seconds)
  done (took 21.998780383 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.298263285 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.299285079 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.223627134 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.176151457 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.394810117 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.362407464 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.240656238 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.313080152 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.16762551 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.289663299 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.309521687 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.177652852 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.339211695 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.194857496 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.1545443 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.375876001 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.192340396 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.14967473 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.21999678 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.230710761 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.28669604 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.22176485 seconds)
  done (took 28.727681833 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.1550072 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.176672206 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.193129 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.189789285 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.11955655 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.116457195 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.166115488 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.164372811 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.135451539 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.152908474 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.160302388 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.122363037 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.217698467 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.193651076 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.236686909 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.175151064 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.189303431 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.193770975 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.181260289 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.151710936 seconds)
  done (took 24.493662711 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.139851831 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.133122338 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.142388724 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.107392592 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.117183156 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.112946768 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.106179024 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.106589547 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.10062976 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.33921725 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.104554547 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.114029163 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.120310275 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.109520333 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.104732239 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.108823648 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.126890088 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.117794172 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.103057639 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.105177454 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.342236452 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.116549593 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.098651527 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.116343291 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.104281047 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.108985402 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.099775745 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.098908678 seconds)
  done (took 32.733783235 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.150851794 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.113160086 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.116975292 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.107105661 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.104269644 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.1824864 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.120311295 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.111882389 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.101173037 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.107591779 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.108114203 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.117248599 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.103719383 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.163212575 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.099862246 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.103041846 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.173216179 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.119363424 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.181777538 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.088415909 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.114675518 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.202808765 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.114854222 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.103880972 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.101264361 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.117064443 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.107024919 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.122967979 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.122264317 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.10223766 seconds)
  done (took 52.774717095 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.124280617 seconds)
    (2/2) benchmarking "in"...
    done (took 1.126267422 seconds)
  done (took 3.340232205 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.109587376 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.216209116 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.1098442 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.303945135 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.266026949 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.275158087 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.272315328 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.204626239 seconds)
  done (took 10.85947069 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.118428176 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.602234752 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.124920644 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.104805051 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.108636575 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.622622688 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.084045386 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.052254321 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.989871518 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.992650742 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.204121927 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.606526315 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.079583019 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.442408273 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.233489237 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.995317136 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.43383887 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.75648301 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.251970022 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.243025567 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.935426597 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.210929513 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.103410003 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.100999486 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.102045257 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.021681661 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 4.007879703 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.571509893 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.35111089 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.240272851 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.949797602 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.189649497 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.098682667 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.41855632 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.233561631 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.109733387 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.307461414 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.217273484 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.104413446 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.099465303 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.930258825 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.933381057 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.394034273 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.386503681 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.221186791 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.107339819 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.107879596 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.104698365 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.384414676 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.750990584 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.060425371 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.100197522 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.24812782 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.105536277 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.87277768 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.126376643 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.102442301 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.010790966 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.751792429 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.391369278 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.467210526 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.182680009 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.222392187 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.240639339 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.107652778 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.314970437 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.918701788 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.984071651 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.951781878 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.22410553 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.652273426 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.120764613 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.103288746 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.102152049 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.049971944 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.425135125 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.11159234 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.118004067 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.110961162 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.10728332 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.453058103 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.232380951 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.958916384 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.273308852 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.31726292 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.616423078 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.251292583 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.111000836 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.835717335 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.967254575 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.195859412 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.842709685 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.380471993 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.256271596 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.198270156 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.383150143 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.148812329 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.113880601 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.95712512 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.756443124 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.117240691 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.119359877 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.48206626 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.123869623 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.113317806 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.110534952 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.873845719 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.248535552 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.262306282 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.157051593 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.117109363 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.112461654 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.698213447 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.216185072 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.115524982 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.597127917 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.07244687 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.661801904 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.411016989 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.326369728 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.52335381 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.164844729 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.385954458 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.914238722 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.113737698 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.704111905 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.953141457 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.67750056 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.426349964 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.245355937 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 5.0366425 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.181645415 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.109357653 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.33694376 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.187533236 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.114144477 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.127219234 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.112601246 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.109845527 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.109019997 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.239954888 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.543973075 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 5.024750115 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.122358525 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.361186529 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.238559662 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 5.079213052 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.355078338 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.859776947 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.261114852 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.113366862 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.908381235 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.438680741 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.900693121 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.242683639 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.109266957 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.11447057 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.997247471 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.172628931 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.213729197 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.102192134 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.728454971 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.2079313 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.125974036 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.120826461 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.592814153 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.25472999 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.107899177 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.316364427 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.978974816 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 5.07219596 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.124081662 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.437439479 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.241497498 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.110602309 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.108804855 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.104552374 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.907275937 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.775154052 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 6.308638424 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.741015806 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.970046834 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.208797731 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.294883911 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.215988039 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.46964861 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.382312302 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.255960987 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.109536696 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.113231594 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.104248419 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.611632734 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.939689249 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 5.224879258 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.015865651 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.134713419 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.065247746 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.21274536 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.935719533 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.131497815 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.874915265 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.184236811 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.223083316 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.113827424 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.109286198 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.276795201 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.326712517 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.278389152 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.756252497 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.126190554 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.105931689 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.857166338 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.258702388 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.857268827 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.225400439 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.957375118 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.261752889 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.257204172 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.278069342 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.923697201 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.24554936 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.122463815 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.977969909 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.26691351 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.110737124 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.292913115 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.915181056 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.966457119 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.927650001 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.83814856 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.09266231 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.708629499 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.411879007 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.26841432 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 4.043287747 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.223909827 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.374030874 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.15848286 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.717475973 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.137289196 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.907263486 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.137978658 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 4.944231025 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.131439799 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.216305039 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.248827496 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.669143396 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.24337563 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.120060377 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.331322317 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.219642226 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.866536908 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.25406291 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.251615175 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 4.501520421 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.117137792 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.230387971 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.36167907 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.156112449 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.063858522 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.116617304 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.479274822 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.135231705 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.124643622 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.201399177 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.948645323 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.285649498 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.397976641 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.269105381 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.116318441 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.113361146 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.364283775 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.210994453 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.119087087 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.476193072 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.14656306 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.169051532 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.203709617 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.130420319 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.117511966 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.360733545 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.370058996 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.498378033 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.658310208 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.729650101 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 3.007033398 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.259372283 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.908137947 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.2632511 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.80457949 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.226206025 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.129788666 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.86375517 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.253228733 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.426001049 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.272822819 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.243744856 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.805543666 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.283876186 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.43255121 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.373978485 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.245530832 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.936223907 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.700866415 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.392594017 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.583397693 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.16454015 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.654646666 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.200972571 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.695970593 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 3.09196596 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.811077112 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.201853464 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.17519722 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.118279534 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.12681859 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.652341822 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.062624031 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.118771474 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.925827363 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.84699783 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.057247761 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.843395878 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.216575462 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.129932878 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.108348588 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.118579417 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.024835149 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.270936657 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 4.553531254 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.249648715 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.109048656 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.112618219 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.09757799 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.554873262 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.01923234 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.063411226 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.132524001 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.255974903 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.108284572 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.110090057 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.111934644 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.11636365 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.120504743 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.130410394 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.653744104 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.124990855 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.702207397 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.219433488 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.120151386 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.342997058 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.176610921 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.109463089 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 4.368139837 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.222560871 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.247492212 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.179740464 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.111863538 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.561004169 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.282672964 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.134382992 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.426938349 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.57112868 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.531961586 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.919222109 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.307029426 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.680701084 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.559674569 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.981733316 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.223169083 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.127140909 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.297150483 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 4.064937448 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.174460657 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.652357168 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.75280619 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.108770143 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.491086824 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.072458398 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.52365689 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.30173479 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.231438722 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.150560245 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.13661057 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.261683561 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.392453662 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.186987864 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 4.458761023 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.345418665 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.116105498 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.456869814 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.236594621 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.427160583 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.168221563 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.157795306 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.141547164 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.147442314 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.689413168 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 4.150231412 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.231491212 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.138799058 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.045253836 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 4.050355448 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.07256124 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.789523605 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 5.033684138 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.276224333 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.141909455 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.356941953 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.193667481 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 5.001761548 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.160534111 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.947455273 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.487888257 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.185259596 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 4.397938909 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.55171837 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.92028927 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.64380714 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.273840022 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.149105954 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.603679473 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.155770521 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.290052012 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.069676515 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.506713759 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.732879464 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.569895375 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.460054189 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.261178926 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.043043895 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.689649839 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 3.115012202 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.143739048 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.997509089 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.289104748 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.527512816 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.163023951 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.437231949 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.292784194 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.777346751 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.85960024 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.286351354 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.788908049 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.29301615 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.140695545 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 5.003478425 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.055985501 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.369967524 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.267414419 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.138930346 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.159262689 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.891536414 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.78826285 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.419922985 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.217901881 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.144271215 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.990839368 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.846479705 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.23568693 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.149777626 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.144234544 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 4.720010063 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.191354726 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.136544489 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.583987139 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.789161853 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.283605198 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.635819833 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.262180694 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.292024135 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.508976669 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.583561245 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.360004718 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.209196311 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.14615096 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.145322728 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.140299895 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.738299123 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.151588431 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.139622402 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.771605785 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.286451273 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.919083894 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.080171167 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.436429791 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.212950737 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.580836552 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.285877114 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.635445479 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 3.996835393 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.215630584 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.397061953 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.179036428 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.294056386 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 4.038351872 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.244055059 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.149048918 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.159621593 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.5373566 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.567604562 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.607540578 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.525572617 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.234795291 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.927176637 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.250024968 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.975748547 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.161230736 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.13869559 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.633663834 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.319528139 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.609911161 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.292901578 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.675074386 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.268770404 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.468737372 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.36444776 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.237379559 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.134293893 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.138505089 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.235901598 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.181447058 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.681051676 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 5.027079905 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.679875718 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.274612195 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.966694907 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.66594774 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 5.088667053 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.343802257 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.452153611 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.497783216 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.172807669 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.131694638 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.566365236 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.22890274 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.31633282 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.234764543 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 4.007962049 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.220864657 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.143713529 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.751718751 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.15180539 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.140424681 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.130143206 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.042877354 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.963479576 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.245876979 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.366903295 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.239574552 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.139772799 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.797626246 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.424704579 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.178225373 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.137460713 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.14926191 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.074784994 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.251444036 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.130923658 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.504254835 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.295957624 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.492746827 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.977069659 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.588837623 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.232885002 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.143953447 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.143553575 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.866461162 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 4.800267126 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.173106449 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.479157463 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.153013325 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.639059399 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 3.096839147 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.681467375 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.694891717 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.206754337 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.258950669 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.147717247 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.154961691 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 5.125411824 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.079872518 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.910559883 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.652484803 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.219803701 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.985543128 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.16868839 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.186542479 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.366673927 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.193829342 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.132314943 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.126206408 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.134312702 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.613025846 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 3.10265891 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.131110454 seconds)
  done (took 1456.490163514 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.398262718 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.128777326 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.121820914 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.121955228 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.127482613 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.124184779 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.128731408 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.12664167 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.123128026 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.127757447 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.121652004 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.127280651 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.125623094 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.397710392 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.131191218 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.139009796 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.136361988 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.124966636 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.135615981 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.130931617 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.12939452 seconds)
  done (took 25.340801295 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.123102386 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.136203566 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.128166413 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.128104712 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.12396142 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.130959145 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.124481896 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.12451647 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.125016238 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.123640713 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.124202975 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.12927978 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.144619089 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.129628133 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.1318587 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.128536746 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.129288406 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.128934762 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.130264143 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.131701462 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.134849162 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.131797131 seconds)
  done (took 25.959861335 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.125819921 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.132777102 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.902063734 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.253860247 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.12686168 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.138745827 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.140145987 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.335662524 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.1643616 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.021673279 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.520966992 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.146790616 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.132233169 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.323873983 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.223681687 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.13006969 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.256299894 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.147905297 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.117205757 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.127369034 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.131538832 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.384657145 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.277369459 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.132761825 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.979987794 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.277037986 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.138417216 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.128524656 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.130045989 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.098575848 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.217231174 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.140780683 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 3.044138295 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.985525998 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.500884721 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.027665883 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.221312312 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.127291839 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.129348929 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.12001283 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.339949563 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.880819228 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.124800616 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.122580192 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.448848202 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.253885864 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.12433603 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.474277487 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.140834093 seconds)
  done (took 89.694969212 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.129026644 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.252932585 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.203443943 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.138937063 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.24554276 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.123301329 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.176037465 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.124518175 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.123288235 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.126504107 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.267014027 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.280709525 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.120475418 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.119699406 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.214625989 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.123685217 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.127233871 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.128736059 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.133056972 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.129225022 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.132723653 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.193659847 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.238379902 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.283549298 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.128628349 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.12675389 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.127160063 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.126035784 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.283118909 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.131441074 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.123556389 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.12441692 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.245859411 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.223929201 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.122648805 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.123708493 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.252372249 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.124843601 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.132166119 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.135482066 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.125550165 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.11803005 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.178005431 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.259538909 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.133084051 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.235728943 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.134475895 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.12557102 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.287413722 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.128462285 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.124013608 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.284232925 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.127861641 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.122096878 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.124641342 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.249732141 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.13725628 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.137739579 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.124484163 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.258893289 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.12399118 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.121574676 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.280388072 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.127480013 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.136864941 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.283473429 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.237061547 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.122058727 seconds)
  done (took 80.641256289 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.116350609 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.265974625 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.305023044 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.314352032 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.271142397 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.261983844 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.278089163 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.268595596 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.26632624 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.266726557 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.272224702 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.222744788 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.247210567 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.234802118 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.274026318 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.240780719 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.245294755 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.244142859 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.266546134 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.263301177 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.249426279 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.306863125 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.273039223 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.300288995 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.472125278 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.236053235 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.262987627 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.265496778 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.316052734 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.277500785 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.48733874 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.272858254 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.264760867 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.318153785 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.484934543 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.263259895 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.12672443 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.271283409 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.278711418 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.257756594 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.23171459 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.311079975 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.257838355 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.233190578 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.249884092 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.274366587 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.306607426 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.481750179 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.222733757 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.268894759 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.263148285 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.310341652 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.26920039 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.258633436 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.319131408 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.242897076 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.30168357 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.306144555 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.266072387 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.303567199 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.308769988 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.244237628 seconds)
  done (took 80.45263576 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.127737974 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.126629007 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.205743855 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.119932307 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.126556062 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.207881164 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.126423168 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.129209383 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.134373506 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.138814778 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.12538765 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.211796242 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.49086278 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.131165365 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.210670593 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.497482044 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.219520108 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.213012746 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.121745233 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.203689197 seconds)
  done (took 26.996733674 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.122542297 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.122338734 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.120249875 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.294649598 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.136187411 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.255269442 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.123994284 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.119142715 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.12006385 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.125288983 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.126182413 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.139076735 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.134511858 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.288682747 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.129664983 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.263232696 seconds)
  done (took 19.733472247 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.118209485 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.131333396 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.125112779 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.130804357 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.139403561 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.145892354 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.123749077 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.121845409 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.124562564 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.585012708 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.124133716 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.117652856 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.129271172 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.13184069 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.124824499 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.118151487 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.118191416 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.123186386 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.113469977 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.123254554 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.701743804 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.1349297 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.132577472 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.134115635 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.123625753 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.699711816 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.134143353 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.122720364 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.133502282 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.128384463 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.147638891 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.610222992 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.134346175 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.120356149 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.123094222 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.120619055 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.119507966 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.119957575 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.123984501 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.124592776 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.146925024 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.131890765 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.127456879 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.120271168 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.121279624 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.126866181 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.123072062 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.578350864 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.137592214 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.131834834 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.128663434 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.131440441 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.12473213 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.60387457 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.127130203 seconds)
  done (took 66.139998748 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.171316987 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.19298843 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.139583064 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.127414804 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.171853411 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.160662587 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.165501917 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.133261061 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.158793559 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.129837828 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.180768388 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.144202157 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.156700213 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.172897575 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.179581023 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.165093925 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.118864607 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.19401778 seconds)
  done (took 21.975895188 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.128211443 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.137534232 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.129828519 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.132226355 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.127099336 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.123888585 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.135807496 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.124452974 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.128750156 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.134187933 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.127513352 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.1281376 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.118908237 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.11789376 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.115580925 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.119276139 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.119415849 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.122326606 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.120737735 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.128717734 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.134651515 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.123299185 seconds)
  done (took 25.895407002 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.147442008 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.168915496 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 1.127812617 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 1.120332274 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 1.139668386 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.152563857 seconds)
  done (took 7.9643722 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.204283329 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.194555517 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.161665482 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.182271859 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.195913186 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.204639726 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.208215185 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.210500022 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.207998757 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.423670373 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.202630361 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.190235748 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.181308848 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.252848828 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.184894303 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.206783466 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.211662811 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.208488292 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.173103078 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.209560252 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.207737163 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.191399862 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.204265483 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.205324065 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.214495614 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.273308741 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.196084256 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.430934541 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.213891118 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.192539592 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.188336935 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.206063465 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.198092986 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.425719372 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.18515578 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.194028979 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.203012957 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.216754 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.181477991 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.245364957 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.160357063 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.185278902 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.20203759 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.230016128 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.194700468 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.208440721 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.207392161 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.203745451 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.211154166 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.431322569 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.21095735 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.256498267 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.196294516 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.187357046 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.192950048 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.412999621 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.42249514 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.246872703 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.199036348 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.43794485 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.260638693 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.182726947 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.244930932 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.417443877 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.187462425 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.248987229 seconds)
  done (took 82.479001426 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.251974671 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.162060124 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.212486627 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.428213191 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.252866445 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.207051714 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.208856804 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.217285594 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.213794234 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.199163505 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.222781984 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.207613181 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.261099581 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.245959634 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.210633745 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.194710568 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.227515848 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.253820219 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.187844483 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.415919188 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.217127978 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.246126701 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.244690135 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.246117723 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.41170138 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.19795802 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.228408566 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.212408596 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.210776803 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.212905928 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.21716563 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.220031627 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.254590974 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.178526778 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.265331998 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.219172742 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.206571381 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.223918217 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.209772476 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.220425671 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.286274108 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.248882503 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.263299981 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.246281948 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.457788544 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.249382954 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.217559795 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.171728013 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.187106751 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.159573442 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.391281295 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.393409988 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.425503277 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.237951586 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.190266101 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.197936048 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.192474213 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.211788415 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.184984082 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.176308437 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.223718096 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.182213146 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.394972048 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.1879394 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.186332567 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.228510182 seconds)
  done (took 83.044230226 seconds)
done (took 2446.152654994 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.191124122 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.15851109 seconds)
  done (took 13.436435399 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.099525224 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.09885022 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.252154185 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.098949062 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.1257801 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.166282948 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.150406143 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.128472959 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.117244379 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.207673126 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.112310816 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.239118088 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.202646792 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.099043487 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.13132731 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.109514215 seconds)
  done (took 39.448048156 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.203103853 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.646520968 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 3.07025184 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.930443372 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.135749656 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 1.930554228 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.420759406 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 5.850153779 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.409734867 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.551611116 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.36536025 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 5.005939087 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 5.907265018 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.291373389 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.608876464 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.642890511 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.727672821 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.797630045 seconds)
  done (took 60.583774843 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.094646564 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.257639861 seconds)
  done (took 8.46986967 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.127714852 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.121208269 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.130491225 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.119713801 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.131773013 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.148451174 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.107957167 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.105643921 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.139185108 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.105174401 seconds)
  done (took 62.34415729 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 6.280438144 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.581916967 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.411727062 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.554786539 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.720937953 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.578594818 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.28389275 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.471218311 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.19459347 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.087085176 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 5.381517263 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.48622614 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.940813036 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.37464129 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.7343126 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.349614222 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.840310991 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.51650821 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.438398399 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.503734713 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.393813545 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 5.237836896 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.556711837 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 1.977298193 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.11136603 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.711903112 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.371848352 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.235756419 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.186416129 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.245989184 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 5.480932599 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.118153823 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 5.413106911 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.108609783 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.310243533 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.763554819 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.832593339 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.299815523 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.590807402 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.444684663 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.525100702 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.796906933 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.169323045 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.774107797 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.262866218 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.464282067 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.158161365 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.342217285 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.185076083 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.217123091 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.769874875 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.286144827 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.232406094 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.213127764 seconds)
  done (took 154.619275435 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.087537941 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.308930941 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.259261064 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.088288766 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.506150201 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.305871819 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 4.757253572 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.629198421 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.113928208 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.308485643 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.267112423 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.228054612 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.090721709 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.090083127 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.092898263 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.089917119 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.275424022 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.643685728 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.107828135 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.089236267 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.295285278 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.330453665 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.222708208 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.092762207 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.260652086 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.338104568 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.495464424 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.231477827 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.481727227 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.088545027 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.536173864 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.108435569 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.092205045 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 5.987839351 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.475984861 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.434677393 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.513339934 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.09860725 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.874779346 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.090390192 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.781384641 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.296257151 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.417060487 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.237144502 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.249223542 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.328643693 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.691149632 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.088420119 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.862997257 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.271446577 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.318031166 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.314443186 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.37208941 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.09544881 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.559004668 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.090376127 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.088519807 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.348405072 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.24195025 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.223273214 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.090591381 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.089829682 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.089707052 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.335359198 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.091018898 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.199568732 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.091460585 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.090443407 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.2005633 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.223073767 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.24293064 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.341595348 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.339235453 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.034904104 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 3.4445601 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.327965995 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.511251123 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.33204101 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.091392062 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.088741685 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.474796746 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.532505286 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.252560587 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.332287506 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.40602469 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.382883052 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.612551074 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.088600948 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.310026704 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.253334428 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.321520732 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.247355773 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.454058696 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 1.969470439 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.088969089 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.088961283 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.30123263 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.22339975 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.092011162 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.595453444 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.360843593 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.204759874 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.266659777 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.578835741 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.202581055 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.091991505 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.64990786 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.088006955 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.312154274 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.392731279 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.098065176 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.089174655 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.245075636 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 1.871165718 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.089751205 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.204775014 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.473568542 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.09621675 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.249474329 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.09082827 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.344703144 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.02304112 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.326495856 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.091381663 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.366372411 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.278842108 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.245531303 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.093324702 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.436037958 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.362272078 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.497200464 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.329432064 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 5.955858961 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.090953353 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.403241663 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.091428658 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.088873372 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.270067436 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 4.8519904 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.268902957 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.092235936 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.354111959 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.256240769 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.467706444 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.089764636 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.343346823 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.341385421 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.460789118 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.08984504 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.229964691 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.089787383 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 1.984671821 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.260674692 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.089834228 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.090485051 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 4.96890184 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.090685228 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.240417509 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.326066265 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.776364016 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.465049235 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.42850437 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.088624862 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.537474129 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.288640144 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.402022609 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.615139584 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.264294314 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.092721529 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.08603515 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.088861185 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.336547379 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.287701381 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.092109101 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.090526862 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.809425062 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.077395467 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.097980883 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.314356607 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.535407363 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.569823273 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.333676623 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.120315209 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.489370703 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.124028665 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.329107417 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.658709152 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.518449435 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.139540776 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.09942308 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.101795716 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.212570237 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.434916067 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.468669738 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.869395297 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.368671433 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.516590659 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.435803001 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.540184195 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.67486633 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.222601986 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.39986577 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.188323366 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.512691365 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.138274316 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.431632447 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.449588844 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.195994061 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.438818859 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.452758556 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.276256026 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.488159774 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.091999493 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.092114798 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 5.910845782 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.272179168 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.551102789 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.08982339 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.552154378 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.456874756 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.218568275 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.300626557 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.344904222 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.082795986 seconds)
  done (took 726.525635179 seconds)
done (took 1066.514106486 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.087774873 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.093658952 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.096847754 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.096008707 seconds)
  done (took 25.462234294 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.087243676 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.184798885 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.278438532 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.100890628 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.487701175 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.156966531 seconds)
  done (took 11.392347502 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 5.356388345 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.093153633 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.097504612 seconds)
  done (took 18.634763438 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.369269601 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.552824474 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.262346423 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.191234176 seconds)
  done (took 6.473251977 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.100881713 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.10015945 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.100273907 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.100581323 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.099996288 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.122113062 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.121231272 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.101866559 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.100606678 seconds)
  done (took 11.040371625 seconds)
  (6/6) benchmarking "26942"...
  done (took 5.572161265 seconds)
done (took 79.66436634 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.389037539 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.386678819 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.102113675 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.417730679 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.226314943 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.416854686 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.217340914 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.118708903 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.398380836 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.499879655 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.592677733 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.200322501 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.53115897 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.528835102 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.34112543 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.126473029 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.113368423 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.161705563 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.813763046 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.275839773 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.535764287 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.253755243 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 5.754754246 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.127653116 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.038097512 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.235595182 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.377140128 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 7.101965807 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 2.138146461 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.123626073 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.184048619 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.566037416 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.328586576 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.431851046 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.240236188 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 1.994611925 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.524278259 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.247558051 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.235635515 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.498826712 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.362521077 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.19358594 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.100762216 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.26630721 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.489324183 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.117974189 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.09660588 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.258412038 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.676474745 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.26391754 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.63276929 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.102942358 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.701352533 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.182198885 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.237739892 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.098432628 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.025789532 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.571830198 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.287922491 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.469997366 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.153067314 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.117092092 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.237779495 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.254507834 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.790960232 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 1.560972291 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.60933289 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.243750237 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.554462917 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.131204334 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.11678127 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.127619866 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.803934636 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.259732548 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.115668048 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.25013514 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.376890318 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.261521413 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.101384855 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.251449781 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 1.332473909 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.170952044 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.300127724 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.477750487 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.328525539 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.53588523 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.584066835 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.561775307 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.546127889 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 7.156094624 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.667112191 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 6.942782854 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 6.209140082 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.180023742 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 7.45995476 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 6.21621436 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 3.256218952 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.616371379 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.241809933 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.723035252 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.156814461 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.147671349 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.578913204 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.393291713 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.897352646 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.136178876 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.261192691 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.099917 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.397336095 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 6.82421164 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 6.242653586 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.706841565 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.153829542 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.193396776 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.684455481 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.1713372 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.434933025 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.536931168 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.187543741 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.099494159 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.396326528 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.118068482 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.222147806 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.660614307 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.487010562 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.315385304 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.096527542 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 3.168369109 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.10537719 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.303334602 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.148023133 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.680988408 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.63658629 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.163363481 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.466552577 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.328521598 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.223849849 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.65838379 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.32867407 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.403258589 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.563577884 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.504795895 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.294605315 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.102659998 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.433096502 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 6.14900681 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.427537328 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.480044717 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.320554847 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.4794939 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.235420681 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.170780146 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.151536042 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.556749837 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.730910812 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.703548587 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.416996278 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.273983623 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.636481632 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.387385969 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 2.019830352 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.242935323 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.173650707 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.12674048 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.129860507 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.170511108 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.099859123 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.104857672 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.403517753 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.415107339 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.653410565 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 1.911419149 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 5.864178785 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.378441365 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.257408565 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 1.986404443 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.689310291 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.110022012 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.37974717 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.6151208 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.251229616 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.139973918 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.093490544 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.154396762 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.836020166 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.136585131 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.40656962 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.68164318 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.548040626 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.51745184 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.334756823 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.138486121 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.45164432 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.362735543 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.405209457 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.31468058 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.53222013 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.242442562 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.424219562 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.140928614 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.392753855 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.102720199 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 2.927217383 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.353022659 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.589732667 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.431003141 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.333135004 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.268410102 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.436657225 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.102126097 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.655906107 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 6.20344327 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.47986584 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.131121586 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.573826261 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.206493768 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.41288972 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.014165899 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.218709713 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.51276408 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.251208387 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.2306663 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.563697889 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.117715291 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.427680402 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.263658618 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.241743075 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.332899588 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.134056603 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.230025088 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.370746746 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.240664908 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.354259559 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.01678694 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.553136506 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.913192668 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 1.229791214 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.089257612 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.469782656 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.134444418 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.111603358 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.375400956 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.265173777 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.416081652 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.228066012 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.269473349 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.231231795 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.128008382 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.506073898 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 1.935141916 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.684937368 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.079668593 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.126472824 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.089875872 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.493641595 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.508079896 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.166496415 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.236398318 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.679150538 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.13768257 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.250804256 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.105169314 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.106676524 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.91532226 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.232497633 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.345693256 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.653201633 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.105048604 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 3.124970775 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.128283365 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.51800693 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.571232638 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.153772445 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.227570971 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.40551076 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.155987523 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.490125306 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.129509253 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.271324463 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.427058505 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.222786525 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.211010586 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.092403998 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.135317062 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.66881898 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.457323694 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.62530598 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.131283553 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.546522174 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 7.126480667 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 1.362556745 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.139667419 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.185021567 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.494923413 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.257193245 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.489609604 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.105495634 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.26596158 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.351642043 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.120745105 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.1271687 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.238331324 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 6.092745593 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 9.892023113 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 1.376125479 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.202811497 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.083013624 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.342360684 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.099713874 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.418722418 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.241546431 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.228683802 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.692542558 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.575819751 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.102331121 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.317661659 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.092323808 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.452736803 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.127802157 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.116727665 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.234555498 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.184367512 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.090279745 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 3.729292619 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.284400488 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.587976102 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.244726468 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 2.010665657 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 7.160801867 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 1.276520521 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.213239139 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.500737511 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 6.102642953 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.117099064 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.239683906 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.70767317 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.256037149 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.133398278 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.36634797 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.104249108 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.70467499 seconds)
  done (took 869.498577791 seconds)
done (took 870.763989381 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.347799869 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.473395139 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.336675816 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.056527882 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.898256422 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.740144917 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.353032416 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.331179238 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.174117332 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.353610828 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 1.99669631 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.901242667 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.195239977 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.214962703 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.187313871 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.2216802 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.316124213 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.336741968 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.214626479 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.192389911 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.487595363 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.19407587 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.517631602 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.393416617 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.471491328 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.20144466 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.306761832 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.613008563 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.613129352 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.284747332 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.313404239 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.320250967 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.923167557 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.345277518 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.186201747 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.179894267 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 1.967047228 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.194968242 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.346307371 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.180090799 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.471878846 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.224182081 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.8075132 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.080291767 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.875958476 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.511549991 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 1.978521232 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.200152556 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.222217476 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.304265963 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.352778162 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.347573228 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.614214497 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.311653235 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 1.958881539 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.119939626 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.69778926 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.033804037 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.87811594 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.33847238 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.641063036 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.229045233 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.305577632 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.345009382 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.253530537 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.402947134 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.513860647 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.3470837 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.321387841 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.359371328 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.343246537 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.322372039 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.213720544 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.238830336 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.228461887 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.353817832 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 1.979552689 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.340270614 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 1.889473432 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.203954777 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 1.996897158 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.027937054 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.056102895 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.176370576 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.347498654 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.876962467 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 1.920094854 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.030753432 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.221165958 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.324492201 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.04855429 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.424753061 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.640060556 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.336971026 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.394086031 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.3912555 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 1.953526934 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.354696557 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.073752871 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.36352034 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.942239219 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.398159594 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.221382355 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.260191996 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.279025282 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.416168015 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.357745645 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.52823831 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.334074336 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.277809809 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.506313179 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.246059604 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.345875854 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.280162481 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.256532397 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.93259703 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.420287693 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.998576798 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.374156256 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.777870256 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.409982399 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.217974286 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.487999965 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.409653109 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.361172199 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.196404495 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.203122647 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.048521412 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.208971365 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.198920262 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.280091332 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.557858331 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.337536077 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.073824783 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.330785459 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.887417707 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.338991314 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.330343177 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.186343669 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 1.963864413 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.199175264 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.085231132 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.431018479 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.490001083 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.354888351 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.399683118 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.227958716 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.404495386 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.415069398 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.273751058 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.375309159 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.27558078 seconds)
done (took 247.232857544 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.509507838 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 5.399904297 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.456657741 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.467831532 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.547294885 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.564549143 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.246846494 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.632194651 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.301853124 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.587282134 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.455542805 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 3.095881572 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 5.437537704 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.402260543 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.549191806 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.440284357 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.315120842 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.439201317 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.631910355 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.543882657 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.986427641 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.468739874 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.335074331 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.610239705 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.176707601 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.989649014 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.532765674 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.32614827 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.437495343 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.993788643 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 3.002177369 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.45574396 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.537017139 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 5.004498197 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 3.691611116 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.947318431 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.541721662 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 3.085175572 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.514549839 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.512255085 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.457897687 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 6.20224038 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 3.032855874 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 3.054942714 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.384130318 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.580868912 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.286704963 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 5.293674701 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.169945504 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.955874637 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.43390718 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 3.020705002 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 3.095853377 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.537981064 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.429467604 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 4.9911392 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.717866666 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.779903278 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.582174217 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.50629538 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.552414608 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.643032241 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.627296382 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.400303164 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 3.037443406 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.481130633 seconds)
  done (took 154.633106289 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.631347227 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.48132103 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.626660849 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.633166017 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.756125685 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.634176037 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.708505002 seconds)
  done (took 14.642981488 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.3147221 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.294505017 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.508832206 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.515573546 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.288475467 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.354854151 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.332861231 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 3.002737973 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.459171252 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.272290008 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.551005896 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.48768344 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.939132733 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.975821022 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.306747248 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.510746802 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.191351566 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.297045016 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.29094595 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.482753381 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 3.014171791 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.980679975 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.409912542 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.328015513 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.260107411 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.299570039 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.234454904 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.205464874 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.290925545 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.215592241 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.247367675 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.345379251 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.231731714 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.959920393 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.30855315 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.60706812 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.282530309 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.335480888 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.414542722 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.221408221 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.260801809 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.283981029 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.410560942 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.280908114 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.250246527 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.426240504 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.214963878 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.245863331 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.231977333 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.294342972 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.488327673 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.245035465 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.261497768 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.929005153 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.442269104 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.977618939 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.296763855 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.244051197 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.26667692 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.296654554 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.21940618 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.489076371 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.448640732 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.213760371 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.475536434 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.504585548 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.229608779 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.204378081 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.217867908 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.468890175 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.238030302 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.481043028 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.235442808 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.286348963 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.304504785 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.368646209 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.416045265 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.023853292 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.996220505 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.904710089 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.206190725 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.218930792 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.525010447 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.160895786 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.918726094 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.213751587 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.302847175 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.883351467 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.143552804 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.23968664 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.542674512 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.220716413 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.294379961 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.327589907 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.325915405 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.343798385 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.482767618 seconds)
  done (took 161.390520466 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.427122462 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.828345868 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.492824248 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.290877133 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.401578655 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.523563793 seconds)
  done (took 16.161531736 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.558377966 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.044414399 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.26256029 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.251112838 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.296382361 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.251825723 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.282158743 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.445837314 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.386469735 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.265529504 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.252059691 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.265630394 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.256499662 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.380425513 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.24887662 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.264798642 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.25051226 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.283222566 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.280775258 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.314864221 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.572692246 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.29137201 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.324718444 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.172779291 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.274825073 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.25882997 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.181438232 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.244077806 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.250482184 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.613852776 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.431097691 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.235878667 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.099458517 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.611873169 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.017268552 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.169449184 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.410520963 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.294389649 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.333377419 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.259083374 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.285261156 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.334695344 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.28784471 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.287141938 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.60396708 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 3.078197328 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.329766414 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.507543662 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.263598868 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.290078501 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.274119319 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.282487999 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.249117084 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.284268372 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.912048146 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.673986283 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.219545718 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.261501648 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.379657966 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.214106749 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.349196963 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.285093839 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.628316599 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.209054955 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 3.016382916 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.307777885 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.206143139 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.405124122 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.34274906 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.28693949 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.287211302 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.284871768 seconds)
  done (took 125.768715051 seconds)
done (took 473.753435443 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.287886597 seconds)
  done (took 7.509871096 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.222755663 seconds)
  done (took 7.565656998 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.210118035 seconds)
  done (took 7.43221884 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.222158329 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.246513196 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.252288634 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.232560388 seconds)
  done (took 26.189422433 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.409961977 seconds)
  done (took 7.606308216 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.198859147 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.223671664 seconds)
  done (took 13.730615574 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.423321587 seconds)
  done (took 7.668934345 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.248972269 seconds)
  done (took 7.484975348 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.215385213 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.222463439 seconds)
  done (took 13.674213934 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.227077636 seconds)
  done (took 7.460579675 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.371930063 seconds)
  done (took 9.705303735 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.238014298 seconds)
  done (took 7.505563543 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.29339506 seconds)
  done (took 7.5228184 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.405019316 seconds)
  done (took 7.635204775 seconds)
done (took 139.894212531 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.222376659 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.224448492 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.237919896 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.206826678 seconds)
  done (took 26.114354326 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.51365658 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.565269283 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.542117103 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.613700172 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.512504239 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.503785491 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.583165775 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.527333551 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.46062763 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.659464164 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.520029591 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.663929221 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.562282612 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.49330225 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.505297441 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.656932563 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.5693186 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.511638291 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.456887301 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.493560591 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.658458759 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.670758908 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.950113781 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.927749855 seconds)
  done (took 39.312585632 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.398666447 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.550566107 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.348533348 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.527226168 seconds)
  done (took 7.0022602 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.229577318 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.56565278 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.542395927 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.607987042 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.537293048 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.354172769 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.547012782 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.369294184 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.378746038 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.322841537 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.79855984 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.33593572 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.348467171 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.608853619 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.356158249 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.19699589 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.190014248 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.331596448 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.574344099 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.438759625 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.462773916 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.58598927 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.596023352 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.602832188 seconds)
  done (took 36.06464986 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.991290591 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.174697627 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.605617981 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.169192405 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.971740477 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.031995804 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.520681748 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.756342369 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.503769172 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.486358137 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.981083545 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 1.975297566 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.378845395 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.12171098 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.983529494 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.396917568 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.39112712 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.052074529 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.816001177 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.509468988 seconds)
  done (took 41.053869396 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.192487442 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 6.197764256 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.370762924 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.270325215 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.092435818 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 6.103464238 seconds)
  done (took 28.42923375 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.145456284 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.257840352 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.418406057 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.386691584 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.318384698 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.256516459 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.770761775 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.329252688 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.881370098 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.89740516 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.738721705 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.55961857 seconds)
  done (took 22.061455371 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.091256269 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.134789612 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.106022778 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.269656253 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 1.920053247 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 1.969229314 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.417658061 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.091193141 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.169732266 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.296859713 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 1.964788884 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.26677743 seconds)
  done (took 39.80950367 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.38209956 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.299085943 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.446875665 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.913713761 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.64163315 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.190968832 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.512447088 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.608529704 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.861840733 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.213246512 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.638562523 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.15653218 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.624732376 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.063637909 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.092184888 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.388235231 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.922332857 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.588976633 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.536320159 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.176229454 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.05353568 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.247979126 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.090189544 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.634978112 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.424880256 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.091154117 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.346028166 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.340793431 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.090958415 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.382435945 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.091995442 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.573610765 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.378646045 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.402098872 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.623340631 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.190071957 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.210842112 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.228236537 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.662036624 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.389436456 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.238275559 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.256845973 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.091221435 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.206867282 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.35076793 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.880662048 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.108982253 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.743619373 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.075536518 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.18444137 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.990025833 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.695638818 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.546124155 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.787797192 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.236426917 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.389294958 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.26133028 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.248525426 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.397923313 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.127415155 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.284631128 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.207000134 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.381652434 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.062437658 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.315857373 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.445327214 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.424828791 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.427933995 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.416984435 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.395984531 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.448768819 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.198127846 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.921571028 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.231474068 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.637522123 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.004106929 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.446631666 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.094042041 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.82738142 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.626392474 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.072788414 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.219755795 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.998460863 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.055022336 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.091342275 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.266940109 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.8070486 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.064709209 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.187191191 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.135703219 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.544403659 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.23073249 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.248347436 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.361475645 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.799204496 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.106869462 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.849434909 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.392397502 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.065092939 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.658990139 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.09131402 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.073561732 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.092448435 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.664140968 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.503044352 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.14793449 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.870839723 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.726008 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.391880154 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.732407999 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.252483583 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.092095917 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.432630205 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.423962707 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.092786554 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.967755769 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.227194886 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.169193579 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.457543949 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.091564668 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.061833731 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.53221304 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.379752348 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.09238502 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.325702403 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.094384289 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.242182785 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.091506716 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.766465701 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.363896449 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.338399272 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.620973594 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.422850431 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.192853892 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.062534466 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.238540826 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.598774936 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.188101491 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.446628834 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.533425432 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.699810585 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.567519685 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.085821447 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.96546964 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.568643051 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.366800978 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.433160849 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.709621418 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.288956765 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.186514707 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.09175617 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.275783947 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.115455054 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.681950562 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.137107342 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.039806103 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.109561472 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.520556889 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.212827407 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.204672103 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.434378491 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.551590031 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.886747287 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.173744913 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.295366611 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.411592094 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.331233541 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.121758712 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.093050741 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.504006551 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.430410971 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.657827401 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.379816377 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.801996266 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.479779997 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.626737143 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.392798745 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.494686906 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.949513043 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.378488299 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.462990947 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.786171434 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.164343011 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.118630167 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.163315091 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.548071 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.347881114 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.889126623 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.421438489 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.132967014 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.158484197 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.704985194 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.0849351 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.275329858 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.594889908 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.146508089 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.683575874 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.285784012 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.341757599 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.432211594 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.146934259 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.455672784 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.943913642 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.529275752 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.503424254 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.423602035 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.086989654 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.116479169 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.653584996 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.662229314 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.244914176 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.342020663 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.108516958 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.173352396 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.118710345 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.494454475 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.096017926 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.861236885 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.478901248 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.931350452 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 3.864153497 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.2873356 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.670370255 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.159722659 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.342928246 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.253342301 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.167162795 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.289959569 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.67678491 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.382445228 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.445326275 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.117534044 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.127783396 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.400875868 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.423764371 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.407787464 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.628223141 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.73126692 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.80076173 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.243831228 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.734040741 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.275417357 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.166661749 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.805162444 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.449734459 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.084790086 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.387748819 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.939592396 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.247688341 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.278581538 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.418791678 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.14953129 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.61144384 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.751182409 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.129756554 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.155065119 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.276548187 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.145943502 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.368639596 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.042458976 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.377919239 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.287218844 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.465735108 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.445684287 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.41948225 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.549114465 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.675053953 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.49407626 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.113279903 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.295520027 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.177531608 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.443665998 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.145110321 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.458118889 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.867532767 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.818938055 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 1.958906202 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.702770879 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.372938885 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.328116391 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.638547529 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.421259119 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.503634927 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.113108418 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.83007618 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.136091783 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.288685642 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.116566405 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.233930403 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.472370968 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.530673291 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.624706458 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.21143882 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.684565166 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.528890627 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.201821004 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.336434241 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.416373568 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.147942402 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.434971873 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.151184651 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.548878908 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.542406679 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.148029876 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.849605397 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.340485495 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.482734127 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.300414572 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.807856219 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.154447435 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.264554315 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.568964056 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.31845733 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.271352143 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.483525402 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.953959064 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.156982076 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.18576761 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.32497476 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.767950514 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.622237383 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.732371814 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.739666062 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.553756209 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.929450606 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.152195442 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.406903821 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.312441322 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.168626696 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.353055166 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.56462348 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.195637724 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.447146276 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.485073458 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.379138162 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.689578196 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.134580779 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.755712045 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.412172814 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.664419639 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.684554888 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.929221109 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.626750724 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.536206865 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.680525228 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.124333088 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.311002763 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.64767346 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.925066157 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.21852119 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.993635732 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.945639681 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.290590889 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.580921578 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.244023897 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.917415655 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.308865192 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.392217624 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.402101933 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.285235322 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.112071751 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.806385813 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.932639395 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.426746749 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.326139815 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.433864861 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.275252147 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.667756653 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.693613558 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.469582896 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.931754306 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.646899464 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.398401762 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.113879102 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.153184225 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.848224456 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.326202766 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.231707004 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.448900743 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.597231703 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.203967598 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.144598031 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.489584681 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.380814837 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 2.896308063 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.816027025 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.440284979 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.638332686 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.706240559 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.851151345 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.870356855 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.348052804 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.453164103 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.508130683 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.007473797 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.527555964 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.389321204 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.24356502 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.066047257 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.369929382 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.113240049 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.199726284 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.132217733 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.446229833 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.134667906 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.932599411 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.733144077 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.435805831 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.141541754 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.14692538 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.321108277 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.2921193 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.091888372 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.746071301 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.529696641 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.25552528 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.078622209 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.856854675 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.064548488 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.346769554 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.420536321 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.294706119 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.929552774 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.168093843 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.767221212 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.636947932 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.482729607 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.302295506 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.061749876 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.872977908 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.116157444 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.782746647 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 1.923629607 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.343874946 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.608309154 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.37214146 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.100969788 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.423815533 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.229843163 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.422115272 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.573335163 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.576251758 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.518914381 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.47008485 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.394882958 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.833314955 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.245651848 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.33690189 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.065108099 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.094045193 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.164974223 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.466854863 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.470343069 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.092264189 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.63029202 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.342693424 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.196819053 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.28068819 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.202967198 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.712892359 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.305287569 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.208596123 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.264980587 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.332921075 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.452944341 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.093492184 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.440068649 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.093083584 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.095261366 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.349363366 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.345469484 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.474882228 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.407442945 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 1.695076084 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.246787956 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.590723427 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.075787222 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.625572761 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.095995633 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 4.181315651 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.458266375 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.092868132 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.573355727 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.760709088 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.368588523 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.791624995 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.226689023 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.436954211 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.307065586 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.611823437 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.097037598 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.747469447 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.503527666 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.09331713 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.578757278 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.176628328 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.259303735 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.874579412 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.59117168 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.09263142 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.886097728 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.277896973 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.649938951 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.369833835 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.262370248 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.106681871 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.89280476 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.07182377 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.0939363 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.208471049 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.629717878 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.098783185 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.678520377 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.230265433 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.266594571 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.09872218 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.236437047 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.09892786 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.346142601 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.285991278 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.339526478 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.369309154 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.369119887 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.098440682 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.750637945 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.789129843 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.533118336 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.309103917 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.418927201 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.486370088 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.178672742 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.43133083 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.672892932 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.303721331 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.28563039 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.535360371 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.353473188 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.128277239 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.382410045 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.093233379 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.417410559 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.253786719 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.656053297 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.353892071 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.354611988 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.43338553 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.125831316 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.650303353 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.576795608 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.982811364 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.093287115 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.405076902 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.092161225 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.884832412 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.735637607 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.293042667 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.216633465 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.071459539 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.695122621 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.397665885 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.231889019 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.096193914 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.30846016 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.602274009 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.068972248 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.902545143 seconds)
    (567/608) benchmarking "2d"...
    done (took 1.988330011 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.392726213 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.444061036 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.080513528 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.37004826 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.109598755 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.073451683 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.590960842 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.09384359 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.405279958 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.0645015 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.639761924 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.073868809 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.172247888 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.260625115 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.460762436 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.093777336 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.076942611 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.269982408 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.093093548 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.092367442 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.453873215 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.190427931 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.349496947 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.572399586 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.314487281 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.441382666 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.977835263 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.892219966 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.112107343 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.403871294 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.092998521 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.653948158 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.172383323 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.621704236 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.176280792 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.113781908 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.653702444 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.342983471 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.833789411 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.241551197 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.59598314 seconds)
  done (took 1956.666776347 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.133225234 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.217834512 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.160491168 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.172159061 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.163368671 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.173567696 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.166662135 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.204447481 seconds)
  done (took 50.484263877 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.09247995 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.054732313 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.566079657 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.28401866 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.130062574 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.338992272 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.271457845 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.624945986 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.31112477 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.181894065 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.187445947 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.365849025 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.234371242 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.259434363 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 6.112096224 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.208537995 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.126275756 seconds)
  done (took 91.45942018 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.159499988 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.466997241 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.153609613 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.110375234 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.211159464 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.598737435 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.139302164 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.125604504 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.524900769 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.807466258 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.123856629 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.266243689 seconds)
  done (took 81.849856134 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.152447222 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.160484151 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.155160486 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.152875959 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.156941105 seconds)
  done (took 6.89566569 seconds)
done (took 2428.456434322 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.34102369 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.66917376 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.707992411 seconds)
  done (took 4.485200671 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.170153746 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.244746035 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.329016838 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.266915271 seconds)
  done (took 6.133552906 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.423400352 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.595673939 seconds)
  done (took 4.149286836 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.574204222 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.117196512 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.661378399 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.10543375 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.115538968 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.123459685 seconds)
  done (took 19.464764764 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.164737025 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.16378706 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.160605677 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.144748546 seconds)
  done (took 5.756932543 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.118270778 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.176763804 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.108492086 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.066822773 seconds)
  done (took 18.613610432 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.476885475 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.365322575 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.902642521 seconds)
  done (took 5.851918939 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.962231323 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.531776203 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.951691362 seconds)
  done (took 6.59292221 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.139386347 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.091233702 seconds)
  done (took 5.378311202 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.328040906 seconds)
  done (took 2.475866326 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.616928185 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.62030903 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.989980983 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.010409419 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.155481238 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.451751739 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.454307369 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.432230315 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.839059307 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.689834324 seconds)
  done (took 18.39909098 seconds)
done (took 109.106606849 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 2.995551515 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.528768355 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.295331411 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.787258046 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.218869496 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.271506534 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.719758961 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.577994798 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.409744271 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.414073336 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.316080168 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.211580395 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.14864348 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.527253388 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.148047141 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.458983692 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.303800633 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.04685698 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 3.366483648 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 3.679419681 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.760141583 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.726204837 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.073604951 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.703024458 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.304280895 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.196736177 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.0044131 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.491987891 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 3.658881213 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.017913216 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.135877419 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 3.980093803 seconds)
  done (took 151.576058988 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.132804022 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.130692681 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.127813232 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.144241323 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.110613624 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.108882634 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.163954797 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.147546993 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 4.847142968 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 4.831267626 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.153185647 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.126128893 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.157830771 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.155951062 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.155836719 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.150662101 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 4.944541262 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.156438919 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.108647968 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.108252367 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.107906938 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 4.95005663 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.108250141 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 4.955884747 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 4.902282494 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.10890927 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.104114224 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.108229704 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.108941613 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.108928878 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.109138426 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.103150758 seconds)
  done (took 187.887369527 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.092742534 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.107195539 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.107857023 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.104287294 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.108107693 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.109450362 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.107589409 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.10388664 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.107541432 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.104547049 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.108103126 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.108058824 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.108670676 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.104350364 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.108454979 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.104409045 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.106994306 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.107708751 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.107155135 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.107546249 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.109575938 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.104039825 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.107280023 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.107505735 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.109054993 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.107971028 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.104685299 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.107001506 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.106738725 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.107674522 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.109184639 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.104161296 seconds)
  done (took 196.519928813 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.40268812 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.13586676 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.014648199 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 1.667722574 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.013370347 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.126710087 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 1.666353332 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.405036076 seconds)
  done (took 13.539872289 seconds)
done (took 550.674371996 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.784732609 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.033864402 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.281571784 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.325391965 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.698457541 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.408298498 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.32325889 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.572391513 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.844218172 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.576856091 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.607945623 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.329446598 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 1.941347691 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.331157537 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.298039107 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.555978238 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.511335564 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.807950609 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.313386211 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 1.984595365 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.323044107 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 1.963093512 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.594088741 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.895757943 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.611399184 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.010162401 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.211857766 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.513082701 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.320696395 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.320082664 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.094310232 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.497372184 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.355135144 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.349685675 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.575408632 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.588836572 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.442503889 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.52748698 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.280978752 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.767369489 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 1.977552421 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.708275833 seconds)
  done (took 74.552608415 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.126323043 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.14289647 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.296438343 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.197324078 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.792750814 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.203013632 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.375144621 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.338773687 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.232599902 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.350094636 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.388722287 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.818497869 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.376029941 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.752864171 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.362745568 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.394780958 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.203982031 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.727235978 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.365828467 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.335205015 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.169067932 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.293866716 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.172579722 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.322845609 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.163099771 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.179903927 seconds)
  done (took 36.205888414 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.177429825 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.30976863 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.399820141 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.679727794 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.360453943 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.218365173 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.464093052 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.252909406 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 3.060437792 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.453461374 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.236246218 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.246604209 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.300920716 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.428376973 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.697011526 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.295506616 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.292857462 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.298624304 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.318672423 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.370259122 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.29927892 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.213576118 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.467879075 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.270648135 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.812391286 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.495226926 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.511445679 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.700670542 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.643490127 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.296655072 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.262596511 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.449230376 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.528654262 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.404653054 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.273238494 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.157058896 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.179013162 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.23710412 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.05642349 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.300092076 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.460907888 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.322842142 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.546447508 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.703821271 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.210898418 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.387710764 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.558910737 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.24638266 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.258217522 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.943670981 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.450753164 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 4.106760463 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.294371734 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.337231971 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.265583295 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.58285006 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.335332852 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.411049353 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.37618052 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.818458551 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.211625197 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.520267028 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.322946139 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.215455326 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.469860747 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.350122819 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.33052315 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.549006654 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.544878136 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.639610478 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.721229085 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.215657982 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.178133773 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.233217164 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.315067405 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.592338777 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.619499806 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.412823649 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.545140135 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.452771274 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.82573021 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.561258175 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.158751654 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.840390766 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.199289044 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.142663301 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.216927172 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.444753506 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.446903622 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.637433335 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.708137993 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.43098465 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.532429886 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.61516417 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.555955261 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.548774003 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.132389328 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.17823553 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.387057514 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.712799452 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.218016229 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.368636903 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.828856953 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.527068417 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.470073601 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.456406647 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.558120342 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.218418472 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.559907184 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.161342513 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.355362527 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.424308745 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.472882793 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.801059277 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.125061859 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.676744551 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.260506584 seconds)
  done (took 229.335658338 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.09403551 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.109855976 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.09542023 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.110040403 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.094564337 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.740084897 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.19451973 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.095625164 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.720834459 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.17653767 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.094051781 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.096681404 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.095133168 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.093610714 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.70733417 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.676014624 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 2.74795219 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.09432255 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.093908967 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.105727779 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 2.806098305 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.096720458 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.125195426 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.134498181 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.120632242 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.126089314 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.139920039 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.150660014 seconds)
  done (took 152.036502286 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.152268576 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.549651265 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.19777856 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.251785593 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.203471886 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.176935016 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.694559543 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.304621335 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.230604099 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.174145218 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.217297808 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.469404502 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.477862728 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.827374027 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.32382089 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.342755893 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.859043087 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.339075727 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.188438267 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.164574502 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.319213534 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.51906241 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.487360466 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.465444719 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.356439136 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.432253458 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.365474113 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.361615187 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.489628475 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.894547447 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.379058256 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.785285446 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.503867393 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.367535895 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.900205075 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.70793676 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.96493366 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.94657391 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.54587297 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.328663305 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.331043096 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.614470794 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.667147788 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.410973917 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.385340528 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.106836669 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.382192393 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.787740719 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.402440895 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.328658385 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.463817143 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.48042169 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.650769714 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.386086233 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.535701082 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.506554819 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.898085147 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.342678981 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.422006983 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.664001958 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.331850239 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.890340284 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 3.313047814 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.452755662 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.389485842 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.22090259 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.457769029 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.914880546 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.003589452 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.429774944 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.706959386 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.53850713 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.334848153 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.641719388 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.559676727 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.828202735 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.963639154 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.505739687 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.470296136 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.443408636 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.650005016 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.353347178 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.915815029 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.46782462 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.332202332 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.891460305 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.746395832 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.334214866 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.358824279 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.486485843 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.525853994 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.574487738 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.632370583 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.43450887 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.275919315 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.616875231 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.70175635 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.374040052 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.489759131 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.348064882 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.794399731 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.540269349 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.350169051 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.680753582 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.758377262 seconds)
  done (took 173.167490372 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.049344129 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.412977784 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.603714788 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.87478571 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.703915918 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 2.832409569 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.577954975 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.42864501 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.613444282 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.59496181 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.577426037 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.450547271 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.314405199 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.108803438 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.407800636 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.523074136 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.423493468 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.990257425 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.678868209 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.383352821 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.708353848 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.09067447 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.660079833 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.760159938 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.74254774 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.853563898 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.013428244 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.452469122 seconds)
  done (took 54.133723948 seconds)
done (took 720.525118207 seconds)
SAVING RESULT...
DONE!
